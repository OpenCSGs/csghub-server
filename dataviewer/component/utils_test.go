// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire

package component

import (
	"context"

	"github.com/stretchr/testify/mock"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/accounting"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/deploy"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/git/gitserver"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/git/mirrorserver"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/parquet"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/rpc"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/rsa"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/store/s3"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/component"
	"opencsg.com/csghub-server/common/tests"
)

func initializeTestDatasetViewerComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testDatasetViewerWithMocks {
	mockStores := tests.NewMockStores(t)
	config := ProvideTestConfig()
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	mockReader := parquet.NewMockReader(t)
	mockLimitOffsetReader := parquet.NewMockLimitOffsetCountReader(t)
	componentDatasetViewerComponentImpl := NewTestDatasetViewerComponent(mockStores, config, mockRepoComponent, mockGitServer, mockReader, mockLimitOffsetReader)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockKeysReader := rsa.NewMockKeysReader(t)
	mocks := &Mocks{
		stores:            mockStores,
		components:        componentMockedComponents,
		gitServer:         mockGitServer,
		userSvcClient:     mockUserSvcClient,
		s3Client:          mockClient,
		mirrorServer:      mockMirrorServer,
		deployer:          mockDeployer,
		accountingClient:  mockAccountingClient,
		preader:           mockReader,
		limitOffsetReader: mockLimitOffsetReader,
		moderationClient:  mockModerationSvcClient,
		rsaReader:         mockKeysReader,
	}
	componentTestDatasetViewerWithMocks := &testDatasetViewerWithMocks{
		datasetViewerComponentImpl: componentDatasetViewerComponentImpl,
		mocks:                      mocks,
	}
	return componentTestDatasetViewerWithMocks
}

type testDatasetViewerWithMocks struct {
	*datasetViewerComponentImpl
	mocks *Mocks
}

definitions:
  database.AccessToken:
    properties:
      created_at:
        type: string
      git_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      token:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/database.User'
      user_id:
        type: integer
    type: object
  database.Dataset:
    properties:
      created_at:
        type: string
      description:
        type: string
      downloads:
        type: integer
      git_path:
        type: string
      id:
        type: integer
      last:
        type: string
      likes:
        type: integer
      name:
        type: string
      path:
        type: string
      private:
        type: boolean
      repository:
        $ref: '#/definitions/database.Repository'
      repository_id:
        type: integer
      updated_at:
        type: string
      url_slug:
        type: string
      user:
        $ref: '#/definitions/database.User'
      user_id:
        type: integer
    type: object
  database.Model:
    properties:
      created_at:
        type: string
      description:
        type: string
      downloads:
        type: integer
      git_path:
        type: string
      id:
        type: integer
      last_updated_at:
        type: string
      likes:
        type: integer
      name:
        type: string
      path:
        type: string
      private:
        type: boolean
      repository:
        $ref: '#/definitions/database.Repository'
      repository_id:
        type: integer
      updated_at:
        type: string
      url_slug:
        type: string
      user:
        $ref: '#/definitions/database.User'
      user_id:
        type: integer
    type: object
  database.Namespace:
    properties:
      created_at:
        type: string
      id:
        type: integer
      namespace_type:
        $ref: '#/definitions/database.NamespaceType'
      path:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/database.User'
      user_id:
        type: integer
    type: object
  database.NamespaceType:
    enum:
    - user
    - organization
    type: string
    x-enum-varnames:
    - UserNamespace
    - OrgNamespace
  database.Organization:
    properties:
      created_at:
        type: string
      description:
        type: string
      git_path:
        type: string
      id:
        type: integer
      name:
        type: string
      namespace:
        $ref: '#/definitions/database.Namespace'
      namespace_id:
        type: integer
      path:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/database.User'
      user_id:
        type: integer
    type: object
  database.Repository:
    properties:
      created_at:
        type: string
      default_branch:
        type: string
      description:
        type: string
      downloads:
        items:
          $ref: '#/definitions/database.RepositoryDownload'
        type: array
      git_path:
        type: string
      http_clone_url:
        type: string
      id:
        type: integer
      labels:
        type: string
      license:
        type: string
      name:
        type: string
      path:
        type: string
      private:
        type: boolean
      readme:
        type: string
      repository_type:
        $ref: '#/definitions/database.RepositoryType'
      ssh_clone_url:
        type: string
      tags:
        items:
          $ref: '#/definitions/database.Tag'
        type: array
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  database.RepositoryDownload:
    properties:
      created_at:
        type: string
      date:
        type: string
      id:
        type: integer
      repository:
        $ref: '#/definitions/database.Repository'
      repository_id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  database.RepositoryType:
    enum:
    - model
    - dataset
    type: string
    x-enum-varnames:
    - ModelRepo
    - DatasetRepo
  database.SSHKey:
    properties:
      content:
        type: string
      created_at:
        type: string
      git_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/database.User'
      user_id:
        type: integer
    type: object
  database.Tag:
    properties:
      built_in:
        type: boolean
      category:
        type: string
      created_at:
        type: string
      group:
        type: string
      id:
        type: integer
      name:
        type: string
      scope:
        $ref: '#/definitions/database.TagScope'
      show_name:
        type: string
      updated_at:
        type: string
    type: object
  database.TagScope:
    enum:
    - model
    - dataset
    type: string
    x-enum-varnames:
    - ModelTagScope
    - DatasetTagScope
  database.User:
    properties:
      accessTokens:
        items:
          $ref: '#/definitions/database.AccessToken'
        type: array
      created_at:
        type: string
      email:
        type: string
      git_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      namespace:
        items:
          $ref: '#/definitions/database.Namespace'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
  types.APIBadRequest:
    type: object
  types.APIInternalServerError:
    type: object
  types.CreateModelReq:
    properties:
      default_branch:
        type: string
      description:
        type: string
      labels:
        type: string
      license:
        type: string
      name:
        type: string
      namespace:
        type: string
      path:
        type: string
      private:
        type: boolean
      readme:
        type: string
      username:
        type: string
    type: object
  types.CreateOrgReq:
    properties:
      description:
        type: string
      full_name:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  types.CreateSSHKeyRequest:
    properties:
      content:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  types.CreateUserRequest:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  types.EditOrgReq:
    properties:
      description:
        type: string
      full_name:
        type: string
      path:
        type: string
    type: object
  types.ModelDetail:
    properties:
      default_branch:
        type: string
      downloads:
        type: integer
      http_clone_url:
        type: string
      introduction:
        type: string
      last_updated_at:
        type: string
      license:
        type: string
      name:
        type: string
      path:
        type: string
      private:
        type: boolean
      size:
        type: integer
      ssh_clone_url:
        type: string
    type: object
  types.Response:
    properties:
      data: {}
      message:
        type: string
    type: object
  types.ResponseWithTotal:
    properties:
      data: {}
      message:
        type: string
      total:
        type: integer
    type: object
  types.UpdateModelReq:
    properties:
      default_branch:
        type: string
      description:
        type: string
      labels:
        type: string
      license:
        type: string
      name:
        type: string
      namespace:
        type: string
      origin_name:
        type: string
      private:
        type: boolean
      readme:
        type: string
      username:
        type: string
    type: object
  types.UpdateUserRequest:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /models:
    get:
      consumes:
      - application/json
      description: get visiable models for current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.ResponseWithTotal'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/database.Model'
                  type: array
                total:
                  type: integer
              type: object
      security:
      - ApiKey: []
      summary: Get Visiable models for current user
      tags:
      - Model
    post:
      consumes:
      - application/json
      description: create a new model
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.CreateModelReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/database.Model'
              type: object
      security:
      - ApiKey: []
      summary: Create a new model
      tags:
      - Model
  /models/{namespace}/{name}:
    delete:
      consumes:
      - application/json
      description: delete a exists model
      parameters:
      - description: namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
      security:
      - ApiKey: []
      summary: Delete a exists model
      tags:
      - Model
    get:
      consumes:
      - application/json
      description: get model detail
      parameters:
      - description: namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/database.Model'
              type: object
      security:
      - ApiKey: []
      summary: Create model detail
      tags:
      - Model
    put:
      consumes:
      - application/json
      description: update a exists model
      parameters:
      - description: namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: name
        in: path
        name: name
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.UpdateModelReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/database.Model'
              type: object
      security:
      - ApiKey: []
      summary: Update a exists model
      tags:
      - Model
  /models/{namespace}/{name}/detail:
    get:
      consumes:
      - application/json
      description: get model detail
      parameters:
      - description: namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/types.ModelDetail'
              type: object
      security:
      - ApiKey: []
      summary: Get model detail
      tags:
      - Model
  /organization/{namespace}/datasets:
    get:
      consumes:
      - application/json
      description: get organization datasets
      parameters:
      - description: namespace
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.ResponseWithTotal'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/database.Dataset'
                  type: array
                total:
                  type: integer
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/types.APIBadRequest'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.APIInternalServerError'
      security:
      - ApiKey: []
      summary: Get organization datasets
      tags:
      - Organization
  /organization/{namespace}/models:
    get:
      consumes:
      - application/json
      description: get organization models
      parameters:
      - description: namespace
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.ResponseWithTotal'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/database.Model'
                  type: array
                total:
                  type: integer
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/types.APIBadRequest'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.APIInternalServerError'
      security:
      - ApiKey: []
      summary: Get organization models
      tags:
      - Organization
  /organizations:
    get:
      consumes:
      - application/json
      description: get organizations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.ResponseWithTotal'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/database.Organization'
                  type: array
                total:
                  type: integer
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.APIInternalServerError'
      security:
      - ApiKey: []
      summary: Get organizations
      tags:
      - Organization
    post:
      consumes:
      - application/json
      description: create a new organization
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.CreateOrgReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/database.Organization'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/types.APIBadRequest'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.APIInternalServerError'
      security:
      - ApiKey: []
      summary: Create a new organization
      tags:
      - Organization
  /organizations/{name}:
    delete:
      consumes:
      - application/json
      description: delete organization
      parameters:
      - description: name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.APIInternalServerError'
      security:
      - ApiKey: []
      summary: Delete organization
      tags:
      - Organization
    put:
      consumes:
      - application/json
      description: update organization
      parameters:
      - description: name
        in: path
        name: name
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.EditOrgReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/database.Organization'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/types.APIBadRequest'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.APIInternalServerError'
      security:
      - ApiKey: []
      summary: Update organization
      tags:
      - Organization
  /tags:
    get:
      consumes:
      - application/json
      description: get all tags
      produces:
      - application/json
      responses:
        "200":
          description: tags
          schema:
            allOf:
            - $ref: '#/definitions/types.ResponseWithTotal'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/database.Tag'
                  type: array
                total:
                  type: integer
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.APIInternalServerError'
      security:
      - ApiKey: []
      summary: Get all tags
      tags:
      - Tag
  /user/{username}/datasets:
    get:
      consumes:
      - application/json
      description: get user datasets
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.ResponseWithTotal'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/database.Dataset'
                  type: array
                total:
                  type: integer
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/types.APIBadRequest'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.APIInternalServerError'
      security:
      - ApiKey: []
      summary: Get user datasets
      tags:
      - User
  /user/{username}/models:
    get:
      consumes:
      - application/json
      description: get user models
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.ResponseWithTotal'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/database.Model'
                  type: array
                total:
                  type: integer
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/types.APIBadRequest'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.APIInternalServerError'
      security:
      - ApiKey: []
      summary: Get user models
      tags:
      - User
  /user/{username}/ssh_key/{name}:
    delete:
      consumes:
      - application/json
      description: delete specific SSH key for the given user
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      - description: key name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/types.APIBadRequest'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.APIInternalServerError'
      security:
      - ApiKey: []
      summary: Delete specific SSH key for the given user
      tags:
      - SSH Key
  /user/{username}/ssh_keys:
    get:
      consumes:
      - application/json
      description: get all SSH keys for the given user
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.ResponseWithTotal'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/database.SSHKey'
                  type: array
                total:
                  type: integer
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/types.APIBadRequest'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.APIInternalServerError'
      security:
      - ApiKey: []
      summary: Get all SSH keys for the given user
      tags:
      - SSH Key
    post:
      consumes:
      - application/json
      description: create a new SSH key for the given user
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.CreateSSHKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/database.SSHKey'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/types.APIBadRequest'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.APIInternalServerError'
      security:
      - ApiKey: []
      summary: Create a new SSH key for the given user
      tags:
      - SSH Key
  /users:
    post:
      consumes:
      - application/json
      description: create a new user
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/database.User'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/types.APIBadRequest'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.APIInternalServerError'
      security:
      - ApiKey: []
      summary: Create a new user
      tags:
      - User
  /users/{username}:
    put:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/types.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/types.Response'
            - properties:
                data:
                  $ref: '#/definitions/database.User'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/types.APIBadRequest'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.APIInternalServerError'
      security:
      - ApiKey: []
      summary: Update user
      tags:
      - User
securityDefinitions:
  ApiKey:
    description: Bearer token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

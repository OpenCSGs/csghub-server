// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"git-devops.opencsg.com/product/community/starhub-server/cmd/starhub-server/cmd/common"
	"git-devops.opencsg.com/product/community/starhub-server/pkg/api/controller/accesstoken"
	"git-devops.opencsg.com/product/community/starhub-server/pkg/api/controller/dataset"
	model2 "git-devops.opencsg.com/product/community/starhub-server/pkg/api/controller/model"
	"git-devops.opencsg.com/product/community/starhub-server/pkg/api/controller/sshkey"
	"git-devops.opencsg.com/product/community/starhub-server/pkg/api/controller/user"
	"git-devops.opencsg.com/product/community/starhub-server/pkg/apiserver"
	"git-devops.opencsg.com/product/community/starhub-server/pkg/gitserver"
	"git-devops.opencsg.com/product/community/starhub-server/pkg/httpbase"
	"git-devops.opencsg.com/product/community/starhub-server/pkg/model"
	"git-devops.opencsg.com/product/community/starhub-server/pkg/router"
	"git-devops.opencsg.com/product/community/starhub-server/pkg/store/cache"
	"git-devops.opencsg.com/product/community/starhub-server/pkg/store/database"
)

// Injectors from wire.go:

func initAPIServer(ctx context.Context) (*httpbase.GracefulServer, error) {
	config, err := common.ProvideConfig()
	if err != nil {
		return nil, err
	}
	logger := apiserver.ProvideServerLogger()
	dbConfig := model.ProvideDBConfig(config)
	db, err := model.ProvideDatabse(ctx, dbConfig)
	if err != nil {
		return nil, err
	}
	modelStore := database.ProvideModelStore(db)
	redisConfig := cache.ProvideRedisConfig(config)
	cacheCache, err := cache.ProvideCache(ctx, redisConfig)
	if err != nil {
		return nil, err
	}
	modelCache := cache.ProvideModelCache(cacheCache)
	userStore := database.ProvideUserStore(db)
	userCache := cache.ProvideUserCache(cacheCache)
	gitServer, err := gitserver.ProvideGitServer(config)
	if err != nil {
		return nil, err
	}
	controller := model2.ProvideController(modelStore, modelCache, userStore, userCache, gitServer)
	datasetStore := database.ProvideDatasetStore(db)
	datasetCache := cache.ProvideDatasetCache(cacheCache)
	datasetController := dataset.ProvideController(datasetStore, datasetCache, userStore, userCache, gitServer)
	userController := user.ProvideController(userStore, userCache, modelStore, modelCache, datasetStore, datasetCache, gitServer)
	accessTokenStore := database.ProvideAccessTokenStore(db)
	accessTokenCache := cache.ProvideAccessTokenCache(cacheCache)
	accesstokenController := accesstoken.ProvideController(userStore, userCache, accessTokenStore, accessTokenCache, gitServer)
	sshKeyStore := database.ProvideSSHKeyStore(db)
	sshKeyCache := cache.ProvideSSHKeyCache(cacheCache)
	sshkeyController := sshkey.ProvideController(sshKeyStore, sshKeyCache, userStore, gitServer)
	apiHandler := router.ProvideAPIHandler(config, controller, datasetController, userController, accesstokenController, sshkeyController)
	gitHandler := router.ProvideGitHandler(config, controller, datasetController)
	routerRouter := router.ProvideRouter(apiHandler, gitHandler)
	gracefulServer := apiserver.ProvideGracefulServer(config, logger, routerRouter)
	return gracefulServer, nil
}

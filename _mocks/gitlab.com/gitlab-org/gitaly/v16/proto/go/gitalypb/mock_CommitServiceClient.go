// Code generated by mockery v2.49.1. DO NOT EDIT.

package gitalypb

import (
	context "context"

	gitalypb "gitlab.com/gitlab-org/gitaly/v16/proto/go/gitalypb"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockCommitServiceClient is an autogenerated mock type for the CommitServiceClient type
type MockCommitServiceClient struct {
	mock.Mock
}

type MockCommitServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommitServiceClient) EXPECT() *MockCommitServiceClient_Expecter {
	return &MockCommitServiceClient_Expecter{mock: &_m.Mock}
}

// CheckObjectsExist provides a mock function with given fields: ctx, opts
func (_m *MockCommitServiceClient) CheckObjectsExist(ctx context.Context, opts ...grpc.CallOption) (gitalypb.CommitService_CheckObjectsExistClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckObjectsExist")
	}

	var r0 gitalypb.CommitService_CheckObjectsExistClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (gitalypb.CommitService_CheckObjectsExistClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) gitalypb.CommitService_CheckObjectsExistClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.CommitService_CheckObjectsExistClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_CheckObjectsExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckObjectsExist'
type MockCommitServiceClient_CheckObjectsExist_Call struct {
	*mock.Call
}

// CheckObjectsExist is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) CheckObjectsExist(ctx interface{}, opts ...interface{}) *MockCommitServiceClient_CheckObjectsExist_Call {
	return &MockCommitServiceClient_CheckObjectsExist_Call{Call: _e.mock.On("CheckObjectsExist",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockCommitServiceClient_CheckObjectsExist_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockCommitServiceClient_CheckObjectsExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_CheckObjectsExist_Call) Return(_a0 gitalypb.CommitService_CheckObjectsExistClient, _a1 error) *MockCommitServiceClient_CheckObjectsExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_CheckObjectsExist_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (gitalypb.CommitService_CheckObjectsExistClient, error)) *MockCommitServiceClient_CheckObjectsExist_Call {
	_c.Call.Return(run)
	return _c
}

// CommitIsAncestor provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) CommitIsAncestor(ctx context.Context, in *gitalypb.CommitIsAncestorRequest, opts ...grpc.CallOption) (*gitalypb.CommitIsAncestorResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CommitIsAncestor")
	}

	var r0 *gitalypb.CommitIsAncestorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CommitIsAncestorRequest, ...grpc.CallOption) (*gitalypb.CommitIsAncestorResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CommitIsAncestorRequest, ...grpc.CallOption) *gitalypb.CommitIsAncestorResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.CommitIsAncestorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.CommitIsAncestorRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_CommitIsAncestor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitIsAncestor'
type MockCommitServiceClient_CommitIsAncestor_Call struct {
	*mock.Call
}

// CommitIsAncestor is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.CommitIsAncestorRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) CommitIsAncestor(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_CommitIsAncestor_Call {
	return &MockCommitServiceClient_CommitIsAncestor_Call{Call: _e.mock.On("CommitIsAncestor",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_CommitIsAncestor_Call) Run(run func(ctx context.Context, in *gitalypb.CommitIsAncestorRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_CommitIsAncestor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.CommitIsAncestorRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_CommitIsAncestor_Call) Return(_a0 *gitalypb.CommitIsAncestorResponse, _a1 error) *MockCommitServiceClient_CommitIsAncestor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_CommitIsAncestor_Call) RunAndReturn(run func(context.Context, *gitalypb.CommitIsAncestorRequest, ...grpc.CallOption) (*gitalypb.CommitIsAncestorResponse, error)) *MockCommitServiceClient_CommitIsAncestor_Call {
	_c.Call.Return(run)
	return _c
}

// CommitLanguages provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) CommitLanguages(ctx context.Context, in *gitalypb.CommitLanguagesRequest, opts ...grpc.CallOption) (*gitalypb.CommitLanguagesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CommitLanguages")
	}

	var r0 *gitalypb.CommitLanguagesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CommitLanguagesRequest, ...grpc.CallOption) (*gitalypb.CommitLanguagesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CommitLanguagesRequest, ...grpc.CallOption) *gitalypb.CommitLanguagesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.CommitLanguagesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.CommitLanguagesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_CommitLanguages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitLanguages'
type MockCommitServiceClient_CommitLanguages_Call struct {
	*mock.Call
}

// CommitLanguages is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.CommitLanguagesRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) CommitLanguages(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_CommitLanguages_Call {
	return &MockCommitServiceClient_CommitLanguages_Call{Call: _e.mock.On("CommitLanguages",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_CommitLanguages_Call) Run(run func(ctx context.Context, in *gitalypb.CommitLanguagesRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_CommitLanguages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.CommitLanguagesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_CommitLanguages_Call) Return(_a0 *gitalypb.CommitLanguagesResponse, _a1 error) *MockCommitServiceClient_CommitLanguages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_CommitLanguages_Call) RunAndReturn(run func(context.Context, *gitalypb.CommitLanguagesRequest, ...grpc.CallOption) (*gitalypb.CommitLanguagesResponse, error)) *MockCommitServiceClient_CommitLanguages_Call {
	_c.Call.Return(run)
	return _c
}

// CommitStats provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) CommitStats(ctx context.Context, in *gitalypb.CommitStatsRequest, opts ...grpc.CallOption) (*gitalypb.CommitStatsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CommitStats")
	}

	var r0 *gitalypb.CommitStatsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CommitStatsRequest, ...grpc.CallOption) (*gitalypb.CommitStatsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CommitStatsRequest, ...grpc.CallOption) *gitalypb.CommitStatsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.CommitStatsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.CommitStatsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_CommitStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitStats'
type MockCommitServiceClient_CommitStats_Call struct {
	*mock.Call
}

// CommitStats is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.CommitStatsRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) CommitStats(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_CommitStats_Call {
	return &MockCommitServiceClient_CommitStats_Call{Call: _e.mock.On("CommitStats",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_CommitStats_Call) Run(run func(ctx context.Context, in *gitalypb.CommitStatsRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_CommitStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.CommitStatsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_CommitStats_Call) Return(_a0 *gitalypb.CommitStatsResponse, _a1 error) *MockCommitServiceClient_CommitStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_CommitStats_Call) RunAndReturn(run func(context.Context, *gitalypb.CommitStatsRequest, ...grpc.CallOption) (*gitalypb.CommitStatsResponse, error)) *MockCommitServiceClient_CommitStats_Call {
	_c.Call.Return(run)
	return _c
}

// CommitsByMessage provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) CommitsByMessage(ctx context.Context, in *gitalypb.CommitsByMessageRequest, opts ...grpc.CallOption) (gitalypb.CommitService_CommitsByMessageClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CommitsByMessage")
	}

	var r0 gitalypb.CommitService_CommitsByMessageClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CommitsByMessageRequest, ...grpc.CallOption) (gitalypb.CommitService_CommitsByMessageClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CommitsByMessageRequest, ...grpc.CallOption) gitalypb.CommitService_CommitsByMessageClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.CommitService_CommitsByMessageClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.CommitsByMessageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_CommitsByMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitsByMessage'
type MockCommitServiceClient_CommitsByMessage_Call struct {
	*mock.Call
}

// CommitsByMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.CommitsByMessageRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) CommitsByMessage(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_CommitsByMessage_Call {
	return &MockCommitServiceClient_CommitsByMessage_Call{Call: _e.mock.On("CommitsByMessage",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_CommitsByMessage_Call) Run(run func(ctx context.Context, in *gitalypb.CommitsByMessageRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_CommitsByMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.CommitsByMessageRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_CommitsByMessage_Call) Return(_a0 gitalypb.CommitService_CommitsByMessageClient, _a1 error) *MockCommitServiceClient_CommitsByMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_CommitsByMessage_Call) RunAndReturn(run func(context.Context, *gitalypb.CommitsByMessageRequest, ...grpc.CallOption) (gitalypb.CommitService_CommitsByMessageClient, error)) *MockCommitServiceClient_CommitsByMessage_Call {
	_c.Call.Return(run)
	return _c
}

// CountCommits provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) CountCommits(ctx context.Context, in *gitalypb.CountCommitsRequest, opts ...grpc.CallOption) (*gitalypb.CountCommitsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CountCommits")
	}

	var r0 *gitalypb.CountCommitsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CountCommitsRequest, ...grpc.CallOption) (*gitalypb.CountCommitsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CountCommitsRequest, ...grpc.CallOption) *gitalypb.CountCommitsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.CountCommitsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.CountCommitsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_CountCommits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountCommits'
type MockCommitServiceClient_CountCommits_Call struct {
	*mock.Call
}

// CountCommits is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.CountCommitsRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) CountCommits(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_CountCommits_Call {
	return &MockCommitServiceClient_CountCommits_Call{Call: _e.mock.On("CountCommits",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_CountCommits_Call) Run(run func(ctx context.Context, in *gitalypb.CountCommitsRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_CountCommits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.CountCommitsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_CountCommits_Call) Return(_a0 *gitalypb.CountCommitsResponse, _a1 error) *MockCommitServiceClient_CountCommits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_CountCommits_Call) RunAndReturn(run func(context.Context, *gitalypb.CountCommitsRequest, ...grpc.CallOption) (*gitalypb.CountCommitsResponse, error)) *MockCommitServiceClient_CountCommits_Call {
	_c.Call.Return(run)
	return _c
}

// CountDivergingCommits provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) CountDivergingCommits(ctx context.Context, in *gitalypb.CountDivergingCommitsRequest, opts ...grpc.CallOption) (*gitalypb.CountDivergingCommitsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CountDivergingCommits")
	}

	var r0 *gitalypb.CountDivergingCommitsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CountDivergingCommitsRequest, ...grpc.CallOption) (*gitalypb.CountDivergingCommitsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CountDivergingCommitsRequest, ...grpc.CallOption) *gitalypb.CountDivergingCommitsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.CountDivergingCommitsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.CountDivergingCommitsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_CountDivergingCommits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountDivergingCommits'
type MockCommitServiceClient_CountDivergingCommits_Call struct {
	*mock.Call
}

// CountDivergingCommits is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.CountDivergingCommitsRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) CountDivergingCommits(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_CountDivergingCommits_Call {
	return &MockCommitServiceClient_CountDivergingCommits_Call{Call: _e.mock.On("CountDivergingCommits",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_CountDivergingCommits_Call) Run(run func(ctx context.Context, in *gitalypb.CountDivergingCommitsRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_CountDivergingCommits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.CountDivergingCommitsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_CountDivergingCommits_Call) Return(_a0 *gitalypb.CountDivergingCommitsResponse, _a1 error) *MockCommitServiceClient_CountDivergingCommits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_CountDivergingCommits_Call) RunAndReturn(run func(context.Context, *gitalypb.CountDivergingCommitsRequest, ...grpc.CallOption) (*gitalypb.CountDivergingCommitsResponse, error)) *MockCommitServiceClient_CountDivergingCommits_Call {
	_c.Call.Return(run)
	return _c
}

// FilterShasWithSignatures provides a mock function with given fields: ctx, opts
func (_m *MockCommitServiceClient) FilterShasWithSignatures(ctx context.Context, opts ...grpc.CallOption) (gitalypb.CommitService_FilterShasWithSignaturesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FilterShasWithSignatures")
	}

	var r0 gitalypb.CommitService_FilterShasWithSignaturesClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (gitalypb.CommitService_FilterShasWithSignaturesClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) gitalypb.CommitService_FilterShasWithSignaturesClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.CommitService_FilterShasWithSignaturesClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_FilterShasWithSignatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterShasWithSignatures'
type MockCommitServiceClient_FilterShasWithSignatures_Call struct {
	*mock.Call
}

// FilterShasWithSignatures is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) FilterShasWithSignatures(ctx interface{}, opts ...interface{}) *MockCommitServiceClient_FilterShasWithSignatures_Call {
	return &MockCommitServiceClient_FilterShasWithSignatures_Call{Call: _e.mock.On("FilterShasWithSignatures",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockCommitServiceClient_FilterShasWithSignatures_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockCommitServiceClient_FilterShasWithSignatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_FilterShasWithSignatures_Call) Return(_a0 gitalypb.CommitService_FilterShasWithSignaturesClient, _a1 error) *MockCommitServiceClient_FilterShasWithSignatures_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_FilterShasWithSignatures_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (gitalypb.CommitService_FilterShasWithSignaturesClient, error)) *MockCommitServiceClient_FilterShasWithSignatures_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllCommits provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) FindAllCommits(ctx context.Context, in *gitalypb.FindAllCommitsRequest, opts ...grpc.CallOption) (gitalypb.CommitService_FindAllCommitsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindAllCommits")
	}

	var r0 gitalypb.CommitService_FindAllCommitsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindAllCommitsRequest, ...grpc.CallOption) (gitalypb.CommitService_FindAllCommitsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindAllCommitsRequest, ...grpc.CallOption) gitalypb.CommitService_FindAllCommitsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.CommitService_FindAllCommitsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FindAllCommitsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_FindAllCommits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllCommits'
type MockCommitServiceClient_FindAllCommits_Call struct {
	*mock.Call
}

// FindAllCommits is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FindAllCommitsRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) FindAllCommits(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_FindAllCommits_Call {
	return &MockCommitServiceClient_FindAllCommits_Call{Call: _e.mock.On("FindAllCommits",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_FindAllCommits_Call) Run(run func(ctx context.Context, in *gitalypb.FindAllCommitsRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_FindAllCommits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FindAllCommitsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_FindAllCommits_Call) Return(_a0 gitalypb.CommitService_FindAllCommitsClient, _a1 error) *MockCommitServiceClient_FindAllCommits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_FindAllCommits_Call) RunAndReturn(run func(context.Context, *gitalypb.FindAllCommitsRequest, ...grpc.CallOption) (gitalypb.CommitService_FindAllCommitsClient, error)) *MockCommitServiceClient_FindAllCommits_Call {
	_c.Call.Return(run)
	return _c
}

// FindCommit provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) FindCommit(ctx context.Context, in *gitalypb.FindCommitRequest, opts ...grpc.CallOption) (*gitalypb.FindCommitResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindCommit")
	}

	var r0 *gitalypb.FindCommitResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindCommitRequest, ...grpc.CallOption) (*gitalypb.FindCommitResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindCommitRequest, ...grpc.CallOption) *gitalypb.FindCommitResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.FindCommitResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FindCommitRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_FindCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindCommit'
type MockCommitServiceClient_FindCommit_Call struct {
	*mock.Call
}

// FindCommit is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FindCommitRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) FindCommit(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_FindCommit_Call {
	return &MockCommitServiceClient_FindCommit_Call{Call: _e.mock.On("FindCommit",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_FindCommit_Call) Run(run func(ctx context.Context, in *gitalypb.FindCommitRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_FindCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FindCommitRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_FindCommit_Call) Return(_a0 *gitalypb.FindCommitResponse, _a1 error) *MockCommitServiceClient_FindCommit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_FindCommit_Call) RunAndReturn(run func(context.Context, *gitalypb.FindCommitRequest, ...grpc.CallOption) (*gitalypb.FindCommitResponse, error)) *MockCommitServiceClient_FindCommit_Call {
	_c.Call.Return(run)
	return _c
}

// FindCommits provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) FindCommits(ctx context.Context, in *gitalypb.FindCommitsRequest, opts ...grpc.CallOption) (gitalypb.CommitService_FindCommitsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindCommits")
	}

	var r0 gitalypb.CommitService_FindCommitsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindCommitsRequest, ...grpc.CallOption) (gitalypb.CommitService_FindCommitsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindCommitsRequest, ...grpc.CallOption) gitalypb.CommitService_FindCommitsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.CommitService_FindCommitsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FindCommitsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_FindCommits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindCommits'
type MockCommitServiceClient_FindCommits_Call struct {
	*mock.Call
}

// FindCommits is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FindCommitsRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) FindCommits(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_FindCommits_Call {
	return &MockCommitServiceClient_FindCommits_Call{Call: _e.mock.On("FindCommits",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_FindCommits_Call) Run(run func(ctx context.Context, in *gitalypb.FindCommitsRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_FindCommits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FindCommitsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_FindCommits_Call) Return(_a0 gitalypb.CommitService_FindCommitsClient, _a1 error) *MockCommitServiceClient_FindCommits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_FindCommits_Call) RunAndReturn(run func(context.Context, *gitalypb.FindCommitsRequest, ...grpc.CallOption) (gitalypb.CommitService_FindCommitsClient, error)) *MockCommitServiceClient_FindCommits_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommitMessages provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) GetCommitMessages(ctx context.Context, in *gitalypb.GetCommitMessagesRequest, opts ...grpc.CallOption) (gitalypb.CommitService_GetCommitMessagesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCommitMessages")
	}

	var r0 gitalypb.CommitService_GetCommitMessagesClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetCommitMessagesRequest, ...grpc.CallOption) (gitalypb.CommitService_GetCommitMessagesClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetCommitMessagesRequest, ...grpc.CallOption) gitalypb.CommitService_GetCommitMessagesClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.CommitService_GetCommitMessagesClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.GetCommitMessagesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_GetCommitMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommitMessages'
type MockCommitServiceClient_GetCommitMessages_Call struct {
	*mock.Call
}

// GetCommitMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.GetCommitMessagesRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) GetCommitMessages(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_GetCommitMessages_Call {
	return &MockCommitServiceClient_GetCommitMessages_Call{Call: _e.mock.On("GetCommitMessages",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_GetCommitMessages_Call) Run(run func(ctx context.Context, in *gitalypb.GetCommitMessagesRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_GetCommitMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.GetCommitMessagesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_GetCommitMessages_Call) Return(_a0 gitalypb.CommitService_GetCommitMessagesClient, _a1 error) *MockCommitServiceClient_GetCommitMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_GetCommitMessages_Call) RunAndReturn(run func(context.Context, *gitalypb.GetCommitMessagesRequest, ...grpc.CallOption) (gitalypb.CommitService_GetCommitMessagesClient, error)) *MockCommitServiceClient_GetCommitMessages_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommitSignatures provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) GetCommitSignatures(ctx context.Context, in *gitalypb.GetCommitSignaturesRequest, opts ...grpc.CallOption) (gitalypb.CommitService_GetCommitSignaturesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCommitSignatures")
	}

	var r0 gitalypb.CommitService_GetCommitSignaturesClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetCommitSignaturesRequest, ...grpc.CallOption) (gitalypb.CommitService_GetCommitSignaturesClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetCommitSignaturesRequest, ...grpc.CallOption) gitalypb.CommitService_GetCommitSignaturesClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.CommitService_GetCommitSignaturesClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.GetCommitSignaturesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_GetCommitSignatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommitSignatures'
type MockCommitServiceClient_GetCommitSignatures_Call struct {
	*mock.Call
}

// GetCommitSignatures is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.GetCommitSignaturesRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) GetCommitSignatures(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_GetCommitSignatures_Call {
	return &MockCommitServiceClient_GetCommitSignatures_Call{Call: _e.mock.On("GetCommitSignatures",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_GetCommitSignatures_Call) Run(run func(ctx context.Context, in *gitalypb.GetCommitSignaturesRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_GetCommitSignatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.GetCommitSignaturesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_GetCommitSignatures_Call) Return(_a0 gitalypb.CommitService_GetCommitSignaturesClient, _a1 error) *MockCommitServiceClient_GetCommitSignatures_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_GetCommitSignatures_Call) RunAndReturn(run func(context.Context, *gitalypb.GetCommitSignaturesRequest, ...grpc.CallOption) (gitalypb.CommitService_GetCommitSignaturesClient, error)) *MockCommitServiceClient_GetCommitSignatures_Call {
	_c.Call.Return(run)
	return _c
}

// GetTreeEntries provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) GetTreeEntries(ctx context.Context, in *gitalypb.GetTreeEntriesRequest, opts ...grpc.CallOption) (gitalypb.CommitService_GetTreeEntriesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTreeEntries")
	}

	var r0 gitalypb.CommitService_GetTreeEntriesClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetTreeEntriesRequest, ...grpc.CallOption) (gitalypb.CommitService_GetTreeEntriesClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetTreeEntriesRequest, ...grpc.CallOption) gitalypb.CommitService_GetTreeEntriesClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.CommitService_GetTreeEntriesClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.GetTreeEntriesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_GetTreeEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTreeEntries'
type MockCommitServiceClient_GetTreeEntries_Call struct {
	*mock.Call
}

// GetTreeEntries is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.GetTreeEntriesRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) GetTreeEntries(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_GetTreeEntries_Call {
	return &MockCommitServiceClient_GetTreeEntries_Call{Call: _e.mock.On("GetTreeEntries",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_GetTreeEntries_Call) Run(run func(ctx context.Context, in *gitalypb.GetTreeEntriesRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_GetTreeEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.GetTreeEntriesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_GetTreeEntries_Call) Return(_a0 gitalypb.CommitService_GetTreeEntriesClient, _a1 error) *MockCommitServiceClient_GetTreeEntries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_GetTreeEntries_Call) RunAndReturn(run func(context.Context, *gitalypb.GetTreeEntriesRequest, ...grpc.CallOption) (gitalypb.CommitService_GetTreeEntriesClient, error)) *MockCommitServiceClient_GetTreeEntries_Call {
	_c.Call.Return(run)
	return _c
}

// LastCommitForPath provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) LastCommitForPath(ctx context.Context, in *gitalypb.LastCommitForPathRequest, opts ...grpc.CallOption) (*gitalypb.LastCommitForPathResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LastCommitForPath")
	}

	var r0 *gitalypb.LastCommitForPathResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.LastCommitForPathRequest, ...grpc.CallOption) (*gitalypb.LastCommitForPathResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.LastCommitForPathRequest, ...grpc.CallOption) *gitalypb.LastCommitForPathResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.LastCommitForPathResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.LastCommitForPathRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_LastCommitForPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastCommitForPath'
type MockCommitServiceClient_LastCommitForPath_Call struct {
	*mock.Call
}

// LastCommitForPath is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.LastCommitForPathRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) LastCommitForPath(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_LastCommitForPath_Call {
	return &MockCommitServiceClient_LastCommitForPath_Call{Call: _e.mock.On("LastCommitForPath",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_LastCommitForPath_Call) Run(run func(ctx context.Context, in *gitalypb.LastCommitForPathRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_LastCommitForPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.LastCommitForPathRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_LastCommitForPath_Call) Return(_a0 *gitalypb.LastCommitForPathResponse, _a1 error) *MockCommitServiceClient_LastCommitForPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_LastCommitForPath_Call) RunAndReturn(run func(context.Context, *gitalypb.LastCommitForPathRequest, ...grpc.CallOption) (*gitalypb.LastCommitForPathResponse, error)) *MockCommitServiceClient_LastCommitForPath_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllCommits provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) ListAllCommits(ctx context.Context, in *gitalypb.ListAllCommitsRequest, opts ...grpc.CallOption) (gitalypb.CommitService_ListAllCommitsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAllCommits")
	}

	var r0 gitalypb.CommitService_ListAllCommitsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListAllCommitsRequest, ...grpc.CallOption) (gitalypb.CommitService_ListAllCommitsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListAllCommitsRequest, ...grpc.CallOption) gitalypb.CommitService_ListAllCommitsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.CommitService_ListAllCommitsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.ListAllCommitsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_ListAllCommits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllCommits'
type MockCommitServiceClient_ListAllCommits_Call struct {
	*mock.Call
}

// ListAllCommits is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.ListAllCommitsRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) ListAllCommits(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_ListAllCommits_Call {
	return &MockCommitServiceClient_ListAllCommits_Call{Call: _e.mock.On("ListAllCommits",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_ListAllCommits_Call) Run(run func(ctx context.Context, in *gitalypb.ListAllCommitsRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_ListAllCommits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.ListAllCommitsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_ListAllCommits_Call) Return(_a0 gitalypb.CommitService_ListAllCommitsClient, _a1 error) *MockCommitServiceClient_ListAllCommits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_ListAllCommits_Call) RunAndReturn(run func(context.Context, *gitalypb.ListAllCommitsRequest, ...grpc.CallOption) (gitalypb.CommitService_ListAllCommitsClient, error)) *MockCommitServiceClient_ListAllCommits_Call {
	_c.Call.Return(run)
	return _c
}

// ListCommits provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) ListCommits(ctx context.Context, in *gitalypb.ListCommitsRequest, opts ...grpc.CallOption) (gitalypb.CommitService_ListCommitsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCommits")
	}

	var r0 gitalypb.CommitService_ListCommitsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListCommitsRequest, ...grpc.CallOption) (gitalypb.CommitService_ListCommitsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListCommitsRequest, ...grpc.CallOption) gitalypb.CommitService_ListCommitsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.CommitService_ListCommitsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.ListCommitsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_ListCommits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCommits'
type MockCommitServiceClient_ListCommits_Call struct {
	*mock.Call
}

// ListCommits is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.ListCommitsRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) ListCommits(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_ListCommits_Call {
	return &MockCommitServiceClient_ListCommits_Call{Call: _e.mock.On("ListCommits",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_ListCommits_Call) Run(run func(ctx context.Context, in *gitalypb.ListCommitsRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_ListCommits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.ListCommitsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_ListCommits_Call) Return(_a0 gitalypb.CommitService_ListCommitsClient, _a1 error) *MockCommitServiceClient_ListCommits_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_ListCommits_Call) RunAndReturn(run func(context.Context, *gitalypb.ListCommitsRequest, ...grpc.CallOption) (gitalypb.CommitService_ListCommitsClient, error)) *MockCommitServiceClient_ListCommits_Call {
	_c.Call.Return(run)
	return _c
}

// ListCommitsByOid provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) ListCommitsByOid(ctx context.Context, in *gitalypb.ListCommitsByOidRequest, opts ...grpc.CallOption) (gitalypb.CommitService_ListCommitsByOidClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCommitsByOid")
	}

	var r0 gitalypb.CommitService_ListCommitsByOidClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListCommitsByOidRequest, ...grpc.CallOption) (gitalypb.CommitService_ListCommitsByOidClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListCommitsByOidRequest, ...grpc.CallOption) gitalypb.CommitService_ListCommitsByOidClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.CommitService_ListCommitsByOidClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.ListCommitsByOidRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_ListCommitsByOid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCommitsByOid'
type MockCommitServiceClient_ListCommitsByOid_Call struct {
	*mock.Call
}

// ListCommitsByOid is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.ListCommitsByOidRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) ListCommitsByOid(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_ListCommitsByOid_Call {
	return &MockCommitServiceClient_ListCommitsByOid_Call{Call: _e.mock.On("ListCommitsByOid",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_ListCommitsByOid_Call) Run(run func(ctx context.Context, in *gitalypb.ListCommitsByOidRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_ListCommitsByOid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.ListCommitsByOidRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_ListCommitsByOid_Call) Return(_a0 gitalypb.CommitService_ListCommitsByOidClient, _a1 error) *MockCommitServiceClient_ListCommitsByOid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_ListCommitsByOid_Call) RunAndReturn(run func(context.Context, *gitalypb.ListCommitsByOidRequest, ...grpc.CallOption) (gitalypb.CommitService_ListCommitsByOidClient, error)) *MockCommitServiceClient_ListCommitsByOid_Call {
	_c.Call.Return(run)
	return _c
}

// ListCommitsByRefName provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) ListCommitsByRefName(ctx context.Context, in *gitalypb.ListCommitsByRefNameRequest, opts ...grpc.CallOption) (gitalypb.CommitService_ListCommitsByRefNameClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCommitsByRefName")
	}

	var r0 gitalypb.CommitService_ListCommitsByRefNameClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListCommitsByRefNameRequest, ...grpc.CallOption) (gitalypb.CommitService_ListCommitsByRefNameClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListCommitsByRefNameRequest, ...grpc.CallOption) gitalypb.CommitService_ListCommitsByRefNameClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.CommitService_ListCommitsByRefNameClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.ListCommitsByRefNameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_ListCommitsByRefName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCommitsByRefName'
type MockCommitServiceClient_ListCommitsByRefName_Call struct {
	*mock.Call
}

// ListCommitsByRefName is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.ListCommitsByRefNameRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) ListCommitsByRefName(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_ListCommitsByRefName_Call {
	return &MockCommitServiceClient_ListCommitsByRefName_Call{Call: _e.mock.On("ListCommitsByRefName",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_ListCommitsByRefName_Call) Run(run func(ctx context.Context, in *gitalypb.ListCommitsByRefNameRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_ListCommitsByRefName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.ListCommitsByRefNameRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_ListCommitsByRefName_Call) Return(_a0 gitalypb.CommitService_ListCommitsByRefNameClient, _a1 error) *MockCommitServiceClient_ListCommitsByRefName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_ListCommitsByRefName_Call) RunAndReturn(run func(context.Context, *gitalypb.ListCommitsByRefNameRequest, ...grpc.CallOption) (gitalypb.CommitService_ListCommitsByRefNameClient, error)) *MockCommitServiceClient_ListCommitsByRefName_Call {
	_c.Call.Return(run)
	return _c
}

// ListFiles provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) ListFiles(ctx context.Context, in *gitalypb.ListFilesRequest, opts ...grpc.CallOption) (gitalypb.CommitService_ListFilesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFiles")
	}

	var r0 gitalypb.CommitService_ListFilesClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListFilesRequest, ...grpc.CallOption) (gitalypb.CommitService_ListFilesClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListFilesRequest, ...grpc.CallOption) gitalypb.CommitService_ListFilesClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.CommitService_ListFilesClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.ListFilesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_ListFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFiles'
type MockCommitServiceClient_ListFiles_Call struct {
	*mock.Call
}

// ListFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.ListFilesRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) ListFiles(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_ListFiles_Call {
	return &MockCommitServiceClient_ListFiles_Call{Call: _e.mock.On("ListFiles",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_ListFiles_Call) Run(run func(ctx context.Context, in *gitalypb.ListFilesRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_ListFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.ListFilesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_ListFiles_Call) Return(_a0 gitalypb.CommitService_ListFilesClient, _a1 error) *MockCommitServiceClient_ListFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_ListFiles_Call) RunAndReturn(run func(context.Context, *gitalypb.ListFilesRequest, ...grpc.CallOption) (gitalypb.CommitService_ListFilesClient, error)) *MockCommitServiceClient_ListFiles_Call {
	_c.Call.Return(run)
	return _c
}

// ListLastCommitsForTree provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) ListLastCommitsForTree(ctx context.Context, in *gitalypb.ListLastCommitsForTreeRequest, opts ...grpc.CallOption) (gitalypb.CommitService_ListLastCommitsForTreeClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLastCommitsForTree")
	}

	var r0 gitalypb.CommitService_ListLastCommitsForTreeClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListLastCommitsForTreeRequest, ...grpc.CallOption) (gitalypb.CommitService_ListLastCommitsForTreeClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListLastCommitsForTreeRequest, ...grpc.CallOption) gitalypb.CommitService_ListLastCommitsForTreeClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.CommitService_ListLastCommitsForTreeClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.ListLastCommitsForTreeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_ListLastCommitsForTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLastCommitsForTree'
type MockCommitServiceClient_ListLastCommitsForTree_Call struct {
	*mock.Call
}

// ListLastCommitsForTree is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.ListLastCommitsForTreeRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) ListLastCommitsForTree(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_ListLastCommitsForTree_Call {
	return &MockCommitServiceClient_ListLastCommitsForTree_Call{Call: _e.mock.On("ListLastCommitsForTree",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_ListLastCommitsForTree_Call) Run(run func(ctx context.Context, in *gitalypb.ListLastCommitsForTreeRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_ListLastCommitsForTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.ListLastCommitsForTreeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_ListLastCommitsForTree_Call) Return(_a0 gitalypb.CommitService_ListLastCommitsForTreeClient, _a1 error) *MockCommitServiceClient_ListLastCommitsForTree_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_ListLastCommitsForTree_Call) RunAndReturn(run func(context.Context, *gitalypb.ListLastCommitsForTreeRequest, ...grpc.CallOption) (gitalypb.CommitService_ListLastCommitsForTreeClient, error)) *MockCommitServiceClient_ListLastCommitsForTree_Call {
	_c.Call.Return(run)
	return _c
}

// RawBlame provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) RawBlame(ctx context.Context, in *gitalypb.RawBlameRequest, opts ...grpc.CallOption) (gitalypb.CommitService_RawBlameClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RawBlame")
	}

	var r0 gitalypb.CommitService_RawBlameClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.RawBlameRequest, ...grpc.CallOption) (gitalypb.CommitService_RawBlameClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.RawBlameRequest, ...grpc.CallOption) gitalypb.CommitService_RawBlameClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.CommitService_RawBlameClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.RawBlameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_RawBlame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RawBlame'
type MockCommitServiceClient_RawBlame_Call struct {
	*mock.Call
}

// RawBlame is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.RawBlameRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) RawBlame(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_RawBlame_Call {
	return &MockCommitServiceClient_RawBlame_Call{Call: _e.mock.On("RawBlame",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_RawBlame_Call) Run(run func(ctx context.Context, in *gitalypb.RawBlameRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_RawBlame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.RawBlameRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_RawBlame_Call) Return(_a0 gitalypb.CommitService_RawBlameClient, _a1 error) *MockCommitServiceClient_RawBlame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_RawBlame_Call) RunAndReturn(run func(context.Context, *gitalypb.RawBlameRequest, ...grpc.CallOption) (gitalypb.CommitService_RawBlameClient, error)) *MockCommitServiceClient_RawBlame_Call {
	_c.Call.Return(run)
	return _c
}

// TreeEntry provides a mock function with given fields: ctx, in, opts
func (_m *MockCommitServiceClient) TreeEntry(ctx context.Context, in *gitalypb.TreeEntryRequest, opts ...grpc.CallOption) (gitalypb.CommitService_TreeEntryClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TreeEntry")
	}

	var r0 gitalypb.CommitService_TreeEntryClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.TreeEntryRequest, ...grpc.CallOption) (gitalypb.CommitService_TreeEntryClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.TreeEntryRequest, ...grpc.CallOption) gitalypb.CommitService_TreeEntryClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.CommitService_TreeEntryClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.TreeEntryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommitServiceClient_TreeEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TreeEntry'
type MockCommitServiceClient_TreeEntry_Call struct {
	*mock.Call
}

// TreeEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.TreeEntryRequest
//   - opts ...grpc.CallOption
func (_e *MockCommitServiceClient_Expecter) TreeEntry(ctx interface{}, in interface{}, opts ...interface{}) *MockCommitServiceClient_TreeEntry_Call {
	return &MockCommitServiceClient_TreeEntry_Call{Call: _e.mock.On("TreeEntry",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockCommitServiceClient_TreeEntry_Call) Run(run func(ctx context.Context, in *gitalypb.TreeEntryRequest, opts ...grpc.CallOption)) *MockCommitServiceClient_TreeEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.TreeEntryRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockCommitServiceClient_TreeEntry_Call) Return(_a0 gitalypb.CommitService_TreeEntryClient, _a1 error) *MockCommitServiceClient_TreeEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommitServiceClient_TreeEntry_Call) RunAndReturn(run func(context.Context, *gitalypb.TreeEntryRequest, ...grpc.CallOption) (gitalypb.CommitService_TreeEntryClient, error)) *MockCommitServiceClient_TreeEntry_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommitServiceClient creates a new instance of MockCommitServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommitServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommitServiceClient {
	mock := &MockCommitServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

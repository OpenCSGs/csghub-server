// Code generated by mockery v2.49.1. DO NOT EDIT.

package gitalypb

import (
	context "context"

	gitalypb "gitlab.com/gitlab-org/gitaly/v16/proto/go/gitalypb"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockRemoteServiceClient is an autogenerated mock type for the RemoteServiceClient type
type MockRemoteServiceClient struct {
	mock.Mock
}

type MockRemoteServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRemoteServiceClient) EXPECT() *MockRemoteServiceClient_Expecter {
	return &MockRemoteServiceClient_Expecter{mock: &_m.Mock}
}

// FindRemoteRepository provides a mock function with given fields: ctx, in, opts
func (_m *MockRemoteServiceClient) FindRemoteRepository(ctx context.Context, in *gitalypb.FindRemoteRepositoryRequest, opts ...grpc.CallOption) (*gitalypb.FindRemoteRepositoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindRemoteRepository")
	}

	var r0 *gitalypb.FindRemoteRepositoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindRemoteRepositoryRequest, ...grpc.CallOption) (*gitalypb.FindRemoteRepositoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindRemoteRepositoryRequest, ...grpc.CallOption) *gitalypb.FindRemoteRepositoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.FindRemoteRepositoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FindRemoteRepositoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteServiceClient_FindRemoteRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindRemoteRepository'
type MockRemoteServiceClient_FindRemoteRepository_Call struct {
	*mock.Call
}

// FindRemoteRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FindRemoteRepositoryRequest
//   - opts ...grpc.CallOption
func (_e *MockRemoteServiceClient_Expecter) FindRemoteRepository(ctx interface{}, in interface{}, opts ...interface{}) *MockRemoteServiceClient_FindRemoteRepository_Call {
	return &MockRemoteServiceClient_FindRemoteRepository_Call{Call: _e.mock.On("FindRemoteRepository",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRemoteServiceClient_FindRemoteRepository_Call) Run(run func(ctx context.Context, in *gitalypb.FindRemoteRepositoryRequest, opts ...grpc.CallOption)) *MockRemoteServiceClient_FindRemoteRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FindRemoteRepositoryRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRemoteServiceClient_FindRemoteRepository_Call) Return(_a0 *gitalypb.FindRemoteRepositoryResponse, _a1 error) *MockRemoteServiceClient_FindRemoteRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteServiceClient_FindRemoteRepository_Call) RunAndReturn(run func(context.Context, *gitalypb.FindRemoteRepositoryRequest, ...grpc.CallOption) (*gitalypb.FindRemoteRepositoryResponse, error)) *MockRemoteServiceClient_FindRemoteRepository_Call {
	_c.Call.Return(run)
	return _c
}

// FindRemoteRootRef provides a mock function with given fields: ctx, in, opts
func (_m *MockRemoteServiceClient) FindRemoteRootRef(ctx context.Context, in *gitalypb.FindRemoteRootRefRequest, opts ...grpc.CallOption) (*gitalypb.FindRemoteRootRefResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindRemoteRootRef")
	}

	var r0 *gitalypb.FindRemoteRootRefResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindRemoteRootRefRequest, ...grpc.CallOption) (*gitalypb.FindRemoteRootRefResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindRemoteRootRefRequest, ...grpc.CallOption) *gitalypb.FindRemoteRootRefResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.FindRemoteRootRefResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FindRemoteRootRefRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteServiceClient_FindRemoteRootRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindRemoteRootRef'
type MockRemoteServiceClient_FindRemoteRootRef_Call struct {
	*mock.Call
}

// FindRemoteRootRef is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FindRemoteRootRefRequest
//   - opts ...grpc.CallOption
func (_e *MockRemoteServiceClient_Expecter) FindRemoteRootRef(ctx interface{}, in interface{}, opts ...interface{}) *MockRemoteServiceClient_FindRemoteRootRef_Call {
	return &MockRemoteServiceClient_FindRemoteRootRef_Call{Call: _e.mock.On("FindRemoteRootRef",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRemoteServiceClient_FindRemoteRootRef_Call) Run(run func(ctx context.Context, in *gitalypb.FindRemoteRootRefRequest, opts ...grpc.CallOption)) *MockRemoteServiceClient_FindRemoteRootRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FindRemoteRootRefRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRemoteServiceClient_FindRemoteRootRef_Call) Return(_a0 *gitalypb.FindRemoteRootRefResponse, _a1 error) *MockRemoteServiceClient_FindRemoteRootRef_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteServiceClient_FindRemoteRootRef_Call) RunAndReturn(run func(context.Context, *gitalypb.FindRemoteRootRefRequest, ...grpc.CallOption) (*gitalypb.FindRemoteRootRefResponse, error)) *MockRemoteServiceClient_FindRemoteRootRef_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRemoteMirror provides a mock function with given fields: ctx, opts
func (_m *MockRemoteServiceClient) UpdateRemoteMirror(ctx context.Context, opts ...grpc.CallOption) (gitalypb.RemoteService_UpdateRemoteMirrorClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRemoteMirror")
	}

	var r0 gitalypb.RemoteService_UpdateRemoteMirrorClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (gitalypb.RemoteService_UpdateRemoteMirrorClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) gitalypb.RemoteService_UpdateRemoteMirrorClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RemoteService_UpdateRemoteMirrorClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRemoteServiceClient_UpdateRemoteMirror_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRemoteMirror'
type MockRemoteServiceClient_UpdateRemoteMirror_Call struct {
	*mock.Call
}

// UpdateRemoteMirror is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockRemoteServiceClient_Expecter) UpdateRemoteMirror(ctx interface{}, opts ...interface{}) *MockRemoteServiceClient_UpdateRemoteMirror_Call {
	return &MockRemoteServiceClient_UpdateRemoteMirror_Call{Call: _e.mock.On("UpdateRemoteMirror",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockRemoteServiceClient_UpdateRemoteMirror_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockRemoteServiceClient_UpdateRemoteMirror_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockRemoteServiceClient_UpdateRemoteMirror_Call) Return(_a0 gitalypb.RemoteService_UpdateRemoteMirrorClient, _a1 error) *MockRemoteServiceClient_UpdateRemoteMirror_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRemoteServiceClient_UpdateRemoteMirror_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (gitalypb.RemoteService_UpdateRemoteMirrorClient, error)) *MockRemoteServiceClient_UpdateRemoteMirror_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRemoteServiceClient creates a new instance of MockRemoteServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemoteServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemoteServiceClient {
	mock := &MockRemoteServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

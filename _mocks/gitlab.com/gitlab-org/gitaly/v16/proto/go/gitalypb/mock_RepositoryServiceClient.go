// Code generated by mockery v2.49.1. DO NOT EDIT.

package gitalypb

import (
	context "context"

	gitalypb "gitlab.com/gitlab-org/gitaly/v16/proto/go/gitalypb"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockRepositoryServiceClient is an autogenerated mock type for the RepositoryServiceClient type
type MockRepositoryServiceClient struct {
	mock.Mock
}

type MockRepositoryServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositoryServiceClient) EXPECT() *MockRepositoryServiceClient_Expecter {
	return &MockRepositoryServiceClient_Expecter{mock: &_m.Mock}
}

// ApplyGitattributes provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) ApplyGitattributes(ctx context.Context, in *gitalypb.ApplyGitattributesRequest, opts ...grpc.CallOption) (*gitalypb.ApplyGitattributesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplyGitattributes")
	}

	var r0 *gitalypb.ApplyGitattributesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ApplyGitattributesRequest, ...grpc.CallOption) (*gitalypb.ApplyGitattributesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ApplyGitattributesRequest, ...grpc.CallOption) *gitalypb.ApplyGitattributesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.ApplyGitattributesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.ApplyGitattributesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_ApplyGitattributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyGitattributes'
type MockRepositoryServiceClient_ApplyGitattributes_Call struct {
	*mock.Call
}

// ApplyGitattributes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.ApplyGitattributesRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) ApplyGitattributes(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_ApplyGitattributes_Call {
	return &MockRepositoryServiceClient_ApplyGitattributes_Call{Call: _e.mock.On("ApplyGitattributes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_ApplyGitattributes_Call) Run(run func(ctx context.Context, in *gitalypb.ApplyGitattributesRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_ApplyGitattributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.ApplyGitattributesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_ApplyGitattributes_Call) Return(_a0 *gitalypb.ApplyGitattributesResponse, _a1 error) *MockRepositoryServiceClient_ApplyGitattributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_ApplyGitattributes_Call) RunAndReturn(run func(context.Context, *gitalypb.ApplyGitattributesRequest, ...grpc.CallOption) (*gitalypb.ApplyGitattributesResponse, error)) *MockRepositoryServiceClient_ApplyGitattributes_Call {
	_c.Call.Return(run)
	return _c
}

// BackupCustomHooks provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) BackupCustomHooks(ctx context.Context, in *gitalypb.BackupCustomHooksRequest, opts ...grpc.CallOption) (gitalypb.RepositoryService_BackupCustomHooksClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BackupCustomHooks")
	}

	var r0 gitalypb.RepositoryService_BackupCustomHooksClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.BackupCustomHooksRequest, ...grpc.CallOption) (gitalypb.RepositoryService_BackupCustomHooksClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.BackupCustomHooksRequest, ...grpc.CallOption) gitalypb.RepositoryService_BackupCustomHooksClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RepositoryService_BackupCustomHooksClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.BackupCustomHooksRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_BackupCustomHooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackupCustomHooks'
type MockRepositoryServiceClient_BackupCustomHooks_Call struct {
	*mock.Call
}

// BackupCustomHooks is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.BackupCustomHooksRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) BackupCustomHooks(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_BackupCustomHooks_Call {
	return &MockRepositoryServiceClient_BackupCustomHooks_Call{Call: _e.mock.On("BackupCustomHooks",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_BackupCustomHooks_Call) Run(run func(ctx context.Context, in *gitalypb.BackupCustomHooksRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_BackupCustomHooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.BackupCustomHooksRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_BackupCustomHooks_Call) Return(_a0 gitalypb.RepositoryService_BackupCustomHooksClient, _a1 error) *MockRepositoryServiceClient_BackupCustomHooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_BackupCustomHooks_Call) RunAndReturn(run func(context.Context, *gitalypb.BackupCustomHooksRequest, ...grpc.CallOption) (gitalypb.RepositoryService_BackupCustomHooksClient, error)) *MockRepositoryServiceClient_BackupCustomHooks_Call {
	_c.Call.Return(run)
	return _c
}

// BackupRepository provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) BackupRepository(ctx context.Context, in *gitalypb.BackupRepositoryRequest, opts ...grpc.CallOption) (*gitalypb.BackupRepositoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BackupRepository")
	}

	var r0 *gitalypb.BackupRepositoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.BackupRepositoryRequest, ...grpc.CallOption) (*gitalypb.BackupRepositoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.BackupRepositoryRequest, ...grpc.CallOption) *gitalypb.BackupRepositoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.BackupRepositoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.BackupRepositoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_BackupRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackupRepository'
type MockRepositoryServiceClient_BackupRepository_Call struct {
	*mock.Call
}

// BackupRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.BackupRepositoryRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) BackupRepository(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_BackupRepository_Call {
	return &MockRepositoryServiceClient_BackupRepository_Call{Call: _e.mock.On("BackupRepository",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_BackupRepository_Call) Run(run func(ctx context.Context, in *gitalypb.BackupRepositoryRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_BackupRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.BackupRepositoryRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_BackupRepository_Call) Return(_a0 *gitalypb.BackupRepositoryResponse, _a1 error) *MockRepositoryServiceClient_BackupRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_BackupRepository_Call) RunAndReturn(run func(context.Context, *gitalypb.BackupRepositoryRequest, ...grpc.CallOption) (*gitalypb.BackupRepositoryResponse, error)) *MockRepositoryServiceClient_BackupRepository_Call {
	_c.Call.Return(run)
	return _c
}

// CalculateChecksum provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) CalculateChecksum(ctx context.Context, in *gitalypb.CalculateChecksumRequest, opts ...grpc.CallOption) (*gitalypb.CalculateChecksumResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CalculateChecksum")
	}

	var r0 *gitalypb.CalculateChecksumResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CalculateChecksumRequest, ...grpc.CallOption) (*gitalypb.CalculateChecksumResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CalculateChecksumRequest, ...grpc.CallOption) *gitalypb.CalculateChecksumResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.CalculateChecksumResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.CalculateChecksumRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_CalculateChecksum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateChecksum'
type MockRepositoryServiceClient_CalculateChecksum_Call struct {
	*mock.Call
}

// CalculateChecksum is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.CalculateChecksumRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) CalculateChecksum(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_CalculateChecksum_Call {
	return &MockRepositoryServiceClient_CalculateChecksum_Call{Call: _e.mock.On("CalculateChecksum",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_CalculateChecksum_Call) Run(run func(ctx context.Context, in *gitalypb.CalculateChecksumRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_CalculateChecksum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.CalculateChecksumRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_CalculateChecksum_Call) Return(_a0 *gitalypb.CalculateChecksumResponse, _a1 error) *MockRepositoryServiceClient_CalculateChecksum_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_CalculateChecksum_Call) RunAndReturn(run func(context.Context, *gitalypb.CalculateChecksumRequest, ...grpc.CallOption) (*gitalypb.CalculateChecksumResponse, error)) *MockRepositoryServiceClient_CalculateChecksum_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBundle provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) CreateBundle(ctx context.Context, in *gitalypb.CreateBundleRequest, opts ...grpc.CallOption) (gitalypb.RepositoryService_CreateBundleClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBundle")
	}

	var r0 gitalypb.RepositoryService_CreateBundleClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CreateBundleRequest, ...grpc.CallOption) (gitalypb.RepositoryService_CreateBundleClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CreateBundleRequest, ...grpc.CallOption) gitalypb.RepositoryService_CreateBundleClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RepositoryService_CreateBundleClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.CreateBundleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_CreateBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBundle'
type MockRepositoryServiceClient_CreateBundle_Call struct {
	*mock.Call
}

// CreateBundle is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.CreateBundleRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) CreateBundle(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_CreateBundle_Call {
	return &MockRepositoryServiceClient_CreateBundle_Call{Call: _e.mock.On("CreateBundle",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_CreateBundle_Call) Run(run func(ctx context.Context, in *gitalypb.CreateBundleRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_CreateBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.CreateBundleRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_CreateBundle_Call) Return(_a0 gitalypb.RepositoryService_CreateBundleClient, _a1 error) *MockRepositoryServiceClient_CreateBundle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_CreateBundle_Call) RunAndReturn(run func(context.Context, *gitalypb.CreateBundleRequest, ...grpc.CallOption) (gitalypb.RepositoryService_CreateBundleClient, error)) *MockRepositoryServiceClient_CreateBundle_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBundleFromRefList provides a mock function with given fields: ctx, opts
func (_m *MockRepositoryServiceClient) CreateBundleFromRefList(ctx context.Context, opts ...grpc.CallOption) (gitalypb.RepositoryService_CreateBundleFromRefListClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBundleFromRefList")
	}

	var r0 gitalypb.RepositoryService_CreateBundleFromRefListClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (gitalypb.RepositoryService_CreateBundleFromRefListClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) gitalypb.RepositoryService_CreateBundleFromRefListClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RepositoryService_CreateBundleFromRefListClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_CreateBundleFromRefList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBundleFromRefList'
type MockRepositoryServiceClient_CreateBundleFromRefList_Call struct {
	*mock.Call
}

// CreateBundleFromRefList is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) CreateBundleFromRefList(ctx interface{}, opts ...interface{}) *MockRepositoryServiceClient_CreateBundleFromRefList_Call {
	return &MockRepositoryServiceClient_CreateBundleFromRefList_Call{Call: _e.mock.On("CreateBundleFromRefList",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_CreateBundleFromRefList_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockRepositoryServiceClient_CreateBundleFromRefList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_CreateBundleFromRefList_Call) Return(_a0 gitalypb.RepositoryService_CreateBundleFromRefListClient, _a1 error) *MockRepositoryServiceClient_CreateBundleFromRefList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_CreateBundleFromRefList_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (gitalypb.RepositoryService_CreateBundleFromRefListClient, error)) *MockRepositoryServiceClient_CreateBundleFromRefList_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFork provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) CreateFork(ctx context.Context, in *gitalypb.CreateForkRequest, opts ...grpc.CallOption) (*gitalypb.CreateForkResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFork")
	}

	var r0 *gitalypb.CreateForkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CreateForkRequest, ...grpc.CallOption) (*gitalypb.CreateForkResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CreateForkRequest, ...grpc.CallOption) *gitalypb.CreateForkResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.CreateForkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.CreateForkRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_CreateFork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFork'
type MockRepositoryServiceClient_CreateFork_Call struct {
	*mock.Call
}

// CreateFork is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.CreateForkRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) CreateFork(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_CreateFork_Call {
	return &MockRepositoryServiceClient_CreateFork_Call{Call: _e.mock.On("CreateFork",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_CreateFork_Call) Run(run func(ctx context.Context, in *gitalypb.CreateForkRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_CreateFork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.CreateForkRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_CreateFork_Call) Return(_a0 *gitalypb.CreateForkResponse, _a1 error) *MockRepositoryServiceClient_CreateFork_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_CreateFork_Call) RunAndReturn(run func(context.Context, *gitalypb.CreateForkRequest, ...grpc.CallOption) (*gitalypb.CreateForkResponse, error)) *MockRepositoryServiceClient_CreateFork_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRepository provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) CreateRepository(ctx context.Context, in *gitalypb.CreateRepositoryRequest, opts ...grpc.CallOption) (*gitalypb.CreateRepositoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepository")
	}

	var r0 *gitalypb.CreateRepositoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CreateRepositoryRequest, ...grpc.CallOption) (*gitalypb.CreateRepositoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CreateRepositoryRequest, ...grpc.CallOption) *gitalypb.CreateRepositoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.CreateRepositoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.CreateRepositoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_CreateRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRepository'
type MockRepositoryServiceClient_CreateRepository_Call struct {
	*mock.Call
}

// CreateRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.CreateRepositoryRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) CreateRepository(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_CreateRepository_Call {
	return &MockRepositoryServiceClient_CreateRepository_Call{Call: _e.mock.On("CreateRepository",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_CreateRepository_Call) Run(run func(ctx context.Context, in *gitalypb.CreateRepositoryRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_CreateRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.CreateRepositoryRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_CreateRepository_Call) Return(_a0 *gitalypb.CreateRepositoryResponse, _a1 error) *MockRepositoryServiceClient_CreateRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_CreateRepository_Call) RunAndReturn(run func(context.Context, *gitalypb.CreateRepositoryRequest, ...grpc.CallOption) (*gitalypb.CreateRepositoryResponse, error)) *MockRepositoryServiceClient_CreateRepository_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRepositoryFromBundle provides a mock function with given fields: ctx, opts
func (_m *MockRepositoryServiceClient) CreateRepositoryFromBundle(ctx context.Context, opts ...grpc.CallOption) (gitalypb.RepositoryService_CreateRepositoryFromBundleClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepositoryFromBundle")
	}

	var r0 gitalypb.RepositoryService_CreateRepositoryFromBundleClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (gitalypb.RepositoryService_CreateRepositoryFromBundleClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) gitalypb.RepositoryService_CreateRepositoryFromBundleClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RepositoryService_CreateRepositoryFromBundleClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_CreateRepositoryFromBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRepositoryFromBundle'
type MockRepositoryServiceClient_CreateRepositoryFromBundle_Call struct {
	*mock.Call
}

// CreateRepositoryFromBundle is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) CreateRepositoryFromBundle(ctx interface{}, opts ...interface{}) *MockRepositoryServiceClient_CreateRepositoryFromBundle_Call {
	return &MockRepositoryServiceClient_CreateRepositoryFromBundle_Call{Call: _e.mock.On("CreateRepositoryFromBundle",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_CreateRepositoryFromBundle_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockRepositoryServiceClient_CreateRepositoryFromBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_CreateRepositoryFromBundle_Call) Return(_a0 gitalypb.RepositoryService_CreateRepositoryFromBundleClient, _a1 error) *MockRepositoryServiceClient_CreateRepositoryFromBundle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_CreateRepositoryFromBundle_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (gitalypb.RepositoryService_CreateRepositoryFromBundleClient, error)) *MockRepositoryServiceClient_CreateRepositoryFromBundle_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRepositoryFromSnapshot provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) CreateRepositoryFromSnapshot(ctx context.Context, in *gitalypb.CreateRepositoryFromSnapshotRequest, opts ...grpc.CallOption) (*gitalypb.CreateRepositoryFromSnapshotResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepositoryFromSnapshot")
	}

	var r0 *gitalypb.CreateRepositoryFromSnapshotResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CreateRepositoryFromSnapshotRequest, ...grpc.CallOption) (*gitalypb.CreateRepositoryFromSnapshotResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CreateRepositoryFromSnapshotRequest, ...grpc.CallOption) *gitalypb.CreateRepositoryFromSnapshotResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.CreateRepositoryFromSnapshotResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.CreateRepositoryFromSnapshotRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_CreateRepositoryFromSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRepositoryFromSnapshot'
type MockRepositoryServiceClient_CreateRepositoryFromSnapshot_Call struct {
	*mock.Call
}

// CreateRepositoryFromSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.CreateRepositoryFromSnapshotRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) CreateRepositoryFromSnapshot(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_CreateRepositoryFromSnapshot_Call {
	return &MockRepositoryServiceClient_CreateRepositoryFromSnapshot_Call{Call: _e.mock.On("CreateRepositoryFromSnapshot",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_CreateRepositoryFromSnapshot_Call) Run(run func(ctx context.Context, in *gitalypb.CreateRepositoryFromSnapshotRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_CreateRepositoryFromSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.CreateRepositoryFromSnapshotRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_CreateRepositoryFromSnapshot_Call) Return(_a0 *gitalypb.CreateRepositoryFromSnapshotResponse, _a1 error) *MockRepositoryServiceClient_CreateRepositoryFromSnapshot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_CreateRepositoryFromSnapshot_Call) RunAndReturn(run func(context.Context, *gitalypb.CreateRepositoryFromSnapshotRequest, ...grpc.CallOption) (*gitalypb.CreateRepositoryFromSnapshotResponse, error)) *MockRepositoryServiceClient_CreateRepositoryFromSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRepositoryFromURL provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) CreateRepositoryFromURL(ctx context.Context, in *gitalypb.CreateRepositoryFromURLRequest, opts ...grpc.CallOption) (*gitalypb.CreateRepositoryFromURLResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepositoryFromURL")
	}

	var r0 *gitalypb.CreateRepositoryFromURLResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CreateRepositoryFromURLRequest, ...grpc.CallOption) (*gitalypb.CreateRepositoryFromURLResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.CreateRepositoryFromURLRequest, ...grpc.CallOption) *gitalypb.CreateRepositoryFromURLResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.CreateRepositoryFromURLResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.CreateRepositoryFromURLRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_CreateRepositoryFromURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRepositoryFromURL'
type MockRepositoryServiceClient_CreateRepositoryFromURL_Call struct {
	*mock.Call
}

// CreateRepositoryFromURL is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.CreateRepositoryFromURLRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) CreateRepositoryFromURL(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_CreateRepositoryFromURL_Call {
	return &MockRepositoryServiceClient_CreateRepositoryFromURL_Call{Call: _e.mock.On("CreateRepositoryFromURL",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_CreateRepositoryFromURL_Call) Run(run func(ctx context.Context, in *gitalypb.CreateRepositoryFromURLRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_CreateRepositoryFromURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.CreateRepositoryFromURLRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_CreateRepositoryFromURL_Call) Return(_a0 *gitalypb.CreateRepositoryFromURLResponse, _a1 error) *MockRepositoryServiceClient_CreateRepositoryFromURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_CreateRepositoryFromURL_Call) RunAndReturn(run func(context.Context, *gitalypb.CreateRepositoryFromURLRequest, ...grpc.CallOption) (*gitalypb.CreateRepositoryFromURLResponse, error)) *MockRepositoryServiceClient_CreateRepositoryFromURL_Call {
	_c.Call.Return(run)
	return _c
}

// FetchBundle provides a mock function with given fields: ctx, opts
func (_m *MockRepositoryServiceClient) FetchBundle(ctx context.Context, opts ...grpc.CallOption) (gitalypb.RepositoryService_FetchBundleClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FetchBundle")
	}

	var r0 gitalypb.RepositoryService_FetchBundleClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (gitalypb.RepositoryService_FetchBundleClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) gitalypb.RepositoryService_FetchBundleClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RepositoryService_FetchBundleClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_FetchBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchBundle'
type MockRepositoryServiceClient_FetchBundle_Call struct {
	*mock.Call
}

// FetchBundle is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) FetchBundle(ctx interface{}, opts ...interface{}) *MockRepositoryServiceClient_FetchBundle_Call {
	return &MockRepositoryServiceClient_FetchBundle_Call{Call: _e.mock.On("FetchBundle",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_FetchBundle_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockRepositoryServiceClient_FetchBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_FetchBundle_Call) Return(_a0 gitalypb.RepositoryService_FetchBundleClient, _a1 error) *MockRepositoryServiceClient_FetchBundle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_FetchBundle_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (gitalypb.RepositoryService_FetchBundleClient, error)) *MockRepositoryServiceClient_FetchBundle_Call {
	_c.Call.Return(run)
	return _c
}

// FetchRemote provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) FetchRemote(ctx context.Context, in *gitalypb.FetchRemoteRequest, opts ...grpc.CallOption) (*gitalypb.FetchRemoteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FetchRemote")
	}

	var r0 *gitalypb.FetchRemoteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FetchRemoteRequest, ...grpc.CallOption) (*gitalypb.FetchRemoteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FetchRemoteRequest, ...grpc.CallOption) *gitalypb.FetchRemoteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.FetchRemoteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FetchRemoteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_FetchRemote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRemote'
type MockRepositoryServiceClient_FetchRemote_Call struct {
	*mock.Call
}

// FetchRemote is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FetchRemoteRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) FetchRemote(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_FetchRemote_Call {
	return &MockRepositoryServiceClient_FetchRemote_Call{Call: _e.mock.On("FetchRemote",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_FetchRemote_Call) Run(run func(ctx context.Context, in *gitalypb.FetchRemoteRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_FetchRemote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FetchRemoteRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_FetchRemote_Call) Return(_a0 *gitalypb.FetchRemoteResponse, _a1 error) *MockRepositoryServiceClient_FetchRemote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_FetchRemote_Call) RunAndReturn(run func(context.Context, *gitalypb.FetchRemoteRequest, ...grpc.CallOption) (*gitalypb.FetchRemoteResponse, error)) *MockRepositoryServiceClient_FetchRemote_Call {
	_c.Call.Return(run)
	return _c
}

// FetchSourceBranch provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) FetchSourceBranch(ctx context.Context, in *gitalypb.FetchSourceBranchRequest, opts ...grpc.CallOption) (*gitalypb.FetchSourceBranchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FetchSourceBranch")
	}

	var r0 *gitalypb.FetchSourceBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FetchSourceBranchRequest, ...grpc.CallOption) (*gitalypb.FetchSourceBranchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FetchSourceBranchRequest, ...grpc.CallOption) *gitalypb.FetchSourceBranchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.FetchSourceBranchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FetchSourceBranchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_FetchSourceBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchSourceBranch'
type MockRepositoryServiceClient_FetchSourceBranch_Call struct {
	*mock.Call
}

// FetchSourceBranch is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FetchSourceBranchRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) FetchSourceBranch(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_FetchSourceBranch_Call {
	return &MockRepositoryServiceClient_FetchSourceBranch_Call{Call: _e.mock.On("FetchSourceBranch",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_FetchSourceBranch_Call) Run(run func(ctx context.Context, in *gitalypb.FetchSourceBranchRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_FetchSourceBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FetchSourceBranchRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_FetchSourceBranch_Call) Return(_a0 *gitalypb.FetchSourceBranchResponse, _a1 error) *MockRepositoryServiceClient_FetchSourceBranch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_FetchSourceBranch_Call) RunAndReturn(run func(context.Context, *gitalypb.FetchSourceBranchRequest, ...grpc.CallOption) (*gitalypb.FetchSourceBranchResponse, error)) *MockRepositoryServiceClient_FetchSourceBranch_Call {
	_c.Call.Return(run)
	return _c
}

// FindLicense provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) FindLicense(ctx context.Context, in *gitalypb.FindLicenseRequest, opts ...grpc.CallOption) (*gitalypb.FindLicenseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindLicense")
	}

	var r0 *gitalypb.FindLicenseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindLicenseRequest, ...grpc.CallOption) (*gitalypb.FindLicenseResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindLicenseRequest, ...grpc.CallOption) *gitalypb.FindLicenseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.FindLicenseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FindLicenseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_FindLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLicense'
type MockRepositoryServiceClient_FindLicense_Call struct {
	*mock.Call
}

// FindLicense is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FindLicenseRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) FindLicense(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_FindLicense_Call {
	return &MockRepositoryServiceClient_FindLicense_Call{Call: _e.mock.On("FindLicense",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_FindLicense_Call) Run(run func(ctx context.Context, in *gitalypb.FindLicenseRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_FindLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FindLicenseRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_FindLicense_Call) Return(_a0 *gitalypb.FindLicenseResponse, _a1 error) *MockRepositoryServiceClient_FindLicense_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_FindLicense_Call) RunAndReturn(run func(context.Context, *gitalypb.FindLicenseRequest, ...grpc.CallOption) (*gitalypb.FindLicenseResponse, error)) *MockRepositoryServiceClient_FindLicense_Call {
	_c.Call.Return(run)
	return _c
}

// FindMergeBase provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) FindMergeBase(ctx context.Context, in *gitalypb.FindMergeBaseRequest, opts ...grpc.CallOption) (*gitalypb.FindMergeBaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindMergeBase")
	}

	var r0 *gitalypb.FindMergeBaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindMergeBaseRequest, ...grpc.CallOption) (*gitalypb.FindMergeBaseResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindMergeBaseRequest, ...grpc.CallOption) *gitalypb.FindMergeBaseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.FindMergeBaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FindMergeBaseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_FindMergeBase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMergeBase'
type MockRepositoryServiceClient_FindMergeBase_Call struct {
	*mock.Call
}

// FindMergeBase is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FindMergeBaseRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) FindMergeBase(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_FindMergeBase_Call {
	return &MockRepositoryServiceClient_FindMergeBase_Call{Call: _e.mock.On("FindMergeBase",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_FindMergeBase_Call) Run(run func(ctx context.Context, in *gitalypb.FindMergeBaseRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_FindMergeBase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FindMergeBaseRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_FindMergeBase_Call) Return(_a0 *gitalypb.FindMergeBaseResponse, _a1 error) *MockRepositoryServiceClient_FindMergeBase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_FindMergeBase_Call) RunAndReturn(run func(context.Context, *gitalypb.FindMergeBaseRequest, ...grpc.CallOption) (*gitalypb.FindMergeBaseResponse, error)) *MockRepositoryServiceClient_FindMergeBase_Call {
	_c.Call.Return(run)
	return _c
}

// Fsck provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) Fsck(ctx context.Context, in *gitalypb.FsckRequest, opts ...grpc.CallOption) (*gitalypb.FsckResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Fsck")
	}

	var r0 *gitalypb.FsckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FsckRequest, ...grpc.CallOption) (*gitalypb.FsckResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FsckRequest, ...grpc.CallOption) *gitalypb.FsckResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.FsckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FsckRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_Fsck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fsck'
type MockRepositoryServiceClient_Fsck_Call struct {
	*mock.Call
}

// Fsck is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FsckRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) Fsck(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_Fsck_Call {
	return &MockRepositoryServiceClient_Fsck_Call{Call: _e.mock.On("Fsck",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_Fsck_Call) Run(run func(ctx context.Context, in *gitalypb.FsckRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_Fsck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FsckRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_Fsck_Call) Return(_a0 *gitalypb.FsckResponse, _a1 error) *MockRepositoryServiceClient_Fsck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_Fsck_Call) RunAndReturn(run func(context.Context, *gitalypb.FsckRequest, ...grpc.CallOption) (*gitalypb.FsckResponse, error)) *MockRepositoryServiceClient_Fsck_Call {
	_c.Call.Return(run)
	return _c
}

// FullPath provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) FullPath(ctx context.Context, in *gitalypb.FullPathRequest, opts ...grpc.CallOption) (*gitalypb.FullPathResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FullPath")
	}

	var r0 *gitalypb.FullPathResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FullPathRequest, ...grpc.CallOption) (*gitalypb.FullPathResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FullPathRequest, ...grpc.CallOption) *gitalypb.FullPathResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.FullPathResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FullPathRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_FullPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FullPath'
type MockRepositoryServiceClient_FullPath_Call struct {
	*mock.Call
}

// FullPath is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FullPathRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) FullPath(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_FullPath_Call {
	return &MockRepositoryServiceClient_FullPath_Call{Call: _e.mock.On("FullPath",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_FullPath_Call) Run(run func(ctx context.Context, in *gitalypb.FullPathRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_FullPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FullPathRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_FullPath_Call) Return(_a0 *gitalypb.FullPathResponse, _a1 error) *MockRepositoryServiceClient_FullPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_FullPath_Call) RunAndReturn(run func(context.Context, *gitalypb.FullPathRequest, ...grpc.CallOption) (*gitalypb.FullPathResponse, error)) *MockRepositoryServiceClient_FullPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetArchive provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) GetArchive(ctx context.Context, in *gitalypb.GetArchiveRequest, opts ...grpc.CallOption) (gitalypb.RepositoryService_GetArchiveClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetArchive")
	}

	var r0 gitalypb.RepositoryService_GetArchiveClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetArchiveRequest, ...grpc.CallOption) (gitalypb.RepositoryService_GetArchiveClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetArchiveRequest, ...grpc.CallOption) gitalypb.RepositoryService_GetArchiveClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RepositoryService_GetArchiveClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.GetArchiveRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_GetArchive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArchive'
type MockRepositoryServiceClient_GetArchive_Call struct {
	*mock.Call
}

// GetArchive is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.GetArchiveRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) GetArchive(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_GetArchive_Call {
	return &MockRepositoryServiceClient_GetArchive_Call{Call: _e.mock.On("GetArchive",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_GetArchive_Call) Run(run func(ctx context.Context, in *gitalypb.GetArchiveRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_GetArchive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.GetArchiveRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_GetArchive_Call) Return(_a0 gitalypb.RepositoryService_GetArchiveClient, _a1 error) *MockRepositoryServiceClient_GetArchive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_GetArchive_Call) RunAndReturn(run func(context.Context, *gitalypb.GetArchiveRequest, ...grpc.CallOption) (gitalypb.RepositoryService_GetArchiveClient, error)) *MockRepositoryServiceClient_GetArchive_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) GetConfig(ctx context.Context, in *gitalypb.GetConfigRequest, opts ...grpc.CallOption) (gitalypb.RepositoryService_GetConfigClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 gitalypb.RepositoryService_GetConfigClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetConfigRequest, ...grpc.CallOption) (gitalypb.RepositoryService_GetConfigClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetConfigRequest, ...grpc.CallOption) gitalypb.RepositoryService_GetConfigClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RepositoryService_GetConfigClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.GetConfigRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockRepositoryServiceClient_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.GetConfigRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) GetConfig(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_GetConfig_Call {
	return &MockRepositoryServiceClient_GetConfig_Call{Call: _e.mock.On("GetConfig",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_GetConfig_Call) Run(run func(ctx context.Context, in *gitalypb.GetConfigRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.GetConfigRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_GetConfig_Call) Return(_a0 gitalypb.RepositoryService_GetConfigClient, _a1 error) *MockRepositoryServiceClient_GetConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_GetConfig_Call) RunAndReturn(run func(context.Context, *gitalypb.GetConfigRequest, ...grpc.CallOption) (gitalypb.RepositoryService_GetConfigClient, error)) *MockRepositoryServiceClient_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomHooks provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) GetCustomHooks(ctx context.Context, in *gitalypb.GetCustomHooksRequest, opts ...grpc.CallOption) (gitalypb.RepositoryService_GetCustomHooksClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomHooks")
	}

	var r0 gitalypb.RepositoryService_GetCustomHooksClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetCustomHooksRequest, ...grpc.CallOption) (gitalypb.RepositoryService_GetCustomHooksClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetCustomHooksRequest, ...grpc.CallOption) gitalypb.RepositoryService_GetCustomHooksClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RepositoryService_GetCustomHooksClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.GetCustomHooksRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_GetCustomHooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomHooks'
type MockRepositoryServiceClient_GetCustomHooks_Call struct {
	*mock.Call
}

// GetCustomHooks is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.GetCustomHooksRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) GetCustomHooks(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_GetCustomHooks_Call {
	return &MockRepositoryServiceClient_GetCustomHooks_Call{Call: _e.mock.On("GetCustomHooks",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_GetCustomHooks_Call) Run(run func(ctx context.Context, in *gitalypb.GetCustomHooksRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_GetCustomHooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.GetCustomHooksRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_GetCustomHooks_Call) Return(_a0 gitalypb.RepositoryService_GetCustomHooksClient, _a1 error) *MockRepositoryServiceClient_GetCustomHooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_GetCustomHooks_Call) RunAndReturn(run func(context.Context, *gitalypb.GetCustomHooksRequest, ...grpc.CallOption) (gitalypb.RepositoryService_GetCustomHooksClient, error)) *MockRepositoryServiceClient_GetCustomHooks_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileAttributes provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) GetFileAttributes(ctx context.Context, in *gitalypb.GetFileAttributesRequest, opts ...grpc.CallOption) (*gitalypb.GetFileAttributesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFileAttributes")
	}

	var r0 *gitalypb.GetFileAttributesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetFileAttributesRequest, ...grpc.CallOption) (*gitalypb.GetFileAttributesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetFileAttributesRequest, ...grpc.CallOption) *gitalypb.GetFileAttributesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.GetFileAttributesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.GetFileAttributesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_GetFileAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileAttributes'
type MockRepositoryServiceClient_GetFileAttributes_Call struct {
	*mock.Call
}

// GetFileAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.GetFileAttributesRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) GetFileAttributes(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_GetFileAttributes_Call {
	return &MockRepositoryServiceClient_GetFileAttributes_Call{Call: _e.mock.On("GetFileAttributes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_GetFileAttributes_Call) Run(run func(ctx context.Context, in *gitalypb.GetFileAttributesRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_GetFileAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.GetFileAttributesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_GetFileAttributes_Call) Return(_a0 *gitalypb.GetFileAttributesResponse, _a1 error) *MockRepositoryServiceClient_GetFileAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_GetFileAttributes_Call) RunAndReturn(run func(context.Context, *gitalypb.GetFileAttributesRequest, ...grpc.CallOption) (*gitalypb.GetFileAttributesResponse, error)) *MockRepositoryServiceClient_GetFileAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetInfoAttributes provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) GetInfoAttributes(ctx context.Context, in *gitalypb.GetInfoAttributesRequest, opts ...grpc.CallOption) (gitalypb.RepositoryService_GetInfoAttributesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInfoAttributes")
	}

	var r0 gitalypb.RepositoryService_GetInfoAttributesClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetInfoAttributesRequest, ...grpc.CallOption) (gitalypb.RepositoryService_GetInfoAttributesClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetInfoAttributesRequest, ...grpc.CallOption) gitalypb.RepositoryService_GetInfoAttributesClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RepositoryService_GetInfoAttributesClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.GetInfoAttributesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_GetInfoAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInfoAttributes'
type MockRepositoryServiceClient_GetInfoAttributes_Call struct {
	*mock.Call
}

// GetInfoAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.GetInfoAttributesRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) GetInfoAttributes(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_GetInfoAttributes_Call {
	return &MockRepositoryServiceClient_GetInfoAttributes_Call{Call: _e.mock.On("GetInfoAttributes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_GetInfoAttributes_Call) Run(run func(ctx context.Context, in *gitalypb.GetInfoAttributesRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_GetInfoAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.GetInfoAttributesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_GetInfoAttributes_Call) Return(_a0 gitalypb.RepositoryService_GetInfoAttributesClient, _a1 error) *MockRepositoryServiceClient_GetInfoAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_GetInfoAttributes_Call) RunAndReturn(run func(context.Context, *gitalypb.GetInfoAttributesRequest, ...grpc.CallOption) (gitalypb.RepositoryService_GetInfoAttributesClient, error)) *MockRepositoryServiceClient_GetInfoAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// GetObjectDirectorySize provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) GetObjectDirectorySize(ctx context.Context, in *gitalypb.GetObjectDirectorySizeRequest, opts ...grpc.CallOption) (*gitalypb.GetObjectDirectorySizeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetObjectDirectorySize")
	}

	var r0 *gitalypb.GetObjectDirectorySizeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetObjectDirectorySizeRequest, ...grpc.CallOption) (*gitalypb.GetObjectDirectorySizeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetObjectDirectorySizeRequest, ...grpc.CallOption) *gitalypb.GetObjectDirectorySizeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.GetObjectDirectorySizeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.GetObjectDirectorySizeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_GetObjectDirectorySize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjectDirectorySize'
type MockRepositoryServiceClient_GetObjectDirectorySize_Call struct {
	*mock.Call
}

// GetObjectDirectorySize is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.GetObjectDirectorySizeRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) GetObjectDirectorySize(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_GetObjectDirectorySize_Call {
	return &MockRepositoryServiceClient_GetObjectDirectorySize_Call{Call: _e.mock.On("GetObjectDirectorySize",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_GetObjectDirectorySize_Call) Run(run func(ctx context.Context, in *gitalypb.GetObjectDirectorySizeRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_GetObjectDirectorySize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.GetObjectDirectorySizeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_GetObjectDirectorySize_Call) Return(_a0 *gitalypb.GetObjectDirectorySizeResponse, _a1 error) *MockRepositoryServiceClient_GetObjectDirectorySize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_GetObjectDirectorySize_Call) RunAndReturn(run func(context.Context, *gitalypb.GetObjectDirectorySizeRequest, ...grpc.CallOption) (*gitalypb.GetObjectDirectorySizeResponse, error)) *MockRepositoryServiceClient_GetObjectDirectorySize_Call {
	_c.Call.Return(run)
	return _c
}

// GetRawChanges provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) GetRawChanges(ctx context.Context, in *gitalypb.GetRawChangesRequest, opts ...grpc.CallOption) (gitalypb.RepositoryService_GetRawChangesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRawChanges")
	}

	var r0 gitalypb.RepositoryService_GetRawChangesClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetRawChangesRequest, ...grpc.CallOption) (gitalypb.RepositoryService_GetRawChangesClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetRawChangesRequest, ...grpc.CallOption) gitalypb.RepositoryService_GetRawChangesClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RepositoryService_GetRawChangesClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.GetRawChangesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_GetRawChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRawChanges'
type MockRepositoryServiceClient_GetRawChanges_Call struct {
	*mock.Call
}

// GetRawChanges is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.GetRawChangesRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) GetRawChanges(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_GetRawChanges_Call {
	return &MockRepositoryServiceClient_GetRawChanges_Call{Call: _e.mock.On("GetRawChanges",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_GetRawChanges_Call) Run(run func(ctx context.Context, in *gitalypb.GetRawChangesRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_GetRawChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.GetRawChangesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_GetRawChanges_Call) Return(_a0 gitalypb.RepositoryService_GetRawChangesClient, _a1 error) *MockRepositoryServiceClient_GetRawChanges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_GetRawChanges_Call) RunAndReturn(run func(context.Context, *gitalypb.GetRawChangesRequest, ...grpc.CallOption) (gitalypb.RepositoryService_GetRawChangesClient, error)) *MockRepositoryServiceClient_GetRawChanges_Call {
	_c.Call.Return(run)
	return _c
}

// GetSnapshot provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) GetSnapshot(ctx context.Context, in *gitalypb.GetSnapshotRequest, opts ...grpc.CallOption) (gitalypb.RepositoryService_GetSnapshotClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshot")
	}

	var r0 gitalypb.RepositoryService_GetSnapshotClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetSnapshotRequest, ...grpc.CallOption) (gitalypb.RepositoryService_GetSnapshotClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetSnapshotRequest, ...grpc.CallOption) gitalypb.RepositoryService_GetSnapshotClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RepositoryService_GetSnapshotClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.GetSnapshotRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_GetSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSnapshot'
type MockRepositoryServiceClient_GetSnapshot_Call struct {
	*mock.Call
}

// GetSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.GetSnapshotRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) GetSnapshot(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_GetSnapshot_Call {
	return &MockRepositoryServiceClient_GetSnapshot_Call{Call: _e.mock.On("GetSnapshot",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_GetSnapshot_Call) Run(run func(ctx context.Context, in *gitalypb.GetSnapshotRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_GetSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.GetSnapshotRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_GetSnapshot_Call) Return(_a0 gitalypb.RepositoryService_GetSnapshotClient, _a1 error) *MockRepositoryServiceClient_GetSnapshot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_GetSnapshot_Call) RunAndReturn(run func(context.Context, *gitalypb.GetSnapshotRequest, ...grpc.CallOption) (gitalypb.RepositoryService_GetSnapshotClient, error)) *MockRepositoryServiceClient_GetSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// HasLocalBranches provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) HasLocalBranches(ctx context.Context, in *gitalypb.HasLocalBranchesRequest, opts ...grpc.CallOption) (*gitalypb.HasLocalBranchesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for HasLocalBranches")
	}

	var r0 *gitalypb.HasLocalBranchesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.HasLocalBranchesRequest, ...grpc.CallOption) (*gitalypb.HasLocalBranchesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.HasLocalBranchesRequest, ...grpc.CallOption) *gitalypb.HasLocalBranchesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.HasLocalBranchesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.HasLocalBranchesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_HasLocalBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasLocalBranches'
type MockRepositoryServiceClient_HasLocalBranches_Call struct {
	*mock.Call
}

// HasLocalBranches is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.HasLocalBranchesRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) HasLocalBranches(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_HasLocalBranches_Call {
	return &MockRepositoryServiceClient_HasLocalBranches_Call{Call: _e.mock.On("HasLocalBranches",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_HasLocalBranches_Call) Run(run func(ctx context.Context, in *gitalypb.HasLocalBranchesRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_HasLocalBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.HasLocalBranchesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_HasLocalBranches_Call) Return(_a0 *gitalypb.HasLocalBranchesResponse, _a1 error) *MockRepositoryServiceClient_HasLocalBranches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_HasLocalBranches_Call) RunAndReturn(run func(context.Context, *gitalypb.HasLocalBranchesRequest, ...grpc.CallOption) (*gitalypb.HasLocalBranchesResponse, error)) *MockRepositoryServiceClient_HasLocalBranches_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectFormat provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) ObjectFormat(ctx context.Context, in *gitalypb.ObjectFormatRequest, opts ...grpc.CallOption) (*gitalypb.ObjectFormatResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectFormat")
	}

	var r0 *gitalypb.ObjectFormatResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ObjectFormatRequest, ...grpc.CallOption) (*gitalypb.ObjectFormatResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ObjectFormatRequest, ...grpc.CallOption) *gitalypb.ObjectFormatResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.ObjectFormatResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.ObjectFormatRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_ObjectFormat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectFormat'
type MockRepositoryServiceClient_ObjectFormat_Call struct {
	*mock.Call
}

// ObjectFormat is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.ObjectFormatRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) ObjectFormat(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_ObjectFormat_Call {
	return &MockRepositoryServiceClient_ObjectFormat_Call{Call: _e.mock.On("ObjectFormat",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_ObjectFormat_Call) Run(run func(ctx context.Context, in *gitalypb.ObjectFormatRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_ObjectFormat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.ObjectFormatRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_ObjectFormat_Call) Return(_a0 *gitalypb.ObjectFormatResponse, _a1 error) *MockRepositoryServiceClient_ObjectFormat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_ObjectFormat_Call) RunAndReturn(run func(context.Context, *gitalypb.ObjectFormatRequest, ...grpc.CallOption) (*gitalypb.ObjectFormatResponse, error)) *MockRepositoryServiceClient_ObjectFormat_Call {
	_c.Call.Return(run)
	return _c
}

// ObjectsSize provides a mock function with given fields: ctx, opts
func (_m *MockRepositoryServiceClient) ObjectsSize(ctx context.Context, opts ...grpc.CallOption) (gitalypb.RepositoryService_ObjectsSizeClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ObjectsSize")
	}

	var r0 gitalypb.RepositoryService_ObjectsSizeClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (gitalypb.RepositoryService_ObjectsSizeClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) gitalypb.RepositoryService_ObjectsSizeClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RepositoryService_ObjectsSizeClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_ObjectsSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ObjectsSize'
type MockRepositoryServiceClient_ObjectsSize_Call struct {
	*mock.Call
}

// ObjectsSize is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) ObjectsSize(ctx interface{}, opts ...interface{}) *MockRepositoryServiceClient_ObjectsSize_Call {
	return &MockRepositoryServiceClient_ObjectsSize_Call{Call: _e.mock.On("ObjectsSize",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_ObjectsSize_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockRepositoryServiceClient_ObjectsSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_ObjectsSize_Call) Return(_a0 gitalypb.RepositoryService_ObjectsSizeClient, _a1 error) *MockRepositoryServiceClient_ObjectsSize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_ObjectsSize_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (gitalypb.RepositoryService_ObjectsSizeClient, error)) *MockRepositoryServiceClient_ObjectsSize_Call {
	_c.Call.Return(run)
	return _c
}

// OptimizeRepository provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) OptimizeRepository(ctx context.Context, in *gitalypb.OptimizeRepositoryRequest, opts ...grpc.CallOption) (*gitalypb.OptimizeRepositoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OptimizeRepository")
	}

	var r0 *gitalypb.OptimizeRepositoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.OptimizeRepositoryRequest, ...grpc.CallOption) (*gitalypb.OptimizeRepositoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.OptimizeRepositoryRequest, ...grpc.CallOption) *gitalypb.OptimizeRepositoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.OptimizeRepositoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.OptimizeRepositoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_OptimizeRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OptimizeRepository'
type MockRepositoryServiceClient_OptimizeRepository_Call struct {
	*mock.Call
}

// OptimizeRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.OptimizeRepositoryRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) OptimizeRepository(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_OptimizeRepository_Call {
	return &MockRepositoryServiceClient_OptimizeRepository_Call{Call: _e.mock.On("OptimizeRepository",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_OptimizeRepository_Call) Run(run func(ctx context.Context, in *gitalypb.OptimizeRepositoryRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_OptimizeRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.OptimizeRepositoryRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_OptimizeRepository_Call) Return(_a0 *gitalypb.OptimizeRepositoryResponse, _a1 error) *MockRepositoryServiceClient_OptimizeRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_OptimizeRepository_Call) RunAndReturn(run func(context.Context, *gitalypb.OptimizeRepositoryRequest, ...grpc.CallOption) (*gitalypb.OptimizeRepositoryResponse, error)) *MockRepositoryServiceClient_OptimizeRepository_Call {
	_c.Call.Return(run)
	return _c
}

// PruneUnreachableObjects provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) PruneUnreachableObjects(ctx context.Context, in *gitalypb.PruneUnreachableObjectsRequest, opts ...grpc.CallOption) (*gitalypb.PruneUnreachableObjectsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PruneUnreachableObjects")
	}

	var r0 *gitalypb.PruneUnreachableObjectsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.PruneUnreachableObjectsRequest, ...grpc.CallOption) (*gitalypb.PruneUnreachableObjectsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.PruneUnreachableObjectsRequest, ...grpc.CallOption) *gitalypb.PruneUnreachableObjectsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.PruneUnreachableObjectsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.PruneUnreachableObjectsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_PruneUnreachableObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PruneUnreachableObjects'
type MockRepositoryServiceClient_PruneUnreachableObjects_Call struct {
	*mock.Call
}

// PruneUnreachableObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.PruneUnreachableObjectsRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) PruneUnreachableObjects(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_PruneUnreachableObjects_Call {
	return &MockRepositoryServiceClient_PruneUnreachableObjects_Call{Call: _e.mock.On("PruneUnreachableObjects",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_PruneUnreachableObjects_Call) Run(run func(ctx context.Context, in *gitalypb.PruneUnreachableObjectsRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_PruneUnreachableObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.PruneUnreachableObjectsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_PruneUnreachableObjects_Call) Return(_a0 *gitalypb.PruneUnreachableObjectsResponse, _a1 error) *MockRepositoryServiceClient_PruneUnreachableObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_PruneUnreachableObjects_Call) RunAndReturn(run func(context.Context, *gitalypb.PruneUnreachableObjectsRequest, ...grpc.CallOption) (*gitalypb.PruneUnreachableObjectsResponse, error)) *MockRepositoryServiceClient_PruneUnreachableObjects_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAll provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) RemoveAll(ctx context.Context, in *gitalypb.RemoveAllRequest, opts ...grpc.CallOption) (*gitalypb.RemoveAllResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAll")
	}

	var r0 *gitalypb.RemoveAllResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.RemoveAllRequest, ...grpc.CallOption) (*gitalypb.RemoveAllResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.RemoveAllRequest, ...grpc.CallOption) *gitalypb.RemoveAllResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.RemoveAllResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.RemoveAllRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_RemoveAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAll'
type MockRepositoryServiceClient_RemoveAll_Call struct {
	*mock.Call
}

// RemoveAll is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.RemoveAllRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) RemoveAll(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_RemoveAll_Call {
	return &MockRepositoryServiceClient_RemoveAll_Call{Call: _e.mock.On("RemoveAll",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_RemoveAll_Call) Run(run func(ctx context.Context, in *gitalypb.RemoveAllRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_RemoveAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.RemoveAllRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_RemoveAll_Call) Return(_a0 *gitalypb.RemoveAllResponse, _a1 error) *MockRepositoryServiceClient_RemoveAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_RemoveAll_Call) RunAndReturn(run func(context.Context, *gitalypb.RemoveAllRequest, ...grpc.CallOption) (*gitalypb.RemoveAllResponse, error)) *MockRepositoryServiceClient_RemoveAll_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRepository provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) RemoveRepository(ctx context.Context, in *gitalypb.RemoveRepositoryRequest, opts ...grpc.CallOption) (*gitalypb.RemoveRepositoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRepository")
	}

	var r0 *gitalypb.RemoveRepositoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.RemoveRepositoryRequest, ...grpc.CallOption) (*gitalypb.RemoveRepositoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.RemoveRepositoryRequest, ...grpc.CallOption) *gitalypb.RemoveRepositoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.RemoveRepositoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.RemoveRepositoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_RemoveRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRepository'
type MockRepositoryServiceClient_RemoveRepository_Call struct {
	*mock.Call
}

// RemoveRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.RemoveRepositoryRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) RemoveRepository(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_RemoveRepository_Call {
	return &MockRepositoryServiceClient_RemoveRepository_Call{Call: _e.mock.On("RemoveRepository",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_RemoveRepository_Call) Run(run func(ctx context.Context, in *gitalypb.RemoveRepositoryRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_RemoveRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.RemoveRepositoryRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_RemoveRepository_Call) Return(_a0 *gitalypb.RemoveRepositoryResponse, _a1 error) *MockRepositoryServiceClient_RemoveRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_RemoveRepository_Call) RunAndReturn(run func(context.Context, *gitalypb.RemoveRepositoryRequest, ...grpc.CallOption) (*gitalypb.RemoveRepositoryResponse, error)) *MockRepositoryServiceClient_RemoveRepository_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateRepository provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) ReplicateRepository(ctx context.Context, in *gitalypb.ReplicateRepositoryRequest, opts ...grpc.CallOption) (*gitalypb.ReplicateRepositoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReplicateRepository")
	}

	var r0 *gitalypb.ReplicateRepositoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ReplicateRepositoryRequest, ...grpc.CallOption) (*gitalypb.ReplicateRepositoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ReplicateRepositoryRequest, ...grpc.CallOption) *gitalypb.ReplicateRepositoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.ReplicateRepositoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.ReplicateRepositoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_ReplicateRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateRepository'
type MockRepositoryServiceClient_ReplicateRepository_Call struct {
	*mock.Call
}

// ReplicateRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.ReplicateRepositoryRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) ReplicateRepository(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_ReplicateRepository_Call {
	return &MockRepositoryServiceClient_ReplicateRepository_Call{Call: _e.mock.On("ReplicateRepository",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_ReplicateRepository_Call) Run(run func(ctx context.Context, in *gitalypb.ReplicateRepositoryRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_ReplicateRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.ReplicateRepositoryRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_ReplicateRepository_Call) Return(_a0 *gitalypb.ReplicateRepositoryResponse, _a1 error) *MockRepositoryServiceClient_ReplicateRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_ReplicateRepository_Call) RunAndReturn(run func(context.Context, *gitalypb.ReplicateRepositoryRequest, ...grpc.CallOption) (*gitalypb.ReplicateRepositoryResponse, error)) *MockRepositoryServiceClient_ReplicateRepository_Call {
	_c.Call.Return(run)
	return _c
}

// RepositoryExists provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) RepositoryExists(ctx context.Context, in *gitalypb.RepositoryExistsRequest, opts ...grpc.CallOption) (*gitalypb.RepositoryExistsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryExists")
	}

	var r0 *gitalypb.RepositoryExistsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.RepositoryExistsRequest, ...grpc.CallOption) (*gitalypb.RepositoryExistsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.RepositoryExistsRequest, ...grpc.CallOption) *gitalypb.RepositoryExistsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.RepositoryExistsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.RepositoryExistsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_RepositoryExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RepositoryExists'
type MockRepositoryServiceClient_RepositoryExists_Call struct {
	*mock.Call
}

// RepositoryExists is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.RepositoryExistsRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) RepositoryExists(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_RepositoryExists_Call {
	return &MockRepositoryServiceClient_RepositoryExists_Call{Call: _e.mock.On("RepositoryExists",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_RepositoryExists_Call) Run(run func(ctx context.Context, in *gitalypb.RepositoryExistsRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_RepositoryExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.RepositoryExistsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_RepositoryExists_Call) Return(_a0 *gitalypb.RepositoryExistsResponse, _a1 error) *MockRepositoryServiceClient_RepositoryExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_RepositoryExists_Call) RunAndReturn(run func(context.Context, *gitalypb.RepositoryExistsRequest, ...grpc.CallOption) (*gitalypb.RepositoryExistsResponse, error)) *MockRepositoryServiceClient_RepositoryExists_Call {
	_c.Call.Return(run)
	return _c
}

// RepositoryInfo provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) RepositoryInfo(ctx context.Context, in *gitalypb.RepositoryInfoRequest, opts ...grpc.CallOption) (*gitalypb.RepositoryInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepositoryInfo")
	}

	var r0 *gitalypb.RepositoryInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.RepositoryInfoRequest, ...grpc.CallOption) (*gitalypb.RepositoryInfoResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.RepositoryInfoRequest, ...grpc.CallOption) *gitalypb.RepositoryInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.RepositoryInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.RepositoryInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_RepositoryInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RepositoryInfo'
type MockRepositoryServiceClient_RepositoryInfo_Call struct {
	*mock.Call
}

// RepositoryInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.RepositoryInfoRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) RepositoryInfo(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_RepositoryInfo_Call {
	return &MockRepositoryServiceClient_RepositoryInfo_Call{Call: _e.mock.On("RepositoryInfo",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_RepositoryInfo_Call) Run(run func(ctx context.Context, in *gitalypb.RepositoryInfoRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_RepositoryInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.RepositoryInfoRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_RepositoryInfo_Call) Return(_a0 *gitalypb.RepositoryInfoResponse, _a1 error) *MockRepositoryServiceClient_RepositoryInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_RepositoryInfo_Call) RunAndReturn(run func(context.Context, *gitalypb.RepositoryInfoRequest, ...grpc.CallOption) (*gitalypb.RepositoryInfoResponse, error)) *MockRepositoryServiceClient_RepositoryInfo_Call {
	_c.Call.Return(run)
	return _c
}

// RepositorySize provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) RepositorySize(ctx context.Context, in *gitalypb.RepositorySizeRequest, opts ...grpc.CallOption) (*gitalypb.RepositorySizeResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RepositorySize")
	}

	var r0 *gitalypb.RepositorySizeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.RepositorySizeRequest, ...grpc.CallOption) (*gitalypb.RepositorySizeResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.RepositorySizeRequest, ...grpc.CallOption) *gitalypb.RepositorySizeResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.RepositorySizeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.RepositorySizeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_RepositorySize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RepositorySize'
type MockRepositoryServiceClient_RepositorySize_Call struct {
	*mock.Call
}

// RepositorySize is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.RepositorySizeRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) RepositorySize(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_RepositorySize_Call {
	return &MockRepositoryServiceClient_RepositorySize_Call{Call: _e.mock.On("RepositorySize",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_RepositorySize_Call) Run(run func(ctx context.Context, in *gitalypb.RepositorySizeRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_RepositorySize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.RepositorySizeRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_RepositorySize_Call) Return(_a0 *gitalypb.RepositorySizeResponse, _a1 error) *MockRepositoryServiceClient_RepositorySize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_RepositorySize_Call) RunAndReturn(run func(context.Context, *gitalypb.RepositorySizeRequest, ...grpc.CallOption) (*gitalypb.RepositorySizeResponse, error)) *MockRepositoryServiceClient_RepositorySize_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreCustomHooks provides a mock function with given fields: ctx, opts
func (_m *MockRepositoryServiceClient) RestoreCustomHooks(ctx context.Context, opts ...grpc.CallOption) (gitalypb.RepositoryService_RestoreCustomHooksClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreCustomHooks")
	}

	var r0 gitalypb.RepositoryService_RestoreCustomHooksClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (gitalypb.RepositoryService_RestoreCustomHooksClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) gitalypb.RepositoryService_RestoreCustomHooksClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RepositoryService_RestoreCustomHooksClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_RestoreCustomHooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreCustomHooks'
type MockRepositoryServiceClient_RestoreCustomHooks_Call struct {
	*mock.Call
}

// RestoreCustomHooks is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) RestoreCustomHooks(ctx interface{}, opts ...interface{}) *MockRepositoryServiceClient_RestoreCustomHooks_Call {
	return &MockRepositoryServiceClient_RestoreCustomHooks_Call{Call: _e.mock.On("RestoreCustomHooks",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_RestoreCustomHooks_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockRepositoryServiceClient_RestoreCustomHooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_RestoreCustomHooks_Call) Return(_a0 gitalypb.RepositoryService_RestoreCustomHooksClient, _a1 error) *MockRepositoryServiceClient_RestoreCustomHooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_RestoreCustomHooks_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (gitalypb.RepositoryService_RestoreCustomHooksClient, error)) *MockRepositoryServiceClient_RestoreCustomHooks_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreRepository provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) RestoreRepository(ctx context.Context, in *gitalypb.RestoreRepositoryRequest, opts ...grpc.CallOption) (*gitalypb.RestoreRepositoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreRepository")
	}

	var r0 *gitalypb.RestoreRepositoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.RestoreRepositoryRequest, ...grpc.CallOption) (*gitalypb.RestoreRepositoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.RestoreRepositoryRequest, ...grpc.CallOption) *gitalypb.RestoreRepositoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.RestoreRepositoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.RestoreRepositoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_RestoreRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreRepository'
type MockRepositoryServiceClient_RestoreRepository_Call struct {
	*mock.Call
}

// RestoreRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.RestoreRepositoryRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) RestoreRepository(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_RestoreRepository_Call {
	return &MockRepositoryServiceClient_RestoreRepository_Call{Call: _e.mock.On("RestoreRepository",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_RestoreRepository_Call) Run(run func(ctx context.Context, in *gitalypb.RestoreRepositoryRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_RestoreRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.RestoreRepositoryRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_RestoreRepository_Call) Return(_a0 *gitalypb.RestoreRepositoryResponse, _a1 error) *MockRepositoryServiceClient_RestoreRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_RestoreRepository_Call) RunAndReturn(run func(context.Context, *gitalypb.RestoreRepositoryRequest, ...grpc.CallOption) (*gitalypb.RestoreRepositoryResponse, error)) *MockRepositoryServiceClient_RestoreRepository_Call {
	_c.Call.Return(run)
	return _c
}

// SearchFilesByContent provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) SearchFilesByContent(ctx context.Context, in *gitalypb.SearchFilesByContentRequest, opts ...grpc.CallOption) (gitalypb.RepositoryService_SearchFilesByContentClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchFilesByContent")
	}

	var r0 gitalypb.RepositoryService_SearchFilesByContentClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.SearchFilesByContentRequest, ...grpc.CallOption) (gitalypb.RepositoryService_SearchFilesByContentClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.SearchFilesByContentRequest, ...grpc.CallOption) gitalypb.RepositoryService_SearchFilesByContentClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RepositoryService_SearchFilesByContentClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.SearchFilesByContentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_SearchFilesByContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchFilesByContent'
type MockRepositoryServiceClient_SearchFilesByContent_Call struct {
	*mock.Call
}

// SearchFilesByContent is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.SearchFilesByContentRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) SearchFilesByContent(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_SearchFilesByContent_Call {
	return &MockRepositoryServiceClient_SearchFilesByContent_Call{Call: _e.mock.On("SearchFilesByContent",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_SearchFilesByContent_Call) Run(run func(ctx context.Context, in *gitalypb.SearchFilesByContentRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_SearchFilesByContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.SearchFilesByContentRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_SearchFilesByContent_Call) Return(_a0 gitalypb.RepositoryService_SearchFilesByContentClient, _a1 error) *MockRepositoryServiceClient_SearchFilesByContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_SearchFilesByContent_Call) RunAndReturn(run func(context.Context, *gitalypb.SearchFilesByContentRequest, ...grpc.CallOption) (gitalypb.RepositoryService_SearchFilesByContentClient, error)) *MockRepositoryServiceClient_SearchFilesByContent_Call {
	_c.Call.Return(run)
	return _c
}

// SearchFilesByName provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) SearchFilesByName(ctx context.Context, in *gitalypb.SearchFilesByNameRequest, opts ...grpc.CallOption) (gitalypb.RepositoryService_SearchFilesByNameClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchFilesByName")
	}

	var r0 gitalypb.RepositoryService_SearchFilesByNameClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.SearchFilesByNameRequest, ...grpc.CallOption) (gitalypb.RepositoryService_SearchFilesByNameClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.SearchFilesByNameRequest, ...grpc.CallOption) gitalypb.RepositoryService_SearchFilesByNameClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RepositoryService_SearchFilesByNameClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.SearchFilesByNameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_SearchFilesByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchFilesByName'
type MockRepositoryServiceClient_SearchFilesByName_Call struct {
	*mock.Call
}

// SearchFilesByName is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.SearchFilesByNameRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) SearchFilesByName(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_SearchFilesByName_Call {
	return &MockRepositoryServiceClient_SearchFilesByName_Call{Call: _e.mock.On("SearchFilesByName",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_SearchFilesByName_Call) Run(run func(ctx context.Context, in *gitalypb.SearchFilesByNameRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_SearchFilesByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.SearchFilesByNameRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_SearchFilesByName_Call) Return(_a0 gitalypb.RepositoryService_SearchFilesByNameClient, _a1 error) *MockRepositoryServiceClient_SearchFilesByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_SearchFilesByName_Call) RunAndReturn(run func(context.Context, *gitalypb.SearchFilesByNameRequest, ...grpc.CallOption) (gitalypb.RepositoryService_SearchFilesByNameClient, error)) *MockRepositoryServiceClient_SearchFilesByName_Call {
	_c.Call.Return(run)
	return _c
}

// SetCustomHooks provides a mock function with given fields: ctx, opts
func (_m *MockRepositoryServiceClient) SetCustomHooks(ctx context.Context, opts ...grpc.CallOption) (gitalypb.RepositoryService_SetCustomHooksClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetCustomHooks")
	}

	var r0 gitalypb.RepositoryService_SetCustomHooksClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (gitalypb.RepositoryService_SetCustomHooksClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) gitalypb.RepositoryService_SetCustomHooksClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RepositoryService_SetCustomHooksClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_SetCustomHooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCustomHooks'
type MockRepositoryServiceClient_SetCustomHooks_Call struct {
	*mock.Call
}

// SetCustomHooks is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) SetCustomHooks(ctx interface{}, opts ...interface{}) *MockRepositoryServiceClient_SetCustomHooks_Call {
	return &MockRepositoryServiceClient_SetCustomHooks_Call{Call: _e.mock.On("SetCustomHooks",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_SetCustomHooks_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockRepositoryServiceClient_SetCustomHooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_SetCustomHooks_Call) Return(_a0 gitalypb.RepositoryService_SetCustomHooksClient, _a1 error) *MockRepositoryServiceClient_SetCustomHooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_SetCustomHooks_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (gitalypb.RepositoryService_SetCustomHooksClient, error)) *MockRepositoryServiceClient_SetCustomHooks_Call {
	_c.Call.Return(run)
	return _c
}

// SetFullPath provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) SetFullPath(ctx context.Context, in *gitalypb.SetFullPathRequest, opts ...grpc.CallOption) (*gitalypb.SetFullPathResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetFullPath")
	}

	var r0 *gitalypb.SetFullPathResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.SetFullPathRequest, ...grpc.CallOption) (*gitalypb.SetFullPathResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.SetFullPathRequest, ...grpc.CallOption) *gitalypb.SetFullPathResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.SetFullPathResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.SetFullPathRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_SetFullPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFullPath'
type MockRepositoryServiceClient_SetFullPath_Call struct {
	*mock.Call
}

// SetFullPath is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.SetFullPathRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) SetFullPath(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_SetFullPath_Call {
	return &MockRepositoryServiceClient_SetFullPath_Call{Call: _e.mock.On("SetFullPath",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_SetFullPath_Call) Run(run func(ctx context.Context, in *gitalypb.SetFullPathRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_SetFullPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.SetFullPathRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_SetFullPath_Call) Return(_a0 *gitalypb.SetFullPathResponse, _a1 error) *MockRepositoryServiceClient_SetFullPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_SetFullPath_Call) RunAndReturn(run func(context.Context, *gitalypb.SetFullPathRequest, ...grpc.CallOption) (*gitalypb.SetFullPathResponse, error)) *MockRepositoryServiceClient_SetFullPath_Call {
	_c.Call.Return(run)
	return _c
}

// WriteRef provides a mock function with given fields: ctx, in, opts
func (_m *MockRepositoryServiceClient) WriteRef(ctx context.Context, in *gitalypb.WriteRefRequest, opts ...grpc.CallOption) (*gitalypb.WriteRefResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WriteRef")
	}

	var r0 *gitalypb.WriteRefResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.WriteRefRequest, ...grpc.CallOption) (*gitalypb.WriteRefResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.WriteRefRequest, ...grpc.CallOption) *gitalypb.WriteRefResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.WriteRefResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.WriteRefRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryServiceClient_WriteRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteRef'
type MockRepositoryServiceClient_WriteRef_Call struct {
	*mock.Call
}

// WriteRef is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.WriteRefRequest
//   - opts ...grpc.CallOption
func (_e *MockRepositoryServiceClient_Expecter) WriteRef(ctx interface{}, in interface{}, opts ...interface{}) *MockRepositoryServiceClient_WriteRef_Call {
	return &MockRepositoryServiceClient_WriteRef_Call{Call: _e.mock.On("WriteRef",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRepositoryServiceClient_WriteRef_Call) Run(run func(ctx context.Context, in *gitalypb.WriteRefRequest, opts ...grpc.CallOption)) *MockRepositoryServiceClient_WriteRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.WriteRefRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoryServiceClient_WriteRef_Call) Return(_a0 *gitalypb.WriteRefResponse, _a1 error) *MockRepositoryServiceClient_WriteRef_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryServiceClient_WriteRef_Call) RunAndReturn(run func(context.Context, *gitalypb.WriteRefRequest, ...grpc.CallOption) (*gitalypb.WriteRefResponse, error)) *MockRepositoryServiceClient_WriteRef_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepositoryServiceClient creates a new instance of MockRepositoryServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoryServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoryServiceClient {
	mock := &MockRepositoryServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

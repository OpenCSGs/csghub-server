// Code generated by mockery v2.53.0. DO NOT EDIT.

package gitalypb

import (
	context "context"

	gitalypb "gitlab.com/gitlab-org/gitaly/v16/proto/go/gitalypb"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockOperationServiceClient is an autogenerated mock type for the OperationServiceClient type
type MockOperationServiceClient struct {
	mock.Mock
}

type MockOperationServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOperationServiceClient) EXPECT() *MockOperationServiceClient_Expecter {
	return &MockOperationServiceClient_Expecter{mock: &_m.Mock}
}

// UserApplyPatch provides a mock function with given fields: ctx, opts
func (_m *MockOperationServiceClient) UserApplyPatch(ctx context.Context, opts ...grpc.CallOption) (gitalypb.OperationService_UserApplyPatchClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserApplyPatch")
	}

	var r0 gitalypb.OperationService_UserApplyPatchClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (gitalypb.OperationService_UserApplyPatchClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) gitalypb.OperationService_UserApplyPatchClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.OperationService_UserApplyPatchClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationServiceClient_UserApplyPatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserApplyPatch'
type MockOperationServiceClient_UserApplyPatch_Call struct {
	*mock.Call
}

// UserApplyPatch is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockOperationServiceClient_Expecter) UserApplyPatch(ctx interface{}, opts ...interface{}) *MockOperationServiceClient_UserApplyPatch_Call {
	return &MockOperationServiceClient_UserApplyPatch_Call{Call: _e.mock.On("UserApplyPatch",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockOperationServiceClient_UserApplyPatch_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockOperationServiceClient_UserApplyPatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockOperationServiceClient_UserApplyPatch_Call) Return(_a0 gitalypb.OperationService_UserApplyPatchClient, _a1 error) *MockOperationServiceClient_UserApplyPatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationServiceClient_UserApplyPatch_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (gitalypb.OperationService_UserApplyPatchClient, error)) *MockOperationServiceClient_UserApplyPatch_Call {
	_c.Call.Return(run)
	return _c
}

// UserCherryPick provides a mock function with given fields: ctx, in, opts
func (_m *MockOperationServiceClient) UserCherryPick(ctx context.Context, in *gitalypb.UserCherryPickRequest, opts ...grpc.CallOption) (*gitalypb.UserCherryPickResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserCherryPick")
	}

	var r0 *gitalypb.UserCherryPickResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserCherryPickRequest, ...grpc.CallOption) (*gitalypb.UserCherryPickResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserCherryPickRequest, ...grpc.CallOption) *gitalypb.UserCherryPickResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.UserCherryPickResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.UserCherryPickRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationServiceClient_UserCherryPick_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserCherryPick'
type MockOperationServiceClient_UserCherryPick_Call struct {
	*mock.Call
}

// UserCherryPick is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.UserCherryPickRequest
//   - opts ...grpc.CallOption
func (_e *MockOperationServiceClient_Expecter) UserCherryPick(ctx interface{}, in interface{}, opts ...interface{}) *MockOperationServiceClient_UserCherryPick_Call {
	return &MockOperationServiceClient_UserCherryPick_Call{Call: _e.mock.On("UserCherryPick",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOperationServiceClient_UserCherryPick_Call) Run(run func(ctx context.Context, in *gitalypb.UserCherryPickRequest, opts ...grpc.CallOption)) *MockOperationServiceClient_UserCherryPick_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.UserCherryPickRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockOperationServiceClient_UserCherryPick_Call) Return(_a0 *gitalypb.UserCherryPickResponse, _a1 error) *MockOperationServiceClient_UserCherryPick_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationServiceClient_UserCherryPick_Call) RunAndReturn(run func(context.Context, *gitalypb.UserCherryPickRequest, ...grpc.CallOption) (*gitalypb.UserCherryPickResponse, error)) *MockOperationServiceClient_UserCherryPick_Call {
	_c.Call.Return(run)
	return _c
}

// UserCommitFiles provides a mock function with given fields: ctx, opts
func (_m *MockOperationServiceClient) UserCommitFiles(ctx context.Context, opts ...grpc.CallOption) (gitalypb.OperationService_UserCommitFilesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserCommitFiles")
	}

	var r0 gitalypb.OperationService_UserCommitFilesClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (gitalypb.OperationService_UserCommitFilesClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) gitalypb.OperationService_UserCommitFilesClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.OperationService_UserCommitFilesClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationServiceClient_UserCommitFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserCommitFiles'
type MockOperationServiceClient_UserCommitFiles_Call struct {
	*mock.Call
}

// UserCommitFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockOperationServiceClient_Expecter) UserCommitFiles(ctx interface{}, opts ...interface{}) *MockOperationServiceClient_UserCommitFiles_Call {
	return &MockOperationServiceClient_UserCommitFiles_Call{Call: _e.mock.On("UserCommitFiles",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockOperationServiceClient_UserCommitFiles_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockOperationServiceClient_UserCommitFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockOperationServiceClient_UserCommitFiles_Call) Return(_a0 gitalypb.OperationService_UserCommitFilesClient, _a1 error) *MockOperationServiceClient_UserCommitFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationServiceClient_UserCommitFiles_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (gitalypb.OperationService_UserCommitFilesClient, error)) *MockOperationServiceClient_UserCommitFiles_Call {
	_c.Call.Return(run)
	return _c
}

// UserCreateBranch provides a mock function with given fields: ctx, in, opts
func (_m *MockOperationServiceClient) UserCreateBranch(ctx context.Context, in *gitalypb.UserCreateBranchRequest, opts ...grpc.CallOption) (*gitalypb.UserCreateBranchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserCreateBranch")
	}

	var r0 *gitalypb.UserCreateBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserCreateBranchRequest, ...grpc.CallOption) (*gitalypb.UserCreateBranchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserCreateBranchRequest, ...grpc.CallOption) *gitalypb.UserCreateBranchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.UserCreateBranchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.UserCreateBranchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationServiceClient_UserCreateBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserCreateBranch'
type MockOperationServiceClient_UserCreateBranch_Call struct {
	*mock.Call
}

// UserCreateBranch is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.UserCreateBranchRequest
//   - opts ...grpc.CallOption
func (_e *MockOperationServiceClient_Expecter) UserCreateBranch(ctx interface{}, in interface{}, opts ...interface{}) *MockOperationServiceClient_UserCreateBranch_Call {
	return &MockOperationServiceClient_UserCreateBranch_Call{Call: _e.mock.On("UserCreateBranch",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOperationServiceClient_UserCreateBranch_Call) Run(run func(ctx context.Context, in *gitalypb.UserCreateBranchRequest, opts ...grpc.CallOption)) *MockOperationServiceClient_UserCreateBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.UserCreateBranchRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockOperationServiceClient_UserCreateBranch_Call) Return(_a0 *gitalypb.UserCreateBranchResponse, _a1 error) *MockOperationServiceClient_UserCreateBranch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationServiceClient_UserCreateBranch_Call) RunAndReturn(run func(context.Context, *gitalypb.UserCreateBranchRequest, ...grpc.CallOption) (*gitalypb.UserCreateBranchResponse, error)) *MockOperationServiceClient_UserCreateBranch_Call {
	_c.Call.Return(run)
	return _c
}

// UserCreateTag provides a mock function with given fields: ctx, in, opts
func (_m *MockOperationServiceClient) UserCreateTag(ctx context.Context, in *gitalypb.UserCreateTagRequest, opts ...grpc.CallOption) (*gitalypb.UserCreateTagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserCreateTag")
	}

	var r0 *gitalypb.UserCreateTagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserCreateTagRequest, ...grpc.CallOption) (*gitalypb.UserCreateTagResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserCreateTagRequest, ...grpc.CallOption) *gitalypb.UserCreateTagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.UserCreateTagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.UserCreateTagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationServiceClient_UserCreateTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserCreateTag'
type MockOperationServiceClient_UserCreateTag_Call struct {
	*mock.Call
}

// UserCreateTag is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.UserCreateTagRequest
//   - opts ...grpc.CallOption
func (_e *MockOperationServiceClient_Expecter) UserCreateTag(ctx interface{}, in interface{}, opts ...interface{}) *MockOperationServiceClient_UserCreateTag_Call {
	return &MockOperationServiceClient_UserCreateTag_Call{Call: _e.mock.On("UserCreateTag",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOperationServiceClient_UserCreateTag_Call) Run(run func(ctx context.Context, in *gitalypb.UserCreateTagRequest, opts ...grpc.CallOption)) *MockOperationServiceClient_UserCreateTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.UserCreateTagRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockOperationServiceClient_UserCreateTag_Call) Return(_a0 *gitalypb.UserCreateTagResponse, _a1 error) *MockOperationServiceClient_UserCreateTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationServiceClient_UserCreateTag_Call) RunAndReturn(run func(context.Context, *gitalypb.UserCreateTagRequest, ...grpc.CallOption) (*gitalypb.UserCreateTagResponse, error)) *MockOperationServiceClient_UserCreateTag_Call {
	_c.Call.Return(run)
	return _c
}

// UserDeleteBranch provides a mock function with given fields: ctx, in, opts
func (_m *MockOperationServiceClient) UserDeleteBranch(ctx context.Context, in *gitalypb.UserDeleteBranchRequest, opts ...grpc.CallOption) (*gitalypb.UserDeleteBranchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserDeleteBranch")
	}

	var r0 *gitalypb.UserDeleteBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserDeleteBranchRequest, ...grpc.CallOption) (*gitalypb.UserDeleteBranchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserDeleteBranchRequest, ...grpc.CallOption) *gitalypb.UserDeleteBranchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.UserDeleteBranchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.UserDeleteBranchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationServiceClient_UserDeleteBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserDeleteBranch'
type MockOperationServiceClient_UserDeleteBranch_Call struct {
	*mock.Call
}

// UserDeleteBranch is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.UserDeleteBranchRequest
//   - opts ...grpc.CallOption
func (_e *MockOperationServiceClient_Expecter) UserDeleteBranch(ctx interface{}, in interface{}, opts ...interface{}) *MockOperationServiceClient_UserDeleteBranch_Call {
	return &MockOperationServiceClient_UserDeleteBranch_Call{Call: _e.mock.On("UserDeleteBranch",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOperationServiceClient_UserDeleteBranch_Call) Run(run func(ctx context.Context, in *gitalypb.UserDeleteBranchRequest, opts ...grpc.CallOption)) *MockOperationServiceClient_UserDeleteBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.UserDeleteBranchRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockOperationServiceClient_UserDeleteBranch_Call) Return(_a0 *gitalypb.UserDeleteBranchResponse, _a1 error) *MockOperationServiceClient_UserDeleteBranch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationServiceClient_UserDeleteBranch_Call) RunAndReturn(run func(context.Context, *gitalypb.UserDeleteBranchRequest, ...grpc.CallOption) (*gitalypb.UserDeleteBranchResponse, error)) *MockOperationServiceClient_UserDeleteBranch_Call {
	_c.Call.Return(run)
	return _c
}

// UserDeleteTag provides a mock function with given fields: ctx, in, opts
func (_m *MockOperationServiceClient) UserDeleteTag(ctx context.Context, in *gitalypb.UserDeleteTagRequest, opts ...grpc.CallOption) (*gitalypb.UserDeleteTagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserDeleteTag")
	}

	var r0 *gitalypb.UserDeleteTagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserDeleteTagRequest, ...grpc.CallOption) (*gitalypb.UserDeleteTagResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserDeleteTagRequest, ...grpc.CallOption) *gitalypb.UserDeleteTagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.UserDeleteTagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.UserDeleteTagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationServiceClient_UserDeleteTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserDeleteTag'
type MockOperationServiceClient_UserDeleteTag_Call struct {
	*mock.Call
}

// UserDeleteTag is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.UserDeleteTagRequest
//   - opts ...grpc.CallOption
func (_e *MockOperationServiceClient_Expecter) UserDeleteTag(ctx interface{}, in interface{}, opts ...interface{}) *MockOperationServiceClient_UserDeleteTag_Call {
	return &MockOperationServiceClient_UserDeleteTag_Call{Call: _e.mock.On("UserDeleteTag",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOperationServiceClient_UserDeleteTag_Call) Run(run func(ctx context.Context, in *gitalypb.UserDeleteTagRequest, opts ...grpc.CallOption)) *MockOperationServiceClient_UserDeleteTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.UserDeleteTagRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockOperationServiceClient_UserDeleteTag_Call) Return(_a0 *gitalypb.UserDeleteTagResponse, _a1 error) *MockOperationServiceClient_UserDeleteTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationServiceClient_UserDeleteTag_Call) RunAndReturn(run func(context.Context, *gitalypb.UserDeleteTagRequest, ...grpc.CallOption) (*gitalypb.UserDeleteTagResponse, error)) *MockOperationServiceClient_UserDeleteTag_Call {
	_c.Call.Return(run)
	return _c
}

// UserFFBranch provides a mock function with given fields: ctx, in, opts
func (_m *MockOperationServiceClient) UserFFBranch(ctx context.Context, in *gitalypb.UserFFBranchRequest, opts ...grpc.CallOption) (*gitalypb.UserFFBranchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserFFBranch")
	}

	var r0 *gitalypb.UserFFBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserFFBranchRequest, ...grpc.CallOption) (*gitalypb.UserFFBranchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserFFBranchRequest, ...grpc.CallOption) *gitalypb.UserFFBranchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.UserFFBranchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.UserFFBranchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationServiceClient_UserFFBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserFFBranch'
type MockOperationServiceClient_UserFFBranch_Call struct {
	*mock.Call
}

// UserFFBranch is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.UserFFBranchRequest
//   - opts ...grpc.CallOption
func (_e *MockOperationServiceClient_Expecter) UserFFBranch(ctx interface{}, in interface{}, opts ...interface{}) *MockOperationServiceClient_UserFFBranch_Call {
	return &MockOperationServiceClient_UserFFBranch_Call{Call: _e.mock.On("UserFFBranch",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOperationServiceClient_UserFFBranch_Call) Run(run func(ctx context.Context, in *gitalypb.UserFFBranchRequest, opts ...grpc.CallOption)) *MockOperationServiceClient_UserFFBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.UserFFBranchRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockOperationServiceClient_UserFFBranch_Call) Return(_a0 *gitalypb.UserFFBranchResponse, _a1 error) *MockOperationServiceClient_UserFFBranch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationServiceClient_UserFFBranch_Call) RunAndReturn(run func(context.Context, *gitalypb.UserFFBranchRequest, ...grpc.CallOption) (*gitalypb.UserFFBranchResponse, error)) *MockOperationServiceClient_UserFFBranch_Call {
	_c.Call.Return(run)
	return _c
}

// UserMergeBranch provides a mock function with given fields: ctx, opts
func (_m *MockOperationServiceClient) UserMergeBranch(ctx context.Context, opts ...grpc.CallOption) (gitalypb.OperationService_UserMergeBranchClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserMergeBranch")
	}

	var r0 gitalypb.OperationService_UserMergeBranchClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (gitalypb.OperationService_UserMergeBranchClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) gitalypb.OperationService_UserMergeBranchClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.OperationService_UserMergeBranchClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationServiceClient_UserMergeBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserMergeBranch'
type MockOperationServiceClient_UserMergeBranch_Call struct {
	*mock.Call
}

// UserMergeBranch is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockOperationServiceClient_Expecter) UserMergeBranch(ctx interface{}, opts ...interface{}) *MockOperationServiceClient_UserMergeBranch_Call {
	return &MockOperationServiceClient_UserMergeBranch_Call{Call: _e.mock.On("UserMergeBranch",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockOperationServiceClient_UserMergeBranch_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockOperationServiceClient_UserMergeBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockOperationServiceClient_UserMergeBranch_Call) Return(_a0 gitalypb.OperationService_UserMergeBranchClient, _a1 error) *MockOperationServiceClient_UserMergeBranch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationServiceClient_UserMergeBranch_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (gitalypb.OperationService_UserMergeBranchClient, error)) *MockOperationServiceClient_UserMergeBranch_Call {
	_c.Call.Return(run)
	return _c
}

// UserMergeToRef provides a mock function with given fields: ctx, in, opts
func (_m *MockOperationServiceClient) UserMergeToRef(ctx context.Context, in *gitalypb.UserMergeToRefRequest, opts ...grpc.CallOption) (*gitalypb.UserMergeToRefResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserMergeToRef")
	}

	var r0 *gitalypb.UserMergeToRefResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserMergeToRefRequest, ...grpc.CallOption) (*gitalypb.UserMergeToRefResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserMergeToRefRequest, ...grpc.CallOption) *gitalypb.UserMergeToRefResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.UserMergeToRefResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.UserMergeToRefRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationServiceClient_UserMergeToRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserMergeToRef'
type MockOperationServiceClient_UserMergeToRef_Call struct {
	*mock.Call
}

// UserMergeToRef is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.UserMergeToRefRequest
//   - opts ...grpc.CallOption
func (_e *MockOperationServiceClient_Expecter) UserMergeToRef(ctx interface{}, in interface{}, opts ...interface{}) *MockOperationServiceClient_UserMergeToRef_Call {
	return &MockOperationServiceClient_UserMergeToRef_Call{Call: _e.mock.On("UserMergeToRef",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOperationServiceClient_UserMergeToRef_Call) Run(run func(ctx context.Context, in *gitalypb.UserMergeToRefRequest, opts ...grpc.CallOption)) *MockOperationServiceClient_UserMergeToRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.UserMergeToRefRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockOperationServiceClient_UserMergeToRef_Call) Return(_a0 *gitalypb.UserMergeToRefResponse, _a1 error) *MockOperationServiceClient_UserMergeToRef_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationServiceClient_UserMergeToRef_Call) RunAndReturn(run func(context.Context, *gitalypb.UserMergeToRefRequest, ...grpc.CallOption) (*gitalypb.UserMergeToRefResponse, error)) *MockOperationServiceClient_UserMergeToRef_Call {
	_c.Call.Return(run)
	return _c
}

// UserRebaseConfirmable provides a mock function with given fields: ctx, opts
func (_m *MockOperationServiceClient) UserRebaseConfirmable(ctx context.Context, opts ...grpc.CallOption) (gitalypb.OperationService_UserRebaseConfirmableClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserRebaseConfirmable")
	}

	var r0 gitalypb.OperationService_UserRebaseConfirmableClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (gitalypb.OperationService_UserRebaseConfirmableClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) gitalypb.OperationService_UserRebaseConfirmableClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.OperationService_UserRebaseConfirmableClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationServiceClient_UserRebaseConfirmable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserRebaseConfirmable'
type MockOperationServiceClient_UserRebaseConfirmable_Call struct {
	*mock.Call
}

// UserRebaseConfirmable is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockOperationServiceClient_Expecter) UserRebaseConfirmable(ctx interface{}, opts ...interface{}) *MockOperationServiceClient_UserRebaseConfirmable_Call {
	return &MockOperationServiceClient_UserRebaseConfirmable_Call{Call: _e.mock.On("UserRebaseConfirmable",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockOperationServiceClient_UserRebaseConfirmable_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockOperationServiceClient_UserRebaseConfirmable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockOperationServiceClient_UserRebaseConfirmable_Call) Return(_a0 gitalypb.OperationService_UserRebaseConfirmableClient, _a1 error) *MockOperationServiceClient_UserRebaseConfirmable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationServiceClient_UserRebaseConfirmable_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (gitalypb.OperationService_UserRebaseConfirmableClient, error)) *MockOperationServiceClient_UserRebaseConfirmable_Call {
	_c.Call.Return(run)
	return _c
}

// UserRebaseToRef provides a mock function with given fields: ctx, in, opts
func (_m *MockOperationServiceClient) UserRebaseToRef(ctx context.Context, in *gitalypb.UserRebaseToRefRequest, opts ...grpc.CallOption) (*gitalypb.UserRebaseToRefResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserRebaseToRef")
	}

	var r0 *gitalypb.UserRebaseToRefResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserRebaseToRefRequest, ...grpc.CallOption) (*gitalypb.UserRebaseToRefResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserRebaseToRefRequest, ...grpc.CallOption) *gitalypb.UserRebaseToRefResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.UserRebaseToRefResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.UserRebaseToRefRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationServiceClient_UserRebaseToRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserRebaseToRef'
type MockOperationServiceClient_UserRebaseToRef_Call struct {
	*mock.Call
}

// UserRebaseToRef is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.UserRebaseToRefRequest
//   - opts ...grpc.CallOption
func (_e *MockOperationServiceClient_Expecter) UserRebaseToRef(ctx interface{}, in interface{}, opts ...interface{}) *MockOperationServiceClient_UserRebaseToRef_Call {
	return &MockOperationServiceClient_UserRebaseToRef_Call{Call: _e.mock.On("UserRebaseToRef",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOperationServiceClient_UserRebaseToRef_Call) Run(run func(ctx context.Context, in *gitalypb.UserRebaseToRefRequest, opts ...grpc.CallOption)) *MockOperationServiceClient_UserRebaseToRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.UserRebaseToRefRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockOperationServiceClient_UserRebaseToRef_Call) Return(_a0 *gitalypb.UserRebaseToRefResponse, _a1 error) *MockOperationServiceClient_UserRebaseToRef_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationServiceClient_UserRebaseToRef_Call) RunAndReturn(run func(context.Context, *gitalypb.UserRebaseToRefRequest, ...grpc.CallOption) (*gitalypb.UserRebaseToRefResponse, error)) *MockOperationServiceClient_UserRebaseToRef_Call {
	_c.Call.Return(run)
	return _c
}

// UserRevert provides a mock function with given fields: ctx, in, opts
func (_m *MockOperationServiceClient) UserRevert(ctx context.Context, in *gitalypb.UserRevertRequest, opts ...grpc.CallOption) (*gitalypb.UserRevertResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserRevert")
	}

	var r0 *gitalypb.UserRevertResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserRevertRequest, ...grpc.CallOption) (*gitalypb.UserRevertResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserRevertRequest, ...grpc.CallOption) *gitalypb.UserRevertResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.UserRevertResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.UserRevertRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationServiceClient_UserRevert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserRevert'
type MockOperationServiceClient_UserRevert_Call struct {
	*mock.Call
}

// UserRevert is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.UserRevertRequest
//   - opts ...grpc.CallOption
func (_e *MockOperationServiceClient_Expecter) UserRevert(ctx interface{}, in interface{}, opts ...interface{}) *MockOperationServiceClient_UserRevert_Call {
	return &MockOperationServiceClient_UserRevert_Call{Call: _e.mock.On("UserRevert",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOperationServiceClient_UserRevert_Call) Run(run func(ctx context.Context, in *gitalypb.UserRevertRequest, opts ...grpc.CallOption)) *MockOperationServiceClient_UserRevert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.UserRevertRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockOperationServiceClient_UserRevert_Call) Return(_a0 *gitalypb.UserRevertResponse, _a1 error) *MockOperationServiceClient_UserRevert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationServiceClient_UserRevert_Call) RunAndReturn(run func(context.Context, *gitalypb.UserRevertRequest, ...grpc.CallOption) (*gitalypb.UserRevertResponse, error)) *MockOperationServiceClient_UserRevert_Call {
	_c.Call.Return(run)
	return _c
}

// UserSquash provides a mock function with given fields: ctx, in, opts
func (_m *MockOperationServiceClient) UserSquash(ctx context.Context, in *gitalypb.UserSquashRequest, opts ...grpc.CallOption) (*gitalypb.UserSquashResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserSquash")
	}

	var r0 *gitalypb.UserSquashResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserSquashRequest, ...grpc.CallOption) (*gitalypb.UserSquashResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserSquashRequest, ...grpc.CallOption) *gitalypb.UserSquashResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.UserSquashResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.UserSquashRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationServiceClient_UserSquash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserSquash'
type MockOperationServiceClient_UserSquash_Call struct {
	*mock.Call
}

// UserSquash is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.UserSquashRequest
//   - opts ...grpc.CallOption
func (_e *MockOperationServiceClient_Expecter) UserSquash(ctx interface{}, in interface{}, opts ...interface{}) *MockOperationServiceClient_UserSquash_Call {
	return &MockOperationServiceClient_UserSquash_Call{Call: _e.mock.On("UserSquash",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOperationServiceClient_UserSquash_Call) Run(run func(ctx context.Context, in *gitalypb.UserSquashRequest, opts ...grpc.CallOption)) *MockOperationServiceClient_UserSquash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.UserSquashRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockOperationServiceClient_UserSquash_Call) Return(_a0 *gitalypb.UserSquashResponse, _a1 error) *MockOperationServiceClient_UserSquash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationServiceClient_UserSquash_Call) RunAndReturn(run func(context.Context, *gitalypb.UserSquashRequest, ...grpc.CallOption) (*gitalypb.UserSquashResponse, error)) *MockOperationServiceClient_UserSquash_Call {
	_c.Call.Return(run)
	return _c
}

// UserUpdateBranch provides a mock function with given fields: ctx, in, opts
func (_m *MockOperationServiceClient) UserUpdateBranch(ctx context.Context, in *gitalypb.UserUpdateBranchRequest, opts ...grpc.CallOption) (*gitalypb.UserUpdateBranchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserUpdateBranch")
	}

	var r0 *gitalypb.UserUpdateBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserUpdateBranchRequest, ...grpc.CallOption) (*gitalypb.UserUpdateBranchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserUpdateBranchRequest, ...grpc.CallOption) *gitalypb.UserUpdateBranchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.UserUpdateBranchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.UserUpdateBranchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationServiceClient_UserUpdateBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserUpdateBranch'
type MockOperationServiceClient_UserUpdateBranch_Call struct {
	*mock.Call
}

// UserUpdateBranch is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.UserUpdateBranchRequest
//   - opts ...grpc.CallOption
func (_e *MockOperationServiceClient_Expecter) UserUpdateBranch(ctx interface{}, in interface{}, opts ...interface{}) *MockOperationServiceClient_UserUpdateBranch_Call {
	return &MockOperationServiceClient_UserUpdateBranch_Call{Call: _e.mock.On("UserUpdateBranch",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOperationServiceClient_UserUpdateBranch_Call) Run(run func(ctx context.Context, in *gitalypb.UserUpdateBranchRequest, opts ...grpc.CallOption)) *MockOperationServiceClient_UserUpdateBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.UserUpdateBranchRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockOperationServiceClient_UserUpdateBranch_Call) Return(_a0 *gitalypb.UserUpdateBranchResponse, _a1 error) *MockOperationServiceClient_UserUpdateBranch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationServiceClient_UserUpdateBranch_Call) RunAndReturn(run func(context.Context, *gitalypb.UserUpdateBranchRequest, ...grpc.CallOption) (*gitalypb.UserUpdateBranchResponse, error)) *MockOperationServiceClient_UserUpdateBranch_Call {
	_c.Call.Return(run)
	return _c
}

// UserUpdateSubmodule provides a mock function with given fields: ctx, in, opts
func (_m *MockOperationServiceClient) UserUpdateSubmodule(ctx context.Context, in *gitalypb.UserUpdateSubmoduleRequest, opts ...grpc.CallOption) (*gitalypb.UserUpdateSubmoduleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UserUpdateSubmodule")
	}

	var r0 *gitalypb.UserUpdateSubmoduleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserUpdateSubmoduleRequest, ...grpc.CallOption) (*gitalypb.UserUpdateSubmoduleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.UserUpdateSubmoduleRequest, ...grpc.CallOption) *gitalypb.UserUpdateSubmoduleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.UserUpdateSubmoduleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.UserUpdateSubmoduleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOperationServiceClient_UserUpdateSubmodule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserUpdateSubmodule'
type MockOperationServiceClient_UserUpdateSubmodule_Call struct {
	*mock.Call
}

// UserUpdateSubmodule is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.UserUpdateSubmoduleRequest
//   - opts ...grpc.CallOption
func (_e *MockOperationServiceClient_Expecter) UserUpdateSubmodule(ctx interface{}, in interface{}, opts ...interface{}) *MockOperationServiceClient_UserUpdateSubmodule_Call {
	return &MockOperationServiceClient_UserUpdateSubmodule_Call{Call: _e.mock.On("UserUpdateSubmodule",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockOperationServiceClient_UserUpdateSubmodule_Call) Run(run func(ctx context.Context, in *gitalypb.UserUpdateSubmoduleRequest, opts ...grpc.CallOption)) *MockOperationServiceClient_UserUpdateSubmodule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.UserUpdateSubmoduleRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockOperationServiceClient_UserUpdateSubmodule_Call) Return(_a0 *gitalypb.UserUpdateSubmoduleResponse, _a1 error) *MockOperationServiceClient_UserUpdateSubmodule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOperationServiceClient_UserUpdateSubmodule_Call) RunAndReturn(run func(context.Context, *gitalypb.UserUpdateSubmoduleRequest, ...grpc.CallOption) (*gitalypb.UserUpdateSubmoduleResponse, error)) *MockOperationServiceClient_UserUpdateSubmodule_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOperationServiceClient creates a new instance of MockOperationServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOperationServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOperationServiceClient {
	mock := &MockOperationServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

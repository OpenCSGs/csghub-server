// Code generated by mockery v2.53.0. DO NOT EDIT.

package gitalypb

import (
	context "context"

	gitalypb "gitlab.com/gitlab-org/gitaly/v16/proto/go/gitalypb"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockSmartHTTPServiceClient is an autogenerated mock type for the SmartHTTPServiceClient type
type MockSmartHTTPServiceClient struct {
	mock.Mock
}

type MockSmartHTTPServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSmartHTTPServiceClient) EXPECT() *MockSmartHTTPServiceClient_Expecter {
	return &MockSmartHTTPServiceClient_Expecter{mock: &_m.Mock}
}

// InfoRefsReceivePack provides a mock function with given fields: ctx, in, opts
func (_m *MockSmartHTTPServiceClient) InfoRefsReceivePack(ctx context.Context, in *gitalypb.InfoRefsRequest, opts ...grpc.CallOption) (gitalypb.SmartHTTPService_InfoRefsReceivePackClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InfoRefsReceivePack")
	}

	var r0 gitalypb.SmartHTTPService_InfoRefsReceivePackClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.InfoRefsRequest, ...grpc.CallOption) (gitalypb.SmartHTTPService_InfoRefsReceivePackClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.InfoRefsRequest, ...grpc.CallOption) gitalypb.SmartHTTPService_InfoRefsReceivePackClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.SmartHTTPService_InfoRefsReceivePackClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.InfoRefsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSmartHTTPServiceClient_InfoRefsReceivePack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InfoRefsReceivePack'
type MockSmartHTTPServiceClient_InfoRefsReceivePack_Call struct {
	*mock.Call
}

// InfoRefsReceivePack is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.InfoRefsRequest
//   - opts ...grpc.CallOption
func (_e *MockSmartHTTPServiceClient_Expecter) InfoRefsReceivePack(ctx interface{}, in interface{}, opts ...interface{}) *MockSmartHTTPServiceClient_InfoRefsReceivePack_Call {
	return &MockSmartHTTPServiceClient_InfoRefsReceivePack_Call{Call: _e.mock.On("InfoRefsReceivePack",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSmartHTTPServiceClient_InfoRefsReceivePack_Call) Run(run func(ctx context.Context, in *gitalypb.InfoRefsRequest, opts ...grpc.CallOption)) *MockSmartHTTPServiceClient_InfoRefsReceivePack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.InfoRefsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSmartHTTPServiceClient_InfoRefsReceivePack_Call) Return(_a0 gitalypb.SmartHTTPService_InfoRefsReceivePackClient, _a1 error) *MockSmartHTTPServiceClient_InfoRefsReceivePack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSmartHTTPServiceClient_InfoRefsReceivePack_Call) RunAndReturn(run func(context.Context, *gitalypb.InfoRefsRequest, ...grpc.CallOption) (gitalypb.SmartHTTPService_InfoRefsReceivePackClient, error)) *MockSmartHTTPServiceClient_InfoRefsReceivePack_Call {
	_c.Call.Return(run)
	return _c
}

// InfoRefsUploadPack provides a mock function with given fields: ctx, in, opts
func (_m *MockSmartHTTPServiceClient) InfoRefsUploadPack(ctx context.Context, in *gitalypb.InfoRefsRequest, opts ...grpc.CallOption) (gitalypb.SmartHTTPService_InfoRefsUploadPackClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InfoRefsUploadPack")
	}

	var r0 gitalypb.SmartHTTPService_InfoRefsUploadPackClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.InfoRefsRequest, ...grpc.CallOption) (gitalypb.SmartHTTPService_InfoRefsUploadPackClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.InfoRefsRequest, ...grpc.CallOption) gitalypb.SmartHTTPService_InfoRefsUploadPackClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.SmartHTTPService_InfoRefsUploadPackClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.InfoRefsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSmartHTTPServiceClient_InfoRefsUploadPack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InfoRefsUploadPack'
type MockSmartHTTPServiceClient_InfoRefsUploadPack_Call struct {
	*mock.Call
}

// InfoRefsUploadPack is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.InfoRefsRequest
//   - opts ...grpc.CallOption
func (_e *MockSmartHTTPServiceClient_Expecter) InfoRefsUploadPack(ctx interface{}, in interface{}, opts ...interface{}) *MockSmartHTTPServiceClient_InfoRefsUploadPack_Call {
	return &MockSmartHTTPServiceClient_InfoRefsUploadPack_Call{Call: _e.mock.On("InfoRefsUploadPack",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSmartHTTPServiceClient_InfoRefsUploadPack_Call) Run(run func(ctx context.Context, in *gitalypb.InfoRefsRequest, opts ...grpc.CallOption)) *MockSmartHTTPServiceClient_InfoRefsUploadPack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.InfoRefsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSmartHTTPServiceClient_InfoRefsUploadPack_Call) Return(_a0 gitalypb.SmartHTTPService_InfoRefsUploadPackClient, _a1 error) *MockSmartHTTPServiceClient_InfoRefsUploadPack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSmartHTTPServiceClient_InfoRefsUploadPack_Call) RunAndReturn(run func(context.Context, *gitalypb.InfoRefsRequest, ...grpc.CallOption) (gitalypb.SmartHTTPService_InfoRefsUploadPackClient, error)) *MockSmartHTTPServiceClient_InfoRefsUploadPack_Call {
	_c.Call.Return(run)
	return _c
}

// PostReceivePack provides a mock function with given fields: ctx, opts
func (_m *MockSmartHTTPServiceClient) PostReceivePack(ctx context.Context, opts ...grpc.CallOption) (gitalypb.SmartHTTPService_PostReceivePackClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostReceivePack")
	}

	var r0 gitalypb.SmartHTTPService_PostReceivePackClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (gitalypb.SmartHTTPService_PostReceivePackClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) gitalypb.SmartHTTPService_PostReceivePackClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.SmartHTTPService_PostReceivePackClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSmartHTTPServiceClient_PostReceivePack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostReceivePack'
type MockSmartHTTPServiceClient_PostReceivePack_Call struct {
	*mock.Call
}

// PostReceivePack is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockSmartHTTPServiceClient_Expecter) PostReceivePack(ctx interface{}, opts ...interface{}) *MockSmartHTTPServiceClient_PostReceivePack_Call {
	return &MockSmartHTTPServiceClient_PostReceivePack_Call{Call: _e.mock.On("PostReceivePack",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockSmartHTTPServiceClient_PostReceivePack_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockSmartHTTPServiceClient_PostReceivePack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockSmartHTTPServiceClient_PostReceivePack_Call) Return(_a0 gitalypb.SmartHTTPService_PostReceivePackClient, _a1 error) *MockSmartHTTPServiceClient_PostReceivePack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSmartHTTPServiceClient_PostReceivePack_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (gitalypb.SmartHTTPService_PostReceivePackClient, error)) *MockSmartHTTPServiceClient_PostReceivePack_Call {
	_c.Call.Return(run)
	return _c
}

// PostUploadPackWithSidechannel provides a mock function with given fields: ctx, in, opts
func (_m *MockSmartHTTPServiceClient) PostUploadPackWithSidechannel(ctx context.Context, in *gitalypb.PostUploadPackWithSidechannelRequest, opts ...grpc.CallOption) (*gitalypb.PostUploadPackWithSidechannelResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostUploadPackWithSidechannel")
	}

	var r0 *gitalypb.PostUploadPackWithSidechannelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.PostUploadPackWithSidechannelRequest, ...grpc.CallOption) (*gitalypb.PostUploadPackWithSidechannelResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.PostUploadPackWithSidechannelRequest, ...grpc.CallOption) *gitalypb.PostUploadPackWithSidechannelResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.PostUploadPackWithSidechannelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.PostUploadPackWithSidechannelRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSmartHTTPServiceClient_PostUploadPackWithSidechannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostUploadPackWithSidechannel'
type MockSmartHTTPServiceClient_PostUploadPackWithSidechannel_Call struct {
	*mock.Call
}

// PostUploadPackWithSidechannel is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.PostUploadPackWithSidechannelRequest
//   - opts ...grpc.CallOption
func (_e *MockSmartHTTPServiceClient_Expecter) PostUploadPackWithSidechannel(ctx interface{}, in interface{}, opts ...interface{}) *MockSmartHTTPServiceClient_PostUploadPackWithSidechannel_Call {
	return &MockSmartHTTPServiceClient_PostUploadPackWithSidechannel_Call{Call: _e.mock.On("PostUploadPackWithSidechannel",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockSmartHTTPServiceClient_PostUploadPackWithSidechannel_Call) Run(run func(ctx context.Context, in *gitalypb.PostUploadPackWithSidechannelRequest, opts ...grpc.CallOption)) *MockSmartHTTPServiceClient_PostUploadPackWithSidechannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.PostUploadPackWithSidechannelRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockSmartHTTPServiceClient_PostUploadPackWithSidechannel_Call) Return(_a0 *gitalypb.PostUploadPackWithSidechannelResponse, _a1 error) *MockSmartHTTPServiceClient_PostUploadPackWithSidechannel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSmartHTTPServiceClient_PostUploadPackWithSidechannel_Call) RunAndReturn(run func(context.Context, *gitalypb.PostUploadPackWithSidechannelRequest, ...grpc.CallOption) (*gitalypb.PostUploadPackWithSidechannelResponse, error)) *MockSmartHTTPServiceClient_PostUploadPackWithSidechannel_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSmartHTTPServiceClient creates a new instance of MockSmartHTTPServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSmartHTTPServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSmartHTTPServiceClient {
	mock := &MockSmartHTTPServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package gitalypb

import (
	context "context"

	gitalypb "gitlab.com/gitlab-org/gitaly/v16/proto/go/gitalypb"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockRefServiceClient is an autogenerated mock type for the RefServiceClient type
type MockRefServiceClient struct {
	mock.Mock
}

type MockRefServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRefServiceClient) EXPECT() *MockRefServiceClient_Expecter {
	return &MockRefServiceClient_Expecter{mock: &_m.Mock}
}

// DeleteRefs provides a mock function with given fields: ctx, in, opts
func (_m *MockRefServiceClient) DeleteRefs(ctx context.Context, in *gitalypb.DeleteRefsRequest, opts ...grpc.CallOption) (*gitalypb.DeleteRefsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRefs")
	}

	var r0 *gitalypb.DeleteRefsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.DeleteRefsRequest, ...grpc.CallOption) (*gitalypb.DeleteRefsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.DeleteRefsRequest, ...grpc.CallOption) *gitalypb.DeleteRefsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.DeleteRefsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.DeleteRefsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefServiceClient_DeleteRefs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRefs'
type MockRefServiceClient_DeleteRefs_Call struct {
	*mock.Call
}

// DeleteRefs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.DeleteRefsRequest
//   - opts ...grpc.CallOption
func (_e *MockRefServiceClient_Expecter) DeleteRefs(ctx interface{}, in interface{}, opts ...interface{}) *MockRefServiceClient_DeleteRefs_Call {
	return &MockRefServiceClient_DeleteRefs_Call{Call: _e.mock.On("DeleteRefs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRefServiceClient_DeleteRefs_Call) Run(run func(ctx context.Context, in *gitalypb.DeleteRefsRequest, opts ...grpc.CallOption)) *MockRefServiceClient_DeleteRefs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.DeleteRefsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRefServiceClient_DeleteRefs_Call) Return(_a0 *gitalypb.DeleteRefsResponse, _a1 error) *MockRefServiceClient_DeleteRefs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefServiceClient_DeleteRefs_Call) RunAndReturn(run func(context.Context, *gitalypb.DeleteRefsRequest, ...grpc.CallOption) (*gitalypb.DeleteRefsResponse, error)) *MockRefServiceClient_DeleteRefs_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllBranches provides a mock function with given fields: ctx, in, opts
func (_m *MockRefServiceClient) FindAllBranches(ctx context.Context, in *gitalypb.FindAllBranchesRequest, opts ...grpc.CallOption) (gitalypb.RefService_FindAllBranchesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindAllBranches")
	}

	var r0 gitalypb.RefService_FindAllBranchesClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindAllBranchesRequest, ...grpc.CallOption) (gitalypb.RefService_FindAllBranchesClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindAllBranchesRequest, ...grpc.CallOption) gitalypb.RefService_FindAllBranchesClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RefService_FindAllBranchesClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FindAllBranchesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefServiceClient_FindAllBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllBranches'
type MockRefServiceClient_FindAllBranches_Call struct {
	*mock.Call
}

// FindAllBranches is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FindAllBranchesRequest
//   - opts ...grpc.CallOption
func (_e *MockRefServiceClient_Expecter) FindAllBranches(ctx interface{}, in interface{}, opts ...interface{}) *MockRefServiceClient_FindAllBranches_Call {
	return &MockRefServiceClient_FindAllBranches_Call{Call: _e.mock.On("FindAllBranches",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRefServiceClient_FindAllBranches_Call) Run(run func(ctx context.Context, in *gitalypb.FindAllBranchesRequest, opts ...grpc.CallOption)) *MockRefServiceClient_FindAllBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FindAllBranchesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRefServiceClient_FindAllBranches_Call) Return(_a0 gitalypb.RefService_FindAllBranchesClient, _a1 error) *MockRefServiceClient_FindAllBranches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefServiceClient_FindAllBranches_Call) RunAndReturn(run func(context.Context, *gitalypb.FindAllBranchesRequest, ...grpc.CallOption) (gitalypb.RefService_FindAllBranchesClient, error)) *MockRefServiceClient_FindAllBranches_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllRemoteBranches provides a mock function with given fields: ctx, in, opts
func (_m *MockRefServiceClient) FindAllRemoteBranches(ctx context.Context, in *gitalypb.FindAllRemoteBranchesRequest, opts ...grpc.CallOption) (gitalypb.RefService_FindAllRemoteBranchesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindAllRemoteBranches")
	}

	var r0 gitalypb.RefService_FindAllRemoteBranchesClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindAllRemoteBranchesRequest, ...grpc.CallOption) (gitalypb.RefService_FindAllRemoteBranchesClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindAllRemoteBranchesRequest, ...grpc.CallOption) gitalypb.RefService_FindAllRemoteBranchesClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RefService_FindAllRemoteBranchesClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FindAllRemoteBranchesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefServiceClient_FindAllRemoteBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllRemoteBranches'
type MockRefServiceClient_FindAllRemoteBranches_Call struct {
	*mock.Call
}

// FindAllRemoteBranches is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FindAllRemoteBranchesRequest
//   - opts ...grpc.CallOption
func (_e *MockRefServiceClient_Expecter) FindAllRemoteBranches(ctx interface{}, in interface{}, opts ...interface{}) *MockRefServiceClient_FindAllRemoteBranches_Call {
	return &MockRefServiceClient_FindAllRemoteBranches_Call{Call: _e.mock.On("FindAllRemoteBranches",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRefServiceClient_FindAllRemoteBranches_Call) Run(run func(ctx context.Context, in *gitalypb.FindAllRemoteBranchesRequest, opts ...grpc.CallOption)) *MockRefServiceClient_FindAllRemoteBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FindAllRemoteBranchesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRefServiceClient_FindAllRemoteBranches_Call) Return(_a0 gitalypb.RefService_FindAllRemoteBranchesClient, _a1 error) *MockRefServiceClient_FindAllRemoteBranches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefServiceClient_FindAllRemoteBranches_Call) RunAndReturn(run func(context.Context, *gitalypb.FindAllRemoteBranchesRequest, ...grpc.CallOption) (gitalypb.RefService_FindAllRemoteBranchesClient, error)) *MockRefServiceClient_FindAllRemoteBranches_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllTags provides a mock function with given fields: ctx, in, opts
func (_m *MockRefServiceClient) FindAllTags(ctx context.Context, in *gitalypb.FindAllTagsRequest, opts ...grpc.CallOption) (gitalypb.RefService_FindAllTagsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindAllTags")
	}

	var r0 gitalypb.RefService_FindAllTagsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindAllTagsRequest, ...grpc.CallOption) (gitalypb.RefService_FindAllTagsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindAllTagsRequest, ...grpc.CallOption) gitalypb.RefService_FindAllTagsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RefService_FindAllTagsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FindAllTagsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefServiceClient_FindAllTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllTags'
type MockRefServiceClient_FindAllTags_Call struct {
	*mock.Call
}

// FindAllTags is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FindAllTagsRequest
//   - opts ...grpc.CallOption
func (_e *MockRefServiceClient_Expecter) FindAllTags(ctx interface{}, in interface{}, opts ...interface{}) *MockRefServiceClient_FindAllTags_Call {
	return &MockRefServiceClient_FindAllTags_Call{Call: _e.mock.On("FindAllTags",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRefServiceClient_FindAllTags_Call) Run(run func(ctx context.Context, in *gitalypb.FindAllTagsRequest, opts ...grpc.CallOption)) *MockRefServiceClient_FindAllTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FindAllTagsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRefServiceClient_FindAllTags_Call) Return(_a0 gitalypb.RefService_FindAllTagsClient, _a1 error) *MockRefServiceClient_FindAllTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefServiceClient_FindAllTags_Call) RunAndReturn(run func(context.Context, *gitalypb.FindAllTagsRequest, ...grpc.CallOption) (gitalypb.RefService_FindAllTagsClient, error)) *MockRefServiceClient_FindAllTags_Call {
	_c.Call.Return(run)
	return _c
}

// FindBranch provides a mock function with given fields: ctx, in, opts
func (_m *MockRefServiceClient) FindBranch(ctx context.Context, in *gitalypb.FindBranchRequest, opts ...grpc.CallOption) (*gitalypb.FindBranchResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindBranch")
	}

	var r0 *gitalypb.FindBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindBranchRequest, ...grpc.CallOption) (*gitalypb.FindBranchResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindBranchRequest, ...grpc.CallOption) *gitalypb.FindBranchResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.FindBranchResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FindBranchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefServiceClient_FindBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBranch'
type MockRefServiceClient_FindBranch_Call struct {
	*mock.Call
}

// FindBranch is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FindBranchRequest
//   - opts ...grpc.CallOption
func (_e *MockRefServiceClient_Expecter) FindBranch(ctx interface{}, in interface{}, opts ...interface{}) *MockRefServiceClient_FindBranch_Call {
	return &MockRefServiceClient_FindBranch_Call{Call: _e.mock.On("FindBranch",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRefServiceClient_FindBranch_Call) Run(run func(ctx context.Context, in *gitalypb.FindBranchRequest, opts ...grpc.CallOption)) *MockRefServiceClient_FindBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FindBranchRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRefServiceClient_FindBranch_Call) Return(_a0 *gitalypb.FindBranchResponse, _a1 error) *MockRefServiceClient_FindBranch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefServiceClient_FindBranch_Call) RunAndReturn(run func(context.Context, *gitalypb.FindBranchRequest, ...grpc.CallOption) (*gitalypb.FindBranchResponse, error)) *MockRefServiceClient_FindBranch_Call {
	_c.Call.Return(run)
	return _c
}

// FindDefaultBranchName provides a mock function with given fields: ctx, in, opts
func (_m *MockRefServiceClient) FindDefaultBranchName(ctx context.Context, in *gitalypb.FindDefaultBranchNameRequest, opts ...grpc.CallOption) (*gitalypb.FindDefaultBranchNameResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindDefaultBranchName")
	}

	var r0 *gitalypb.FindDefaultBranchNameResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindDefaultBranchNameRequest, ...grpc.CallOption) (*gitalypb.FindDefaultBranchNameResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindDefaultBranchNameRequest, ...grpc.CallOption) *gitalypb.FindDefaultBranchNameResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.FindDefaultBranchNameResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FindDefaultBranchNameRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefServiceClient_FindDefaultBranchName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindDefaultBranchName'
type MockRefServiceClient_FindDefaultBranchName_Call struct {
	*mock.Call
}

// FindDefaultBranchName is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FindDefaultBranchNameRequest
//   - opts ...grpc.CallOption
func (_e *MockRefServiceClient_Expecter) FindDefaultBranchName(ctx interface{}, in interface{}, opts ...interface{}) *MockRefServiceClient_FindDefaultBranchName_Call {
	return &MockRefServiceClient_FindDefaultBranchName_Call{Call: _e.mock.On("FindDefaultBranchName",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRefServiceClient_FindDefaultBranchName_Call) Run(run func(ctx context.Context, in *gitalypb.FindDefaultBranchNameRequest, opts ...grpc.CallOption)) *MockRefServiceClient_FindDefaultBranchName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FindDefaultBranchNameRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRefServiceClient_FindDefaultBranchName_Call) Return(_a0 *gitalypb.FindDefaultBranchNameResponse, _a1 error) *MockRefServiceClient_FindDefaultBranchName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefServiceClient_FindDefaultBranchName_Call) RunAndReturn(run func(context.Context, *gitalypb.FindDefaultBranchNameRequest, ...grpc.CallOption) (*gitalypb.FindDefaultBranchNameResponse, error)) *MockRefServiceClient_FindDefaultBranchName_Call {
	_c.Call.Return(run)
	return _c
}

// FindLocalBranches provides a mock function with given fields: ctx, in, opts
func (_m *MockRefServiceClient) FindLocalBranches(ctx context.Context, in *gitalypb.FindLocalBranchesRequest, opts ...grpc.CallOption) (gitalypb.RefService_FindLocalBranchesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindLocalBranches")
	}

	var r0 gitalypb.RefService_FindLocalBranchesClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindLocalBranchesRequest, ...grpc.CallOption) (gitalypb.RefService_FindLocalBranchesClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindLocalBranchesRequest, ...grpc.CallOption) gitalypb.RefService_FindLocalBranchesClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RefService_FindLocalBranchesClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FindLocalBranchesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefServiceClient_FindLocalBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindLocalBranches'
type MockRefServiceClient_FindLocalBranches_Call struct {
	*mock.Call
}

// FindLocalBranches is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FindLocalBranchesRequest
//   - opts ...grpc.CallOption
func (_e *MockRefServiceClient_Expecter) FindLocalBranches(ctx interface{}, in interface{}, opts ...interface{}) *MockRefServiceClient_FindLocalBranches_Call {
	return &MockRefServiceClient_FindLocalBranches_Call{Call: _e.mock.On("FindLocalBranches",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRefServiceClient_FindLocalBranches_Call) Run(run func(ctx context.Context, in *gitalypb.FindLocalBranchesRequest, opts ...grpc.CallOption)) *MockRefServiceClient_FindLocalBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FindLocalBranchesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRefServiceClient_FindLocalBranches_Call) Return(_a0 gitalypb.RefService_FindLocalBranchesClient, _a1 error) *MockRefServiceClient_FindLocalBranches_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefServiceClient_FindLocalBranches_Call) RunAndReturn(run func(context.Context, *gitalypb.FindLocalBranchesRequest, ...grpc.CallOption) (gitalypb.RefService_FindLocalBranchesClient, error)) *MockRefServiceClient_FindLocalBranches_Call {
	_c.Call.Return(run)
	return _c
}

// FindRefsByOID provides a mock function with given fields: ctx, in, opts
func (_m *MockRefServiceClient) FindRefsByOID(ctx context.Context, in *gitalypb.FindRefsByOIDRequest, opts ...grpc.CallOption) (*gitalypb.FindRefsByOIDResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindRefsByOID")
	}

	var r0 *gitalypb.FindRefsByOIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindRefsByOIDRequest, ...grpc.CallOption) (*gitalypb.FindRefsByOIDResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindRefsByOIDRequest, ...grpc.CallOption) *gitalypb.FindRefsByOIDResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.FindRefsByOIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FindRefsByOIDRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefServiceClient_FindRefsByOID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindRefsByOID'
type MockRefServiceClient_FindRefsByOID_Call struct {
	*mock.Call
}

// FindRefsByOID is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FindRefsByOIDRequest
//   - opts ...grpc.CallOption
func (_e *MockRefServiceClient_Expecter) FindRefsByOID(ctx interface{}, in interface{}, opts ...interface{}) *MockRefServiceClient_FindRefsByOID_Call {
	return &MockRefServiceClient_FindRefsByOID_Call{Call: _e.mock.On("FindRefsByOID",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRefServiceClient_FindRefsByOID_Call) Run(run func(ctx context.Context, in *gitalypb.FindRefsByOIDRequest, opts ...grpc.CallOption)) *MockRefServiceClient_FindRefsByOID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FindRefsByOIDRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRefServiceClient_FindRefsByOID_Call) Return(_a0 *gitalypb.FindRefsByOIDResponse, _a1 error) *MockRefServiceClient_FindRefsByOID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefServiceClient_FindRefsByOID_Call) RunAndReturn(run func(context.Context, *gitalypb.FindRefsByOIDRequest, ...grpc.CallOption) (*gitalypb.FindRefsByOIDResponse, error)) *MockRefServiceClient_FindRefsByOID_Call {
	_c.Call.Return(run)
	return _c
}

// FindTag provides a mock function with given fields: ctx, in, opts
func (_m *MockRefServiceClient) FindTag(ctx context.Context, in *gitalypb.FindTagRequest, opts ...grpc.CallOption) (*gitalypb.FindTagResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FindTag")
	}

	var r0 *gitalypb.FindTagResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindTagRequest, ...grpc.CallOption) (*gitalypb.FindTagResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.FindTagRequest, ...grpc.CallOption) *gitalypb.FindTagResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.FindTagResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.FindTagRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefServiceClient_FindTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTag'
type MockRefServiceClient_FindTag_Call struct {
	*mock.Call
}

// FindTag is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.FindTagRequest
//   - opts ...grpc.CallOption
func (_e *MockRefServiceClient_Expecter) FindTag(ctx interface{}, in interface{}, opts ...interface{}) *MockRefServiceClient_FindTag_Call {
	return &MockRefServiceClient_FindTag_Call{Call: _e.mock.On("FindTag",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRefServiceClient_FindTag_Call) Run(run func(ctx context.Context, in *gitalypb.FindTagRequest, opts ...grpc.CallOption)) *MockRefServiceClient_FindTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.FindTagRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRefServiceClient_FindTag_Call) Return(_a0 *gitalypb.FindTagResponse, _a1 error) *MockRefServiceClient_FindTag_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefServiceClient_FindTag_Call) RunAndReturn(run func(context.Context, *gitalypb.FindTagRequest, ...grpc.CallOption) (*gitalypb.FindTagResponse, error)) *MockRefServiceClient_FindTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagMessages provides a mock function with given fields: ctx, in, opts
func (_m *MockRefServiceClient) GetTagMessages(ctx context.Context, in *gitalypb.GetTagMessagesRequest, opts ...grpc.CallOption) (gitalypb.RefService_GetTagMessagesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTagMessages")
	}

	var r0 gitalypb.RefService_GetTagMessagesClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetTagMessagesRequest, ...grpc.CallOption) (gitalypb.RefService_GetTagMessagesClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetTagMessagesRequest, ...grpc.CallOption) gitalypb.RefService_GetTagMessagesClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RefService_GetTagMessagesClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.GetTagMessagesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefServiceClient_GetTagMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagMessages'
type MockRefServiceClient_GetTagMessages_Call struct {
	*mock.Call
}

// GetTagMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.GetTagMessagesRequest
//   - opts ...grpc.CallOption
func (_e *MockRefServiceClient_Expecter) GetTagMessages(ctx interface{}, in interface{}, opts ...interface{}) *MockRefServiceClient_GetTagMessages_Call {
	return &MockRefServiceClient_GetTagMessages_Call{Call: _e.mock.On("GetTagMessages",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRefServiceClient_GetTagMessages_Call) Run(run func(ctx context.Context, in *gitalypb.GetTagMessagesRequest, opts ...grpc.CallOption)) *MockRefServiceClient_GetTagMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.GetTagMessagesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRefServiceClient_GetTagMessages_Call) Return(_a0 gitalypb.RefService_GetTagMessagesClient, _a1 error) *MockRefServiceClient_GetTagMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefServiceClient_GetTagMessages_Call) RunAndReturn(run func(context.Context, *gitalypb.GetTagMessagesRequest, ...grpc.CallOption) (gitalypb.RefService_GetTagMessagesClient, error)) *MockRefServiceClient_GetTagMessages_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagSignatures provides a mock function with given fields: ctx, in, opts
func (_m *MockRefServiceClient) GetTagSignatures(ctx context.Context, in *gitalypb.GetTagSignaturesRequest, opts ...grpc.CallOption) (gitalypb.RefService_GetTagSignaturesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTagSignatures")
	}

	var r0 gitalypb.RefService_GetTagSignaturesClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetTagSignaturesRequest, ...grpc.CallOption) (gitalypb.RefService_GetTagSignaturesClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetTagSignaturesRequest, ...grpc.CallOption) gitalypb.RefService_GetTagSignaturesClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RefService_GetTagSignaturesClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.GetTagSignaturesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefServiceClient_GetTagSignatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagSignatures'
type MockRefServiceClient_GetTagSignatures_Call struct {
	*mock.Call
}

// GetTagSignatures is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.GetTagSignaturesRequest
//   - opts ...grpc.CallOption
func (_e *MockRefServiceClient_Expecter) GetTagSignatures(ctx interface{}, in interface{}, opts ...interface{}) *MockRefServiceClient_GetTagSignatures_Call {
	return &MockRefServiceClient_GetTagSignatures_Call{Call: _e.mock.On("GetTagSignatures",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRefServiceClient_GetTagSignatures_Call) Run(run func(ctx context.Context, in *gitalypb.GetTagSignaturesRequest, opts ...grpc.CallOption)) *MockRefServiceClient_GetTagSignatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.GetTagSignaturesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRefServiceClient_GetTagSignatures_Call) Return(_a0 gitalypb.RefService_GetTagSignaturesClient, _a1 error) *MockRefServiceClient_GetTagSignatures_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefServiceClient_GetTagSignatures_Call) RunAndReturn(run func(context.Context, *gitalypb.GetTagSignaturesRequest, ...grpc.CallOption) (gitalypb.RefService_GetTagSignaturesClient, error)) *MockRefServiceClient_GetTagSignatures_Call {
	_c.Call.Return(run)
	return _c
}

// ListBranchNamesContainingCommit provides a mock function with given fields: ctx, in, opts
func (_m *MockRefServiceClient) ListBranchNamesContainingCommit(ctx context.Context, in *gitalypb.ListBranchNamesContainingCommitRequest, opts ...grpc.CallOption) (gitalypb.RefService_ListBranchNamesContainingCommitClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBranchNamesContainingCommit")
	}

	var r0 gitalypb.RefService_ListBranchNamesContainingCommitClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListBranchNamesContainingCommitRequest, ...grpc.CallOption) (gitalypb.RefService_ListBranchNamesContainingCommitClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListBranchNamesContainingCommitRequest, ...grpc.CallOption) gitalypb.RefService_ListBranchNamesContainingCommitClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RefService_ListBranchNamesContainingCommitClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.ListBranchNamesContainingCommitRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefServiceClient_ListBranchNamesContainingCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBranchNamesContainingCommit'
type MockRefServiceClient_ListBranchNamesContainingCommit_Call struct {
	*mock.Call
}

// ListBranchNamesContainingCommit is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.ListBranchNamesContainingCommitRequest
//   - opts ...grpc.CallOption
func (_e *MockRefServiceClient_Expecter) ListBranchNamesContainingCommit(ctx interface{}, in interface{}, opts ...interface{}) *MockRefServiceClient_ListBranchNamesContainingCommit_Call {
	return &MockRefServiceClient_ListBranchNamesContainingCommit_Call{Call: _e.mock.On("ListBranchNamesContainingCommit",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRefServiceClient_ListBranchNamesContainingCommit_Call) Run(run func(ctx context.Context, in *gitalypb.ListBranchNamesContainingCommitRequest, opts ...grpc.CallOption)) *MockRefServiceClient_ListBranchNamesContainingCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.ListBranchNamesContainingCommitRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRefServiceClient_ListBranchNamesContainingCommit_Call) Return(_a0 gitalypb.RefService_ListBranchNamesContainingCommitClient, _a1 error) *MockRefServiceClient_ListBranchNamesContainingCommit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefServiceClient_ListBranchNamesContainingCommit_Call) RunAndReturn(run func(context.Context, *gitalypb.ListBranchNamesContainingCommitRequest, ...grpc.CallOption) (gitalypb.RefService_ListBranchNamesContainingCommitClient, error)) *MockRefServiceClient_ListBranchNamesContainingCommit_Call {
	_c.Call.Return(run)
	return _c
}

// ListRefs provides a mock function with given fields: ctx, in, opts
func (_m *MockRefServiceClient) ListRefs(ctx context.Context, in *gitalypb.ListRefsRequest, opts ...grpc.CallOption) (gitalypb.RefService_ListRefsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRefs")
	}

	var r0 gitalypb.RefService_ListRefsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListRefsRequest, ...grpc.CallOption) (gitalypb.RefService_ListRefsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListRefsRequest, ...grpc.CallOption) gitalypb.RefService_ListRefsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RefService_ListRefsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.ListRefsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefServiceClient_ListRefs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRefs'
type MockRefServiceClient_ListRefs_Call struct {
	*mock.Call
}

// ListRefs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.ListRefsRequest
//   - opts ...grpc.CallOption
func (_e *MockRefServiceClient_Expecter) ListRefs(ctx interface{}, in interface{}, opts ...interface{}) *MockRefServiceClient_ListRefs_Call {
	return &MockRefServiceClient_ListRefs_Call{Call: _e.mock.On("ListRefs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRefServiceClient_ListRefs_Call) Run(run func(ctx context.Context, in *gitalypb.ListRefsRequest, opts ...grpc.CallOption)) *MockRefServiceClient_ListRefs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.ListRefsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRefServiceClient_ListRefs_Call) Return(_a0 gitalypb.RefService_ListRefsClient, _a1 error) *MockRefServiceClient_ListRefs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefServiceClient_ListRefs_Call) RunAndReturn(run func(context.Context, *gitalypb.ListRefsRequest, ...grpc.CallOption) (gitalypb.RefService_ListRefsClient, error)) *MockRefServiceClient_ListRefs_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagNamesContainingCommit provides a mock function with given fields: ctx, in, opts
func (_m *MockRefServiceClient) ListTagNamesContainingCommit(ctx context.Context, in *gitalypb.ListTagNamesContainingCommitRequest, opts ...grpc.CallOption) (gitalypb.RefService_ListTagNamesContainingCommitClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagNamesContainingCommit")
	}

	var r0 gitalypb.RefService_ListTagNamesContainingCommitClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListTagNamesContainingCommitRequest, ...grpc.CallOption) (gitalypb.RefService_ListTagNamesContainingCommitClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListTagNamesContainingCommitRequest, ...grpc.CallOption) gitalypb.RefService_ListTagNamesContainingCommitClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RefService_ListTagNamesContainingCommitClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.ListTagNamesContainingCommitRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefServiceClient_ListTagNamesContainingCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagNamesContainingCommit'
type MockRefServiceClient_ListTagNamesContainingCommit_Call struct {
	*mock.Call
}

// ListTagNamesContainingCommit is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.ListTagNamesContainingCommitRequest
//   - opts ...grpc.CallOption
func (_e *MockRefServiceClient_Expecter) ListTagNamesContainingCommit(ctx interface{}, in interface{}, opts ...interface{}) *MockRefServiceClient_ListTagNamesContainingCommit_Call {
	return &MockRefServiceClient_ListTagNamesContainingCommit_Call{Call: _e.mock.On("ListTagNamesContainingCommit",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRefServiceClient_ListTagNamesContainingCommit_Call) Run(run func(ctx context.Context, in *gitalypb.ListTagNamesContainingCommitRequest, opts ...grpc.CallOption)) *MockRefServiceClient_ListTagNamesContainingCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.ListTagNamesContainingCommitRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRefServiceClient_ListTagNamesContainingCommit_Call) Return(_a0 gitalypb.RefService_ListTagNamesContainingCommitClient, _a1 error) *MockRefServiceClient_ListTagNamesContainingCommit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefServiceClient_ListTagNamesContainingCommit_Call) RunAndReturn(run func(context.Context, *gitalypb.ListTagNamesContainingCommitRequest, ...grpc.CallOption) (gitalypb.RefService_ListTagNamesContainingCommitClient, error)) *MockRefServiceClient_ListTagNamesContainingCommit_Call {
	_c.Call.Return(run)
	return _c
}

// RefExists provides a mock function with given fields: ctx, in, opts
func (_m *MockRefServiceClient) RefExists(ctx context.Context, in *gitalypb.RefExistsRequest, opts ...grpc.CallOption) (*gitalypb.RefExistsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RefExists")
	}

	var r0 *gitalypb.RefExistsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.RefExistsRequest, ...grpc.CallOption) (*gitalypb.RefExistsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.RefExistsRequest, ...grpc.CallOption) *gitalypb.RefExistsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitalypb.RefExistsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.RefExistsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefServiceClient_RefExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefExists'
type MockRefServiceClient_RefExists_Call struct {
	*mock.Call
}

// RefExists is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.RefExistsRequest
//   - opts ...grpc.CallOption
func (_e *MockRefServiceClient_Expecter) RefExists(ctx interface{}, in interface{}, opts ...interface{}) *MockRefServiceClient_RefExists_Call {
	return &MockRefServiceClient_RefExists_Call{Call: _e.mock.On("RefExists",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockRefServiceClient_RefExists_Call) Run(run func(ctx context.Context, in *gitalypb.RefExistsRequest, opts ...grpc.CallOption)) *MockRefServiceClient_RefExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.RefExistsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockRefServiceClient_RefExists_Call) Return(_a0 *gitalypb.RefExistsResponse, _a1 error) *MockRefServiceClient_RefExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefServiceClient_RefExists_Call) RunAndReturn(run func(context.Context, *gitalypb.RefExistsRequest, ...grpc.CallOption) (*gitalypb.RefExistsResponse, error)) *MockRefServiceClient_RefExists_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateReferences provides a mock function with given fields: ctx, opts
func (_m *MockRefServiceClient) UpdateReferences(ctx context.Context, opts ...grpc.CallOption) (gitalypb.RefService_UpdateReferencesClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReferences")
	}

	var r0 gitalypb.RefService_UpdateReferencesClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (gitalypb.RefService_UpdateReferencesClient, error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) gitalypb.RefService_UpdateReferencesClient); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.RefService_UpdateReferencesClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRefServiceClient_UpdateReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateReferences'
type MockRefServiceClient_UpdateReferences_Call struct {
	*mock.Call
}

// UpdateReferences is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *MockRefServiceClient_Expecter) UpdateReferences(ctx interface{}, opts ...interface{}) *MockRefServiceClient_UpdateReferences_Call {
	return &MockRefServiceClient_UpdateReferences_Call{Call: _e.mock.On("UpdateReferences",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *MockRefServiceClient_UpdateReferences_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *MockRefServiceClient_UpdateReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockRefServiceClient_UpdateReferences_Call) Return(_a0 gitalypb.RefService_UpdateReferencesClient, _a1 error) *MockRefServiceClient_UpdateReferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRefServiceClient_UpdateReferences_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (gitalypb.RefService_UpdateReferencesClient, error)) *MockRefServiceClient_UpdateReferences_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRefServiceClient creates a new instance of MockRefServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRefServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRefServiceClient {
	mock := &MockRefServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package gitalypb

import (
	context "context"

	gitalypb "gitlab.com/gitlab-org/gitaly/v16/proto/go/gitalypb"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockBlobServiceClient is an autogenerated mock type for the BlobServiceClient type
type MockBlobServiceClient struct {
	mock.Mock
}

type MockBlobServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlobServiceClient) EXPECT() *MockBlobServiceClient_Expecter {
	return &MockBlobServiceClient_Expecter{mock: &_m.Mock}
}

// GetBlob provides a mock function with given fields: ctx, in, opts
func (_m *MockBlobServiceClient) GetBlob(ctx context.Context, in *gitalypb.GetBlobRequest, opts ...grpc.CallOption) (gitalypb.BlobService_GetBlobClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlob")
	}

	var r0 gitalypb.BlobService_GetBlobClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetBlobRequest, ...grpc.CallOption) (gitalypb.BlobService_GetBlobClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetBlobRequest, ...grpc.CallOption) gitalypb.BlobService_GetBlobClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.BlobService_GetBlobClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.GetBlobRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlobServiceClient_GetBlob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlob'
type MockBlobServiceClient_GetBlob_Call struct {
	*mock.Call
}

// GetBlob is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.GetBlobRequest
//   - opts ...grpc.CallOption
func (_e *MockBlobServiceClient_Expecter) GetBlob(ctx interface{}, in interface{}, opts ...interface{}) *MockBlobServiceClient_GetBlob_Call {
	return &MockBlobServiceClient_GetBlob_Call{Call: _e.mock.On("GetBlob",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockBlobServiceClient_GetBlob_Call) Run(run func(ctx context.Context, in *gitalypb.GetBlobRequest, opts ...grpc.CallOption)) *MockBlobServiceClient_GetBlob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.GetBlobRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockBlobServiceClient_GetBlob_Call) Return(_a0 gitalypb.BlobService_GetBlobClient, _a1 error) *MockBlobServiceClient_GetBlob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlobServiceClient_GetBlob_Call) RunAndReturn(run func(context.Context, *gitalypb.GetBlobRequest, ...grpc.CallOption) (gitalypb.BlobService_GetBlobClient, error)) *MockBlobServiceClient_GetBlob_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlobs provides a mock function with given fields: ctx, in, opts
func (_m *MockBlobServiceClient) GetBlobs(ctx context.Context, in *gitalypb.GetBlobsRequest, opts ...grpc.CallOption) (gitalypb.BlobService_GetBlobsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlobs")
	}

	var r0 gitalypb.BlobService_GetBlobsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetBlobsRequest, ...grpc.CallOption) (gitalypb.BlobService_GetBlobsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetBlobsRequest, ...grpc.CallOption) gitalypb.BlobService_GetBlobsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.BlobService_GetBlobsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.GetBlobsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlobServiceClient_GetBlobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlobs'
type MockBlobServiceClient_GetBlobs_Call struct {
	*mock.Call
}

// GetBlobs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.GetBlobsRequest
//   - opts ...grpc.CallOption
func (_e *MockBlobServiceClient_Expecter) GetBlobs(ctx interface{}, in interface{}, opts ...interface{}) *MockBlobServiceClient_GetBlobs_Call {
	return &MockBlobServiceClient_GetBlobs_Call{Call: _e.mock.On("GetBlobs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockBlobServiceClient_GetBlobs_Call) Run(run func(ctx context.Context, in *gitalypb.GetBlobsRequest, opts ...grpc.CallOption)) *MockBlobServiceClient_GetBlobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.GetBlobsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockBlobServiceClient_GetBlobs_Call) Return(_a0 gitalypb.BlobService_GetBlobsClient, _a1 error) *MockBlobServiceClient_GetBlobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlobServiceClient_GetBlobs_Call) RunAndReturn(run func(context.Context, *gitalypb.GetBlobsRequest, ...grpc.CallOption) (gitalypb.BlobService_GetBlobsClient, error)) *MockBlobServiceClient_GetBlobs_Call {
	_c.Call.Return(run)
	return _c
}

// GetLFSPointers provides a mock function with given fields: ctx, in, opts
func (_m *MockBlobServiceClient) GetLFSPointers(ctx context.Context, in *gitalypb.GetLFSPointersRequest, opts ...grpc.CallOption) (gitalypb.BlobService_GetLFSPointersClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLFSPointers")
	}

	var r0 gitalypb.BlobService_GetLFSPointersClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetLFSPointersRequest, ...grpc.CallOption) (gitalypb.BlobService_GetLFSPointersClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.GetLFSPointersRequest, ...grpc.CallOption) gitalypb.BlobService_GetLFSPointersClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.BlobService_GetLFSPointersClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.GetLFSPointersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlobServiceClient_GetLFSPointers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLFSPointers'
type MockBlobServiceClient_GetLFSPointers_Call struct {
	*mock.Call
}

// GetLFSPointers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.GetLFSPointersRequest
//   - opts ...grpc.CallOption
func (_e *MockBlobServiceClient_Expecter) GetLFSPointers(ctx interface{}, in interface{}, opts ...interface{}) *MockBlobServiceClient_GetLFSPointers_Call {
	return &MockBlobServiceClient_GetLFSPointers_Call{Call: _e.mock.On("GetLFSPointers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockBlobServiceClient_GetLFSPointers_Call) Run(run func(ctx context.Context, in *gitalypb.GetLFSPointersRequest, opts ...grpc.CallOption)) *MockBlobServiceClient_GetLFSPointers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.GetLFSPointersRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockBlobServiceClient_GetLFSPointers_Call) Return(_a0 gitalypb.BlobService_GetLFSPointersClient, _a1 error) *MockBlobServiceClient_GetLFSPointers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlobServiceClient_GetLFSPointers_Call) RunAndReturn(run func(context.Context, *gitalypb.GetLFSPointersRequest, ...grpc.CallOption) (gitalypb.BlobService_GetLFSPointersClient, error)) *MockBlobServiceClient_GetLFSPointers_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllBlobs provides a mock function with given fields: ctx, in, opts
func (_m *MockBlobServiceClient) ListAllBlobs(ctx context.Context, in *gitalypb.ListAllBlobsRequest, opts ...grpc.CallOption) (gitalypb.BlobService_ListAllBlobsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAllBlobs")
	}

	var r0 gitalypb.BlobService_ListAllBlobsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListAllBlobsRequest, ...grpc.CallOption) (gitalypb.BlobService_ListAllBlobsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListAllBlobsRequest, ...grpc.CallOption) gitalypb.BlobService_ListAllBlobsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.BlobService_ListAllBlobsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.ListAllBlobsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlobServiceClient_ListAllBlobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllBlobs'
type MockBlobServiceClient_ListAllBlobs_Call struct {
	*mock.Call
}

// ListAllBlobs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.ListAllBlobsRequest
//   - opts ...grpc.CallOption
func (_e *MockBlobServiceClient_Expecter) ListAllBlobs(ctx interface{}, in interface{}, opts ...interface{}) *MockBlobServiceClient_ListAllBlobs_Call {
	return &MockBlobServiceClient_ListAllBlobs_Call{Call: _e.mock.On("ListAllBlobs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockBlobServiceClient_ListAllBlobs_Call) Run(run func(ctx context.Context, in *gitalypb.ListAllBlobsRequest, opts ...grpc.CallOption)) *MockBlobServiceClient_ListAllBlobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.ListAllBlobsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockBlobServiceClient_ListAllBlobs_Call) Return(_a0 gitalypb.BlobService_ListAllBlobsClient, _a1 error) *MockBlobServiceClient_ListAllBlobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlobServiceClient_ListAllBlobs_Call) RunAndReturn(run func(context.Context, *gitalypb.ListAllBlobsRequest, ...grpc.CallOption) (gitalypb.BlobService_ListAllBlobsClient, error)) *MockBlobServiceClient_ListAllBlobs_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllLFSPointers provides a mock function with given fields: ctx, in, opts
func (_m *MockBlobServiceClient) ListAllLFSPointers(ctx context.Context, in *gitalypb.ListAllLFSPointersRequest, opts ...grpc.CallOption) (gitalypb.BlobService_ListAllLFSPointersClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAllLFSPointers")
	}

	var r0 gitalypb.BlobService_ListAllLFSPointersClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListAllLFSPointersRequest, ...grpc.CallOption) (gitalypb.BlobService_ListAllLFSPointersClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListAllLFSPointersRequest, ...grpc.CallOption) gitalypb.BlobService_ListAllLFSPointersClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.BlobService_ListAllLFSPointersClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.ListAllLFSPointersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlobServiceClient_ListAllLFSPointers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllLFSPointers'
type MockBlobServiceClient_ListAllLFSPointers_Call struct {
	*mock.Call
}

// ListAllLFSPointers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.ListAllLFSPointersRequest
//   - opts ...grpc.CallOption
func (_e *MockBlobServiceClient_Expecter) ListAllLFSPointers(ctx interface{}, in interface{}, opts ...interface{}) *MockBlobServiceClient_ListAllLFSPointers_Call {
	return &MockBlobServiceClient_ListAllLFSPointers_Call{Call: _e.mock.On("ListAllLFSPointers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockBlobServiceClient_ListAllLFSPointers_Call) Run(run func(ctx context.Context, in *gitalypb.ListAllLFSPointersRequest, opts ...grpc.CallOption)) *MockBlobServiceClient_ListAllLFSPointers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.ListAllLFSPointersRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockBlobServiceClient_ListAllLFSPointers_Call) Return(_a0 gitalypb.BlobService_ListAllLFSPointersClient, _a1 error) *MockBlobServiceClient_ListAllLFSPointers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlobServiceClient_ListAllLFSPointers_Call) RunAndReturn(run func(context.Context, *gitalypb.ListAllLFSPointersRequest, ...grpc.CallOption) (gitalypb.BlobService_ListAllLFSPointersClient, error)) *MockBlobServiceClient_ListAllLFSPointers_Call {
	_c.Call.Return(run)
	return _c
}

// ListBlobs provides a mock function with given fields: ctx, in, opts
func (_m *MockBlobServiceClient) ListBlobs(ctx context.Context, in *gitalypb.ListBlobsRequest, opts ...grpc.CallOption) (gitalypb.BlobService_ListBlobsClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBlobs")
	}

	var r0 gitalypb.BlobService_ListBlobsClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListBlobsRequest, ...grpc.CallOption) (gitalypb.BlobService_ListBlobsClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListBlobsRequest, ...grpc.CallOption) gitalypb.BlobService_ListBlobsClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.BlobService_ListBlobsClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.ListBlobsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlobServiceClient_ListBlobs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBlobs'
type MockBlobServiceClient_ListBlobs_Call struct {
	*mock.Call
}

// ListBlobs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.ListBlobsRequest
//   - opts ...grpc.CallOption
func (_e *MockBlobServiceClient_Expecter) ListBlobs(ctx interface{}, in interface{}, opts ...interface{}) *MockBlobServiceClient_ListBlobs_Call {
	return &MockBlobServiceClient_ListBlobs_Call{Call: _e.mock.On("ListBlobs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockBlobServiceClient_ListBlobs_Call) Run(run func(ctx context.Context, in *gitalypb.ListBlobsRequest, opts ...grpc.CallOption)) *MockBlobServiceClient_ListBlobs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.ListBlobsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockBlobServiceClient_ListBlobs_Call) Return(_a0 gitalypb.BlobService_ListBlobsClient, _a1 error) *MockBlobServiceClient_ListBlobs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlobServiceClient_ListBlobs_Call) RunAndReturn(run func(context.Context, *gitalypb.ListBlobsRequest, ...grpc.CallOption) (gitalypb.BlobService_ListBlobsClient, error)) *MockBlobServiceClient_ListBlobs_Call {
	_c.Call.Return(run)
	return _c
}

// ListLFSPointers provides a mock function with given fields: ctx, in, opts
func (_m *MockBlobServiceClient) ListLFSPointers(ctx context.Context, in *gitalypb.ListLFSPointersRequest, opts ...grpc.CallOption) (gitalypb.BlobService_ListLFSPointersClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLFSPointers")
	}

	var r0 gitalypb.BlobService_ListLFSPointersClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListLFSPointersRequest, ...grpc.CallOption) (gitalypb.BlobService_ListLFSPointersClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gitalypb.ListLFSPointersRequest, ...grpc.CallOption) gitalypb.BlobService_ListLFSPointersClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gitalypb.BlobService_ListLFSPointersClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gitalypb.ListLFSPointersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlobServiceClient_ListLFSPointers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLFSPointers'
type MockBlobServiceClient_ListLFSPointers_Call struct {
	*mock.Call
}

// ListLFSPointers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *gitalypb.ListLFSPointersRequest
//   - opts ...grpc.CallOption
func (_e *MockBlobServiceClient_Expecter) ListLFSPointers(ctx interface{}, in interface{}, opts ...interface{}) *MockBlobServiceClient_ListLFSPointers_Call {
	return &MockBlobServiceClient_ListLFSPointers_Call{Call: _e.mock.On("ListLFSPointers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockBlobServiceClient_ListLFSPointers_Call) Run(run func(ctx context.Context, in *gitalypb.ListLFSPointersRequest, opts ...grpc.CallOption)) *MockBlobServiceClient_ListLFSPointers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gitalypb.ListLFSPointersRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockBlobServiceClient_ListLFSPointers_Call) Return(_a0 gitalypb.BlobService_ListLFSPointersClient, _a1 error) *MockBlobServiceClient_ListLFSPointers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlobServiceClient_ListLFSPointers_Call) RunAndReturn(run func(context.Context, *gitalypb.ListLFSPointersRequest, ...grpc.CallOption) (gitalypb.BlobService_ListLFSPointersClient, error)) *MockBlobServiceClient_ListLFSPointers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlobServiceClient creates a new instance of MockBlobServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlobServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlobServiceClient {
	mock := &MockBlobServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

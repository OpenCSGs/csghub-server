// Code generated by mockery v2.53.0. DO NOT EDIT.

package token

import (
	mock "github.com/stretchr/testify/mock"

	types "opencsg.com/csghub-server/aigateway/types"
)

// MockTokenizer is an autogenerated mock type for the Tokenizer type
type MockTokenizer struct {
	mock.Mock
}

type MockTokenizer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenizer) EXPECT() *MockTokenizer_Expecter {
	return &MockTokenizer_Expecter{mock: &_m.Mock}
}

// EmbeddingEncode provides a mock function with given fields: _a0
func (_m *MockTokenizer) EmbeddingEncode(_a0 string) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for EmbeddingEncode")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenizer_EmbeddingEncode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmbeddingEncode'
type MockTokenizer_EmbeddingEncode_Call struct {
	*mock.Call
}

// EmbeddingEncode is a helper method to define mock.On call
//   - _a0 string
func (_e *MockTokenizer_Expecter) EmbeddingEncode(_a0 interface{}) *MockTokenizer_EmbeddingEncode_Call {
	return &MockTokenizer_EmbeddingEncode_Call{Call: _e.mock.On("EmbeddingEncode", _a0)}
}

func (_c *MockTokenizer_EmbeddingEncode_Call) Run(run func(_a0 string)) *MockTokenizer_EmbeddingEncode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTokenizer_EmbeddingEncode_Call) Return(_a0 int64, _a1 error) *MockTokenizer_EmbeddingEncode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenizer_EmbeddingEncode_Call) RunAndReturn(run func(string) (int64, error)) *MockTokenizer_EmbeddingEncode_Call {
	_c.Call.Return(run)
	return _c
}

// Encode provides a mock function with given fields: _a0
func (_m *MockTokenizer) Encode(_a0 types.Message) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Encode")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Message) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.Message) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(types.Message) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenizer_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type MockTokenizer_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - _a0 types.Message
func (_e *MockTokenizer_Expecter) Encode(_a0 interface{}) *MockTokenizer_Encode_Call {
	return &MockTokenizer_Encode_Call{Call: _e.mock.On("Encode", _a0)}
}

func (_c *MockTokenizer_Encode_Call) Run(run func(_a0 types.Message)) *MockTokenizer_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Message))
	})
	return _c
}

func (_c *MockTokenizer_Encode_Call) Return(_a0 int64, _a1 error) *MockTokenizer_Encode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenizer_Encode_Call) RunAndReturn(run func(types.Message) (int64, error)) *MockTokenizer_Encode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenizer creates a new instance of MockTokenizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenizer {
	mock := &MockTokenizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

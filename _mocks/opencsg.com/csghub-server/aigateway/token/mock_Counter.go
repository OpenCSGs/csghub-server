// Code generated by mockery v2.53.0. DO NOT EDIT.

package token

import (
	mock "github.com/stretchr/testify/mock"
	token "opencsg.com/csghub-server/aigateway/token"
)

// MockCounter is an autogenerated mock type for the Counter type
type MockCounter struct {
	mock.Mock
}

type MockCounter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCounter) EXPECT() *MockCounter_Expecter {
	return &MockCounter_Expecter{mock: &_m.Mock}
}

// Usage provides a mock function with no fields
func (_m *MockCounter) Usage() (*token.Usage, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Usage")
	}

	var r0 *token.Usage
	var r1 error
	if rf, ok := ret.Get(0).(func() (*token.Usage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *token.Usage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*token.Usage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCounter_Usage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Usage'
type MockCounter_Usage_Call struct {
	*mock.Call
}

// Usage is a helper method to define mock.On call
func (_e *MockCounter_Expecter) Usage() *MockCounter_Usage_Call {
	return &MockCounter_Usage_Call{Call: _e.mock.On("Usage")}
}

func (_c *MockCounter_Usage_Call) Run(run func()) *MockCounter_Usage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCounter_Usage_Call) Return(_a0 *token.Usage, _a1 error) *MockCounter_Usage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCounter_Usage_Call) RunAndReturn(run func() (*token.Usage, error)) *MockCounter_Usage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCounter creates a new instance of MockCounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCounter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCounter {
	mock := &MockCounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package token

import (
	openai "github.com/openai/openai-go"
	mock "github.com/stretchr/testify/mock"

	types "opencsg.com/csghub-server/aigateway/types"
)

// MockLLMTokenCounter is an autogenerated mock type for the LLMTokenCounter type
type MockLLMTokenCounter struct {
	mock.Mock
}

type MockLLMTokenCounter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLLMTokenCounter) EXPECT() *MockLLMTokenCounter_Expecter {
	return &MockLLMTokenCounter_Expecter{mock: &_m.Mock}
}

// AppendCompletionChunk provides a mock function with given fields: _a0
func (_m *MockLLMTokenCounter) AppendCompletionChunk(_a0 openai.ChatCompletionChunk) {
	_m.Called(_a0)
}

// MockLLMTokenCounter_AppendCompletionChunk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendCompletionChunk'
type MockLLMTokenCounter_AppendCompletionChunk_Call struct {
	*mock.Call
}

// AppendCompletionChunk is a helper method to define mock.On call
//   - _a0 openai.ChatCompletionChunk
func (_e *MockLLMTokenCounter_Expecter) AppendCompletionChunk(_a0 interface{}) *MockLLMTokenCounter_AppendCompletionChunk_Call {
	return &MockLLMTokenCounter_AppendCompletionChunk_Call{Call: _e.mock.On("AppendCompletionChunk", _a0)}
}

func (_c *MockLLMTokenCounter_AppendCompletionChunk_Call) Run(run func(_a0 openai.ChatCompletionChunk)) *MockLLMTokenCounter_AppendCompletionChunk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(openai.ChatCompletionChunk))
	})
	return _c
}

func (_c *MockLLMTokenCounter_AppendCompletionChunk_Call) Return() *MockLLMTokenCounter_AppendCompletionChunk_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLLMTokenCounter_AppendCompletionChunk_Call) RunAndReturn(run func(openai.ChatCompletionChunk)) *MockLLMTokenCounter_AppendCompletionChunk_Call {
	_c.Run(run)
	return _c
}

// AppendPrompts provides a mock function with given fields: prompts
func (_m *MockLLMTokenCounter) AppendPrompts(prompts ...types.ChatMessage) {
	_va := make([]interface{}, len(prompts))
	for _i := range prompts {
		_va[_i] = prompts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// MockLLMTokenCounter_AppendPrompts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendPrompts'
type MockLLMTokenCounter_AppendPrompts_Call struct {
	*mock.Call
}

// AppendPrompts is a helper method to define mock.On call
//   - prompts ...types.ChatMessage
func (_e *MockLLMTokenCounter_Expecter) AppendPrompts(prompts ...interface{}) *MockLLMTokenCounter_AppendPrompts_Call {
	return &MockLLMTokenCounter_AppendPrompts_Call{Call: _e.mock.On("AppendPrompts",
		append([]interface{}{}, prompts...)...)}
}

func (_c *MockLLMTokenCounter_AppendPrompts_Call) Run(run func(prompts ...types.ChatMessage)) *MockLLMTokenCounter_AppendPrompts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]types.ChatMessage, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(types.ChatMessage)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockLLMTokenCounter_AppendPrompts_Call) Return() *MockLLMTokenCounter_AppendPrompts_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLLMTokenCounter_AppendPrompts_Call) RunAndReturn(run func(...types.ChatMessage)) *MockLLMTokenCounter_AppendPrompts_Call {
	_c.Run(run)
	return _c
}

// Completion provides a mock function with given fields: _a0
func (_m *MockLLMTokenCounter) Completion(_a0 openai.ChatCompletion) {
	_m.Called(_a0)
}

// MockLLMTokenCounter_Completion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Completion'
type MockLLMTokenCounter_Completion_Call struct {
	*mock.Call
}

// Completion is a helper method to define mock.On call
//   - _a0 openai.ChatCompletion
func (_e *MockLLMTokenCounter_Expecter) Completion(_a0 interface{}) *MockLLMTokenCounter_Completion_Call {
	return &MockLLMTokenCounter_Completion_Call{Call: _e.mock.On("Completion", _a0)}
}

func (_c *MockLLMTokenCounter_Completion_Call) Run(run func(_a0 openai.ChatCompletion)) *MockLLMTokenCounter_Completion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(openai.ChatCompletion))
	})
	return _c
}

func (_c *MockLLMTokenCounter_Completion_Call) Return() *MockLLMTokenCounter_Completion_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLLMTokenCounter_Completion_Call) RunAndReturn(run func(openai.ChatCompletion)) *MockLLMTokenCounter_Completion_Call {
	_c.Run(run)
	return _c
}

// Usage provides a mock function with no fields
func (_m *MockLLMTokenCounter) Usage() (*openai.CompletionUsage, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Usage")
	}

	var r0 *openai.CompletionUsage
	var r1 error
	if rf, ok := ret.Get(0).(func() (*openai.CompletionUsage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *openai.CompletionUsage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openai.CompletionUsage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLLMTokenCounter_Usage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Usage'
type MockLLMTokenCounter_Usage_Call struct {
	*mock.Call
}

// Usage is a helper method to define mock.On call
func (_e *MockLLMTokenCounter_Expecter) Usage() *MockLLMTokenCounter_Usage_Call {
	return &MockLLMTokenCounter_Usage_Call{Call: _e.mock.On("Usage")}
}

func (_c *MockLLMTokenCounter_Usage_Call) Run(run func()) *MockLLMTokenCounter_Usage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLLMTokenCounter_Usage_Call) Return(_a0 *openai.CompletionUsage, _a1 error) *MockLLMTokenCounter_Usage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLLMTokenCounter_Usage_Call) RunAndReturn(run func() (*openai.CompletionUsage, error)) *MockLLMTokenCounter_Usage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLLMTokenCounter creates a new instance of MockLLMTokenCounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLLMTokenCounter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLLMTokenCounter {
	mock := &MockLLMTokenCounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

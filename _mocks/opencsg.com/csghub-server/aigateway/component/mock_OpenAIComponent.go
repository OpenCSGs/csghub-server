// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	token "opencsg.com/csghub-server/aigateway/token"

	types "opencsg.com/csghub-server/aigateway/types"
)

// MockOpenAIComponent is an autogenerated mock type for the OpenAIComponent type
type MockOpenAIComponent struct {
	mock.Mock
}

type MockOpenAIComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOpenAIComponent) EXPECT() *MockOpenAIComponent_Expecter {
	return &MockOpenAIComponent_Expecter{mock: &_m.Mock}
}

// GetAvailableModels provides a mock function with given fields: c, user
func (_m *MockOpenAIComponent) GetAvailableModels(c context.Context, user string) ([]types.Model, error) {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableModels")
	}

	var r0 []types.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]types.Model, error)); ok {
		return rf(c, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []types.Model); ok {
		r0 = rf(c, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOpenAIComponent_GetAvailableModels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailableModels'
type MockOpenAIComponent_GetAvailableModels_Call struct {
	*mock.Call
}

// GetAvailableModels is a helper method to define mock.On call
//   - c context.Context
//   - user string
func (_e *MockOpenAIComponent_Expecter) GetAvailableModels(c interface{}, user interface{}) *MockOpenAIComponent_GetAvailableModels_Call {
	return &MockOpenAIComponent_GetAvailableModels_Call{Call: _e.mock.On("GetAvailableModels", c, user)}
}

func (_c *MockOpenAIComponent_GetAvailableModels_Call) Run(run func(c context.Context, user string)) *MockOpenAIComponent_GetAvailableModels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOpenAIComponent_GetAvailableModels_Call) Return(_a0 []types.Model, _a1 error) *MockOpenAIComponent_GetAvailableModels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOpenAIComponent_GetAvailableModels_Call) RunAndReturn(run func(context.Context, string) ([]types.Model, error)) *MockOpenAIComponent_GetAvailableModels_Call {
	_c.Call.Return(run)
	return _c
}

// GetModelByID provides a mock function with given fields: c, username, modelID
func (_m *MockOpenAIComponent) GetModelByID(c context.Context, username string, modelID string) (*types.Model, error) {
	ret := _m.Called(c, username, modelID)

	if len(ret) == 0 {
		panic("no return value specified for GetModelByID")
	}

	var r0 *types.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*types.Model, error)); ok {
		return rf(c, username, modelID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *types.Model); ok {
		r0 = rf(c, username, modelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(c, username, modelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOpenAIComponent_GetModelByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModelByID'
type MockOpenAIComponent_GetModelByID_Call struct {
	*mock.Call
}

// GetModelByID is a helper method to define mock.On call
//   - c context.Context
//   - username string
//   - modelID string
func (_e *MockOpenAIComponent_Expecter) GetModelByID(c interface{}, username interface{}, modelID interface{}) *MockOpenAIComponent_GetModelByID_Call {
	return &MockOpenAIComponent_GetModelByID_Call{Call: _e.mock.On("GetModelByID", c, username, modelID)}
}

func (_c *MockOpenAIComponent_GetModelByID_Call) Run(run func(c context.Context, username string, modelID string)) *MockOpenAIComponent_GetModelByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockOpenAIComponent_GetModelByID_Call) Return(_a0 *types.Model, _a1 error) *MockOpenAIComponent_GetModelByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOpenAIComponent_GetModelByID_Call) RunAndReturn(run func(context.Context, string, string) (*types.Model, error)) *MockOpenAIComponent_GetModelByID_Call {
	_c.Call.Return(run)
	return _c
}

// RecordUsage provides a mock function with given fields: c, userUUID, model, tokenCounter
func (_m *MockOpenAIComponent) RecordUsage(c context.Context, userUUID string, model *types.Model, tokenCounter token.LLMTokenCounter) error {
	ret := _m.Called(c, userUUID, model, tokenCounter)

	if len(ret) == 0 {
		panic("no return value specified for RecordUsage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *types.Model, token.LLMTokenCounter) error); ok {
		r0 = rf(c, userUUID, model, tokenCounter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOpenAIComponent_RecordUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordUsage'
type MockOpenAIComponent_RecordUsage_Call struct {
	*mock.Call
}

// RecordUsage is a helper method to define mock.On call
//   - c context.Context
//   - userUUID string
//   - model *types.Model
//   - tokenCounter token.LLMTokenCounter
func (_e *MockOpenAIComponent_Expecter) RecordUsage(c interface{}, userUUID interface{}, model interface{}, tokenCounter interface{}) *MockOpenAIComponent_RecordUsage_Call {
	return &MockOpenAIComponent_RecordUsage_Call{Call: _e.mock.On("RecordUsage", c, userUUID, model, tokenCounter)}
}

func (_c *MockOpenAIComponent_RecordUsage_Call) Run(run func(c context.Context, userUUID string, model *types.Model, tokenCounter token.LLMTokenCounter)) *MockOpenAIComponent_RecordUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*types.Model), args[3].(token.LLMTokenCounter))
	})
	return _c
}

func (_c *MockOpenAIComponent_RecordUsage_Call) Return(_a0 error) *MockOpenAIComponent_RecordUsage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOpenAIComponent_RecordUsage_Call) RunAndReturn(run func(context.Context, string, *types.Model, token.LLMTokenCounter) error) *MockOpenAIComponent_RecordUsage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOpenAIComponent creates a new instance of MockOpenAIComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOpenAIComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOpenAIComponent {
	mock := &MockOpenAIComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

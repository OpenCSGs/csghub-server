// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/logcollector/types"
)

// MockLogCollectorManager is an autogenerated mock type for the LogCollectorManager type
type MockLogCollectorManager struct {
	mock.Mock
}

type MockLogCollectorManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogCollectorManager) EXPECT() *MockLogCollectorManager_Expecter {
	return &MockLogCollectorManager_Expecter{mock: &_m.Mock}
}

// GetStats provides a mock function with no fields
func (_m *MockLogCollectorManager) GetStats() *types.CollectorStats {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 *types.CollectorStats
	if rf, ok := ret.Get(0).(func() *types.CollectorStats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CollectorStats)
		}
	}

	return r0
}

// MockLogCollectorManager_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type MockLogCollectorManager_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
func (_e *MockLogCollectorManager_Expecter) GetStats() *MockLogCollectorManager_GetStats_Call {
	return &MockLogCollectorManager_GetStats_Call{Call: _e.mock.On("GetStats")}
}

func (_c *MockLogCollectorManager_GetStats_Call) Run(run func()) *MockLogCollectorManager_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogCollectorManager_GetStats_Call) Return(_a0 *types.CollectorStats) *MockLogCollectorManager_GetStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogCollectorManager_GetStats_Call) RunAndReturn(run func() *types.CollectorStats) *MockLogCollectorManager_GetStats_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockLogCollectorManager) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogCollectorManager_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockLogCollectorManager_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLogCollectorManager_Expecter) Start(ctx interface{}) *MockLogCollectorManager_Start_Call {
	return &MockLogCollectorManager_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockLogCollectorManager_Start_Call) Run(run func(ctx context.Context)) *MockLogCollectorManager_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLogCollectorManager_Start_Call) Return(_a0 error) *MockLogCollectorManager_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogCollectorManager_Start_Call) RunAndReturn(run func(context.Context) error) *MockLogCollectorManager_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockLogCollectorManager) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogCollectorManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockLogCollectorManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockLogCollectorManager_Expecter) Stop() *MockLogCollectorManager_Stop_Call {
	return &MockLogCollectorManager_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockLogCollectorManager_Stop_Call) Run(run func()) *MockLogCollectorManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogCollectorManager_Stop_Call) Return(_a0 error) *MockLogCollectorManager_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogCollectorManager_Stop_Call) RunAndReturn(run func() error) *MockLogCollectorManager_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogCollectorManager creates a new instance of MockLogCollectorManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogCollectorManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogCollectorManager {
	mock := &MockLogCollectorManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

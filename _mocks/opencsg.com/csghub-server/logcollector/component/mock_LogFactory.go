// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/logcollector/types"
)

// MockLogFactory is an autogenerated mock type for the LogFactory type
type MockLogFactory struct {
	mock.Mock
}

type MockLogFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogFactory) EXPECT() *MockLogFactory_Expecter {
	return &MockLogFactory_Expecter{mock: &_m.Mock}
}

// GetStats provides a mock function with no fields
func (_m *MockLogFactory) GetStats() map[string]*types.CollectorStats {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 map[string]*types.CollectorStats
	if rf, ok := ret.Get(0).(func() map[string]*types.CollectorStats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*types.CollectorStats)
		}
	}

	return r0
}

// MockLogFactory_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type MockLogFactory_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
func (_e *MockLogFactory_Expecter) GetStats() *MockLogFactory_GetStats_Call {
	return &MockLogFactory_GetStats_Call{Call: _e.mock.On("GetStats")}
}

func (_c *MockLogFactory_GetStats_Call) Run(run func()) *MockLogFactory_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogFactory_GetStats_Call) Return(_a0 map[string]*types.CollectorStats) *MockLogFactory_GetStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogFactory_GetStats_Call) RunAndReturn(run func() map[string]*types.CollectorStats) *MockLogFactory_GetStats_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *MockLogFactory) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogFactory_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockLogFactory_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockLogFactory_Expecter) Start() *MockLogFactory_Start_Call {
	return &MockLogFactory_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockLogFactory_Start_Call) Run(run func()) *MockLogFactory_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogFactory_Start_Call) Return(_a0 error) *MockLogFactory_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogFactory_Start_Call) RunAndReturn(run func() error) *MockLogFactory_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockLogFactory) Stop() {
	_m.Called()
}

// MockLogFactory_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockLogFactory_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockLogFactory_Expecter) Stop() *MockLogFactory_Stop_Call {
	return &MockLogFactory_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockLogFactory_Stop_Call) Run(run func()) *MockLogFactory_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogFactory_Stop_Call) Return() *MockLogFactory_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogFactory_Stop_Call) RunAndReturn(run func()) *MockLogFactory_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockLogFactory creates a new instance of MockLogFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogFactory {
	mock := &MockLogFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

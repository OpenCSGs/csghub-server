// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockImagebuilderComponent is an autogenerated mock type for the ImagebuilderComponent type
type MockImagebuilderComponent struct {
	mock.Mock
}

type MockImagebuilderComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImagebuilderComponent) EXPECT() *MockImagebuilderComponent_Expecter {
	return &MockImagebuilderComponent_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields: ctx, req
func (_m *MockImagebuilderComponent) Build(ctx context.Context, req types.ImageBuilderRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ImageBuilderRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockImagebuilderComponent_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type MockImagebuilderComponent_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ImageBuilderRequest
func (_e *MockImagebuilderComponent_Expecter) Build(ctx interface{}, req interface{}) *MockImagebuilderComponent_Build_Call {
	return &MockImagebuilderComponent_Build_Call{Call: _e.mock.On("Build", ctx, req)}
}

func (_c *MockImagebuilderComponent_Build_Call) Run(run func(ctx context.Context, req types.ImageBuilderRequest)) *MockImagebuilderComponent_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ImageBuilderRequest))
	})
	return _c
}

func (_c *MockImagebuilderComponent_Build_Call) Return(_a0 error) *MockImagebuilderComponent_Build_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockImagebuilderComponent_Build_Call) RunAndReturn(run func(context.Context, types.ImageBuilderRequest) error) *MockImagebuilderComponent_Build_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: ctx, req
func (_m *MockImagebuilderComponent) Stop(ctx context.Context, req types.ImageBuildStopReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ImageBuildStopReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockImagebuilderComponent_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockImagebuilderComponent_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ImageBuildStopReq
func (_e *MockImagebuilderComponent_Expecter) Stop(ctx interface{}, req interface{}) *MockImagebuilderComponent_Stop_Call {
	return &MockImagebuilderComponent_Stop_Call{Call: _e.mock.On("Stop", ctx, req)}
}

func (_c *MockImagebuilderComponent_Stop_Call) Run(run func(ctx context.Context, req types.ImageBuildStopReq)) *MockImagebuilderComponent_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ImageBuildStopReq))
	})
	return _c
}

func (_c *MockImagebuilderComponent_Stop_Call) Return(_a0 error) *MockImagebuilderComponent_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockImagebuilderComponent_Stop_Call) RunAndReturn(run func(context.Context, types.ImageBuildStopReq) error) *MockImagebuilderComponent_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockImagebuilderComponent creates a new instance of MockImagebuilderComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImagebuilderComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImagebuilderComponent {
	mock := &MockImagebuilderComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

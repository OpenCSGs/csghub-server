// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	cluster "opencsg.com/csghub-server/builder/deploy/cluster"

	config "opencsg.com/csghub-server/common/config"

	context "context"

	database "opencsg.com/csghub-server/builder/store/database"

	mock "github.com/stretchr/testify/mock"

	types "opencsg.com/csghub-server/common/types"

	v1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
)

// MockWorkFlowComponent is an autogenerated mock type for the WorkFlowComponent type
type MockWorkFlowComponent struct {
	mock.Mock
}

type MockWorkFlowComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkFlowComponent) EXPECT() *MockWorkFlowComponent_Expecter {
	return &MockWorkFlowComponent_Expecter{mock: &_m.Mock}
}

// CreateWorkflow provides a mock function with given fields: ctx, req
func (_m *MockWorkFlowComponent) CreateWorkflow(ctx context.Context, req types.ArgoWorkFlowReq) (*database.ArgoWorkflow, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkflow")
	}

	var r0 *database.ArgoWorkflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ArgoWorkFlowReq) (*database.ArgoWorkflow, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ArgoWorkFlowReq) *database.ArgoWorkflow); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.ArgoWorkflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ArgoWorkFlowReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkFlowComponent_CreateWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkflow'
type MockWorkFlowComponent_CreateWorkflow_Call struct {
	*mock.Call
}

// CreateWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ArgoWorkFlowReq
func (_e *MockWorkFlowComponent_Expecter) CreateWorkflow(ctx interface{}, req interface{}) *MockWorkFlowComponent_CreateWorkflow_Call {
	return &MockWorkFlowComponent_CreateWorkflow_Call{Call: _e.mock.On("CreateWorkflow", ctx, req)}
}

func (_c *MockWorkFlowComponent_CreateWorkflow_Call) Run(run func(ctx context.Context, req types.ArgoWorkFlowReq)) *MockWorkFlowComponent_CreateWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ArgoWorkFlowReq))
	})
	return _c
}

func (_c *MockWorkFlowComponent_CreateWorkflow_Call) Return(_a0 *database.ArgoWorkflow, _a1 error) *MockWorkFlowComponent_CreateWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkFlowComponent_CreateWorkflow_Call) RunAndReturn(run func(context.Context, types.ArgoWorkFlowReq) (*database.ArgoWorkflow, error)) *MockWorkFlowComponent_CreateWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkflow provides a mock function with given fields: ctx, id, username
func (_m *MockWorkFlowComponent) DeleteWorkflow(ctx context.Context, id int64, username string) error {
	ret := _m.Called(ctx, id, username)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkflow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, id, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkFlowComponent_DeleteWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkflow'
type MockWorkFlowComponent_DeleteWorkflow_Call struct {
	*mock.Call
}

// DeleteWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - username string
func (_e *MockWorkFlowComponent_Expecter) DeleteWorkflow(ctx interface{}, id interface{}, username interface{}) *MockWorkFlowComponent_DeleteWorkflow_Call {
	return &MockWorkFlowComponent_DeleteWorkflow_Call{Call: _e.mock.On("DeleteWorkflow", ctx, id, username)}
}

func (_c *MockWorkFlowComponent_DeleteWorkflow_Call) Run(run func(ctx context.Context, id int64, username string)) *MockWorkFlowComponent_DeleteWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockWorkFlowComponent_DeleteWorkflow_Call) Return(_a0 error) *MockWorkFlowComponent_DeleteWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkFlowComponent_DeleteWorkflow_Call) RunAndReturn(run func(context.Context, int64, string) error) *MockWorkFlowComponent_DeleteWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkflowInargo provides a mock function with given fields: ctx, delete
func (_m *MockWorkFlowComponent) DeleteWorkflowInargo(ctx context.Context, delete *v1alpha1.Workflow) error {
	ret := _m.Called(ctx, delete)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkflowInargo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Workflow) error); ok {
		r0 = rf(ctx, delete)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWorkFlowComponent_DeleteWorkflowInargo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkflowInargo'
type MockWorkFlowComponent_DeleteWorkflowInargo_Call struct {
	*mock.Call
}

// DeleteWorkflowInargo is a helper method to define mock.On call
//   - ctx context.Context
//   - delete *v1alpha1.Workflow
func (_e *MockWorkFlowComponent_Expecter) DeleteWorkflowInargo(ctx interface{}, delete interface{}) *MockWorkFlowComponent_DeleteWorkflowInargo_Call {
	return &MockWorkFlowComponent_DeleteWorkflowInargo_Call{Call: _e.mock.On("DeleteWorkflowInargo", ctx, delete)}
}

func (_c *MockWorkFlowComponent_DeleteWorkflowInargo_Call) Run(run func(ctx context.Context, delete *v1alpha1.Workflow)) *MockWorkFlowComponent_DeleteWorkflowInargo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1alpha1.Workflow))
	})
	return _c
}

func (_c *MockWorkFlowComponent_DeleteWorkflowInargo_Call) Return(_a0 error) *MockWorkFlowComponent_DeleteWorkflowInargo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkFlowComponent_DeleteWorkflowInargo_Call) RunAndReturn(run func(context.Context, *v1alpha1.Workflow) error) *MockWorkFlowComponent_DeleteWorkflowInargo_Call {
	_c.Call.Return(run)
	return _c
}

// FindWorkFlowById provides a mock function with given fields: ctx, id
func (_m *MockWorkFlowComponent) FindWorkFlowById(ctx context.Context, id int64) (database.ArgoWorkflow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindWorkFlowById")
	}

	var r0 database.ArgoWorkflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (database.ArgoWorkflow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) database.ArgoWorkflow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(database.ArgoWorkflow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkFlowComponent_FindWorkFlowById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindWorkFlowById'
type MockWorkFlowComponent_FindWorkFlowById_Call struct {
	*mock.Call
}

// FindWorkFlowById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockWorkFlowComponent_Expecter) FindWorkFlowById(ctx interface{}, id interface{}) *MockWorkFlowComponent_FindWorkFlowById_Call {
	return &MockWorkFlowComponent_FindWorkFlowById_Call{Call: _e.mock.On("FindWorkFlowById", ctx, id)}
}

func (_c *MockWorkFlowComponent_FindWorkFlowById_Call) Run(run func(ctx context.Context, id int64)) *MockWorkFlowComponent_FindWorkFlowById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockWorkFlowComponent_FindWorkFlowById_Call) Return(_a0 database.ArgoWorkflow, _a1 error) *MockWorkFlowComponent_FindWorkFlowById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkFlowComponent_FindWorkFlowById_Call) RunAndReturn(run func(context.Context, int64) (database.ArgoWorkflow, error)) *MockWorkFlowComponent_FindWorkFlowById_Call {
	_c.Call.Return(run)
	return _c
}

// FindWorkFlows provides a mock function with given fields: ctx, username, taskType, per, page
func (_m *MockWorkFlowComponent) FindWorkFlows(ctx context.Context, username string, taskType types.TaskType, per int, page int) ([]database.ArgoWorkflow, int, error) {
	ret := _m.Called(ctx, username, taskType, per, page)

	if len(ret) == 0 {
		panic("no return value specified for FindWorkFlows")
	}

	var r0 []database.ArgoWorkflow
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.TaskType, int, int) ([]database.ArgoWorkflow, int, error)); ok {
		return rf(ctx, username, taskType, per, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.TaskType, int, int) []database.ArgoWorkflow); ok {
		r0 = rf(ctx, username, taskType, per, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.ArgoWorkflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.TaskType, int, int) int); ok {
		r1 = rf(ctx, username, taskType, per, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, types.TaskType, int, int) error); ok {
		r2 = rf(ctx, username, taskType, per, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockWorkFlowComponent_FindWorkFlows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindWorkFlows'
type MockWorkFlowComponent_FindWorkFlows_Call struct {
	*mock.Call
}

// FindWorkFlows is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - taskType types.TaskType
//   - per int
//   - page int
func (_e *MockWorkFlowComponent_Expecter) FindWorkFlows(ctx interface{}, username interface{}, taskType interface{}, per interface{}, page interface{}) *MockWorkFlowComponent_FindWorkFlows_Call {
	return &MockWorkFlowComponent_FindWorkFlows_Call{Call: _e.mock.On("FindWorkFlows", ctx, username, taskType, per, page)}
}

func (_c *MockWorkFlowComponent_FindWorkFlows_Call) Run(run func(ctx context.Context, username string, taskType types.TaskType, per int, page int)) *MockWorkFlowComponent_FindWorkFlows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.TaskType), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *MockWorkFlowComponent_FindWorkFlows_Call) Return(_a0 []database.ArgoWorkflow, _a1 int, _a2 error) *MockWorkFlowComponent_FindWorkFlows_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockWorkFlowComponent_FindWorkFlows_Call) RunAndReturn(run func(context.Context, string, types.TaskType, int, int) ([]database.ArgoWorkflow, int, error)) *MockWorkFlowComponent_FindWorkFlows_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflow provides a mock function with given fields: ctx, id, username
func (_m *MockWorkFlowComponent) GetWorkflow(ctx context.Context, id int64, username string) (*database.ArgoWorkflow, error) {
	ret := _m.Called(ctx, id, username)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflow")
	}

	var r0 *database.ArgoWorkflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*database.ArgoWorkflow, error)); ok {
		return rf(ctx, id, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *database.ArgoWorkflow); ok {
		r0 = rf(ctx, id, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.ArgoWorkflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, id, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkFlowComponent_GetWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflow'
type MockWorkFlowComponent_GetWorkflow_Call struct {
	*mock.Call
}

// GetWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - username string
func (_e *MockWorkFlowComponent_Expecter) GetWorkflow(ctx interface{}, id interface{}, username interface{}) *MockWorkFlowComponent_GetWorkflow_Call {
	return &MockWorkFlowComponent_GetWorkflow_Call{Call: _e.mock.On("GetWorkflow", ctx, id, username)}
}

func (_c *MockWorkFlowComponent_GetWorkflow_Call) Run(run func(ctx context.Context, id int64, username string)) *MockWorkFlowComponent_GetWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockWorkFlowComponent_GetWorkflow_Call) Return(_a0 *database.ArgoWorkflow, _a1 error) *MockWorkFlowComponent_GetWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkFlowComponent_GetWorkflow_Call) RunAndReturn(run func(context.Context, int64, string) (*database.ArgoWorkflow, error)) *MockWorkFlowComponent_GetWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// RunInformer provides a mock function with given fields: clusterPool, _a1
func (_m *MockWorkFlowComponent) RunInformer(clusterPool *cluster.ClusterPool, _a1 *config.Config) {
	_m.Called(clusterPool, _a1)
}

// MockWorkFlowComponent_RunInformer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunInformer'
type MockWorkFlowComponent_RunInformer_Call struct {
	*mock.Call
}

// RunInformer is a helper method to define mock.On call
//   - clusterPool *cluster.ClusterPool
//   - _a1 *config.Config
func (_e *MockWorkFlowComponent_Expecter) RunInformer(clusterPool interface{}, _a1 interface{}) *MockWorkFlowComponent_RunInformer_Call {
	return &MockWorkFlowComponent_RunInformer_Call{Call: _e.mock.On("RunInformer", clusterPool, _a1)}
}

func (_c *MockWorkFlowComponent_RunInformer_Call) Run(run func(clusterPool *cluster.ClusterPool, _a1 *config.Config)) *MockWorkFlowComponent_RunInformer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cluster.ClusterPool), args[1].(*config.Config))
	})
	return _c
}

func (_c *MockWorkFlowComponent_RunInformer_Call) Return() *MockWorkFlowComponent_RunInformer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWorkFlowComponent_RunInformer_Call) RunAndReturn(run func(*cluster.ClusterPool, *config.Config)) *MockWorkFlowComponent_RunInformer_Call {
	_c.Run(run)
	return _c
}

// StartAcctRequestFee provides a mock function with given fields: wf
func (_m *MockWorkFlowComponent) StartAcctRequestFee(wf database.ArgoWorkflow) {
	_m.Called(wf)
}

// MockWorkFlowComponent_StartAcctRequestFee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartAcctRequestFee'
type MockWorkFlowComponent_StartAcctRequestFee_Call struct {
	*mock.Call
}

// StartAcctRequestFee is a helper method to define mock.On call
//   - wf database.ArgoWorkflow
func (_e *MockWorkFlowComponent_Expecter) StartAcctRequestFee(wf interface{}) *MockWorkFlowComponent_StartAcctRequestFee_Call {
	return &MockWorkFlowComponent_StartAcctRequestFee_Call{Call: _e.mock.On("StartAcctRequestFee", wf)}
}

func (_c *MockWorkFlowComponent_StartAcctRequestFee_Call) Run(run func(wf database.ArgoWorkflow)) *MockWorkFlowComponent_StartAcctRequestFee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(database.ArgoWorkflow))
	})
	return _c
}

func (_c *MockWorkFlowComponent_StartAcctRequestFee_Call) Return() *MockWorkFlowComponent_StartAcctRequestFee_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWorkFlowComponent_StartAcctRequestFee_Call) RunAndReturn(run func(database.ArgoWorkflow)) *MockWorkFlowComponent_StartAcctRequestFee_Call {
	_c.Run(run)
	return _c
}

// UpdateWorkflow provides a mock function with given fields: ctx, update, _a2
func (_m *MockWorkFlowComponent) UpdateWorkflow(ctx context.Context, update *v1alpha1.Workflow, _a2 *cluster.Cluster) (*database.ArgoWorkflow, error) {
	ret := _m.Called(ctx, update, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkflow")
	}

	var r0 *database.ArgoWorkflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Workflow, *cluster.Cluster) (*database.ArgoWorkflow, error)); ok {
		return rf(ctx, update, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Workflow, *cluster.Cluster) *database.ArgoWorkflow); ok {
		r0 = rf(ctx, update, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.ArgoWorkflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.Workflow, *cluster.Cluster) error); ok {
		r1 = rf(ctx, update, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWorkFlowComponent_UpdateWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkflow'
type MockWorkFlowComponent_UpdateWorkflow_Call struct {
	*mock.Call
}

// UpdateWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - update *v1alpha1.Workflow
//   - _a2 *cluster.Cluster
func (_e *MockWorkFlowComponent_Expecter) UpdateWorkflow(ctx interface{}, update interface{}, _a2 interface{}) *MockWorkFlowComponent_UpdateWorkflow_Call {
	return &MockWorkFlowComponent_UpdateWorkflow_Call{Call: _e.mock.On("UpdateWorkflow", ctx, update, _a2)}
}

func (_c *MockWorkFlowComponent_UpdateWorkflow_Call) Run(run func(ctx context.Context, update *v1alpha1.Workflow, _a2 *cluster.Cluster)) *MockWorkFlowComponent_UpdateWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1alpha1.Workflow), args[2].(*cluster.Cluster))
	})
	return _c
}

func (_c *MockWorkFlowComponent_UpdateWorkflow_Call) Return(_a0 *database.ArgoWorkflow, _a1 error) *MockWorkFlowComponent_UpdateWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWorkFlowComponent_UpdateWorkflow_Call) RunAndReturn(run func(context.Context, *v1alpha1.Workflow, *cluster.Cluster) (*database.ArgoWorkflow, error)) *MockWorkFlowComponent_UpdateWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkFlowComponent creates a new instance of MockWorkFlowComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkFlowComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkFlowComponent {
	mock := &MockWorkFlowComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

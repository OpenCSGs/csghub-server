// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockNotebookComponent is an autogenerated mock type for the NotebookComponent type
type MockNotebookComponent struct {
	mock.Mock
}

type MockNotebookComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotebookComponent) EXPECT() *MockNotebookComponent_Expecter {
	return &MockNotebookComponent_Expecter{mock: &_m.Mock}
}

// CreateNotebook provides a mock function with given fields: ctx, req
func (_m *MockNotebookComponent) CreateNotebook(ctx context.Context, req *types.CreateNotebookReq) (*types.NotebookRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotebook")
	}

	var r0 *types.NotebookRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateNotebookReq) (*types.NotebookRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateNotebookReq) *types.NotebookRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NotebookRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CreateNotebookReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotebookComponent_CreateNotebook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotebook'
type MockNotebookComponent_CreateNotebook_Call struct {
	*mock.Call
}

// CreateNotebook is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.CreateNotebookReq
func (_e *MockNotebookComponent_Expecter) CreateNotebook(ctx interface{}, req interface{}) *MockNotebookComponent_CreateNotebook_Call {
	return &MockNotebookComponent_CreateNotebook_Call{Call: _e.mock.On("CreateNotebook", ctx, req)}
}

func (_c *MockNotebookComponent_CreateNotebook_Call) Run(run func(ctx context.Context, req *types.CreateNotebookReq)) *MockNotebookComponent_CreateNotebook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CreateNotebookReq))
	})
	return _c
}

func (_c *MockNotebookComponent_CreateNotebook_Call) Return(_a0 *types.NotebookRes, _a1 error) *MockNotebookComponent_CreateNotebook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotebookComponent_CreateNotebook_Call) RunAndReturn(run func(context.Context, *types.CreateNotebookReq) (*types.NotebookRes, error)) *MockNotebookComponent_CreateNotebook_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotebook provides a mock function with given fields: ctx, req
func (_m *MockNotebookComponent) DeleteNotebook(ctx context.Context, req *types.DeleteNotebookReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotebook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.DeleteNotebookReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotebookComponent_DeleteNotebook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotebook'
type MockNotebookComponent_DeleteNotebook_Call struct {
	*mock.Call
}

// DeleteNotebook is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.DeleteNotebookReq
func (_e *MockNotebookComponent_Expecter) DeleteNotebook(ctx interface{}, req interface{}) *MockNotebookComponent_DeleteNotebook_Call {
	return &MockNotebookComponent_DeleteNotebook_Call{Call: _e.mock.On("DeleteNotebook", ctx, req)}
}

func (_c *MockNotebookComponent_DeleteNotebook_Call) Run(run func(ctx context.Context, req *types.DeleteNotebookReq)) *MockNotebookComponent_DeleteNotebook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.DeleteNotebookReq))
	})
	return _c
}

func (_c *MockNotebookComponent_DeleteNotebook_Call) Return(_a0 error) *MockNotebookComponent_DeleteNotebook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotebookComponent_DeleteNotebook_Call) RunAndReturn(run func(context.Context, *types.DeleteNotebookReq) error) *MockNotebookComponent_DeleteNotebook_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotebook provides a mock function with given fields: ctx, req
func (_m *MockNotebookComponent) GetNotebook(ctx context.Context, req *types.GetNotebookReq) (*types.NotebookRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetNotebook")
	}

	var r0 *types.NotebookRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.GetNotebookReq) (*types.NotebookRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.GetNotebookReq) *types.NotebookRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NotebookRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.GetNotebookReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotebookComponent_GetNotebook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotebook'
type MockNotebookComponent_GetNotebook_Call struct {
	*mock.Call
}

// GetNotebook is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.GetNotebookReq
func (_e *MockNotebookComponent_Expecter) GetNotebook(ctx interface{}, req interface{}) *MockNotebookComponent_GetNotebook_Call {
	return &MockNotebookComponent_GetNotebook_Call{Call: _e.mock.On("GetNotebook", ctx, req)}
}

func (_c *MockNotebookComponent_GetNotebook_Call) Run(run func(ctx context.Context, req *types.GetNotebookReq)) *MockNotebookComponent_GetNotebook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.GetNotebookReq))
	})
	return _c
}

func (_c *MockNotebookComponent_GetNotebook_Call) Return(_a0 *types.NotebookRes, _a1 error) *MockNotebookComponent_GetNotebook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotebookComponent_GetNotebook_Call) RunAndReturn(run func(context.Context, *types.GetNotebookReq) (*types.NotebookRes, error)) *MockNotebookComponent_GetNotebook_Call {
	_c.Call.Return(run)
	return _c
}

// StartNotebook provides a mock function with given fields: ctx, req
func (_m *MockNotebookComponent) StartNotebook(ctx context.Context, req *types.StartNotebookReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for StartNotebook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.StartNotebookReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotebookComponent_StartNotebook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartNotebook'
type MockNotebookComponent_StartNotebook_Call struct {
	*mock.Call
}

// StartNotebook is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.StartNotebookReq
func (_e *MockNotebookComponent_Expecter) StartNotebook(ctx interface{}, req interface{}) *MockNotebookComponent_StartNotebook_Call {
	return &MockNotebookComponent_StartNotebook_Call{Call: _e.mock.On("StartNotebook", ctx, req)}
}

func (_c *MockNotebookComponent_StartNotebook_Call) Run(run func(ctx context.Context, req *types.StartNotebookReq)) *MockNotebookComponent_StartNotebook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.StartNotebookReq))
	})
	return _c
}

func (_c *MockNotebookComponent_StartNotebook_Call) Return(_a0 error) *MockNotebookComponent_StartNotebook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotebookComponent_StartNotebook_Call) RunAndReturn(run func(context.Context, *types.StartNotebookReq) error) *MockNotebookComponent_StartNotebook_Call {
	_c.Call.Return(run)
	return _c
}

// StopNotebook provides a mock function with given fields: ctx, req
func (_m *MockNotebookComponent) StopNotebook(ctx context.Context, req *types.StopNotebookReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for StopNotebook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.StopNotebookReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotebookComponent_StopNotebook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopNotebook'
type MockNotebookComponent_StopNotebook_Call struct {
	*mock.Call
}

// StopNotebook is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.StopNotebookReq
func (_e *MockNotebookComponent_Expecter) StopNotebook(ctx interface{}, req interface{}) *MockNotebookComponent_StopNotebook_Call {
	return &MockNotebookComponent_StopNotebook_Call{Call: _e.mock.On("StopNotebook", ctx, req)}
}

func (_c *MockNotebookComponent_StopNotebook_Call) Run(run func(ctx context.Context, req *types.StopNotebookReq)) *MockNotebookComponent_StopNotebook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.StopNotebookReq))
	})
	return _c
}

func (_c *MockNotebookComponent_StopNotebook_Call) Return(_a0 error) *MockNotebookComponent_StopNotebook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotebookComponent_StopNotebook_Call) RunAndReturn(run func(context.Context, *types.StopNotebookReq) error) *MockNotebookComponent_StopNotebook_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotebook provides a mock function with given fields: ctx, req
func (_m *MockNotebookComponent) UpdateNotebook(ctx context.Context, req *types.UpdateNotebookReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotebook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdateNotebookReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotebookComponent_UpdateNotebook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotebook'
type MockNotebookComponent_UpdateNotebook_Call struct {
	*mock.Call
}

// UpdateNotebook is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.UpdateNotebookReq
func (_e *MockNotebookComponent_Expecter) UpdateNotebook(ctx interface{}, req interface{}) *MockNotebookComponent_UpdateNotebook_Call {
	return &MockNotebookComponent_UpdateNotebook_Call{Call: _e.mock.On("UpdateNotebook", ctx, req)}
}

func (_c *MockNotebookComponent_UpdateNotebook_Call) Run(run func(ctx context.Context, req *types.UpdateNotebookReq)) *MockNotebookComponent_UpdateNotebook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.UpdateNotebookReq))
	})
	return _c
}

func (_c *MockNotebookComponent_UpdateNotebook_Call) Return(_a0 error) *MockNotebookComponent_UpdateNotebook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotebookComponent_UpdateNotebook_Call) RunAndReturn(run func(context.Context, *types.UpdateNotebookReq) error) *MockNotebookComponent_UpdateNotebook_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotebookComponent creates a new instance of MockNotebookComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotebookComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotebookComponent {
	mock := &MockNotebookComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockRuleComponent is an autogenerated mock type for the RuleComponent type
type MockRuleComponent struct {
	mock.Mock
}

type MockRuleComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRuleComponent) EXPECT() *MockRuleComponent_Expecter {
	return &MockRuleComponent_Expecter{mock: &_m.Mock}
}

// MultiSync provides a mock function with given fields: ctx
func (_m *MockRuleComponent) MultiSync(ctx context.Context) (types.Rule, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MultiSync")
	}

	var r0 types.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (types.Rule, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) types.Rule); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(types.Rule)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuleComponent_MultiSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MultiSync'
type MockRuleComponent_MultiSync_Call struct {
	*mock.Call
}

// MultiSync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRuleComponent_Expecter) MultiSync(ctx interface{}) *MockRuleComponent_MultiSync_Call {
	return &MockRuleComponent_MultiSync_Call{Call: _e.mock.On("MultiSync", ctx)}
}

func (_c *MockRuleComponent_MultiSync_Call) Run(run func(ctx context.Context)) *MockRuleComponent_MultiSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRuleComponent_MultiSync_Call) Return(_a0 types.Rule, _a1 error) *MockRuleComponent_MultiSync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuleComponent_MultiSync_Call) RunAndReturn(run func(context.Context) (types.Rule, error)) *MockRuleComponent_MultiSync_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, req
func (_m *MockRuleComponent) Update(ctx context.Context, req types.UpdateRuleReq) (types.Rule, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 types.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.UpdateRuleReq) (types.Rule, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.UpdateRuleReq) types.Rule); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(types.Rule)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.UpdateRuleReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuleComponent_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRuleComponent_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.UpdateRuleReq
func (_e *MockRuleComponent_Expecter) Update(ctx interface{}, req interface{}) *MockRuleComponent_Update_Call {
	return &MockRuleComponent_Update_Call{Call: _e.mock.On("Update", ctx, req)}
}

func (_c *MockRuleComponent_Update_Call) Run(run func(ctx context.Context, req types.UpdateRuleReq)) *MockRuleComponent_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.UpdateRuleReq))
	})
	return _c
}

func (_c *MockRuleComponent_Update_Call) Return(_a0 types.Rule, _a1 error) *MockRuleComponent_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuleComponent_Update_Call) RunAndReturn(run func(context.Context, types.UpdateRuleReq) (types.Rule, error)) *MockRuleComponent_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRuleComponent creates a new instance of MockRuleComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRuleComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRuleComponent {
	mock := &MockRuleComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

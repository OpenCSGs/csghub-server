// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockStatComponent is an autogenerated mock type for the StatComponent type
type MockStatComponent struct {
	mock.Mock
}

type MockStatComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStatComponent) EXPECT() *MockStatComponent_Expecter {
	return &MockStatComponent_Expecter{mock: &_m.Mock}
}

// GetStatSnap provides a mock function with given fields: ctx, req
func (_m *MockStatComponent) GetStatSnap(ctx context.Context, req types.StatSnapshotReq) (*types.StatSnapshotResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetStatSnap")
	}

	var r0 *types.StatSnapshotResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.StatSnapshotReq) (*types.StatSnapshotResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.StatSnapshotReq) *types.StatSnapshotResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.StatSnapshotResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.StatSnapshotReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStatComponent_GetStatSnap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatSnap'
type MockStatComponent_GetStatSnap_Call struct {
	*mock.Call
}

// GetStatSnap is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.StatSnapshotReq
func (_e *MockStatComponent_Expecter) GetStatSnap(ctx interface{}, req interface{}) *MockStatComponent_GetStatSnap_Call {
	return &MockStatComponent_GetStatSnap_Call{Call: _e.mock.On("GetStatSnap", ctx, req)}
}

func (_c *MockStatComponent_GetStatSnap_Call) Run(run func(ctx context.Context, req types.StatSnapshotReq)) *MockStatComponent_GetStatSnap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.StatSnapshotReq))
	})
	return _c
}

func (_c *MockStatComponent_GetStatSnap_Call) Return(_a0 *types.StatSnapshotResp, _a1 error) *MockStatComponent_GetStatSnap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStatComponent_GetStatSnap_Call) RunAndReturn(run func(context.Context, types.StatSnapshotReq) (*types.StatSnapshotResp, error)) *MockStatComponent_GetStatSnap_Call {
	_c.Call.Return(run)
	return _c
}

// MakeStatSnap provides a mock function with given fields: ctx
func (_m *MockStatComponent) MakeStatSnap(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MakeStatSnap")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStatComponent_MakeStatSnap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeStatSnap'
type MockStatComponent_MakeStatSnap_Call struct {
	*mock.Call
}

// MakeStatSnap is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStatComponent_Expecter) MakeStatSnap(ctx interface{}) *MockStatComponent_MakeStatSnap_Call {
	return &MockStatComponent_MakeStatSnap_Call{Call: _e.mock.On("MakeStatSnap", ctx)}
}

func (_c *MockStatComponent_MakeStatSnap_Call) Run(run func(ctx context.Context)) *MockStatComponent_MakeStatSnap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStatComponent_MakeStatSnap_Call) Return(_a0 error) *MockStatComponent_MakeStatSnap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStatComponent_MakeStatSnap_Call) RunAndReturn(run func(context.Context) error) *MockStatComponent_MakeStatSnap_Call {
	_c.Call.Return(run)
	return _c
}

// StatRunningDeploys provides a mock function with given fields: ctx
func (_m *MockStatComponent) StatRunningDeploys(ctx context.Context) (map[int]*types.StatRunningDeploy, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StatRunningDeploys")
	}

	var r0 map[int]*types.StatRunningDeploy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[int]*types.StatRunningDeploy, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[int]*types.StatRunningDeploy); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]*types.StatRunningDeploy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStatComponent_StatRunningDeploys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatRunningDeploys'
type MockStatComponent_StatRunningDeploys_Call struct {
	*mock.Call
}

// StatRunningDeploys is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStatComponent_Expecter) StatRunningDeploys(ctx interface{}) *MockStatComponent_StatRunningDeploys_Call {
	return &MockStatComponent_StatRunningDeploys_Call{Call: _e.mock.On("StatRunningDeploys", ctx)}
}

func (_c *MockStatComponent_StatRunningDeploys_Call) Run(run func(ctx context.Context)) *MockStatComponent_StatRunningDeploys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStatComponent_StatRunningDeploys_Call) Return(_a0 map[int]*types.StatRunningDeploy, _a1 error) *MockStatComponent_StatRunningDeploys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStatComponent_StatRunningDeploys_Call) RunAndReturn(run func(context.Context) (map[int]*types.StatRunningDeploy, error)) *MockStatComponent_StatRunningDeploys_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStatComponent creates a new instance of MockStatComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStatComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStatComponent {
	mock := &MockStatComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

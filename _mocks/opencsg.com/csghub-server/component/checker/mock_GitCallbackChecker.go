// Code generated by mockery v2.53.0. DO NOT EDIT.

package checker

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockGitCallbackChecker is an autogenerated mock type for the GitCallbackChecker type
type MockGitCallbackChecker struct {
	mock.Mock
}

type MockGitCallbackChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitCallbackChecker) EXPECT() *MockGitCallbackChecker_Expecter {
	return &MockGitCallbackChecker_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: ctx, req
func (_m *MockGitCallbackChecker) Check(ctx context.Context, req types.GitalyAllowedReq) (bool, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.GitalyAllowedReq) (bool, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.GitalyAllowedReq) bool); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.GitalyAllowedReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitCallbackChecker_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockGitCallbackChecker_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.GitalyAllowedReq
func (_e *MockGitCallbackChecker_Expecter) Check(ctx interface{}, req interface{}) *MockGitCallbackChecker_Check_Call {
	return &MockGitCallbackChecker_Check_Call{Call: _e.mock.On("Check", ctx, req)}
}

func (_c *MockGitCallbackChecker_Check_Call) Run(run func(ctx context.Context, req types.GitalyAllowedReq)) *MockGitCallbackChecker_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.GitalyAllowedReq))
	})
	return _c
}

func (_c *MockGitCallbackChecker_Check_Call) Return(_a0 bool, _a1 error) *MockGitCallbackChecker_Check_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitCallbackChecker_Check_Call) RunAndReturn(run func(context.Context, types.GitalyAllowedReq) (bool, error)) *MockGitCallbackChecker_Check_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGitCallbackChecker creates a new instance of MockGitCallbackChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitCallbackChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitCallbackChecker {
	mock := &MockGitCallbackChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockSensitiveComponent is an autogenerated mock type for the SensitiveComponent type
type MockSensitiveComponent struct {
	mock.Mock
}

type MockSensitiveComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSensitiveComponent) EXPECT() *MockSensitiveComponent_Expecter {
	return &MockSensitiveComponent_Expecter{mock: &_m.Mock}
}

// CheckImage provides a mock function with given fields: ctx, scenario, ossBucketName, ossObjectName
func (_m *MockSensitiveComponent) CheckImage(ctx context.Context, scenario string, ossBucketName string, ossObjectName string) (bool, error) {
	ret := _m.Called(ctx, scenario, ossBucketName, ossObjectName)

	if len(ret) == 0 {
		panic("no return value specified for CheckImage")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, scenario, ossBucketName, ossObjectName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, scenario, ossBucketName, ossObjectName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, scenario, ossBucketName, ossObjectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSensitiveComponent_CheckImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckImage'
type MockSensitiveComponent_CheckImage_Call struct {
	*mock.Call
}

// CheckImage is a helper method to define mock.On call
//   - ctx context.Context
//   - scenario string
//   - ossBucketName string
//   - ossObjectName string
func (_e *MockSensitiveComponent_Expecter) CheckImage(ctx interface{}, scenario interface{}, ossBucketName interface{}, ossObjectName interface{}) *MockSensitiveComponent_CheckImage_Call {
	return &MockSensitiveComponent_CheckImage_Call{Call: _e.mock.On("CheckImage", ctx, scenario, ossBucketName, ossObjectName)}
}

func (_c *MockSensitiveComponent_CheckImage_Call) Run(run func(ctx context.Context, scenario string, ossBucketName string, ossObjectName string)) *MockSensitiveComponent_CheckImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSensitiveComponent_CheckImage_Call) Return(_a0 bool, _a1 error) *MockSensitiveComponent_CheckImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSensitiveComponent_CheckImage_Call) RunAndReturn(run func(context.Context, string, string, string) (bool, error)) *MockSensitiveComponent_CheckImage_Call {
	_c.Call.Return(run)
	return _c
}

// CheckRequestV2 provides a mock function with given fields: ctx, req
func (_m *MockSensitiveComponent) CheckRequestV2(ctx context.Context, req types.SensitiveRequestV2) (bool, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CheckRequestV2")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.SensitiveRequestV2) (bool, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.SensitiveRequestV2) bool); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.SensitiveRequestV2) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSensitiveComponent_CheckRequestV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckRequestV2'
type MockSensitiveComponent_CheckRequestV2_Call struct {
	*mock.Call
}

// CheckRequestV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.SensitiveRequestV2
func (_e *MockSensitiveComponent_Expecter) CheckRequestV2(ctx interface{}, req interface{}) *MockSensitiveComponent_CheckRequestV2_Call {
	return &MockSensitiveComponent_CheckRequestV2_Call{Call: _e.mock.On("CheckRequestV2", ctx, req)}
}

func (_c *MockSensitiveComponent_CheckRequestV2_Call) Run(run func(ctx context.Context, req types.SensitiveRequestV2)) *MockSensitiveComponent_CheckRequestV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.SensitiveRequestV2))
	})
	return _c
}

func (_c *MockSensitiveComponent_CheckRequestV2_Call) Return(_a0 bool, _a1 error) *MockSensitiveComponent_CheckRequestV2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSensitiveComponent_CheckRequestV2_Call) RunAndReturn(run func(context.Context, types.SensitiveRequestV2) (bool, error)) *MockSensitiveComponent_CheckRequestV2_Call {
	_c.Call.Return(run)
	return _c
}

// CheckText provides a mock function with given fields: ctx, scenario, text
func (_m *MockSensitiveComponent) CheckText(ctx context.Context, scenario string, text string) (bool, error) {
	ret := _m.Called(ctx, scenario, text)

	if len(ret) == 0 {
		panic("no return value specified for CheckText")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, scenario, text)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, scenario, text)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, scenario, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSensitiveComponent_CheckText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckText'
type MockSensitiveComponent_CheckText_Call struct {
	*mock.Call
}

// CheckText is a helper method to define mock.On call
//   - ctx context.Context
//   - scenario string
//   - text string
func (_e *MockSensitiveComponent_Expecter) CheckText(ctx interface{}, scenario interface{}, text interface{}) *MockSensitiveComponent_CheckText_Call {
	return &MockSensitiveComponent_CheckText_Call{Call: _e.mock.On("CheckText", ctx, scenario, text)}
}

func (_c *MockSensitiveComponent_CheckText_Call) Run(run func(ctx context.Context, scenario string, text string)) *MockSensitiveComponent_CheckText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSensitiveComponent_CheckText_Call) Return(_a0 bool, _a1 error) *MockSensitiveComponent_CheckText_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSensitiveComponent_CheckText_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockSensitiveComponent_CheckText_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSensitiveComponent creates a new instance of MockSensitiveComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSensitiveComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSensitiveComponent {
	mock := &MockSensitiveComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	gitserver "opencsg.com/csghub-server/builder/git/gitserver"
	database "opencsg.com/csghub-server/builder/store/database"

	mock "github.com/stretchr/testify/mock"

	types "opencsg.com/csghub-server/common/types"
)

// MockPromptComponent is an autogenerated mock type for the PromptComponent type
type MockPromptComponent struct {
	mock.Mock
}

type MockPromptComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPromptComponent) EXPECT() *MockPromptComponent_Expecter {
	return &MockPromptComponent_Expecter{mock: &_m.Mock}
}

// AddRelationModel provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) AddRelationModel(ctx context.Context, req types.RelationModel) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddRelationModel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RelationModel) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPromptComponent_AddRelationModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRelationModel'
type MockPromptComponent_AddRelationModel_Call struct {
	*mock.Call
}

// AddRelationModel is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.RelationModel
func (_e *MockPromptComponent_Expecter) AddRelationModel(ctx interface{}, req interface{}) *MockPromptComponent_AddRelationModel_Call {
	return &MockPromptComponent_AddRelationModel_Call{Call: _e.mock.On("AddRelationModel", ctx, req)}
}

func (_c *MockPromptComponent_AddRelationModel_Call) Run(run func(ctx context.Context, req types.RelationModel)) *MockPromptComponent_AddRelationModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RelationModel))
	})
	return _c
}

func (_c *MockPromptComponent_AddRelationModel_Call) Return(_a0 error) *MockPromptComponent_AddRelationModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromptComponent_AddRelationModel_Call) RunAndReturn(run func(context.Context, types.RelationModel) error) *MockPromptComponent_AddRelationModel_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePrompt provides a mock function with given fields: ctx, req, body
func (_m *MockPromptComponent) CreatePrompt(ctx context.Context, req types.PromptReq, body *types.CreatePromptReq) (*types.Prompt, error) {
	ret := _m.Called(ctx, req, body)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrompt")
	}

	var r0 *types.Prompt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PromptReq, *types.CreatePromptReq) (*types.Prompt, error)); ok {
		return rf(ctx, req, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.PromptReq, *types.CreatePromptReq) *types.Prompt); ok {
		r0 = rf(ctx, req, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Prompt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.PromptReq, *types.CreatePromptReq) error); ok {
		r1 = rf(ctx, req, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptComponent_CreatePrompt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePrompt'
type MockPromptComponent_CreatePrompt_Call struct {
	*mock.Call
}

// CreatePrompt is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.PromptReq
//   - body *types.CreatePromptReq
func (_e *MockPromptComponent_Expecter) CreatePrompt(ctx interface{}, req interface{}, body interface{}) *MockPromptComponent_CreatePrompt_Call {
	return &MockPromptComponent_CreatePrompt_Call{Call: _e.mock.On("CreatePrompt", ctx, req, body)}
}

func (_c *MockPromptComponent_CreatePrompt_Call) Run(run func(ctx context.Context, req types.PromptReq, body *types.CreatePromptReq)) *MockPromptComponent_CreatePrompt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PromptReq), args[2].(*types.CreatePromptReq))
	})
	return _c
}

func (_c *MockPromptComponent_CreatePrompt_Call) Return(_a0 *types.Prompt, _a1 error) *MockPromptComponent_CreatePrompt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptComponent_CreatePrompt_Call) RunAndReturn(run func(context.Context, types.PromptReq, *types.CreatePromptReq) (*types.Prompt, error)) *MockPromptComponent_CreatePrompt_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePromptRepo provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) CreatePromptRepo(ctx context.Context, req *types.CreatePromptRepoReq) (*types.PromptRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreatePromptRepo")
	}

	var r0 *types.PromptRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreatePromptRepoReq) (*types.PromptRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreatePromptRepoReq) *types.PromptRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PromptRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CreatePromptRepoReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptComponent_CreatePromptRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePromptRepo'
type MockPromptComponent_CreatePromptRepo_Call struct {
	*mock.Call
}

// CreatePromptRepo is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.CreatePromptRepoReq
func (_e *MockPromptComponent_Expecter) CreatePromptRepo(ctx interface{}, req interface{}) *MockPromptComponent_CreatePromptRepo_Call {
	return &MockPromptComponent_CreatePromptRepo_Call{Call: _e.mock.On("CreatePromptRepo", ctx, req)}
}

func (_c *MockPromptComponent_CreatePromptRepo_Call) Run(run func(ctx context.Context, req *types.CreatePromptRepoReq)) *MockPromptComponent_CreatePromptRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CreatePromptRepoReq))
	})
	return _c
}

func (_c *MockPromptComponent_CreatePromptRepo_Call) Return(_a0 *types.PromptRes, _a1 error) *MockPromptComponent_CreatePromptRepo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptComponent_CreatePromptRepo_Call) RunAndReturn(run func(context.Context, *types.CreatePromptRepoReq) (*types.PromptRes, error)) *MockPromptComponent_CreatePromptRepo_Call {
	_c.Call.Return(run)
	return _c
}

// DelRelationModel provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) DelRelationModel(ctx context.Context, req types.RelationModel) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DelRelationModel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RelationModel) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPromptComponent_DelRelationModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelRelationModel'
type MockPromptComponent_DelRelationModel_Call struct {
	*mock.Call
}

// DelRelationModel is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.RelationModel
func (_e *MockPromptComponent_Expecter) DelRelationModel(ctx interface{}, req interface{}) *MockPromptComponent_DelRelationModel_Call {
	return &MockPromptComponent_DelRelationModel_Call{Call: _e.mock.On("DelRelationModel", ctx, req)}
}

func (_c *MockPromptComponent_DelRelationModel_Call) Run(run func(ctx context.Context, req types.RelationModel)) *MockPromptComponent_DelRelationModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RelationModel))
	})
	return _c
}

func (_c *MockPromptComponent_DelRelationModel_Call) Return(_a0 error) *MockPromptComponent_DelRelationModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromptComponent_DelRelationModel_Call) RunAndReturn(run func(context.Context, types.RelationModel) error) *MockPromptComponent_DelRelationModel_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePrompt provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) DeletePrompt(ctx context.Context, req types.PromptReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrompt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PromptReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPromptComponent_DeletePrompt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrompt'
type MockPromptComponent_DeletePrompt_Call struct {
	*mock.Call
}

// DeletePrompt is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.PromptReq
func (_e *MockPromptComponent_Expecter) DeletePrompt(ctx interface{}, req interface{}) *MockPromptComponent_DeletePrompt_Call {
	return &MockPromptComponent_DeletePrompt_Call{Call: _e.mock.On("DeletePrompt", ctx, req)}
}

func (_c *MockPromptComponent_DeletePrompt_Call) Run(run func(ctx context.Context, req types.PromptReq)) *MockPromptComponent_DeletePrompt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PromptReq))
	})
	return _c
}

func (_c *MockPromptComponent_DeletePrompt_Call) Return(_a0 error) *MockPromptComponent_DeletePrompt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromptComponent_DeletePrompt_Call) RunAndReturn(run func(context.Context, types.PromptReq) error) *MockPromptComponent_DeletePrompt_Call {
	_c.Call.Return(run)
	return _c
}

// GetConversation provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) GetConversation(ctx context.Context, req types.ConversationReq) (*database.PromptConversation, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetConversation")
	}

	var r0 *database.PromptConversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConversationReq) (*database.PromptConversation, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ConversationReq) *database.PromptConversation); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.PromptConversation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ConversationReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptComponent_GetConversation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConversation'
type MockPromptComponent_GetConversation_Call struct {
	*mock.Call
}

// GetConversation is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ConversationReq
func (_e *MockPromptComponent_Expecter) GetConversation(ctx interface{}, req interface{}) *MockPromptComponent_GetConversation_Call {
	return &MockPromptComponent_GetConversation_Call{Call: _e.mock.On("GetConversation", ctx, req)}
}

func (_c *MockPromptComponent_GetConversation_Call) Run(run func(ctx context.Context, req types.ConversationReq)) *MockPromptComponent_GetConversation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ConversationReq))
	})
	return _c
}

func (_c *MockPromptComponent_GetConversation_Call) Return(_a0 *database.PromptConversation, _a1 error) *MockPromptComponent_GetConversation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptComponent_GetConversation_Call) RunAndReturn(run func(context.Context, types.ConversationReq) (*database.PromptConversation, error)) *MockPromptComponent_GetConversation_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrompt provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) GetPrompt(ctx context.Context, req types.PromptReq) (*types.PromptOutput, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetPrompt")
	}

	var r0 *types.PromptOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PromptReq) (*types.PromptOutput, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.PromptReq) *types.PromptOutput); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PromptOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.PromptReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptComponent_GetPrompt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrompt'
type MockPromptComponent_GetPrompt_Call struct {
	*mock.Call
}

// GetPrompt is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.PromptReq
func (_e *MockPromptComponent_Expecter) GetPrompt(ctx interface{}, req interface{}) *MockPromptComponent_GetPrompt_Call {
	return &MockPromptComponent_GetPrompt_Call{Call: _e.mock.On("GetPrompt", ctx, req)}
}

func (_c *MockPromptComponent_GetPrompt_Call) Run(run func(ctx context.Context, req types.PromptReq)) *MockPromptComponent_GetPrompt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PromptReq))
	})
	return _c
}

func (_c *MockPromptComponent_GetPrompt_Call) Return(_a0 *types.PromptOutput, _a1 error) *MockPromptComponent_GetPrompt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptComponent_GetPrompt_Call) RunAndReturn(run func(context.Context, types.PromptReq) (*types.PromptOutput, error)) *MockPromptComponent_GetPrompt_Call {
	_c.Call.Return(run)
	return _c
}

// HateConversationMessage provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) HateConversationMessage(ctx context.Context, req types.ConversationMessageReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for HateConversationMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConversationMessageReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPromptComponent_HateConversationMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HateConversationMessage'
type MockPromptComponent_HateConversationMessage_Call struct {
	*mock.Call
}

// HateConversationMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ConversationMessageReq
func (_e *MockPromptComponent_Expecter) HateConversationMessage(ctx interface{}, req interface{}) *MockPromptComponent_HateConversationMessage_Call {
	return &MockPromptComponent_HateConversationMessage_Call{Call: _e.mock.On("HateConversationMessage", ctx, req)}
}

func (_c *MockPromptComponent_HateConversationMessage_Call) Run(run func(ctx context.Context, req types.ConversationMessageReq)) *MockPromptComponent_HateConversationMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ConversationMessageReq))
	})
	return _c
}

func (_c *MockPromptComponent_HateConversationMessage_Call) Return(_a0 error) *MockPromptComponent_HateConversationMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromptComponent_HateConversationMessage_Call) RunAndReturn(run func(context.Context, types.ConversationMessageReq) error) *MockPromptComponent_HateConversationMessage_Call {
	_c.Call.Return(run)
	return _c
}

// IndexPromptRepo provides a mock function with given fields: ctx, filter, per, page
func (_m *MockPromptComponent) IndexPromptRepo(ctx context.Context, filter *types.RepoFilter, per int, page int) ([]types.PromptRes, int, error) {
	ret := _m.Called(ctx, filter, per, page)

	if len(ret) == 0 {
		panic("no return value specified for IndexPromptRepo")
	}

	var r0 []types.PromptRes
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.RepoFilter, int, int) ([]types.PromptRes, int, error)); ok {
		return rf(ctx, filter, per, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.RepoFilter, int, int) []types.PromptRes); ok {
		r0 = rf(ctx, filter, per, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PromptRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.RepoFilter, int, int) int); ok {
		r1 = rf(ctx, filter, per, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *types.RepoFilter, int, int) error); ok {
		r2 = rf(ctx, filter, per, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPromptComponent_IndexPromptRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexPromptRepo'
type MockPromptComponent_IndexPromptRepo_Call struct {
	*mock.Call
}

// IndexPromptRepo is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *types.RepoFilter
//   - per int
//   - page int
func (_e *MockPromptComponent_Expecter) IndexPromptRepo(ctx interface{}, filter interface{}, per interface{}, page interface{}) *MockPromptComponent_IndexPromptRepo_Call {
	return &MockPromptComponent_IndexPromptRepo_Call{Call: _e.mock.On("IndexPromptRepo", ctx, filter, per, page)}
}

func (_c *MockPromptComponent_IndexPromptRepo_Call) Run(run func(ctx context.Context, filter *types.RepoFilter, per int, page int)) *MockPromptComponent_IndexPromptRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RepoFilter), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockPromptComponent_IndexPromptRepo_Call) Return(_a0 []types.PromptRes, _a1 int, _a2 error) *MockPromptComponent_IndexPromptRepo_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPromptComponent_IndexPromptRepo_Call) RunAndReturn(run func(context.Context, *types.RepoFilter, int, int) ([]types.PromptRes, int, error)) *MockPromptComponent_IndexPromptRepo_Call {
	_c.Call.Return(run)
	return _c
}

// LikeConversationMessage provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) LikeConversationMessage(ctx context.Context, req types.ConversationMessageReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for LikeConversationMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConversationMessageReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPromptComponent_LikeConversationMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LikeConversationMessage'
type MockPromptComponent_LikeConversationMessage_Call struct {
	*mock.Call
}

// LikeConversationMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ConversationMessageReq
func (_e *MockPromptComponent_Expecter) LikeConversationMessage(ctx interface{}, req interface{}) *MockPromptComponent_LikeConversationMessage_Call {
	return &MockPromptComponent_LikeConversationMessage_Call{Call: _e.mock.On("LikeConversationMessage", ctx, req)}
}

func (_c *MockPromptComponent_LikeConversationMessage_Call) Run(run func(ctx context.Context, req types.ConversationMessageReq)) *MockPromptComponent_LikeConversationMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ConversationMessageReq))
	})
	return _c
}

func (_c *MockPromptComponent_LikeConversationMessage_Call) Return(_a0 error) *MockPromptComponent_LikeConversationMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromptComponent_LikeConversationMessage_Call) RunAndReturn(run func(context.Context, types.ConversationMessageReq) error) *MockPromptComponent_LikeConversationMessage_Call {
	_c.Call.Return(run)
	return _c
}

// ListConversationsByUserID provides a mock function with given fields: ctx, currentUser
func (_m *MockPromptComponent) ListConversationsByUserID(ctx context.Context, currentUser string) ([]database.PromptConversation, error) {
	ret := _m.Called(ctx, currentUser)

	if len(ret) == 0 {
		panic("no return value specified for ListConversationsByUserID")
	}

	var r0 []database.PromptConversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]database.PromptConversation, error)); ok {
		return rf(ctx, currentUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []database.PromptConversation); ok {
		r0 = rf(ctx, currentUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.PromptConversation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, currentUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptComponent_ListConversationsByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConversationsByUserID'
type MockPromptComponent_ListConversationsByUserID_Call struct {
	*mock.Call
}

// ListConversationsByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUser string
func (_e *MockPromptComponent_Expecter) ListConversationsByUserID(ctx interface{}, currentUser interface{}) *MockPromptComponent_ListConversationsByUserID_Call {
	return &MockPromptComponent_ListConversationsByUserID_Call{Call: _e.mock.On("ListConversationsByUserID", ctx, currentUser)}
}

func (_c *MockPromptComponent_ListConversationsByUserID_Call) Run(run func(ctx context.Context, currentUser string)) *MockPromptComponent_ListConversationsByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPromptComponent_ListConversationsByUserID_Call) Return(_a0 []database.PromptConversation, _a1 error) *MockPromptComponent_ListConversationsByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptComponent_ListConversationsByUserID_Call) RunAndReturn(run func(context.Context, string) ([]database.PromptConversation, error)) *MockPromptComponent_ListConversationsByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// ListPrompt provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) ListPrompt(ctx context.Context, req types.PromptReq) ([]types.PromptOutput, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListPrompt")
	}

	var r0 []types.PromptOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PromptReq) ([]types.PromptOutput, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.PromptReq) []types.PromptOutput); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PromptOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.PromptReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptComponent_ListPrompt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPrompt'
type MockPromptComponent_ListPrompt_Call struct {
	*mock.Call
}

// ListPrompt is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.PromptReq
func (_e *MockPromptComponent_Expecter) ListPrompt(ctx interface{}, req interface{}) *MockPromptComponent_ListPrompt_Call {
	return &MockPromptComponent_ListPrompt_Call{Call: _e.mock.On("ListPrompt", ctx, req)}
}

func (_c *MockPromptComponent_ListPrompt_Call) Run(run func(ctx context.Context, req types.PromptReq)) *MockPromptComponent_ListPrompt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PromptReq))
	})
	return _c
}

func (_c *MockPromptComponent_ListPrompt_Call) Return(_a0 []types.PromptOutput, _a1 error) *MockPromptComponent_ListPrompt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptComponent_ListPrompt_Call) RunAndReturn(run func(context.Context, types.PromptReq) ([]types.PromptOutput, error)) *MockPromptComponent_ListPrompt_Call {
	_c.Call.Return(run)
	return _c
}

// NewConversation provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) NewConversation(ctx context.Context, req types.ConversationTitleReq) (*database.PromptConversation, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for NewConversation")
	}

	var r0 *database.PromptConversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConversationTitleReq) (*database.PromptConversation, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ConversationTitleReq) *database.PromptConversation); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.PromptConversation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ConversationTitleReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptComponent_NewConversation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewConversation'
type MockPromptComponent_NewConversation_Call struct {
	*mock.Call
}

// NewConversation is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ConversationTitleReq
func (_e *MockPromptComponent_Expecter) NewConversation(ctx interface{}, req interface{}) *MockPromptComponent_NewConversation_Call {
	return &MockPromptComponent_NewConversation_Call{Call: _e.mock.On("NewConversation", ctx, req)}
}

func (_c *MockPromptComponent_NewConversation_Call) Run(run func(ctx context.Context, req types.ConversationTitleReq)) *MockPromptComponent_NewConversation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ConversationTitleReq))
	})
	return _c
}

func (_c *MockPromptComponent_NewConversation_Call) Return(_a0 *database.PromptConversation, _a1 error) *MockPromptComponent_NewConversation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptComponent_NewConversation_Call) RunAndReturn(run func(context.Context, types.ConversationTitleReq) (*database.PromptConversation, error)) *MockPromptComponent_NewConversation_Call {
	_c.Call.Return(run)
	return _c
}

// OrgPrompts provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) OrgPrompts(ctx context.Context, req *types.OrgPromptsReq) ([]types.PromptRes, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for OrgPrompts")
	}

	var r0 []types.PromptRes
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.OrgPromptsReq) ([]types.PromptRes, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.OrgPromptsReq) []types.PromptRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PromptRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.OrgPromptsReq) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *types.OrgPromptsReq) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPromptComponent_OrgPrompts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrgPrompts'
type MockPromptComponent_OrgPrompts_Call struct {
	*mock.Call
}

// OrgPrompts is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.OrgPromptsReq
func (_e *MockPromptComponent_Expecter) OrgPrompts(ctx interface{}, req interface{}) *MockPromptComponent_OrgPrompts_Call {
	return &MockPromptComponent_OrgPrompts_Call{Call: _e.mock.On("OrgPrompts", ctx, req)}
}

func (_c *MockPromptComponent_OrgPrompts_Call) Run(run func(ctx context.Context, req *types.OrgPromptsReq)) *MockPromptComponent_OrgPrompts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.OrgPromptsReq))
	})
	return _c
}

func (_c *MockPromptComponent_OrgPrompts_Call) Return(_a0 []types.PromptRes, _a1 int, _a2 error) *MockPromptComponent_OrgPrompts_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPromptComponent_OrgPrompts_Call) RunAndReturn(run func(context.Context, *types.OrgPromptsReq) ([]types.PromptRes, int, error)) *MockPromptComponent_OrgPrompts_Call {
	_c.Call.Return(run)
	return _c
}

// ParseJsonFile provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) ParseJsonFile(ctx context.Context, req gitserver.GetRepoInfoByPathReq) (*types.PromptOutput, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ParseJsonFile")
	}

	var r0 *types.PromptOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gitserver.GetRepoInfoByPathReq) (*types.PromptOutput, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gitserver.GetRepoInfoByPathReq) *types.PromptOutput); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PromptOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gitserver.GetRepoInfoByPathReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptComponent_ParseJsonFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseJsonFile'
type MockPromptComponent_ParseJsonFile_Call struct {
	*mock.Call
}

// ParseJsonFile is a helper method to define mock.On call
//   - ctx context.Context
//   - req gitserver.GetRepoInfoByPathReq
func (_e *MockPromptComponent_Expecter) ParseJsonFile(ctx interface{}, req interface{}) *MockPromptComponent_ParseJsonFile_Call {
	return &MockPromptComponent_ParseJsonFile_Call{Call: _e.mock.On("ParseJsonFile", ctx, req)}
}

func (_c *MockPromptComponent_ParseJsonFile_Call) Run(run func(ctx context.Context, req gitserver.GetRepoInfoByPathReq)) *MockPromptComponent_ParseJsonFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(gitserver.GetRepoInfoByPathReq))
	})
	return _c
}

func (_c *MockPromptComponent_ParseJsonFile_Call) Return(_a0 *types.PromptOutput, _a1 error) *MockPromptComponent_ParseJsonFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptComponent_ParseJsonFile_Call) RunAndReturn(run func(context.Context, gitserver.GetRepoInfoByPathReq) (*types.PromptOutput, error)) *MockPromptComponent_ParseJsonFile_Call {
	_c.Call.Return(run)
	return _c
}

// Relations provides a mock function with given fields: ctx, namespace, name, currentUser
func (_m *MockPromptComponent) Relations(ctx context.Context, namespace string, name string, currentUser string) (*types.Relations, error) {
	ret := _m.Called(ctx, namespace, name, currentUser)

	if len(ret) == 0 {
		panic("no return value specified for Relations")
	}

	var r0 *types.Relations
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*types.Relations, error)); ok {
		return rf(ctx, namespace, name, currentUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *types.Relations); ok {
		r0 = rf(ctx, namespace, name, currentUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Relations)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, namespace, name, currentUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptComponent_Relations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Relations'
type MockPromptComponent_Relations_Call struct {
	*mock.Call
}

// Relations is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - currentUser string
func (_e *MockPromptComponent_Expecter) Relations(ctx interface{}, namespace interface{}, name interface{}, currentUser interface{}) *MockPromptComponent_Relations_Call {
	return &MockPromptComponent_Relations_Call{Call: _e.mock.On("Relations", ctx, namespace, name, currentUser)}
}

func (_c *MockPromptComponent_Relations_Call) Run(run func(ctx context.Context, namespace string, name string, currentUser string)) *MockPromptComponent_Relations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockPromptComponent_Relations_Call) Return(_a0 *types.Relations, _a1 error) *MockPromptComponent_Relations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptComponent_Relations_Call) RunAndReturn(run func(context.Context, string, string, string) (*types.Relations, error)) *MockPromptComponent_Relations_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveConversation provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) RemoveConversation(ctx context.Context, req types.ConversationReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RemoveConversation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConversationReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPromptComponent_RemoveConversation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveConversation'
type MockPromptComponent_RemoveConversation_Call struct {
	*mock.Call
}

// RemoveConversation is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ConversationReq
func (_e *MockPromptComponent_Expecter) RemoveConversation(ctx interface{}, req interface{}) *MockPromptComponent_RemoveConversation_Call {
	return &MockPromptComponent_RemoveConversation_Call{Call: _e.mock.On("RemoveConversation", ctx, req)}
}

func (_c *MockPromptComponent_RemoveConversation_Call) Run(run func(ctx context.Context, req types.ConversationReq)) *MockPromptComponent_RemoveConversation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ConversationReq))
	})
	return _c
}

func (_c *MockPromptComponent_RemoveConversation_Call) Return(_a0 error) *MockPromptComponent_RemoveConversation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromptComponent_RemoveConversation_Call) RunAndReturn(run func(context.Context, types.ConversationReq) error) *MockPromptComponent_RemoveConversation_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRepo provides a mock function with given fields: ctx, namespace, name, currentUser
func (_m *MockPromptComponent) RemoveRepo(ctx context.Context, namespace string, name string, currentUser string) error {
	ret := _m.Called(ctx, namespace, name, currentUser)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRepo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, namespace, name, currentUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPromptComponent_RemoveRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRepo'
type MockPromptComponent_RemoveRepo_Call struct {
	*mock.Call
}

// RemoveRepo is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - currentUser string
func (_e *MockPromptComponent_Expecter) RemoveRepo(ctx interface{}, namespace interface{}, name interface{}, currentUser interface{}) *MockPromptComponent_RemoveRepo_Call {
	return &MockPromptComponent_RemoveRepo_Call{Call: _e.mock.On("RemoveRepo", ctx, namespace, name, currentUser)}
}

func (_c *MockPromptComponent_RemoveRepo_Call) Run(run func(ctx context.Context, namespace string, name string, currentUser string)) *MockPromptComponent_RemoveRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockPromptComponent_RemoveRepo_Call) Return(_a0 error) *MockPromptComponent_RemoveRepo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromptComponent_RemoveRepo_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockPromptComponent_RemoveRepo_Call {
	_c.Call.Return(run)
	return _c
}

// SaveGeneratedText provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) SaveGeneratedText(ctx context.Context, req types.Conversation) (*database.PromptConversationMessage, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SaveGeneratedText")
	}

	var r0 *database.PromptConversationMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Conversation) (*database.PromptConversationMessage, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Conversation) *database.PromptConversationMessage); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.PromptConversationMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Conversation) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptComponent_SaveGeneratedText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveGeneratedText'
type MockPromptComponent_SaveGeneratedText_Call struct {
	*mock.Call
}

// SaveGeneratedText is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.Conversation
func (_e *MockPromptComponent_Expecter) SaveGeneratedText(ctx interface{}, req interface{}) *MockPromptComponent_SaveGeneratedText_Call {
	return &MockPromptComponent_SaveGeneratedText_Call{Call: _e.mock.On("SaveGeneratedText", ctx, req)}
}

func (_c *MockPromptComponent_SaveGeneratedText_Call) Run(run func(ctx context.Context, req types.Conversation)) *MockPromptComponent_SaveGeneratedText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Conversation))
	})
	return _c
}

func (_c *MockPromptComponent_SaveGeneratedText_Call) Return(_a0 *database.PromptConversationMessage, _a1 error) *MockPromptComponent_SaveGeneratedText_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptComponent_SaveGeneratedText_Call) RunAndReturn(run func(context.Context, types.Conversation) (*database.PromptConversationMessage, error)) *MockPromptComponent_SaveGeneratedText_Call {
	_c.Call.Return(run)
	return _c
}

// SetRelationModels provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) SetRelationModels(ctx context.Context, req types.RelationModels) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SetRelationModels")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RelationModels) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPromptComponent_SetRelationModels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRelationModels'
type MockPromptComponent_SetRelationModels_Call struct {
	*mock.Call
}

// SetRelationModels is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.RelationModels
func (_e *MockPromptComponent_Expecter) SetRelationModels(ctx interface{}, req interface{}) *MockPromptComponent_SetRelationModels_Call {
	return &MockPromptComponent_SetRelationModels_Call{Call: _e.mock.On("SetRelationModels", ctx, req)}
}

func (_c *MockPromptComponent_SetRelationModels_Call) Run(run func(ctx context.Context, req types.RelationModels)) *MockPromptComponent_SetRelationModels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RelationModels))
	})
	return _c
}

func (_c *MockPromptComponent_SetRelationModels_Call) Return(_a0 error) *MockPromptComponent_SetRelationModels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromptComponent_SetRelationModels_Call) RunAndReturn(run func(context.Context, types.RelationModels) error) *MockPromptComponent_SetRelationModels_Call {
	_c.Call.Return(run)
	return _c
}

// Show provides a mock function with given fields: ctx, namespace, name, currentUser, needOpWeight, needMultiSync
func (_m *MockPromptComponent) Show(ctx context.Context, namespace string, name string, currentUser string, needOpWeight bool, needMultiSync bool) (*types.PromptRes, error) {
	ret := _m.Called(ctx, namespace, name, currentUser, needOpWeight, needMultiSync)

	if len(ret) == 0 {
		panic("no return value specified for Show")
	}

	var r0 *types.PromptRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, bool, bool) (*types.PromptRes, error)); ok {
		return rf(ctx, namespace, name, currentUser, needOpWeight, needMultiSync)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, bool, bool) *types.PromptRes); ok {
		r0 = rf(ctx, namespace, name, currentUser, needOpWeight, needMultiSync)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PromptRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, bool, bool) error); ok {
		r1 = rf(ctx, namespace, name, currentUser, needOpWeight, needMultiSync)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptComponent_Show_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Show'
type MockPromptComponent_Show_Call struct {
	*mock.Call
}

// Show is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - currentUser string
//   - needOpWeight bool
//   - needMultiSync bool
func (_e *MockPromptComponent_Expecter) Show(ctx interface{}, namespace interface{}, name interface{}, currentUser interface{}, needOpWeight interface{}, needMultiSync interface{}) *MockPromptComponent_Show_Call {
	return &MockPromptComponent_Show_Call{Call: _e.mock.On("Show", ctx, namespace, name, currentUser, needOpWeight, needMultiSync)}
}

func (_c *MockPromptComponent_Show_Call) Run(run func(ctx context.Context, namespace string, name string, currentUser string, needOpWeight bool, needMultiSync bool)) *MockPromptComponent_Show_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(bool), args[5].(bool))
	})
	return _c
}

func (_c *MockPromptComponent_Show_Call) Return(_a0 *types.PromptRes, _a1 error) *MockPromptComponent_Show_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptComponent_Show_Call) RunAndReturn(run func(context.Context, string, string, string, bool, bool) (*types.PromptRes, error)) *MockPromptComponent_Show_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitMessage provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) SubmitMessage(ctx context.Context, req types.ConversationReq) (<-chan string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SubmitMessage")
	}

	var r0 <-chan string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConversationReq) (<-chan string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ConversationReq) <-chan string); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ConversationReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptComponent_SubmitMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitMessage'
type MockPromptComponent_SubmitMessage_Call struct {
	*mock.Call
}

// SubmitMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ConversationReq
func (_e *MockPromptComponent_Expecter) SubmitMessage(ctx interface{}, req interface{}) *MockPromptComponent_SubmitMessage_Call {
	return &MockPromptComponent_SubmitMessage_Call{Call: _e.mock.On("SubmitMessage", ctx, req)}
}

func (_c *MockPromptComponent_SubmitMessage_Call) Run(run func(ctx context.Context, req types.ConversationReq)) *MockPromptComponent_SubmitMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ConversationReq))
	})
	return _c
}

func (_c *MockPromptComponent_SubmitMessage_Call) Return(_a0 <-chan string, _a1 error) *MockPromptComponent_SubmitMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptComponent_SubmitMessage_Call) RunAndReturn(run func(context.Context, types.ConversationReq) (<-chan string, error)) *MockPromptComponent_SubmitMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SummarizeConversationTitle provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) SummarizeConversationTitle(ctx context.Context, req types.ConversationTitleReq) (*database.PromptConversation, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SummarizeConversationTitle")
	}

	var r0 *database.PromptConversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConversationTitleReq) (*database.PromptConversation, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ConversationTitleReq) *database.PromptConversation); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.PromptConversation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ConversationTitleReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptComponent_SummarizeConversationTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SummarizeConversationTitle'
type MockPromptComponent_SummarizeConversationTitle_Call struct {
	*mock.Call
}

// SummarizeConversationTitle is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ConversationTitleReq
func (_e *MockPromptComponent_Expecter) SummarizeConversationTitle(ctx interface{}, req interface{}) *MockPromptComponent_SummarizeConversationTitle_Call {
	return &MockPromptComponent_SummarizeConversationTitle_Call{Call: _e.mock.On("SummarizeConversationTitle", ctx, req)}
}

func (_c *MockPromptComponent_SummarizeConversationTitle_Call) Run(run func(ctx context.Context, req types.ConversationTitleReq)) *MockPromptComponent_SummarizeConversationTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ConversationTitleReq))
	})
	return _c
}

func (_c *MockPromptComponent_SummarizeConversationTitle_Call) Return(_a0 *database.PromptConversation, _a1 error) *MockPromptComponent_SummarizeConversationTitle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptComponent_SummarizeConversationTitle_Call) RunAndReturn(run func(context.Context, types.ConversationTitleReq) (*database.PromptConversation, error)) *MockPromptComponent_SummarizeConversationTitle_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConversation provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) UpdateConversation(ctx context.Context, req types.ConversationTitleReq) (*database.PromptConversation, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConversation")
	}

	var r0 *database.PromptConversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConversationTitleReq) (*database.PromptConversation, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ConversationTitleReq) *database.PromptConversation); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.PromptConversation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ConversationTitleReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptComponent_UpdateConversation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConversation'
type MockPromptComponent_UpdateConversation_Call struct {
	*mock.Call
}

// UpdateConversation is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ConversationTitleReq
func (_e *MockPromptComponent_Expecter) UpdateConversation(ctx interface{}, req interface{}) *MockPromptComponent_UpdateConversation_Call {
	return &MockPromptComponent_UpdateConversation_Call{Call: _e.mock.On("UpdateConversation", ctx, req)}
}

func (_c *MockPromptComponent_UpdateConversation_Call) Run(run func(ctx context.Context, req types.ConversationTitleReq)) *MockPromptComponent_UpdateConversation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ConversationTitleReq))
	})
	return _c
}

func (_c *MockPromptComponent_UpdateConversation_Call) Return(_a0 *database.PromptConversation, _a1 error) *MockPromptComponent_UpdateConversation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptComponent_UpdateConversation_Call) RunAndReturn(run func(context.Context, types.ConversationTitleReq) (*database.PromptConversation, error)) *MockPromptComponent_UpdateConversation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePrompt provides a mock function with given fields: ctx, req, body
func (_m *MockPromptComponent) UpdatePrompt(ctx context.Context, req types.PromptReq, body *types.UpdatePromptReq) (*types.Prompt, error) {
	ret := _m.Called(ctx, req, body)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePrompt")
	}

	var r0 *types.Prompt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PromptReq, *types.UpdatePromptReq) (*types.Prompt, error)); ok {
		return rf(ctx, req, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.PromptReq, *types.UpdatePromptReq) *types.Prompt); ok {
		r0 = rf(ctx, req, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Prompt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.PromptReq, *types.UpdatePromptReq) error); ok {
		r1 = rf(ctx, req, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptComponent_UpdatePrompt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePrompt'
type MockPromptComponent_UpdatePrompt_Call struct {
	*mock.Call
}

// UpdatePrompt is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.PromptReq
//   - body *types.UpdatePromptReq
func (_e *MockPromptComponent_Expecter) UpdatePrompt(ctx interface{}, req interface{}, body interface{}) *MockPromptComponent_UpdatePrompt_Call {
	return &MockPromptComponent_UpdatePrompt_Call{Call: _e.mock.On("UpdatePrompt", ctx, req, body)}
}

func (_c *MockPromptComponent_UpdatePrompt_Call) Run(run func(ctx context.Context, req types.PromptReq, body *types.UpdatePromptReq)) *MockPromptComponent_UpdatePrompt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PromptReq), args[2].(*types.UpdatePromptReq))
	})
	return _c
}

func (_c *MockPromptComponent_UpdatePrompt_Call) Return(_a0 *types.Prompt, _a1 error) *MockPromptComponent_UpdatePrompt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptComponent_UpdatePrompt_Call) RunAndReturn(run func(context.Context, types.PromptReq, *types.UpdatePromptReq) (*types.Prompt, error)) *MockPromptComponent_UpdatePrompt_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePromptRepo provides a mock function with given fields: ctx, req
func (_m *MockPromptComponent) UpdatePromptRepo(ctx context.Context, req *types.UpdatePromptRepoReq) (*types.PromptRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePromptRepo")
	}

	var r0 *types.PromptRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdatePromptRepoReq) (*types.PromptRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdatePromptRepoReq) *types.PromptRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PromptRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.UpdatePromptRepoReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptComponent_UpdatePromptRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePromptRepo'
type MockPromptComponent_UpdatePromptRepo_Call struct {
	*mock.Call
}

// UpdatePromptRepo is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.UpdatePromptRepoReq
func (_e *MockPromptComponent_Expecter) UpdatePromptRepo(ctx interface{}, req interface{}) *MockPromptComponent_UpdatePromptRepo_Call {
	return &MockPromptComponent_UpdatePromptRepo_Call{Call: _e.mock.On("UpdatePromptRepo", ctx, req)}
}

func (_c *MockPromptComponent_UpdatePromptRepo_Call) Run(run func(ctx context.Context, req *types.UpdatePromptRepoReq)) *MockPromptComponent_UpdatePromptRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.UpdatePromptRepoReq))
	})
	return _c
}

func (_c *MockPromptComponent_UpdatePromptRepo_Call) Return(_a0 *types.PromptRes, _a1 error) *MockPromptComponent_UpdatePromptRepo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptComponent_UpdatePromptRepo_Call) RunAndReturn(run func(context.Context, *types.UpdatePromptRepoReq) (*types.PromptRes, error)) *MockPromptComponent_UpdatePromptRepo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPromptComponent creates a new instance of MockPromptComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPromptComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPromptComponent {
	mock := &MockPromptComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockRecomComponent is an autogenerated mock type for the RecomComponent type
type MockRecomComponent struct {
	mock.Mock
}

type MockRecomComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRecomComponent) EXPECT() *MockRecomComponent_Expecter {
	return &MockRecomComponent_Expecter{mock: &_m.Mock}
}

// CalcTotalScore provides a mock function with given fields: ctx, repo, weights
func (_m *MockRecomComponent) CalcTotalScore(ctx context.Context, repo *database.Repository, weights map[string]string) float64 {
	ret := _m.Called(ctx, repo, weights)

	if len(ret) == 0 {
		panic("no return value specified for CalcTotalScore")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func(context.Context, *database.Repository, map[string]string) float64); ok {
		r0 = rf(ctx, repo, weights)
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockRecomComponent_CalcTotalScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalcTotalScore'
type MockRecomComponent_CalcTotalScore_Call struct {
	*mock.Call
}

// CalcTotalScore is a helper method to define mock.On call
//   - ctx context.Context
//   - repo *database.Repository
//   - weights map[string]string
func (_e *MockRecomComponent_Expecter) CalcTotalScore(ctx interface{}, repo interface{}, weights interface{}) *MockRecomComponent_CalcTotalScore_Call {
	return &MockRecomComponent_CalcTotalScore_Call{Call: _e.mock.On("CalcTotalScore", ctx, repo, weights)}
}

func (_c *MockRecomComponent_CalcTotalScore_Call) Run(run func(ctx context.Context, repo *database.Repository, weights map[string]string)) *MockRecomComponent_CalcTotalScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.Repository), args[2].(map[string]string))
	})
	return _c
}

func (_c *MockRecomComponent_CalcTotalScore_Call) Return(_a0 float64) *MockRecomComponent_CalcTotalScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecomComponent_CalcTotalScore_Call) RunAndReturn(run func(context.Context, *database.Repository, map[string]string) float64) *MockRecomComponent_CalcTotalScore_Call {
	_c.Call.Return(run)
	return _c
}

// CalculateRecomScore provides a mock function with given fields: ctx
func (_m *MockRecomComponent) CalculateRecomScore(ctx context.Context) {
	_m.Called(ctx)
}

// MockRecomComponent_CalculateRecomScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateRecomScore'
type MockRecomComponent_CalculateRecomScore_Call struct {
	*mock.Call
}

// CalculateRecomScore is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRecomComponent_Expecter) CalculateRecomScore(ctx interface{}) *MockRecomComponent_CalculateRecomScore_Call {
	return &MockRecomComponent_CalculateRecomScore_Call{Call: _e.mock.On("CalculateRecomScore", ctx)}
}

func (_c *MockRecomComponent_CalculateRecomScore_Call) Run(run func(ctx context.Context)) *MockRecomComponent_CalculateRecomScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRecomComponent_CalculateRecomScore_Call) Return() *MockRecomComponent_CalculateRecomScore_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRecomComponent_CalculateRecomScore_Call) RunAndReturn(run func(context.Context)) *MockRecomComponent_CalculateRecomScore_Call {
	_c.Run(run)
	return _c
}

// SetOpWeight provides a mock function with given fields: ctx, repoID, weight
func (_m *MockRecomComponent) SetOpWeight(ctx context.Context, repoID int64, weight int64) error {
	ret := _m.Called(ctx, repoID, weight)

	if len(ret) == 0 {
		panic("no return value specified for SetOpWeight")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, repoID, weight)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRecomComponent_SetOpWeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOpWeight'
type MockRecomComponent_SetOpWeight_Call struct {
	*mock.Call
}

// SetOpWeight is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
//   - weight int64
func (_e *MockRecomComponent_Expecter) SetOpWeight(ctx interface{}, repoID interface{}, weight interface{}) *MockRecomComponent_SetOpWeight_Call {
	return &MockRecomComponent_SetOpWeight_Call{Call: _e.mock.On("SetOpWeight", ctx, repoID, weight)}
}

func (_c *MockRecomComponent_SetOpWeight_Call) Run(run func(ctx context.Context, repoID int64, weight int64)) *MockRecomComponent_SetOpWeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockRecomComponent_SetOpWeight_Call) Return(_a0 error) *MockRecomComponent_SetOpWeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecomComponent_SetOpWeight_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockRecomComponent_SetOpWeight_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRecomComponent creates a new instance of MockRecomComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecomComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecomComponent {
	mock := &MockRecomComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockLLMServiceComponent is an autogenerated mock type for the LLMServiceComponent type
type MockLLMServiceComponent struct {
	mock.Mock
}

type MockLLMServiceComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLLMServiceComponent) EXPECT() *MockLLMServiceComponent_Expecter {
	return &MockLLMServiceComponent_Expecter{mock: &_m.Mock}
}

// CreateLLMConfig provides a mock function with given fields: ctx, req
func (_m *MockLLMServiceComponent) CreateLLMConfig(ctx context.Context, req *types.CreateLLMConfigReq) (*types.LLMConfig, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateLLMConfig")
	}

	var r0 *types.LLMConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateLLMConfigReq) (*types.LLMConfig, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateLLMConfigReq) *types.LLMConfig); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LLMConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CreateLLMConfigReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLLMServiceComponent_CreateLLMConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLLMConfig'
type MockLLMServiceComponent_CreateLLMConfig_Call struct {
	*mock.Call
}

// CreateLLMConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.CreateLLMConfigReq
func (_e *MockLLMServiceComponent_Expecter) CreateLLMConfig(ctx interface{}, req interface{}) *MockLLMServiceComponent_CreateLLMConfig_Call {
	return &MockLLMServiceComponent_CreateLLMConfig_Call{Call: _e.mock.On("CreateLLMConfig", ctx, req)}
}

func (_c *MockLLMServiceComponent_CreateLLMConfig_Call) Run(run func(ctx context.Context, req *types.CreateLLMConfigReq)) *MockLLMServiceComponent_CreateLLMConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CreateLLMConfigReq))
	})
	return _c
}

func (_c *MockLLMServiceComponent_CreateLLMConfig_Call) Return(_a0 *types.LLMConfig, _a1 error) *MockLLMServiceComponent_CreateLLMConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLLMServiceComponent_CreateLLMConfig_Call) RunAndReturn(run func(context.Context, *types.CreateLLMConfigReq) (*types.LLMConfig, error)) *MockLLMServiceComponent_CreateLLMConfig_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePromptPrefix provides a mock function with given fields: ctx, req
func (_m *MockLLMServiceComponent) CreatePromptPrefix(ctx context.Context, req *types.CreatePromptPrefixReq) (*types.PromptPrefix, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreatePromptPrefix")
	}

	var r0 *types.PromptPrefix
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreatePromptPrefixReq) (*types.PromptPrefix, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreatePromptPrefixReq) *types.PromptPrefix); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PromptPrefix)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CreatePromptPrefixReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLLMServiceComponent_CreatePromptPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePromptPrefix'
type MockLLMServiceComponent_CreatePromptPrefix_Call struct {
	*mock.Call
}

// CreatePromptPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.CreatePromptPrefixReq
func (_e *MockLLMServiceComponent_Expecter) CreatePromptPrefix(ctx interface{}, req interface{}) *MockLLMServiceComponent_CreatePromptPrefix_Call {
	return &MockLLMServiceComponent_CreatePromptPrefix_Call{Call: _e.mock.On("CreatePromptPrefix", ctx, req)}
}

func (_c *MockLLMServiceComponent_CreatePromptPrefix_Call) Run(run func(ctx context.Context, req *types.CreatePromptPrefixReq)) *MockLLMServiceComponent_CreatePromptPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CreatePromptPrefixReq))
	})
	return _c
}

func (_c *MockLLMServiceComponent_CreatePromptPrefix_Call) Return(_a0 *types.PromptPrefix, _a1 error) *MockLLMServiceComponent_CreatePromptPrefix_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLLMServiceComponent_CreatePromptPrefix_Call) RunAndReturn(run func(context.Context, *types.CreatePromptPrefixReq) (*types.PromptPrefix, error)) *MockLLMServiceComponent_CreatePromptPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLLMConfig provides a mock function with given fields: ctx, id
func (_m *MockLLMServiceComponent) DeleteLLMConfig(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLLMConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLLMServiceComponent_DeleteLLMConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLLMConfig'
type MockLLMServiceComponent_DeleteLLMConfig_Call struct {
	*mock.Call
}

// DeleteLLMConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockLLMServiceComponent_Expecter) DeleteLLMConfig(ctx interface{}, id interface{}) *MockLLMServiceComponent_DeleteLLMConfig_Call {
	return &MockLLMServiceComponent_DeleteLLMConfig_Call{Call: _e.mock.On("DeleteLLMConfig", ctx, id)}
}

func (_c *MockLLMServiceComponent_DeleteLLMConfig_Call) Run(run func(ctx context.Context, id int64)) *MockLLMServiceComponent_DeleteLLMConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLLMServiceComponent_DeleteLLMConfig_Call) Return(_a0 error) *MockLLMServiceComponent_DeleteLLMConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLLMServiceComponent_DeleteLLMConfig_Call) RunAndReturn(run func(context.Context, int64) error) *MockLLMServiceComponent_DeleteLLMConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePromptPrefix provides a mock function with given fields: ctx, id
func (_m *MockLLMServiceComponent) DeletePromptPrefix(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePromptPrefix")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLLMServiceComponent_DeletePromptPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePromptPrefix'
type MockLLMServiceComponent_DeletePromptPrefix_Call struct {
	*mock.Call
}

// DeletePromptPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockLLMServiceComponent_Expecter) DeletePromptPrefix(ctx interface{}, id interface{}) *MockLLMServiceComponent_DeletePromptPrefix_Call {
	return &MockLLMServiceComponent_DeletePromptPrefix_Call{Call: _e.mock.On("DeletePromptPrefix", ctx, id)}
}

func (_c *MockLLMServiceComponent_DeletePromptPrefix_Call) Run(run func(ctx context.Context, id int64)) *MockLLMServiceComponent_DeletePromptPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLLMServiceComponent_DeletePromptPrefix_Call) Return(_a0 error) *MockLLMServiceComponent_DeletePromptPrefix_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLLMServiceComponent_DeletePromptPrefix_Call) RunAndReturn(run func(context.Context, int64) error) *MockLLMServiceComponent_DeletePromptPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// IndexLLMConfig provides a mock function with given fields: ctx, per, page, search
func (_m *MockLLMServiceComponent) IndexLLMConfig(ctx context.Context, per int, page int, search *types.SearchLLMConfig) ([]*database.LLMConfig, int, error) {
	ret := _m.Called(ctx, per, page, search)

	if len(ret) == 0 {
		panic("no return value specified for IndexLLMConfig")
	}

	var r0 []*database.LLMConfig
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *types.SearchLLMConfig) ([]*database.LLMConfig, int, error)); ok {
		return rf(ctx, per, page, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *types.SearchLLMConfig) []*database.LLMConfig); ok {
		r0 = rf(ctx, per, page, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.LLMConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *types.SearchLLMConfig) int); ok {
		r1 = rf(ctx, per, page, search)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, *types.SearchLLMConfig) error); ok {
		r2 = rf(ctx, per, page, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLLMServiceComponent_IndexLLMConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexLLMConfig'
type MockLLMServiceComponent_IndexLLMConfig_Call struct {
	*mock.Call
}

// IndexLLMConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - per int
//   - page int
//   - search *types.SearchLLMConfig
func (_e *MockLLMServiceComponent_Expecter) IndexLLMConfig(ctx interface{}, per interface{}, page interface{}, search interface{}) *MockLLMServiceComponent_IndexLLMConfig_Call {
	return &MockLLMServiceComponent_IndexLLMConfig_Call{Call: _e.mock.On("IndexLLMConfig", ctx, per, page, search)}
}

func (_c *MockLLMServiceComponent_IndexLLMConfig_Call) Run(run func(ctx context.Context, per int, page int, search *types.SearchLLMConfig)) *MockLLMServiceComponent_IndexLLMConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*types.SearchLLMConfig))
	})
	return _c
}

func (_c *MockLLMServiceComponent_IndexLLMConfig_Call) Return(_a0 []*database.LLMConfig, _a1 int, _a2 error) *MockLLMServiceComponent_IndexLLMConfig_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockLLMServiceComponent_IndexLLMConfig_Call) RunAndReturn(run func(context.Context, int, int, *types.SearchLLMConfig) ([]*database.LLMConfig, int, error)) *MockLLMServiceComponent_IndexLLMConfig_Call {
	_c.Call.Return(run)
	return _c
}

// IndexPromptPrefix provides a mock function with given fields: ctx, per, page, search
func (_m *MockLLMServiceComponent) IndexPromptPrefix(ctx context.Context, per int, page int, search *types.SearchPromptPrefix) ([]*database.PromptPrefix, int, error) {
	ret := _m.Called(ctx, per, page, search)

	if len(ret) == 0 {
		panic("no return value specified for IndexPromptPrefix")
	}

	var r0 []*database.PromptPrefix
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *types.SearchPromptPrefix) ([]*database.PromptPrefix, int, error)); ok {
		return rf(ctx, per, page, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *types.SearchPromptPrefix) []*database.PromptPrefix); ok {
		r0 = rf(ctx, per, page, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.PromptPrefix)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *types.SearchPromptPrefix) int); ok {
		r1 = rf(ctx, per, page, search)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, *types.SearchPromptPrefix) error); ok {
		r2 = rf(ctx, per, page, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLLMServiceComponent_IndexPromptPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexPromptPrefix'
type MockLLMServiceComponent_IndexPromptPrefix_Call struct {
	*mock.Call
}

// IndexPromptPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - per int
//   - page int
//   - search *types.SearchPromptPrefix
func (_e *MockLLMServiceComponent_Expecter) IndexPromptPrefix(ctx interface{}, per interface{}, page interface{}, search interface{}) *MockLLMServiceComponent_IndexPromptPrefix_Call {
	return &MockLLMServiceComponent_IndexPromptPrefix_Call{Call: _e.mock.On("IndexPromptPrefix", ctx, per, page, search)}
}

func (_c *MockLLMServiceComponent_IndexPromptPrefix_Call) Run(run func(ctx context.Context, per int, page int, search *types.SearchPromptPrefix)) *MockLLMServiceComponent_IndexPromptPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*types.SearchPromptPrefix))
	})
	return _c
}

func (_c *MockLLMServiceComponent_IndexPromptPrefix_Call) Return(_a0 []*database.PromptPrefix, _a1 int, _a2 error) *MockLLMServiceComponent_IndexPromptPrefix_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockLLMServiceComponent_IndexPromptPrefix_Call) RunAndReturn(run func(context.Context, int, int, *types.SearchPromptPrefix) ([]*database.PromptPrefix, int, error)) *MockLLMServiceComponent_IndexPromptPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// ShowLLMConfig provides a mock function with given fields: ctx, id
func (_m *MockLLMServiceComponent) ShowLLMConfig(ctx context.Context, id int64) (*types.LLMConfig, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ShowLLMConfig")
	}

	var r0 *types.LLMConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*types.LLMConfig, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *types.LLMConfig); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LLMConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLLMServiceComponent_ShowLLMConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowLLMConfig'
type MockLLMServiceComponent_ShowLLMConfig_Call struct {
	*mock.Call
}

// ShowLLMConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockLLMServiceComponent_Expecter) ShowLLMConfig(ctx interface{}, id interface{}) *MockLLMServiceComponent_ShowLLMConfig_Call {
	return &MockLLMServiceComponent_ShowLLMConfig_Call{Call: _e.mock.On("ShowLLMConfig", ctx, id)}
}

func (_c *MockLLMServiceComponent_ShowLLMConfig_Call) Run(run func(ctx context.Context, id int64)) *MockLLMServiceComponent_ShowLLMConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLLMServiceComponent_ShowLLMConfig_Call) Return(_a0 *types.LLMConfig, _a1 error) *MockLLMServiceComponent_ShowLLMConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLLMServiceComponent_ShowLLMConfig_Call) RunAndReturn(run func(context.Context, int64) (*types.LLMConfig, error)) *MockLLMServiceComponent_ShowLLMConfig_Call {
	_c.Call.Return(run)
	return _c
}

// ShowPromptConfig provides a mock function with given fields: ctx, id
func (_m *MockLLMServiceComponent) ShowPromptConfig(ctx context.Context, id int64) (*types.PromptPrefix, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ShowPromptConfig")
	}

	var r0 *types.PromptPrefix
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*types.PromptPrefix, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *types.PromptPrefix); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PromptPrefix)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLLMServiceComponent_ShowPromptConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowPromptConfig'
type MockLLMServiceComponent_ShowPromptConfig_Call struct {
	*mock.Call
}

// ShowPromptConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockLLMServiceComponent_Expecter) ShowPromptConfig(ctx interface{}, id interface{}) *MockLLMServiceComponent_ShowPromptConfig_Call {
	return &MockLLMServiceComponent_ShowPromptConfig_Call{Call: _e.mock.On("ShowPromptConfig", ctx, id)}
}

func (_c *MockLLMServiceComponent_ShowPromptConfig_Call) Run(run func(ctx context.Context, id int64)) *MockLLMServiceComponent_ShowPromptConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLLMServiceComponent_ShowPromptConfig_Call) Return(_a0 *types.PromptPrefix, _a1 error) *MockLLMServiceComponent_ShowPromptConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLLMServiceComponent_ShowPromptConfig_Call) RunAndReturn(run func(context.Context, int64) (*types.PromptPrefix, error)) *MockLLMServiceComponent_ShowPromptConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLLMConfig provides a mock function with given fields: ctx, req
func (_m *MockLLMServiceComponent) UpdateLLMConfig(ctx context.Context, req *types.UpdateLLMConfigReq) (*types.LLMConfig, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLLMConfig")
	}

	var r0 *types.LLMConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdateLLMConfigReq) (*types.LLMConfig, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdateLLMConfigReq) *types.LLMConfig); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LLMConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.UpdateLLMConfigReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLLMServiceComponent_UpdateLLMConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLLMConfig'
type MockLLMServiceComponent_UpdateLLMConfig_Call struct {
	*mock.Call
}

// UpdateLLMConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.UpdateLLMConfigReq
func (_e *MockLLMServiceComponent_Expecter) UpdateLLMConfig(ctx interface{}, req interface{}) *MockLLMServiceComponent_UpdateLLMConfig_Call {
	return &MockLLMServiceComponent_UpdateLLMConfig_Call{Call: _e.mock.On("UpdateLLMConfig", ctx, req)}
}

func (_c *MockLLMServiceComponent_UpdateLLMConfig_Call) Run(run func(ctx context.Context, req *types.UpdateLLMConfigReq)) *MockLLMServiceComponent_UpdateLLMConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.UpdateLLMConfigReq))
	})
	return _c
}

func (_c *MockLLMServiceComponent_UpdateLLMConfig_Call) Return(_a0 *types.LLMConfig, _a1 error) *MockLLMServiceComponent_UpdateLLMConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLLMServiceComponent_UpdateLLMConfig_Call) RunAndReturn(run func(context.Context, *types.UpdateLLMConfigReq) (*types.LLMConfig, error)) *MockLLMServiceComponent_UpdateLLMConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePromptPrefix provides a mock function with given fields: ctx, req
func (_m *MockLLMServiceComponent) UpdatePromptPrefix(ctx context.Context, req *types.UpdatePromptPrefixReq) (*types.PromptPrefix, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePromptPrefix")
	}

	var r0 *types.PromptPrefix
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdatePromptPrefixReq) (*types.PromptPrefix, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdatePromptPrefixReq) *types.PromptPrefix); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PromptPrefix)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.UpdatePromptPrefixReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLLMServiceComponent_UpdatePromptPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePromptPrefix'
type MockLLMServiceComponent_UpdatePromptPrefix_Call struct {
	*mock.Call
}

// UpdatePromptPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.UpdatePromptPrefixReq
func (_e *MockLLMServiceComponent_Expecter) UpdatePromptPrefix(ctx interface{}, req interface{}) *MockLLMServiceComponent_UpdatePromptPrefix_Call {
	return &MockLLMServiceComponent_UpdatePromptPrefix_Call{Call: _e.mock.On("UpdatePromptPrefix", ctx, req)}
}

func (_c *MockLLMServiceComponent_UpdatePromptPrefix_Call) Run(run func(ctx context.Context, req *types.UpdatePromptPrefixReq)) *MockLLMServiceComponent_UpdatePromptPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.UpdatePromptPrefixReq))
	})
	return _c
}

func (_c *MockLLMServiceComponent_UpdatePromptPrefix_Call) Return(_a0 *types.PromptPrefix, _a1 error) *MockLLMServiceComponent_UpdatePromptPrefix_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLLMServiceComponent_UpdatePromptPrefix_Call) RunAndReturn(run func(context.Context, *types.UpdatePromptPrefixReq) (*types.PromptPrefix, error)) *MockLLMServiceComponent_UpdatePromptPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLLMServiceComponent creates a new instance of MockLLMServiceComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLLMServiceComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLLMServiceComponent {
	mock := &MockLLMServiceComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

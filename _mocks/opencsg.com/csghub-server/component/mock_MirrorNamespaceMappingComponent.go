// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockMirrorNamespaceMappingComponent is an autogenerated mock type for the MirrorNamespaceMappingComponent type
type MockMirrorNamespaceMappingComponent struct {
	mock.Mock
}

type MockMirrorNamespaceMappingComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMirrorNamespaceMappingComponent) EXPECT() *MockMirrorNamespaceMappingComponent_Expecter {
	return &MockMirrorNamespaceMappingComponent_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *MockMirrorNamespaceMappingComponent) Create(ctx context.Context, req types.CreateMirrorNamespaceMappingReq) (*database.MirrorNamespaceMapping, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.MirrorNamespaceMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.CreateMirrorNamespaceMappingReq) (*database.MirrorNamespaceMapping, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.CreateMirrorNamespaceMappingReq) *database.MirrorNamespaceMapping); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.MirrorNamespaceMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.CreateMirrorNamespaceMappingReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorNamespaceMappingComponent_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMirrorNamespaceMappingComponent_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.CreateMirrorNamespaceMappingReq
func (_e *MockMirrorNamespaceMappingComponent_Expecter) Create(ctx interface{}, req interface{}) *MockMirrorNamespaceMappingComponent_Create_Call {
	return &MockMirrorNamespaceMappingComponent_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockMirrorNamespaceMappingComponent_Create_Call) Run(run func(ctx context.Context, req types.CreateMirrorNamespaceMappingReq)) *MockMirrorNamespaceMappingComponent_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.CreateMirrorNamespaceMappingReq))
	})
	return _c
}

func (_c *MockMirrorNamespaceMappingComponent_Create_Call) Return(_a0 *database.MirrorNamespaceMapping, _a1 error) *MockMirrorNamespaceMappingComponent_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorNamespaceMappingComponent_Create_Call) RunAndReturn(run func(context.Context, types.CreateMirrorNamespaceMappingReq) (*database.MirrorNamespaceMapping, error)) *MockMirrorNamespaceMappingComponent_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockMirrorNamespaceMappingComponent) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMirrorNamespaceMappingComponent_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMirrorNamespaceMappingComponent_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockMirrorNamespaceMappingComponent_Expecter) Delete(ctx interface{}, id interface{}) *MockMirrorNamespaceMappingComponent_Delete_Call {
	return &MockMirrorNamespaceMappingComponent_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockMirrorNamespaceMappingComponent_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockMirrorNamespaceMappingComponent_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockMirrorNamespaceMappingComponent_Delete_Call) Return(_a0 error) *MockMirrorNamespaceMappingComponent_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMirrorNamespaceMappingComponent_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *MockMirrorNamespaceMappingComponent_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockMirrorNamespaceMappingComponent) Get(ctx context.Context, id int64) (*database.MirrorNamespaceMapping, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *database.MirrorNamespaceMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.MirrorNamespaceMapping, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.MirrorNamespaceMapping); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.MirrorNamespaceMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorNamespaceMappingComponent_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockMirrorNamespaceMappingComponent_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockMirrorNamespaceMappingComponent_Expecter) Get(ctx interface{}, id interface{}) *MockMirrorNamespaceMappingComponent_Get_Call {
	return &MockMirrorNamespaceMappingComponent_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockMirrorNamespaceMappingComponent_Get_Call) Run(run func(ctx context.Context, id int64)) *MockMirrorNamespaceMappingComponent_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockMirrorNamespaceMappingComponent_Get_Call) Return(_a0 *database.MirrorNamespaceMapping, _a1 error) *MockMirrorNamespaceMappingComponent_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorNamespaceMappingComponent_Get_Call) RunAndReturn(run func(context.Context, int64) (*database.MirrorNamespaceMapping, error)) *MockMirrorNamespaceMappingComponent_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx
func (_m *MockMirrorNamespaceMappingComponent) Index(ctx context.Context) ([]database.MirrorNamespaceMapping, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []database.MirrorNamespaceMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.MirrorNamespaceMapping, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.MirrorNamespaceMapping); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.MirrorNamespaceMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorNamespaceMappingComponent_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockMirrorNamespaceMappingComponent_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMirrorNamespaceMappingComponent_Expecter) Index(ctx interface{}) *MockMirrorNamespaceMappingComponent_Index_Call {
	return &MockMirrorNamespaceMappingComponent_Index_Call{Call: _e.mock.On("Index", ctx)}
}

func (_c *MockMirrorNamespaceMappingComponent_Index_Call) Run(run func(ctx context.Context)) *MockMirrorNamespaceMappingComponent_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMirrorNamespaceMappingComponent_Index_Call) Return(_a0 []database.MirrorNamespaceMapping, _a1 error) *MockMirrorNamespaceMappingComponent_Index_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorNamespaceMappingComponent_Index_Call) RunAndReturn(run func(context.Context) ([]database.MirrorNamespaceMapping, error)) *MockMirrorNamespaceMappingComponent_Index_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, req
func (_m *MockMirrorNamespaceMappingComponent) Update(ctx context.Context, req types.UpdateMirrorNamespaceMappingReq) (*database.MirrorNamespaceMapping, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *database.MirrorNamespaceMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.UpdateMirrorNamespaceMappingReq) (*database.MirrorNamespaceMapping, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.UpdateMirrorNamespaceMappingReq) *database.MirrorNamespaceMapping); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.MirrorNamespaceMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.UpdateMirrorNamespaceMappingReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorNamespaceMappingComponent_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockMirrorNamespaceMappingComponent_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.UpdateMirrorNamespaceMappingReq
func (_e *MockMirrorNamespaceMappingComponent_Expecter) Update(ctx interface{}, req interface{}) *MockMirrorNamespaceMappingComponent_Update_Call {
	return &MockMirrorNamespaceMappingComponent_Update_Call{Call: _e.mock.On("Update", ctx, req)}
}

func (_c *MockMirrorNamespaceMappingComponent_Update_Call) Run(run func(ctx context.Context, req types.UpdateMirrorNamespaceMappingReq)) *MockMirrorNamespaceMappingComponent_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.UpdateMirrorNamespaceMappingReq))
	})
	return _c
}

func (_c *MockMirrorNamespaceMappingComponent_Update_Call) Return(_a0 *database.MirrorNamespaceMapping, _a1 error) *MockMirrorNamespaceMappingComponent_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorNamespaceMappingComponent_Update_Call) RunAndReturn(run func(context.Context, types.UpdateMirrorNamespaceMappingReq) (*database.MirrorNamespaceMapping, error)) *MockMirrorNamespaceMappingComponent_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMirrorNamespaceMappingComponent creates a new instance of MockMirrorNamespaceMappingComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMirrorNamespaceMappingComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMirrorNamespaceMappingComponent {
	mock := &MockMirrorNamespaceMappingComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

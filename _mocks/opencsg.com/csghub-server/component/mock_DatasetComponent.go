// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockDatasetComponent is an autogenerated mock type for the DatasetComponent type
type MockDatasetComponent struct {
	mock.Mock
}

type MockDatasetComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatasetComponent) EXPECT() *MockDatasetComponent_Expecter {
	return &MockDatasetComponent_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *MockDatasetComponent) Create(ctx context.Context, req *types.CreateDatasetReq) (*types.Dataset, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *types.Dataset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateDatasetReq) (*types.Dataset, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateDatasetReq) *types.Dataset); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Dataset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CreateDatasetReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetComponent_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDatasetComponent_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.CreateDatasetReq
func (_e *MockDatasetComponent_Expecter) Create(ctx interface{}, req interface{}) *MockDatasetComponent_Create_Call {
	return &MockDatasetComponent_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockDatasetComponent_Create_Call) Run(run func(ctx context.Context, req *types.CreateDatasetReq)) *MockDatasetComponent_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CreateDatasetReq))
	})
	return _c
}

func (_c *MockDatasetComponent_Create_Call) Return(_a0 *types.Dataset, _a1 error) *MockDatasetComponent_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetComponent_Create_Call) RunAndReturn(run func(context.Context, *types.CreateDatasetReq) (*types.Dataset, error)) *MockDatasetComponent_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, namespace, name, currentUser
func (_m *MockDatasetComponent) Delete(ctx context.Context, namespace string, name string, currentUser string) error {
	ret := _m.Called(ctx, namespace, name, currentUser)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, namespace, name, currentUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDatasetComponent_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockDatasetComponent_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - currentUser string
func (_e *MockDatasetComponent_Expecter) Delete(ctx interface{}, namespace interface{}, name interface{}, currentUser interface{}) *MockDatasetComponent_Delete_Call {
	return &MockDatasetComponent_Delete_Call{Call: _e.mock.On("Delete", ctx, namespace, name, currentUser)}
}

func (_c *MockDatasetComponent_Delete_Call) Run(run func(ctx context.Context, namespace string, name string, currentUser string)) *MockDatasetComponent_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockDatasetComponent_Delete_Call) Return(_a0 error) *MockDatasetComponent_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatasetComponent_Delete_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockDatasetComponent_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx, filter, per, page
func (_m *MockDatasetComponent) Index(ctx context.Context, filter *types.RepoFilter, per int, page int) ([]types.Dataset, int, error) {
	ret := _m.Called(ctx, filter, per, page)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []types.Dataset
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.RepoFilter, int, int) ([]types.Dataset, int, error)); ok {
		return rf(ctx, filter, per, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.RepoFilter, int, int) []types.Dataset); ok {
		r0 = rf(ctx, filter, per, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Dataset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.RepoFilter, int, int) int); ok {
		r1 = rf(ctx, filter, per, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *types.RepoFilter, int, int) error); ok {
		r2 = rf(ctx, filter, per, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDatasetComponent_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockDatasetComponent_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *types.RepoFilter
//   - per int
//   - page int
func (_e *MockDatasetComponent_Expecter) Index(ctx interface{}, filter interface{}, per interface{}, page interface{}) *MockDatasetComponent_Index_Call {
	return &MockDatasetComponent_Index_Call{Call: _e.mock.On("Index", ctx, filter, per, page)}
}

func (_c *MockDatasetComponent_Index_Call) Run(run func(ctx context.Context, filter *types.RepoFilter, per int, page int)) *MockDatasetComponent_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RepoFilter), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockDatasetComponent_Index_Call) Return(_a0 []types.Dataset, _a1 int, _a2 error) *MockDatasetComponent_Index_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDatasetComponent_Index_Call) RunAndReturn(run func(context.Context, *types.RepoFilter, int, int) ([]types.Dataset, int, error)) *MockDatasetComponent_Index_Call {
	_c.Call.Return(run)
	return _c
}

// OrgDatasets provides a mock function with given fields: ctx, req
func (_m *MockDatasetComponent) OrgDatasets(ctx context.Context, req *types.OrgDatasetsReq) ([]types.Dataset, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for OrgDatasets")
	}

	var r0 []types.Dataset
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.OrgDatasetsReq) ([]types.Dataset, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.OrgDatasetsReq) []types.Dataset); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Dataset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.OrgDatasetsReq) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *types.OrgDatasetsReq) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDatasetComponent_OrgDatasets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrgDatasets'
type MockDatasetComponent_OrgDatasets_Call struct {
	*mock.Call
}

// OrgDatasets is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.OrgDatasetsReq
func (_e *MockDatasetComponent_Expecter) OrgDatasets(ctx interface{}, req interface{}) *MockDatasetComponent_OrgDatasets_Call {
	return &MockDatasetComponent_OrgDatasets_Call{Call: _e.mock.On("OrgDatasets", ctx, req)}
}

func (_c *MockDatasetComponent_OrgDatasets_Call) Run(run func(ctx context.Context, req *types.OrgDatasetsReq)) *MockDatasetComponent_OrgDatasets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.OrgDatasetsReq))
	})
	return _c
}

func (_c *MockDatasetComponent_OrgDatasets_Call) Return(_a0 []types.Dataset, _a1 int, _a2 error) *MockDatasetComponent_OrgDatasets_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDatasetComponent_OrgDatasets_Call) RunAndReturn(run func(context.Context, *types.OrgDatasetsReq) ([]types.Dataset, int, error)) *MockDatasetComponent_OrgDatasets_Call {
	_c.Call.Return(run)
	return _c
}

// Relations provides a mock function with given fields: ctx, namespace, name, currentUser
func (_m *MockDatasetComponent) Relations(ctx context.Context, namespace string, name string, currentUser string) (*types.Relations, error) {
	ret := _m.Called(ctx, namespace, name, currentUser)

	if len(ret) == 0 {
		panic("no return value specified for Relations")
	}

	var r0 *types.Relations
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*types.Relations, error)); ok {
		return rf(ctx, namespace, name, currentUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *types.Relations); ok {
		r0 = rf(ctx, namespace, name, currentUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Relations)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, namespace, name, currentUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetComponent_Relations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Relations'
type MockDatasetComponent_Relations_Call struct {
	*mock.Call
}

// Relations is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - currentUser string
func (_e *MockDatasetComponent_Expecter) Relations(ctx interface{}, namespace interface{}, name interface{}, currentUser interface{}) *MockDatasetComponent_Relations_Call {
	return &MockDatasetComponent_Relations_Call{Call: _e.mock.On("Relations", ctx, namespace, name, currentUser)}
}

func (_c *MockDatasetComponent_Relations_Call) Run(run func(ctx context.Context, namespace string, name string, currentUser string)) *MockDatasetComponent_Relations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockDatasetComponent_Relations_Call) Return(_a0 *types.Relations, _a1 error) *MockDatasetComponent_Relations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetComponent_Relations_Call) RunAndReturn(run func(context.Context, string, string, string) (*types.Relations, error)) *MockDatasetComponent_Relations_Call {
	_c.Call.Return(run)
	return _c
}

// Show provides a mock function with given fields: ctx, namespace, name, currentUser
func (_m *MockDatasetComponent) Show(ctx context.Context, namespace string, name string, currentUser string) (*types.Dataset, error) {
	ret := _m.Called(ctx, namespace, name, currentUser)

	if len(ret) == 0 {
		panic("no return value specified for Show")
	}

	var r0 *types.Dataset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*types.Dataset, error)); ok {
		return rf(ctx, namespace, name, currentUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *types.Dataset); ok {
		r0 = rf(ctx, namespace, name, currentUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Dataset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, namespace, name, currentUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetComponent_Show_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Show'
type MockDatasetComponent_Show_Call struct {
	*mock.Call
}

// Show is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - currentUser string
func (_e *MockDatasetComponent_Expecter) Show(ctx interface{}, namespace interface{}, name interface{}, currentUser interface{}) *MockDatasetComponent_Show_Call {
	return &MockDatasetComponent_Show_Call{Call: _e.mock.On("Show", ctx, namespace, name, currentUser)}
}

func (_c *MockDatasetComponent_Show_Call) Run(run func(ctx context.Context, namespace string, name string, currentUser string)) *MockDatasetComponent_Show_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockDatasetComponent_Show_Call) Return(_a0 *types.Dataset, _a1 error) *MockDatasetComponent_Show_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetComponent_Show_Call) RunAndReturn(run func(context.Context, string, string, string) (*types.Dataset, error)) *MockDatasetComponent_Show_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, req
func (_m *MockDatasetComponent) Update(ctx context.Context, req *types.UpdateDatasetReq) (*types.Dataset, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *types.Dataset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdateDatasetReq) (*types.Dataset, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdateDatasetReq) *types.Dataset); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Dataset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.UpdateDatasetReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDatasetComponent_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockDatasetComponent_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.UpdateDatasetReq
func (_e *MockDatasetComponent_Expecter) Update(ctx interface{}, req interface{}) *MockDatasetComponent_Update_Call {
	return &MockDatasetComponent_Update_Call{Call: _e.mock.On("Update", ctx, req)}
}

func (_c *MockDatasetComponent_Update_Call) Run(run func(ctx context.Context, req *types.UpdateDatasetReq)) *MockDatasetComponent_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.UpdateDatasetReq))
	})
	return _c
}

func (_c *MockDatasetComponent_Update_Call) Return(_a0 *types.Dataset, _a1 error) *MockDatasetComponent_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDatasetComponent_Update_Call) RunAndReturn(run func(context.Context, *types.UpdateDatasetReq) (*types.Dataset, error)) *MockDatasetComponent_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatasetComponent creates a new instance of MockDatasetComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatasetComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatasetComponent {
	mock := &MockDatasetComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	multisync "opencsg.com/csghub-server/builder/multisync"

	types "opencsg.com/csghub-server/common/types"
)

// MockMultiSyncComponent is an autogenerated mock type for the MultiSyncComponent type
type MockMultiSyncComponent struct {
	mock.Mock
}

type MockMultiSyncComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMultiSyncComponent) EXPECT() *MockMultiSyncComponent_Expecter {
	return &MockMultiSyncComponent_Expecter{mock: &_m.Mock}
}

// More provides a mock function with given fields: ctx, cur, limit
func (_m *MockMultiSyncComponent) More(ctx context.Context, cur int64, limit int64) ([]types.SyncVersion, error) {
	ret := _m.Called(ctx, cur, limit)

	if len(ret) == 0 {
		panic("no return value specified for More")
	}

	var r0 []types.SyncVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]types.SyncVersion, error)); ok {
		return rf(ctx, cur, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []types.SyncVersion); ok {
		r0 = rf(ctx, cur, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.SyncVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, cur, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMultiSyncComponent_More_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'More'
type MockMultiSyncComponent_More_Call struct {
	*mock.Call
}

// More is a helper method to define mock.On call
//   - ctx context.Context
//   - cur int64
//   - limit int64
func (_e *MockMultiSyncComponent_Expecter) More(ctx interface{}, cur interface{}, limit interface{}) *MockMultiSyncComponent_More_Call {
	return &MockMultiSyncComponent_More_Call{Call: _e.mock.On("More", ctx, cur, limit)}
}

func (_c *MockMultiSyncComponent_More_Call) Run(run func(ctx context.Context, cur int64, limit int64)) *MockMultiSyncComponent_More_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockMultiSyncComponent_More_Call) Return(_a0 []types.SyncVersion, _a1 error) *MockMultiSyncComponent_More_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMultiSyncComponent_More_Call) RunAndReturn(run func(context.Context, int64, int64) ([]types.SyncVersion, error)) *MockMultiSyncComponent_More_Call {
	_c.Call.Return(run)
	return _c
}

// SyncAsClient provides a mock function with given fields: ctx, sc
func (_m *MockMultiSyncComponent) SyncAsClient(ctx context.Context, sc multisync.Client) error {
	ret := _m.Called(ctx, sc)

	if len(ret) == 0 {
		panic("no return value specified for SyncAsClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, multisync.Client) error); ok {
		r0 = rf(ctx, sc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMultiSyncComponent_SyncAsClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncAsClient'
type MockMultiSyncComponent_SyncAsClient_Call struct {
	*mock.Call
}

// SyncAsClient is a helper method to define mock.On call
//   - ctx context.Context
//   - sc multisync.Client
func (_e *MockMultiSyncComponent_Expecter) SyncAsClient(ctx interface{}, sc interface{}) *MockMultiSyncComponent_SyncAsClient_Call {
	return &MockMultiSyncComponent_SyncAsClient_Call{Call: _e.mock.On("SyncAsClient", ctx, sc)}
}

func (_c *MockMultiSyncComponent_SyncAsClient_Call) Run(run func(ctx context.Context, sc multisync.Client)) *MockMultiSyncComponent_SyncAsClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(multisync.Client))
	})
	return _c
}

func (_c *MockMultiSyncComponent_SyncAsClient_Call) Return(_a0 error) *MockMultiSyncComponent_SyncAsClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMultiSyncComponent_SyncAsClient_Call) RunAndReturn(run func(context.Context, multisync.Client) error) *MockMultiSyncComponent_SyncAsClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMultiSyncComponent creates a new instance of MockMultiSyncComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMultiSyncComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMultiSyncComponent {
	mock := &MockMultiSyncComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

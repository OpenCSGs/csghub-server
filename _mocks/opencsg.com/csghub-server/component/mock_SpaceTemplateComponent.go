// Code generated by mockery v2.49.1. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockSpaceTemplateComponent is an autogenerated mock type for the SpaceTemplateComponent type
type MockSpaceTemplateComponent struct {
	mock.Mock
}

type MockSpaceTemplateComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpaceTemplateComponent) EXPECT() *MockSpaceTemplateComponent_Expecter {
	return &MockSpaceTemplateComponent_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *MockSpaceTemplateComponent) Create(ctx context.Context, req *types.SpaceTemplateReq) (*database.SpaceTemplate, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.SpaceTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SpaceTemplateReq) (*database.SpaceTemplate, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.SpaceTemplateReq) *database.SpaceTemplate); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SpaceTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.SpaceTemplateReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceTemplateComponent_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSpaceTemplateComponent_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.SpaceTemplateReq
func (_e *MockSpaceTemplateComponent_Expecter) Create(ctx interface{}, req interface{}) *MockSpaceTemplateComponent_Create_Call {
	return &MockSpaceTemplateComponent_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockSpaceTemplateComponent_Create_Call) Run(run func(ctx context.Context, req *types.SpaceTemplateReq)) *MockSpaceTemplateComponent_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.SpaceTemplateReq))
	})
	return _c
}

func (_c *MockSpaceTemplateComponent_Create_Call) Return(_a0 *database.SpaceTemplate, _a1 error) *MockSpaceTemplateComponent_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpaceTemplateComponent_Create_Call) RunAndReturn(run func(context.Context, *types.SpaceTemplateReq) (*database.SpaceTemplate, error)) *MockSpaceTemplateComponent_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockSpaceTemplateComponent) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceTemplateComponent_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSpaceTemplateComponent_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockSpaceTemplateComponent_Expecter) Delete(ctx interface{}, id interface{}) *MockSpaceTemplateComponent_Delete_Call {
	return &MockSpaceTemplateComponent_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockSpaceTemplateComponent_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockSpaceTemplateComponent_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockSpaceTemplateComponent_Delete_Call) Return(_a0 error) *MockSpaceTemplateComponent_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpaceTemplateComponent_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *MockSpaceTemplateComponent_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllByType provides a mock function with given fields: ctx, templateType
func (_m *MockSpaceTemplateComponent) FindAllByType(ctx context.Context, templateType string) ([]database.SpaceTemplate, error) {
	ret := _m.Called(ctx, templateType)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByType")
	}

	var r0 []database.SpaceTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]database.SpaceTemplate, error)); ok {
		return rf(ctx, templateType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []database.SpaceTemplate); ok {
		r0 = rf(ctx, templateType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.SpaceTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, templateType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceTemplateComponent_FindAllByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllByType'
type MockSpaceTemplateComponent_FindAllByType_Call struct {
	*mock.Call
}

// FindAllByType is a helper method to define mock.On call
//   - ctx context.Context
//   - templateType string
func (_e *MockSpaceTemplateComponent_Expecter) FindAllByType(ctx interface{}, templateType interface{}) *MockSpaceTemplateComponent_FindAllByType_Call {
	return &MockSpaceTemplateComponent_FindAllByType_Call{Call: _e.mock.On("FindAllByType", ctx, templateType)}
}

func (_c *MockSpaceTemplateComponent_FindAllByType_Call) Run(run func(ctx context.Context, templateType string)) *MockSpaceTemplateComponent_FindAllByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSpaceTemplateComponent_FindAllByType_Call) Return(_a0 []database.SpaceTemplate, _a1 error) *MockSpaceTemplateComponent_FindAllByType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpaceTemplateComponent_FindAllByType_Call) RunAndReturn(run func(context.Context, string) ([]database.SpaceTemplate, error)) *MockSpaceTemplateComponent_FindAllByType_Call {
	_c.Call.Return(run)
	return _c
}

// FindByName provides a mock function with given fields: ctx, templateType, templateName
func (_m *MockSpaceTemplateComponent) FindByName(ctx context.Context, templateType string, templateName string) (*database.SpaceTemplate, error) {
	ret := _m.Called(ctx, templateType, templateName)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 *database.SpaceTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*database.SpaceTemplate, error)); ok {
		return rf(ctx, templateType, templateName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *database.SpaceTemplate); ok {
		r0 = rf(ctx, templateType, templateName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SpaceTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, templateType, templateName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceTemplateComponent_FindByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByName'
type MockSpaceTemplateComponent_FindByName_Call struct {
	*mock.Call
}

// FindByName is a helper method to define mock.On call
//   - ctx context.Context
//   - templateType string
//   - templateName string
func (_e *MockSpaceTemplateComponent_Expecter) FindByName(ctx interface{}, templateType interface{}, templateName interface{}) *MockSpaceTemplateComponent_FindByName_Call {
	return &MockSpaceTemplateComponent_FindByName_Call{Call: _e.mock.On("FindByName", ctx, templateType, templateName)}
}

func (_c *MockSpaceTemplateComponent_FindByName_Call) Run(run func(ctx context.Context, templateType string, templateName string)) *MockSpaceTemplateComponent_FindByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSpaceTemplateComponent_FindByName_Call) Return(_a0 *database.SpaceTemplate, _a1 error) *MockSpaceTemplateComponent_FindByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpaceTemplateComponent_FindByName_Call) RunAndReturn(run func(context.Context, string, string) (*database.SpaceTemplate, error)) *MockSpaceTemplateComponent_FindByName_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx
func (_m *MockSpaceTemplateComponent) Index(ctx context.Context) ([]database.SpaceTemplate, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []database.SpaceTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.SpaceTemplate, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.SpaceTemplate); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.SpaceTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceTemplateComponent_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockSpaceTemplateComponent_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSpaceTemplateComponent_Expecter) Index(ctx interface{}) *MockSpaceTemplateComponent_Index_Call {
	return &MockSpaceTemplateComponent_Index_Call{Call: _e.mock.On("Index", ctx)}
}

func (_c *MockSpaceTemplateComponent_Index_Call) Run(run func(ctx context.Context)) *MockSpaceTemplateComponent_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSpaceTemplateComponent_Index_Call) Return(_a0 []database.SpaceTemplate, _a1 error) *MockSpaceTemplateComponent_Index_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpaceTemplateComponent_Index_Call) RunAndReturn(run func(context.Context) ([]database.SpaceTemplate, error)) *MockSpaceTemplateComponent_Index_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, req
func (_m *MockSpaceTemplateComponent) Update(ctx context.Context, req *types.UpdateSpaceTemplateReq) (*database.SpaceTemplate, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *database.SpaceTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdateSpaceTemplateReq) (*database.SpaceTemplate, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdateSpaceTemplateReq) *database.SpaceTemplate); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SpaceTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.UpdateSpaceTemplateReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceTemplateComponent_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSpaceTemplateComponent_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.UpdateSpaceTemplateReq
func (_e *MockSpaceTemplateComponent_Expecter) Update(ctx interface{}, req interface{}) *MockSpaceTemplateComponent_Update_Call {
	return &MockSpaceTemplateComponent_Update_Call{Call: _e.mock.On("Update", ctx, req)}
}

func (_c *MockSpaceTemplateComponent_Update_Call) Run(run func(ctx context.Context, req *types.UpdateSpaceTemplateReq)) *MockSpaceTemplateComponent_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.UpdateSpaceTemplateReq))
	})
	return _c
}

func (_c *MockSpaceTemplateComponent_Update_Call) Return(_a0 *database.SpaceTemplate, _a1 error) *MockSpaceTemplateComponent_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpaceTemplateComponent_Update_Call) RunAndReturn(run func(context.Context, *types.UpdateSpaceTemplateReq) (*database.SpaceTemplate, error)) *MockSpaceTemplateComponent_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSpaceTemplateComponent creates a new instance of MockSpaceTemplateComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpaceTemplateComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpaceTemplateComponent {
	mock := &MockSpaceTemplateComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

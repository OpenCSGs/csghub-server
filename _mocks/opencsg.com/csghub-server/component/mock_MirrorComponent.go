// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockMirrorComponent is an autogenerated mock type for the MirrorComponent type
type MockMirrorComponent struct {
	mock.Mock
}

type MockMirrorComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMirrorComponent) EXPECT() *MockMirrorComponent_Expecter {
	return &MockMirrorComponent_Expecter{mock: &_m.Mock}
}

// CheckMirrorProgress provides a mock function with given fields: ctx
func (_m *MockMirrorComponent) CheckMirrorProgress(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckMirrorProgress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMirrorComponent_CheckMirrorProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckMirrorProgress'
type MockMirrorComponent_CheckMirrorProgress_Call struct {
	*mock.Call
}

// CheckMirrorProgress is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMirrorComponent_Expecter) CheckMirrorProgress(ctx interface{}) *MockMirrorComponent_CheckMirrorProgress_Call {
	return &MockMirrorComponent_CheckMirrorProgress_Call{Call: _e.mock.On("CheckMirrorProgress", ctx)}
}

func (_c *MockMirrorComponent_CheckMirrorProgress_Call) Run(run func(ctx context.Context)) *MockMirrorComponent_CheckMirrorProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMirrorComponent_CheckMirrorProgress_Call) Return(_a0 error) *MockMirrorComponent_CheckMirrorProgress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMirrorComponent_CheckMirrorProgress_Call) RunAndReturn(run func(context.Context) error) *MockMirrorComponent_CheckMirrorProgress_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMirrorRepo provides a mock function with given fields: ctx, req
func (_m *MockMirrorComponent) CreateMirrorRepo(ctx context.Context, req types.CreateMirrorRepoReq) (*database.Mirror, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateMirrorRepo")
	}

	var r0 *database.Mirror
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.CreateMirrorRepoReq) (*database.Mirror, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.CreateMirrorRepoReq) *database.Mirror); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Mirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.CreateMirrorRepoReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorComponent_CreateMirrorRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMirrorRepo'
type MockMirrorComponent_CreateMirrorRepo_Call struct {
	*mock.Call
}

// CreateMirrorRepo is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.CreateMirrorRepoReq
func (_e *MockMirrorComponent_Expecter) CreateMirrorRepo(ctx interface{}, req interface{}) *MockMirrorComponent_CreateMirrorRepo_Call {
	return &MockMirrorComponent_CreateMirrorRepo_Call{Call: _e.mock.On("CreateMirrorRepo", ctx, req)}
}

func (_c *MockMirrorComponent_CreateMirrorRepo_Call) Run(run func(ctx context.Context, req types.CreateMirrorRepoReq)) *MockMirrorComponent_CreateMirrorRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.CreateMirrorRepoReq))
	})
	return _c
}

func (_c *MockMirrorComponent_CreateMirrorRepo_Call) Return(_a0 *database.Mirror, _a1 error) *MockMirrorComponent_CreateMirrorRepo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorComponent_CreateMirrorRepo_Call) RunAndReturn(run func(context.Context, types.CreateMirrorRepoReq) (*database.Mirror, error)) *MockMirrorComponent_CreateMirrorRepo_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePushMirrorForFinishedMirrorTask provides a mock function with given fields: ctx
func (_m *MockMirrorComponent) CreatePushMirrorForFinishedMirrorTask(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreatePushMirrorForFinishedMirrorTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMirrorComponent_CreatePushMirrorForFinishedMirrorTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePushMirrorForFinishedMirrorTask'
type MockMirrorComponent_CreatePushMirrorForFinishedMirrorTask_Call struct {
	*mock.Call
}

// CreatePushMirrorForFinishedMirrorTask is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMirrorComponent_Expecter) CreatePushMirrorForFinishedMirrorTask(ctx interface{}) *MockMirrorComponent_CreatePushMirrorForFinishedMirrorTask_Call {
	return &MockMirrorComponent_CreatePushMirrorForFinishedMirrorTask_Call{Call: _e.mock.On("CreatePushMirrorForFinishedMirrorTask", ctx)}
}

func (_c *MockMirrorComponent_CreatePushMirrorForFinishedMirrorTask_Call) Run(run func(ctx context.Context)) *MockMirrorComponent_CreatePushMirrorForFinishedMirrorTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMirrorComponent_CreatePushMirrorForFinishedMirrorTask_Call) Return(_a0 error) *MockMirrorComponent_CreatePushMirrorForFinishedMirrorTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMirrorComponent_CreatePushMirrorForFinishedMirrorTask_Call) RunAndReturn(run func(context.Context) error) *MockMirrorComponent_CreatePushMirrorForFinishedMirrorTask_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx, currentUser, per, page, search
func (_m *MockMirrorComponent) Index(ctx context.Context, currentUser string, per int, page int, search string) ([]types.Mirror, int, error) {
	ret := _m.Called(ctx, currentUser, per, page, search)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []types.Mirror
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, string) ([]types.Mirror, int, error)); ok {
		return rf(ctx, currentUser, per, page, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, string) []types.Mirror); ok {
		r0 = rf(ctx, currentUser, per, page, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Mirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int, string) int); ok {
		r1 = rf(ctx, currentUser, per, page, search)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int, string) error); ok {
		r2 = rf(ctx, currentUser, per, page, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMirrorComponent_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockMirrorComponent_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUser string
//   - per int
//   - page int
//   - search string
func (_e *MockMirrorComponent_Expecter) Index(ctx interface{}, currentUser interface{}, per interface{}, page interface{}, search interface{}) *MockMirrorComponent_Index_Call {
	return &MockMirrorComponent_Index_Call{Call: _e.mock.On("Index", ctx, currentUser, per, page, search)}
}

func (_c *MockMirrorComponent_Index_Call) Run(run func(ctx context.Context, currentUser string, per int, page int, search string)) *MockMirrorComponent_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int), args[4].(string))
	})
	return _c
}

func (_c *MockMirrorComponent_Index_Call) Return(_a0 []types.Mirror, _a1 int, _a2 error) *MockMirrorComponent_Index_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMirrorComponent_Index_Call) RunAndReturn(run func(context.Context, string, int, int, string) ([]types.Mirror, int, error)) *MockMirrorComponent_Index_Call {
	_c.Call.Return(run)
	return _c
}

// Repos provides a mock function with given fields: ctx, currentUser, per, page
func (_m *MockMirrorComponent) Repos(ctx context.Context, currentUser string, per int, page int) ([]types.MirrorRepo, int, error) {
	ret := _m.Called(ctx, currentUser, per, page)

	if len(ret) == 0 {
		panic("no return value specified for Repos")
	}

	var r0 []types.MirrorRepo
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]types.MirrorRepo, int, error)); ok {
		return rf(ctx, currentUser, per, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []types.MirrorRepo); ok {
		r0 = rf(ctx, currentUser, per, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.MirrorRepo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = rf(ctx, currentUser, per, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, currentUser, per, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMirrorComponent_Repos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Repos'
type MockMirrorComponent_Repos_Call struct {
	*mock.Call
}

// Repos is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUser string
//   - per int
//   - page int
func (_e *MockMirrorComponent_Expecter) Repos(ctx interface{}, currentUser interface{}, per interface{}, page interface{}) *MockMirrorComponent_Repos_Call {
	return &MockMirrorComponent_Repos_Call{Call: _e.mock.On("Repos", ctx, currentUser, per, page)}
}

func (_c *MockMirrorComponent_Repos_Call) Run(run func(ctx context.Context, currentUser string, per int, page int)) *MockMirrorComponent_Repos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockMirrorComponent_Repos_Call) Return(_a0 []types.MirrorRepo, _a1 int, _a2 error) *MockMirrorComponent_Repos_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMirrorComponent_Repos_Call) RunAndReturn(run func(context.Context, string, int, int) ([]types.MirrorRepo, int, error)) *MockMirrorComponent_Repos_Call {
	_c.Call.Return(run)
	return _c
}

// Statistics provides a mock function with given fields: ctx, currentUser
func (_m *MockMirrorComponent) Statistics(ctx context.Context, currentUser string) ([]types.MirrorStatusCount, error) {
	ret := _m.Called(ctx, currentUser)

	if len(ret) == 0 {
		panic("no return value specified for Statistics")
	}

	var r0 []types.MirrorStatusCount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]types.MirrorStatusCount, error)); ok {
		return rf(ctx, currentUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []types.MirrorStatusCount); ok {
		r0 = rf(ctx, currentUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.MirrorStatusCount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, currentUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorComponent_Statistics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Statistics'
type MockMirrorComponent_Statistics_Call struct {
	*mock.Call
}

// Statistics is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUser string
func (_e *MockMirrorComponent_Expecter) Statistics(ctx interface{}, currentUser interface{}) *MockMirrorComponent_Statistics_Call {
	return &MockMirrorComponent_Statistics_Call{Call: _e.mock.On("Statistics", ctx, currentUser)}
}

func (_c *MockMirrorComponent_Statistics_Call) Run(run func(ctx context.Context, currentUser string)) *MockMirrorComponent_Statistics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMirrorComponent_Statistics_Call) Return(_a0 []types.MirrorStatusCount, _a1 error) *MockMirrorComponent_Statistics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorComponent_Statistics_Call) RunAndReturn(run func(context.Context, string) ([]types.MirrorStatusCount, error)) *MockMirrorComponent_Statistics_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMirrorComponent creates a new instance of MockMirrorComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMirrorComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMirrorComponent {
	mock := &MockMirrorComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

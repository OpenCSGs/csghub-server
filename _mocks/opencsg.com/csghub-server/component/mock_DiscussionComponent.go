// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockDiscussionComponent is an autogenerated mock type for the DiscussionComponent type
type MockDiscussionComponent struct {
	mock.Mock
}

type MockDiscussionComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDiscussionComponent) EXPECT() *MockDiscussionComponent_Expecter {
	return &MockDiscussionComponent_Expecter{mock: &_m.Mock}
}

// CreateDiscussionComment provides a mock function with given fields: ctx, req
func (_m *MockDiscussionComponent) CreateDiscussionComment(ctx context.Context, req types.CreateCommentRequest) (*types.CreateCommentResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateDiscussionComment")
	}

	var r0 *types.CreateCommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.CreateCommentRequest) (*types.CreateCommentResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.CreateCommentRequest) *types.CreateCommentResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CreateCommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.CreateCommentRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscussionComponent_CreateDiscussionComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDiscussionComment'
type MockDiscussionComponent_CreateDiscussionComment_Call struct {
	*mock.Call
}

// CreateDiscussionComment is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.CreateCommentRequest
func (_e *MockDiscussionComponent_Expecter) CreateDiscussionComment(ctx interface{}, req interface{}) *MockDiscussionComponent_CreateDiscussionComment_Call {
	return &MockDiscussionComponent_CreateDiscussionComment_Call{Call: _e.mock.On("CreateDiscussionComment", ctx, req)}
}

func (_c *MockDiscussionComponent_CreateDiscussionComment_Call) Run(run func(ctx context.Context, req types.CreateCommentRequest)) *MockDiscussionComponent_CreateDiscussionComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.CreateCommentRequest))
	})
	return _c
}

func (_c *MockDiscussionComponent_CreateDiscussionComment_Call) Return(_a0 *types.CreateCommentResponse, _a1 error) *MockDiscussionComponent_CreateDiscussionComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscussionComponent_CreateDiscussionComment_Call) RunAndReturn(run func(context.Context, types.CreateCommentRequest) (*types.CreateCommentResponse, error)) *MockDiscussionComponent_CreateDiscussionComment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRepoDiscussion provides a mock function with given fields: ctx, req
func (_m *MockDiscussionComponent) CreateRepoDiscussion(ctx context.Context, req types.CreateRepoDiscussionRequest) (*types.CreateDiscussionResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepoDiscussion")
	}

	var r0 *types.CreateDiscussionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.CreateRepoDiscussionRequest) (*types.CreateDiscussionResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.CreateRepoDiscussionRequest) *types.CreateDiscussionResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CreateDiscussionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.CreateRepoDiscussionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscussionComponent_CreateRepoDiscussion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRepoDiscussion'
type MockDiscussionComponent_CreateRepoDiscussion_Call struct {
	*mock.Call
}

// CreateRepoDiscussion is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.CreateRepoDiscussionRequest
func (_e *MockDiscussionComponent_Expecter) CreateRepoDiscussion(ctx interface{}, req interface{}) *MockDiscussionComponent_CreateRepoDiscussion_Call {
	return &MockDiscussionComponent_CreateRepoDiscussion_Call{Call: _e.mock.On("CreateRepoDiscussion", ctx, req)}
}

func (_c *MockDiscussionComponent_CreateRepoDiscussion_Call) Run(run func(ctx context.Context, req types.CreateRepoDiscussionRequest)) *MockDiscussionComponent_CreateRepoDiscussion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.CreateRepoDiscussionRequest))
	})
	return _c
}

func (_c *MockDiscussionComponent_CreateRepoDiscussion_Call) Return(_a0 *types.CreateDiscussionResponse, _a1 error) *MockDiscussionComponent_CreateRepoDiscussion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscussionComponent_CreateRepoDiscussion_Call) RunAndReturn(run func(context.Context, types.CreateRepoDiscussionRequest) (*types.CreateDiscussionResponse, error)) *MockDiscussionComponent_CreateRepoDiscussion_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComment provides a mock function with given fields: ctx, currentUser, id
func (_m *MockDiscussionComponent) DeleteComment(ctx context.Context, currentUser string, id int64) error {
	ret := _m.Called(ctx, currentUser, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, currentUser, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscussionComponent_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type MockDiscussionComponent_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUser string
//   - id int64
func (_e *MockDiscussionComponent_Expecter) DeleteComment(ctx interface{}, currentUser interface{}, id interface{}) *MockDiscussionComponent_DeleteComment_Call {
	return &MockDiscussionComponent_DeleteComment_Call{Call: _e.mock.On("DeleteComment", ctx, currentUser, id)}
}

func (_c *MockDiscussionComponent_DeleteComment_Call) Run(run func(ctx context.Context, currentUser string, id int64)) *MockDiscussionComponent_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockDiscussionComponent_DeleteComment_Call) Return(_a0 error) *MockDiscussionComponent_DeleteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscussionComponent_DeleteComment_Call) RunAndReturn(run func(context.Context, string, int64) error) *MockDiscussionComponent_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDiscussion provides a mock function with given fields: ctx, currentUser, id
func (_m *MockDiscussionComponent) DeleteDiscussion(ctx context.Context, currentUser string, id int64) error {
	ret := _m.Called(ctx, currentUser, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDiscussion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, currentUser, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscussionComponent_DeleteDiscussion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDiscussion'
type MockDiscussionComponent_DeleteDiscussion_Call struct {
	*mock.Call
}

// DeleteDiscussion is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUser string
//   - id int64
func (_e *MockDiscussionComponent_Expecter) DeleteDiscussion(ctx interface{}, currentUser interface{}, id interface{}) *MockDiscussionComponent_DeleteDiscussion_Call {
	return &MockDiscussionComponent_DeleteDiscussion_Call{Call: _e.mock.On("DeleteDiscussion", ctx, currentUser, id)}
}

func (_c *MockDiscussionComponent_DeleteDiscussion_Call) Run(run func(ctx context.Context, currentUser string, id int64)) *MockDiscussionComponent_DeleteDiscussion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockDiscussionComponent_DeleteDiscussion_Call) Return(_a0 error) *MockDiscussionComponent_DeleteDiscussion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscussionComponent_DeleteDiscussion_Call) RunAndReturn(run func(context.Context, string, int64) error) *MockDiscussionComponent_DeleteDiscussion_Call {
	_c.Call.Return(run)
	return _c
}

// GetDiscussion provides a mock function with given fields: ctx, currentUser, id
func (_m *MockDiscussionComponent) GetDiscussion(ctx context.Context, currentUser string, id int64) (*types.ShowDiscussionResponse, error) {
	ret := _m.Called(ctx, currentUser, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDiscussion")
	}

	var r0 *types.ShowDiscussionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (*types.ShowDiscussionResponse, error)); ok {
		return rf(ctx, currentUser, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *types.ShowDiscussionResponse); ok {
		r0 = rf(ctx, currentUser, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ShowDiscussionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, currentUser, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscussionComponent_GetDiscussion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDiscussion'
type MockDiscussionComponent_GetDiscussion_Call struct {
	*mock.Call
}

// GetDiscussion is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUser string
//   - id int64
func (_e *MockDiscussionComponent_Expecter) GetDiscussion(ctx interface{}, currentUser interface{}, id interface{}) *MockDiscussionComponent_GetDiscussion_Call {
	return &MockDiscussionComponent_GetDiscussion_Call{Call: _e.mock.On("GetDiscussion", ctx, currentUser, id)}
}

func (_c *MockDiscussionComponent_GetDiscussion_Call) Run(run func(ctx context.Context, currentUser string, id int64)) *MockDiscussionComponent_GetDiscussion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockDiscussionComponent_GetDiscussion_Call) Return(_a0 *types.ShowDiscussionResponse, _a1 error) *MockDiscussionComponent_GetDiscussion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscussionComponent_GetDiscussion_Call) RunAndReturn(run func(context.Context, string, int64) (*types.ShowDiscussionResponse, error)) *MockDiscussionComponent_GetDiscussion_Call {
	_c.Call.Return(run)
	return _c
}

// ListDiscussionComments provides a mock function with given fields: ctx, currentUser, discussionID
func (_m *MockDiscussionComponent) ListDiscussionComments(ctx context.Context, currentUser string, discussionID int64) ([]*types.DiscussionResponse_Comment, error) {
	ret := _m.Called(ctx, currentUser, discussionID)

	if len(ret) == 0 {
		panic("no return value specified for ListDiscussionComments")
	}

	var r0 []*types.DiscussionResponse_Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) ([]*types.DiscussionResponse_Comment, error)); ok {
		return rf(ctx, currentUser, discussionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) []*types.DiscussionResponse_Comment); ok {
		r0 = rf(ctx, currentUser, discussionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.DiscussionResponse_Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, currentUser, discussionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscussionComponent_ListDiscussionComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDiscussionComments'
type MockDiscussionComponent_ListDiscussionComments_Call struct {
	*mock.Call
}

// ListDiscussionComments is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUser string
//   - discussionID int64
func (_e *MockDiscussionComponent_Expecter) ListDiscussionComments(ctx interface{}, currentUser interface{}, discussionID interface{}) *MockDiscussionComponent_ListDiscussionComments_Call {
	return &MockDiscussionComponent_ListDiscussionComments_Call{Call: _e.mock.On("ListDiscussionComments", ctx, currentUser, discussionID)}
}

func (_c *MockDiscussionComponent_ListDiscussionComments_Call) Run(run func(ctx context.Context, currentUser string, discussionID int64)) *MockDiscussionComponent_ListDiscussionComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockDiscussionComponent_ListDiscussionComments_Call) Return(_a0 []*types.DiscussionResponse_Comment, _a1 error) *MockDiscussionComponent_ListDiscussionComments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscussionComponent_ListDiscussionComments_Call) RunAndReturn(run func(context.Context, string, int64) ([]*types.DiscussionResponse_Comment, error)) *MockDiscussionComponent_ListDiscussionComments_Call {
	_c.Call.Return(run)
	return _c
}

// ListRepoDiscussions provides a mock function with given fields: ctx, req
func (_m *MockDiscussionComponent) ListRepoDiscussions(ctx context.Context, req types.ListRepoDiscussionRequest) (*types.ListRepoDiscussionResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListRepoDiscussions")
	}

	var r0 *types.ListRepoDiscussionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ListRepoDiscussionRequest) (*types.ListRepoDiscussionResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ListRepoDiscussionRequest) *types.ListRepoDiscussionResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ListRepoDiscussionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ListRepoDiscussionRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscussionComponent_ListRepoDiscussions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRepoDiscussions'
type MockDiscussionComponent_ListRepoDiscussions_Call struct {
	*mock.Call
}

// ListRepoDiscussions is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ListRepoDiscussionRequest
func (_e *MockDiscussionComponent_Expecter) ListRepoDiscussions(ctx interface{}, req interface{}) *MockDiscussionComponent_ListRepoDiscussions_Call {
	return &MockDiscussionComponent_ListRepoDiscussions_Call{Call: _e.mock.On("ListRepoDiscussions", ctx, req)}
}

func (_c *MockDiscussionComponent_ListRepoDiscussions_Call) Run(run func(ctx context.Context, req types.ListRepoDiscussionRequest)) *MockDiscussionComponent_ListRepoDiscussions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ListRepoDiscussionRequest))
	})
	return _c
}

func (_c *MockDiscussionComponent_ListRepoDiscussions_Call) Return(_a0 *types.ListRepoDiscussionResponse, _a1 error) *MockDiscussionComponent_ListRepoDiscussions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscussionComponent_ListRepoDiscussions_Call) RunAndReturn(run func(context.Context, types.ListRepoDiscussionRequest) (*types.ListRepoDiscussionResponse, error)) *MockDiscussionComponent_ListRepoDiscussions_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComment provides a mock function with given fields: ctx, currentUser, id, content
func (_m *MockDiscussionComponent) UpdateComment(ctx context.Context, currentUser string, id int64, content string) error {
	ret := _m.Called(ctx, currentUser, id, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, string) error); ok {
		r0 = rf(ctx, currentUser, id, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscussionComponent_UpdateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComment'
type MockDiscussionComponent_UpdateComment_Call struct {
	*mock.Call
}

// UpdateComment is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUser string
//   - id int64
//   - content string
func (_e *MockDiscussionComponent_Expecter) UpdateComment(ctx interface{}, currentUser interface{}, id interface{}, content interface{}) *MockDiscussionComponent_UpdateComment_Call {
	return &MockDiscussionComponent_UpdateComment_Call{Call: _e.mock.On("UpdateComment", ctx, currentUser, id, content)}
}

func (_c *MockDiscussionComponent_UpdateComment_Call) Run(run func(ctx context.Context, currentUser string, id int64, content string)) *MockDiscussionComponent_UpdateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(string))
	})
	return _c
}

func (_c *MockDiscussionComponent_UpdateComment_Call) Return(_a0 error) *MockDiscussionComponent_UpdateComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscussionComponent_UpdateComment_Call) RunAndReturn(run func(context.Context, string, int64, string) error) *MockDiscussionComponent_UpdateComment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDiscussion provides a mock function with given fields: ctx, req
func (_m *MockDiscussionComponent) UpdateDiscussion(ctx context.Context, req types.UpdateDiscussionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDiscussion")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.UpdateDiscussionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscussionComponent_UpdateDiscussion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDiscussion'
type MockDiscussionComponent_UpdateDiscussion_Call struct {
	*mock.Call
}

// UpdateDiscussion is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.UpdateDiscussionRequest
func (_e *MockDiscussionComponent_Expecter) UpdateDiscussion(ctx interface{}, req interface{}) *MockDiscussionComponent_UpdateDiscussion_Call {
	return &MockDiscussionComponent_UpdateDiscussion_Call{Call: _e.mock.On("UpdateDiscussion", ctx, req)}
}

func (_c *MockDiscussionComponent_UpdateDiscussion_Call) Run(run func(ctx context.Context, req types.UpdateDiscussionRequest)) *MockDiscussionComponent_UpdateDiscussion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.UpdateDiscussionRequest))
	})
	return _c
}

func (_c *MockDiscussionComponent_UpdateDiscussion_Call) Return(_a0 error) *MockDiscussionComponent_UpdateDiscussion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscussionComponent_UpdateDiscussion_Call) RunAndReturn(run func(context.Context, types.UpdateDiscussionRequest) error) *MockDiscussionComponent_UpdateDiscussion_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDiscussionComponent creates a new instance of MockDiscussionComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDiscussionComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDiscussionComponent {
	mock := &MockDiscussionComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockCodeComponent is an autogenerated mock type for the CodeComponent type
type MockCodeComponent struct {
	mock.Mock
}

type MockCodeComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCodeComponent) EXPECT() *MockCodeComponent_Expecter {
	return &MockCodeComponent_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *MockCodeComponent) Create(ctx context.Context, req *types.CreateCodeReq) (*types.Code, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *types.Code
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateCodeReq) (*types.Code, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateCodeReq) *types.Code); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Code)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CreateCodeReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCodeComponent_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCodeComponent_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.CreateCodeReq
func (_e *MockCodeComponent_Expecter) Create(ctx interface{}, req interface{}) *MockCodeComponent_Create_Call {
	return &MockCodeComponent_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockCodeComponent_Create_Call) Run(run func(ctx context.Context, req *types.CreateCodeReq)) *MockCodeComponent_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CreateCodeReq))
	})
	return _c
}

func (_c *MockCodeComponent_Create_Call) Return(_a0 *types.Code, _a1 error) *MockCodeComponent_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCodeComponent_Create_Call) RunAndReturn(run func(context.Context, *types.CreateCodeReq) (*types.Code, error)) *MockCodeComponent_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, namespace, name, currentUser
func (_m *MockCodeComponent) Delete(ctx context.Context, namespace string, name string, currentUser string) error {
	ret := _m.Called(ctx, namespace, name, currentUser)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, namespace, name, currentUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCodeComponent_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCodeComponent_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - currentUser string
func (_e *MockCodeComponent_Expecter) Delete(ctx interface{}, namespace interface{}, name interface{}, currentUser interface{}) *MockCodeComponent_Delete_Call {
	return &MockCodeComponent_Delete_Call{Call: _e.mock.On("Delete", ctx, namespace, name, currentUser)}
}

func (_c *MockCodeComponent_Delete_Call) Run(run func(ctx context.Context, namespace string, name string, currentUser string)) *MockCodeComponent_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockCodeComponent_Delete_Call) Return(_a0 error) *MockCodeComponent_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCodeComponent_Delete_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockCodeComponent_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx, filter, per, page, needOpWeight
func (_m *MockCodeComponent) Index(ctx context.Context, filter *types.RepoFilter, per int, page int, needOpWeight bool) ([]*types.Code, int, error) {
	ret := _m.Called(ctx, filter, per, page, needOpWeight)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []*types.Code
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.RepoFilter, int, int, bool) ([]*types.Code, int, error)); ok {
		return rf(ctx, filter, per, page, needOpWeight)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.RepoFilter, int, int, bool) []*types.Code); ok {
		r0 = rf(ctx, filter, per, page, needOpWeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Code)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.RepoFilter, int, int, bool) int); ok {
		r1 = rf(ctx, filter, per, page, needOpWeight)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *types.RepoFilter, int, int, bool) error); ok {
		r2 = rf(ctx, filter, per, page, needOpWeight)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockCodeComponent_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockCodeComponent_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *types.RepoFilter
//   - per int
//   - page int
//   - needOpWeight bool
func (_e *MockCodeComponent_Expecter) Index(ctx interface{}, filter interface{}, per interface{}, page interface{}, needOpWeight interface{}) *MockCodeComponent_Index_Call {
	return &MockCodeComponent_Index_Call{Call: _e.mock.On("Index", ctx, filter, per, page, needOpWeight)}
}

func (_c *MockCodeComponent_Index_Call) Run(run func(ctx context.Context, filter *types.RepoFilter, per int, page int, needOpWeight bool)) *MockCodeComponent_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RepoFilter), args[2].(int), args[3].(int), args[4].(bool))
	})
	return _c
}

func (_c *MockCodeComponent_Index_Call) Return(_a0 []*types.Code, _a1 int, _a2 error) *MockCodeComponent_Index_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockCodeComponent_Index_Call) RunAndReturn(run func(context.Context, *types.RepoFilter, int, int, bool) ([]*types.Code, int, error)) *MockCodeComponent_Index_Call {
	_c.Call.Return(run)
	return _c
}

// OrgCodes provides a mock function with given fields: ctx, req
func (_m *MockCodeComponent) OrgCodes(ctx context.Context, req *types.OrgCodesReq) ([]types.Code, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for OrgCodes")
	}

	var r0 []types.Code
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.OrgCodesReq) ([]types.Code, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.OrgCodesReq) []types.Code); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Code)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.OrgCodesReq) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *types.OrgCodesReq) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockCodeComponent_OrgCodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrgCodes'
type MockCodeComponent_OrgCodes_Call struct {
	*mock.Call
}

// OrgCodes is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.OrgCodesReq
func (_e *MockCodeComponent_Expecter) OrgCodes(ctx interface{}, req interface{}) *MockCodeComponent_OrgCodes_Call {
	return &MockCodeComponent_OrgCodes_Call{Call: _e.mock.On("OrgCodes", ctx, req)}
}

func (_c *MockCodeComponent_OrgCodes_Call) Run(run func(ctx context.Context, req *types.OrgCodesReq)) *MockCodeComponent_OrgCodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.OrgCodesReq))
	})
	return _c
}

func (_c *MockCodeComponent_OrgCodes_Call) Return(_a0 []types.Code, _a1 int, _a2 error) *MockCodeComponent_OrgCodes_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockCodeComponent_OrgCodes_Call) RunAndReturn(run func(context.Context, *types.OrgCodesReq) ([]types.Code, int, error)) *MockCodeComponent_OrgCodes_Call {
	_c.Call.Return(run)
	return _c
}

// Relations provides a mock function with given fields: ctx, namespace, name, currentUser
func (_m *MockCodeComponent) Relations(ctx context.Context, namespace string, name string, currentUser string) (*types.Relations, error) {
	ret := _m.Called(ctx, namespace, name, currentUser)

	if len(ret) == 0 {
		panic("no return value specified for Relations")
	}

	var r0 *types.Relations
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*types.Relations, error)); ok {
		return rf(ctx, namespace, name, currentUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *types.Relations); ok {
		r0 = rf(ctx, namespace, name, currentUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Relations)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, namespace, name, currentUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCodeComponent_Relations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Relations'
type MockCodeComponent_Relations_Call struct {
	*mock.Call
}

// Relations is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - currentUser string
func (_e *MockCodeComponent_Expecter) Relations(ctx interface{}, namespace interface{}, name interface{}, currentUser interface{}) *MockCodeComponent_Relations_Call {
	return &MockCodeComponent_Relations_Call{Call: _e.mock.On("Relations", ctx, namespace, name, currentUser)}
}

func (_c *MockCodeComponent_Relations_Call) Run(run func(ctx context.Context, namespace string, name string, currentUser string)) *MockCodeComponent_Relations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockCodeComponent_Relations_Call) Return(_a0 *types.Relations, _a1 error) *MockCodeComponent_Relations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCodeComponent_Relations_Call) RunAndReturn(run func(context.Context, string, string, string) (*types.Relations, error)) *MockCodeComponent_Relations_Call {
	_c.Call.Return(run)
	return _c
}

// Show provides a mock function with given fields: ctx, namespace, name, currentUser, needOpWeight, needMultiSync
func (_m *MockCodeComponent) Show(ctx context.Context, namespace string, name string, currentUser string, needOpWeight bool, needMultiSync bool) (*types.Code, error) {
	ret := _m.Called(ctx, namespace, name, currentUser, needOpWeight, needMultiSync)

	if len(ret) == 0 {
		panic("no return value specified for Show")
	}

	var r0 *types.Code
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, bool, bool) (*types.Code, error)); ok {
		return rf(ctx, namespace, name, currentUser, needOpWeight, needMultiSync)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, bool, bool) *types.Code); ok {
		r0 = rf(ctx, namespace, name, currentUser, needOpWeight, needMultiSync)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Code)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, bool, bool) error); ok {
		r1 = rf(ctx, namespace, name, currentUser, needOpWeight, needMultiSync)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCodeComponent_Show_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Show'
type MockCodeComponent_Show_Call struct {
	*mock.Call
}

// Show is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - currentUser string
//   - needOpWeight bool
//   - needMultiSync bool
func (_e *MockCodeComponent_Expecter) Show(ctx interface{}, namespace interface{}, name interface{}, currentUser interface{}, needOpWeight interface{}, needMultiSync interface{}) *MockCodeComponent_Show_Call {
	return &MockCodeComponent_Show_Call{Call: _e.mock.On("Show", ctx, namespace, name, currentUser, needOpWeight, needMultiSync)}
}

func (_c *MockCodeComponent_Show_Call) Run(run func(ctx context.Context, namespace string, name string, currentUser string, needOpWeight bool, needMultiSync bool)) *MockCodeComponent_Show_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(bool), args[5].(bool))
	})
	return _c
}

func (_c *MockCodeComponent_Show_Call) Return(_a0 *types.Code, _a1 error) *MockCodeComponent_Show_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCodeComponent_Show_Call) RunAndReturn(run func(context.Context, string, string, string, bool, bool) (*types.Code, error)) *MockCodeComponent_Show_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, req
func (_m *MockCodeComponent) Update(ctx context.Context, req *types.UpdateCodeReq) (*types.Code, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *types.Code
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdateCodeReq) (*types.Code, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdateCodeReq) *types.Code); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Code)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.UpdateCodeReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCodeComponent_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCodeComponent_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.UpdateCodeReq
func (_e *MockCodeComponent_Expecter) Update(ctx interface{}, req interface{}) *MockCodeComponent_Update_Call {
	return &MockCodeComponent_Update_Call{Call: _e.mock.On("Update", ctx, req)}
}

func (_c *MockCodeComponent_Update_Call) Run(run func(ctx context.Context, req *types.UpdateCodeReq)) *MockCodeComponent_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.UpdateCodeReq))
	})
	return _c
}

func (_c *MockCodeComponent_Update_Call) Return(_a0 *types.Code, _a1 error) *MockCodeComponent_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCodeComponent_Update_Call) RunAndReturn(run func(context.Context, *types.UpdateCodeReq) (*types.Code, error)) *MockCodeComponent_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCodeComponent creates a new instance of MockCodeComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCodeComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCodeComponent {
	mock := &MockCodeComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

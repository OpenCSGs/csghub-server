// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockLicenseComponent is an autogenerated mock type for the LicenseComponent type
type MockLicenseComponent struct {
	mock.Mock
}

type MockLicenseComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLicenseComponent) EXPECT() *MockLicenseComponent_Expecter {
	return &MockLicenseComponent_Expecter{mock: &_m.Mock}
}

// CreateLicense provides a mock function with given fields: ctx, req
func (_m *MockLicenseComponent) CreateLicense(ctx context.Context, req *types.CreateLicenseReq) (string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateLicense")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateLicenseReq) (string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateLicenseReq) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CreateLicenseReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLicenseComponent_CreateLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLicense'
type MockLicenseComponent_CreateLicense_Call struct {
	*mock.Call
}

// CreateLicense is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.CreateLicenseReq
func (_e *MockLicenseComponent_Expecter) CreateLicense(ctx interface{}, req interface{}) *MockLicenseComponent_CreateLicense_Call {
	return &MockLicenseComponent_CreateLicense_Call{Call: _e.mock.On("CreateLicense", ctx, req)}
}

func (_c *MockLicenseComponent_CreateLicense_Call) Run(run func(ctx context.Context, req *types.CreateLicenseReq)) *MockLicenseComponent_CreateLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CreateLicenseReq))
	})
	return _c
}

func (_c *MockLicenseComponent_CreateLicense_Call) Return(_a0 string, _a1 error) *MockLicenseComponent_CreateLicense_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLicenseComponent_CreateLicense_Call) RunAndReturn(run func(context.Context, *types.CreateLicenseReq) (string, error)) *MockLicenseComponent_CreateLicense_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLicenseByID provides a mock function with given fields: ctx, id, currentUser
func (_m *MockLicenseComponent) DeleteLicenseByID(ctx context.Context, id int64, currentUser string) error {
	ret := _m.Called(ctx, id, currentUser)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLicenseByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, id, currentUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLicenseComponent_DeleteLicenseByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLicenseByID'
type MockLicenseComponent_DeleteLicenseByID_Call struct {
	*mock.Call
}

// DeleteLicenseByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - currentUser string
func (_e *MockLicenseComponent_Expecter) DeleteLicenseByID(ctx interface{}, id interface{}, currentUser interface{}) *MockLicenseComponent_DeleteLicenseByID_Call {
	return &MockLicenseComponent_DeleteLicenseByID_Call{Call: _e.mock.On("DeleteLicenseByID", ctx, id, currentUser)}
}

func (_c *MockLicenseComponent_DeleteLicenseByID_Call) Run(run func(ctx context.Context, id int64, currentUser string)) *MockLicenseComponent_DeleteLicenseByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockLicenseComponent_DeleteLicenseByID_Call) Return(_a0 error) *MockLicenseComponent_DeleteLicenseByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLicenseComponent_DeleteLicenseByID_Call) RunAndReturn(run func(context.Context, int64, string) error) *MockLicenseComponent_DeleteLicenseByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicenseByID provides a mock function with given fields: ctx, req
func (_m *MockLicenseComponent) GetLicenseByID(ctx context.Context, req types.GetLicenseReq) (*database.License, string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseByID")
	}

	var r0 *database.License
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.GetLicenseReq) (*database.License, string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.GetLicenseReq) *database.License); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.License)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.GetLicenseReq) string); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.GetLicenseReq) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLicenseComponent_GetLicenseByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseByID'
type MockLicenseComponent_GetLicenseByID_Call struct {
	*mock.Call
}

// GetLicenseByID is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.GetLicenseReq
func (_e *MockLicenseComponent_Expecter) GetLicenseByID(ctx interface{}, req interface{}) *MockLicenseComponent_GetLicenseByID_Call {
	return &MockLicenseComponent_GetLicenseByID_Call{Call: _e.mock.On("GetLicenseByID", ctx, req)}
}

func (_c *MockLicenseComponent_GetLicenseByID_Call) Run(run func(ctx context.Context, req types.GetLicenseReq)) *MockLicenseComponent_GetLicenseByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.GetLicenseReq))
	})
	return _c
}

func (_c *MockLicenseComponent_GetLicenseByID_Call) Return(_a0 *database.License, _a1 string, _a2 error) *MockLicenseComponent_GetLicenseByID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockLicenseComponent_GetLicenseByID_Call) RunAndReturn(run func(context.Context, types.GetLicenseReq) (*database.License, string, error)) *MockLicenseComponent_GetLicenseByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicenseStatus provides a mock function with given fields: ctx, req
func (_m *MockLicenseComponent) GetLicenseStatus(ctx context.Context, req types.LicenseStatusReq) (*types.LicenseStatusResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseStatus")
	}

	var r0 *types.LicenseStatusResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.LicenseStatusReq) (*types.LicenseStatusResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.LicenseStatusReq) *types.LicenseStatusResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LicenseStatusResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.LicenseStatusReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLicenseComponent_GetLicenseStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseStatus'
type MockLicenseComponent_GetLicenseStatus_Call struct {
	*mock.Call
}

// GetLicenseStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.LicenseStatusReq
func (_e *MockLicenseComponent_Expecter) GetLicenseStatus(ctx interface{}, req interface{}) *MockLicenseComponent_GetLicenseStatus_Call {
	return &MockLicenseComponent_GetLicenseStatus_Call{Call: _e.mock.On("GetLicenseStatus", ctx, req)}
}

func (_c *MockLicenseComponent_GetLicenseStatus_Call) Run(run func(ctx context.Context, req types.LicenseStatusReq)) *MockLicenseComponent_GetLicenseStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.LicenseStatusReq))
	})
	return _c
}

func (_c *MockLicenseComponent_GetLicenseStatus_Call) Return(_a0 *types.LicenseStatusResp, _a1 error) *MockLicenseComponent_GetLicenseStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLicenseComponent_GetLicenseStatus_Call) RunAndReturn(run func(context.Context, types.LicenseStatusReq) (*types.LicenseStatusResp, error)) *MockLicenseComponent_GetLicenseStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicenseStatusInternal provides a mock function with given fields: ctx
func (_m *MockLicenseComponent) GetLicenseStatusInternal(ctx context.Context) (*types.LicenseStatusResp, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseStatusInternal")
	}

	var r0 *types.LicenseStatusResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.LicenseStatusResp, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.LicenseStatusResp); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.LicenseStatusResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLicenseComponent_GetLicenseStatusInternal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseStatusInternal'
type MockLicenseComponent_GetLicenseStatusInternal_Call struct {
	*mock.Call
}

// GetLicenseStatusInternal is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLicenseComponent_Expecter) GetLicenseStatusInternal(ctx interface{}) *MockLicenseComponent_GetLicenseStatusInternal_Call {
	return &MockLicenseComponent_GetLicenseStatusInternal_Call{Call: _e.mock.On("GetLicenseStatusInternal", ctx)}
}

func (_c *MockLicenseComponent_GetLicenseStatusInternal_Call) Run(run func(ctx context.Context)) *MockLicenseComponent_GetLicenseStatusInternal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLicenseComponent_GetLicenseStatusInternal_Call) Return(_a0 *types.LicenseStatusResp, _a1 error) *MockLicenseComponent_GetLicenseStatusInternal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLicenseComponent_GetLicenseStatusInternal_Call) RunAndReturn(run func(context.Context) (*types.LicenseStatusResp, error)) *MockLicenseComponent_GetLicenseStatusInternal_Call {
	_c.Call.Return(run)
	return _c
}

// ImportLicense provides a mock function with given fields: ctx, req
func (_m *MockLicenseComponent) ImportLicense(ctx context.Context, req types.ImportLicenseReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ImportLicense")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ImportLicenseReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLicenseComponent_ImportLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportLicense'
type MockLicenseComponent_ImportLicense_Call struct {
	*mock.Call
}

// ImportLicense is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ImportLicenseReq
func (_e *MockLicenseComponent_Expecter) ImportLicense(ctx interface{}, req interface{}) *MockLicenseComponent_ImportLicense_Call {
	return &MockLicenseComponent_ImportLicense_Call{Call: _e.mock.On("ImportLicense", ctx, req)}
}

func (_c *MockLicenseComponent_ImportLicense_Call) Run(run func(ctx context.Context, req types.ImportLicenseReq)) *MockLicenseComponent_ImportLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ImportLicenseReq))
	})
	return _c
}

func (_c *MockLicenseComponent_ImportLicense_Call) Return(_a0 error) *MockLicenseComponent_ImportLicense_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLicenseComponent_ImportLicense_Call) RunAndReturn(run func(context.Context, types.ImportLicenseReq) error) *MockLicenseComponent_ImportLicense_Call {
	_c.Call.Return(run)
	return _c
}

// ListLicense provides a mock function with given fields: ctx, req
func (_m *MockLicenseComponent) ListLicense(ctx context.Context, req types.QueryLicenseReq) ([]database.License, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListLicense")
	}

	var r0 []database.License
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.QueryLicenseReq) ([]database.License, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.QueryLicenseReq) []database.License); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.License)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.QueryLicenseReq) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.QueryLicenseReq) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLicenseComponent_ListLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLicense'
type MockLicenseComponent_ListLicense_Call struct {
	*mock.Call
}

// ListLicense is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.QueryLicenseReq
func (_e *MockLicenseComponent_Expecter) ListLicense(ctx interface{}, req interface{}) *MockLicenseComponent_ListLicense_Call {
	return &MockLicenseComponent_ListLicense_Call{Call: _e.mock.On("ListLicense", ctx, req)}
}

func (_c *MockLicenseComponent_ListLicense_Call) Run(run func(ctx context.Context, req types.QueryLicenseReq)) *MockLicenseComponent_ListLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.QueryLicenseReq))
	})
	return _c
}

func (_c *MockLicenseComponent_ListLicense_Call) Return(_a0 []database.License, _a1 int, _a2 error) *MockLicenseComponent_ListLicense_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockLicenseComponent_ListLicense_Call) RunAndReturn(run func(context.Context, types.QueryLicenseReq) ([]database.License, int, error)) *MockLicenseComponent_ListLicense_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLicense provides a mock function with given fields: ctx, id, req
func (_m *MockLicenseComponent) UpdateLicense(ctx context.Context, id int64, req *types.UpdateLicenseReq) (*database.License, error) {
	ret := _m.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLicense")
	}

	var r0 *database.License
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *types.UpdateLicenseReq) (*database.License, error)); ok {
		return rf(ctx, id, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, *types.UpdateLicenseReq) *database.License); ok {
		r0 = rf(ctx, id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.License)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, *types.UpdateLicenseReq) error); ok {
		r1 = rf(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLicenseComponent_UpdateLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLicense'
type MockLicenseComponent_UpdateLicense_Call struct {
	*mock.Call
}

// UpdateLicense is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - req *types.UpdateLicenseReq
func (_e *MockLicenseComponent_Expecter) UpdateLicense(ctx interface{}, id interface{}, req interface{}) *MockLicenseComponent_UpdateLicense_Call {
	return &MockLicenseComponent_UpdateLicense_Call{Call: _e.mock.On("UpdateLicense", ctx, id, req)}
}

func (_c *MockLicenseComponent_UpdateLicense_Call) Run(run func(ctx context.Context, id int64, req *types.UpdateLicenseReq)) *MockLicenseComponent_UpdateLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*types.UpdateLicenseReq))
	})
	return _c
}

func (_c *MockLicenseComponent_UpdateLicense_Call) Return(_a0 *database.License, _a1 error) *MockLicenseComponent_UpdateLicense_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLicenseComponent_UpdateLicense_Call) RunAndReturn(run func(context.Context, int64, *types.UpdateLicenseReq) (*database.License, error)) *MockLicenseComponent_UpdateLicense_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyLicense provides a mock function with given fields: ctx, req
func (_m *MockLicenseComponent) VerifyLicense(ctx context.Context, req types.ImportLicenseReq) (*types.RSAPayload, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for VerifyLicense")
	}

	var r0 *types.RSAPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ImportLicenseReq) (*types.RSAPayload, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ImportLicenseReq) *types.RSAPayload); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.RSAPayload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ImportLicenseReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLicenseComponent_VerifyLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyLicense'
type MockLicenseComponent_VerifyLicense_Call struct {
	*mock.Call
}

// VerifyLicense is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ImportLicenseReq
func (_e *MockLicenseComponent_Expecter) VerifyLicense(ctx interface{}, req interface{}) *MockLicenseComponent_VerifyLicense_Call {
	return &MockLicenseComponent_VerifyLicense_Call{Call: _e.mock.On("VerifyLicense", ctx, req)}
}

func (_c *MockLicenseComponent_VerifyLicense_Call) Run(run func(ctx context.Context, req types.ImportLicenseReq)) *MockLicenseComponent_VerifyLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ImportLicenseReq))
	})
	return _c
}

func (_c *MockLicenseComponent_VerifyLicense_Call) Return(_a0 *types.RSAPayload, _a1 error) *MockLicenseComponent_VerifyLicense_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLicenseComponent_VerifyLicense_Call) RunAndReturn(run func(context.Context, types.ImportLicenseReq) (*types.RSAPayload, error)) *MockLicenseComponent_VerifyLicense_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLicenseComponent creates a new instance of MockLicenseComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLicenseComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLicenseComponent {
	mock := &MockLicenseComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

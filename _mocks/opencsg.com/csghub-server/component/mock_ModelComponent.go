// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockModelComponent is an autogenerated mock type for the ModelComponent type
type MockModelComponent struct {
	mock.Mock
}

type MockModelComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModelComponent) EXPECT() *MockModelComponent_Expecter {
	return &MockModelComponent_Expecter{mock: &_m.Mock}
}

// AddRelationDataset provides a mock function with given fields: ctx, req
func (_m *MockModelComponent) AddRelationDataset(ctx context.Context, req types.RelationDataset) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddRelationDataset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RelationDataset) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelComponent_AddRelationDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRelationDataset'
type MockModelComponent_AddRelationDataset_Call struct {
	*mock.Call
}

// AddRelationDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.RelationDataset
func (_e *MockModelComponent_Expecter) AddRelationDataset(ctx interface{}, req interface{}) *MockModelComponent_AddRelationDataset_Call {
	return &MockModelComponent_AddRelationDataset_Call{Call: _e.mock.On("AddRelationDataset", ctx, req)}
}

func (_c *MockModelComponent_AddRelationDataset_Call) Run(run func(ctx context.Context, req types.RelationDataset)) *MockModelComponent_AddRelationDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RelationDataset))
	})
	return _c
}

func (_c *MockModelComponent_AddRelationDataset_Call) Return(_a0 error) *MockModelComponent_AddRelationDataset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelComponent_AddRelationDataset_Call) RunAndReturn(run func(context.Context, types.RelationDataset) error) *MockModelComponent_AddRelationDataset_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, req
func (_m *MockModelComponent) Create(ctx context.Context, req *types.CreateModelReq) (*types.Model, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *types.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateModelReq) (*types.Model, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateModelReq) *types.Model); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CreateModelReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelComponent_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockModelComponent_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.CreateModelReq
func (_e *MockModelComponent_Expecter) Create(ctx interface{}, req interface{}) *MockModelComponent_Create_Call {
	return &MockModelComponent_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockModelComponent_Create_Call) Run(run func(ctx context.Context, req *types.CreateModelReq)) *MockModelComponent_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CreateModelReq))
	})
	return _c
}

func (_c *MockModelComponent_Create_Call) Return(_a0 *types.Model, _a1 error) *MockModelComponent_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelComponent_Create_Call) RunAndReturn(run func(context.Context, *types.CreateModelReq) (*types.Model, error)) *MockModelComponent_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DelRelationDataset provides a mock function with given fields: ctx, req
func (_m *MockModelComponent) DelRelationDataset(ctx context.Context, req types.RelationDataset) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DelRelationDataset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RelationDataset) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelComponent_DelRelationDataset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelRelationDataset'
type MockModelComponent_DelRelationDataset_Call struct {
	*mock.Call
}

// DelRelationDataset is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.RelationDataset
func (_e *MockModelComponent_Expecter) DelRelationDataset(ctx interface{}, req interface{}) *MockModelComponent_DelRelationDataset_Call {
	return &MockModelComponent_DelRelationDataset_Call{Call: _e.mock.On("DelRelationDataset", ctx, req)}
}

func (_c *MockModelComponent_DelRelationDataset_Call) Run(run func(ctx context.Context, req types.RelationDataset)) *MockModelComponent_DelRelationDataset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RelationDataset))
	})
	return _c
}

func (_c *MockModelComponent_DelRelationDataset_Call) Return(_a0 error) *MockModelComponent_DelRelationDataset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelComponent_DelRelationDataset_Call) RunAndReturn(run func(context.Context, types.RelationDataset) error) *MockModelComponent_DelRelationDataset_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, namespace, name, currentUser
func (_m *MockModelComponent) Delete(ctx context.Context, namespace string, name string, currentUser string) error {
	ret := _m.Called(ctx, namespace, name, currentUser)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, namespace, name, currentUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelComponent_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockModelComponent_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - currentUser string
func (_e *MockModelComponent_Expecter) Delete(ctx interface{}, namespace interface{}, name interface{}, currentUser interface{}) *MockModelComponent_Delete_Call {
	return &MockModelComponent_Delete_Call{Call: _e.mock.On("Delete", ctx, namespace, name, currentUser)}
}

func (_c *MockModelComponent_Delete_Call) Run(run func(ctx context.Context, namespace string, name string, currentUser string)) *MockModelComponent_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockModelComponent_Delete_Call) Return(_a0 error) *MockModelComponent_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelComponent_Delete_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockModelComponent_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRuntimeFrameworkModes provides a mock function with given fields: ctx, deployType, id, paths
func (_m *MockModelComponent) DeleteRuntimeFrameworkModes(ctx context.Context, deployType int, id int64, paths []string) ([]string, error) {
	ret := _m.Called(ctx, deployType, id, paths)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRuntimeFrameworkModes")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int64, []string) ([]string, error)); ok {
		return rf(ctx, deployType, id, paths)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int64, []string) []string); ok {
		r0 = rf(ctx, deployType, id, paths)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int64, []string) error); ok {
		r1 = rf(ctx, deployType, id, paths)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelComponent_DeleteRuntimeFrameworkModes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRuntimeFrameworkModes'
type MockModelComponent_DeleteRuntimeFrameworkModes_Call struct {
	*mock.Call
}

// DeleteRuntimeFrameworkModes is a helper method to define mock.On call
//   - ctx context.Context
//   - deployType int
//   - id int64
//   - paths []string
func (_e *MockModelComponent_Expecter) DeleteRuntimeFrameworkModes(ctx interface{}, deployType interface{}, id interface{}, paths interface{}) *MockModelComponent_DeleteRuntimeFrameworkModes_Call {
	return &MockModelComponent_DeleteRuntimeFrameworkModes_Call{Call: _e.mock.On("DeleteRuntimeFrameworkModes", ctx, deployType, id, paths)}
}

func (_c *MockModelComponent_DeleteRuntimeFrameworkModes_Call) Run(run func(ctx context.Context, deployType int, id int64, paths []string)) *MockModelComponent_DeleteRuntimeFrameworkModes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int64), args[3].([]string))
	})
	return _c
}

func (_c *MockModelComponent_DeleteRuntimeFrameworkModes_Call) Return(_a0 []string, _a1 error) *MockModelComponent_DeleteRuntimeFrameworkModes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelComponent_DeleteRuntimeFrameworkModes_Call) RunAndReturn(run func(context.Context, int, int64, []string) ([]string, error)) *MockModelComponent_DeleteRuntimeFrameworkModes_Call {
	_c.Call.Return(run)
	return _c
}

// Deploy provides a mock function with given fields: ctx, deployReq, req
func (_m *MockModelComponent) Deploy(ctx context.Context, deployReq types.DeployActReq, req types.ModelRunReq) (int64, error) {
	ret := _m.Called(ctx, deployReq, req)

	if len(ret) == 0 {
		panic("no return value specified for Deploy")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.DeployActReq, types.ModelRunReq) (int64, error)); ok {
		return rf(ctx, deployReq, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.DeployActReq, types.ModelRunReq) int64); ok {
		r0 = rf(ctx, deployReq, req)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.DeployActReq, types.ModelRunReq) error); ok {
		r1 = rf(ctx, deployReq, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelComponent_Deploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deploy'
type MockModelComponent_Deploy_Call struct {
	*mock.Call
}

// Deploy is a helper method to define mock.On call
//   - ctx context.Context
//   - deployReq types.DeployActReq
//   - req types.ModelRunReq
func (_e *MockModelComponent_Expecter) Deploy(ctx interface{}, deployReq interface{}, req interface{}) *MockModelComponent_Deploy_Call {
	return &MockModelComponent_Deploy_Call{Call: _e.mock.On("Deploy", ctx, deployReq, req)}
}

func (_c *MockModelComponent_Deploy_Call) Run(run func(ctx context.Context, deployReq types.DeployActReq, req types.ModelRunReq)) *MockModelComponent_Deploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.DeployActReq), args[2].(types.ModelRunReq))
	})
	return _c
}

func (_c *MockModelComponent_Deploy_Call) Return(_a0 int64, _a1 error) *MockModelComponent_Deploy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelComponent_Deploy_Call) RunAndReturn(run func(context.Context, types.DeployActReq, types.ModelRunReq) (int64, error)) *MockModelComponent_Deploy_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerless provides a mock function with given fields: ctx, namespace, name, currentUser
func (_m *MockModelComponent) GetServerless(ctx context.Context, namespace string, name string, currentUser string) (*types.DeployRepo, error) {
	ret := _m.Called(ctx, namespace, name, currentUser)

	if len(ret) == 0 {
		panic("no return value specified for GetServerless")
	}

	var r0 *types.DeployRepo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*types.DeployRepo, error)); ok {
		return rf(ctx, namespace, name, currentUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *types.DeployRepo); ok {
		r0 = rf(ctx, namespace, name, currentUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.DeployRepo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, namespace, name, currentUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelComponent_GetServerless_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerless'
type MockModelComponent_GetServerless_Call struct {
	*mock.Call
}

// GetServerless is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - currentUser string
func (_e *MockModelComponent_Expecter) GetServerless(ctx interface{}, namespace interface{}, name interface{}, currentUser interface{}) *MockModelComponent_GetServerless_Call {
	return &MockModelComponent_GetServerless_Call{Call: _e.mock.On("GetServerless", ctx, namespace, name, currentUser)}
}

func (_c *MockModelComponent_GetServerless_Call) Run(run func(ctx context.Context, namespace string, name string, currentUser string)) *MockModelComponent_GetServerless_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockModelComponent_GetServerless_Call) Return(_a0 *types.DeployRepo, _a1 error) *MockModelComponent_GetServerless_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelComponent_GetServerless_Call) RunAndReturn(run func(context.Context, string, string, string) (*types.DeployRepo, error)) *MockModelComponent_GetServerless_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx, filter, per, page, needOpWeight
func (_m *MockModelComponent) Index(ctx context.Context, filter *types.RepoFilter, per int, page int, needOpWeight bool) ([]*types.Model, int, error) {
	ret := _m.Called(ctx, filter, per, page, needOpWeight)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []*types.Model
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.RepoFilter, int, int, bool) ([]*types.Model, int, error)); ok {
		return rf(ctx, filter, per, page, needOpWeight)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.RepoFilter, int, int, bool) []*types.Model); ok {
		r0 = rf(ctx, filter, per, page, needOpWeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.RepoFilter, int, int, bool) int); ok {
		r1 = rf(ctx, filter, per, page, needOpWeight)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *types.RepoFilter, int, int, bool) error); ok {
		r2 = rf(ctx, filter, per, page, needOpWeight)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockModelComponent_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockModelComponent_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *types.RepoFilter
//   - per int
//   - page int
//   - needOpWeight bool
func (_e *MockModelComponent_Expecter) Index(ctx interface{}, filter interface{}, per interface{}, page interface{}, needOpWeight interface{}) *MockModelComponent_Index_Call {
	return &MockModelComponent_Index_Call{Call: _e.mock.On("Index", ctx, filter, per, page, needOpWeight)}
}

func (_c *MockModelComponent_Index_Call) Run(run func(ctx context.Context, filter *types.RepoFilter, per int, page int, needOpWeight bool)) *MockModelComponent_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RepoFilter), args[2].(int), args[3].(int), args[4].(bool))
	})
	return _c
}

func (_c *MockModelComponent_Index_Call) Return(_a0 []*types.Model, _a1 int, _a2 error) *MockModelComponent_Index_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockModelComponent_Index_Call) RunAndReturn(run func(context.Context, *types.RepoFilter, int, int, bool) ([]*types.Model, int, error)) *MockModelComponent_Index_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllByRuntimeFramework provides a mock function with given fields: ctx, currentUser
func (_m *MockModelComponent) ListAllByRuntimeFramework(ctx context.Context, currentUser string) ([]database.RuntimeFramework, error) {
	ret := _m.Called(ctx, currentUser)

	if len(ret) == 0 {
		panic("no return value specified for ListAllByRuntimeFramework")
	}

	var r0 []database.RuntimeFramework
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]database.RuntimeFramework, error)); ok {
		return rf(ctx, currentUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []database.RuntimeFramework); ok {
		r0 = rf(ctx, currentUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.RuntimeFramework)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, currentUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelComponent_ListAllByRuntimeFramework_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllByRuntimeFramework'
type MockModelComponent_ListAllByRuntimeFramework_Call struct {
	*mock.Call
}

// ListAllByRuntimeFramework is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUser string
func (_e *MockModelComponent_Expecter) ListAllByRuntimeFramework(ctx interface{}, currentUser interface{}) *MockModelComponent_ListAllByRuntimeFramework_Call {
	return &MockModelComponent_ListAllByRuntimeFramework_Call{Call: _e.mock.On("ListAllByRuntimeFramework", ctx, currentUser)}
}

func (_c *MockModelComponent_ListAllByRuntimeFramework_Call) Run(run func(ctx context.Context, currentUser string)) *MockModelComponent_ListAllByRuntimeFramework_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockModelComponent_ListAllByRuntimeFramework_Call) Return(_a0 []database.RuntimeFramework, _a1 error) *MockModelComponent_ListAllByRuntimeFramework_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelComponent_ListAllByRuntimeFramework_Call) RunAndReturn(run func(context.Context, string) ([]database.RuntimeFramework, error)) *MockModelComponent_ListAllByRuntimeFramework_Call {
	_c.Call.Return(run)
	return _c
}

// ListModelsByRuntimeFrameworkID provides a mock function with given fields: ctx, currentUser, per, page, id, deployType
func (_m *MockModelComponent) ListModelsByRuntimeFrameworkID(ctx context.Context, currentUser string, per int, page int, id int64, deployType int) ([]types.Model, int, error) {
	ret := _m.Called(ctx, currentUser, per, page, id, deployType)

	if len(ret) == 0 {
		panic("no return value specified for ListModelsByRuntimeFrameworkID")
	}

	var r0 []types.Model
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, int64, int) ([]types.Model, int, error)); ok {
		return rf(ctx, currentUser, per, page, id, deployType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int, int64, int) []types.Model); ok {
		r0 = rf(ctx, currentUser, per, page, id, deployType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int, int64, int) int); ok {
		r1 = rf(ctx, currentUser, per, page, id, deployType)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int, int64, int) error); ok {
		r2 = rf(ctx, currentUser, per, page, id, deployType)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockModelComponent_ListModelsByRuntimeFrameworkID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListModelsByRuntimeFrameworkID'
type MockModelComponent_ListModelsByRuntimeFrameworkID_Call struct {
	*mock.Call
}

// ListModelsByRuntimeFrameworkID is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUser string
//   - per int
//   - page int
//   - id int64
//   - deployType int
func (_e *MockModelComponent_Expecter) ListModelsByRuntimeFrameworkID(ctx interface{}, currentUser interface{}, per interface{}, page interface{}, id interface{}, deployType interface{}) *MockModelComponent_ListModelsByRuntimeFrameworkID_Call {
	return &MockModelComponent_ListModelsByRuntimeFrameworkID_Call{Call: _e.mock.On("ListModelsByRuntimeFrameworkID", ctx, currentUser, per, page, id, deployType)}
}

func (_c *MockModelComponent_ListModelsByRuntimeFrameworkID_Call) Run(run func(ctx context.Context, currentUser string, per int, page int, id int64, deployType int)) *MockModelComponent_ListModelsByRuntimeFrameworkID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int), args[4].(int64), args[5].(int))
	})
	return _c
}

func (_c *MockModelComponent_ListModelsByRuntimeFrameworkID_Call) Return(_a0 []types.Model, _a1 int, _a2 error) *MockModelComponent_ListModelsByRuntimeFrameworkID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockModelComponent_ListModelsByRuntimeFrameworkID_Call) RunAndReturn(run func(context.Context, string, int, int, int64, int) ([]types.Model, int, error)) *MockModelComponent_ListModelsByRuntimeFrameworkID_Call {
	_c.Call.Return(run)
	return _c
}

// ListModelsOfRuntimeFrameworks provides a mock function with given fields: ctx, currentUser, search, sort, per, page, deployType
func (_m *MockModelComponent) ListModelsOfRuntimeFrameworks(ctx context.Context, currentUser string, search string, sort string, per int, page int, deployType int) ([]types.Model, int, error) {
	ret := _m.Called(ctx, currentUser, search, sort, per, page, deployType)

	if len(ret) == 0 {
		panic("no return value specified for ListModelsOfRuntimeFrameworks")
	}

	var r0 []types.Model
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, int, int) ([]types.Model, int, error)); ok {
		return rf(ctx, currentUser, search, sort, per, page, deployType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, int, int) []types.Model); ok {
		r0 = rf(ctx, currentUser, search, sort, per, page, deployType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int, int, int) int); ok {
		r1 = rf(ctx, currentUser, search, sort, per, page, deployType)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, int, int, int) error); ok {
		r2 = rf(ctx, currentUser, search, sort, per, page, deployType)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockModelComponent_ListModelsOfRuntimeFrameworks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListModelsOfRuntimeFrameworks'
type MockModelComponent_ListModelsOfRuntimeFrameworks_Call struct {
	*mock.Call
}

// ListModelsOfRuntimeFrameworks is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUser string
//   - search string
//   - sort string
//   - per int
//   - page int
//   - deployType int
func (_e *MockModelComponent_Expecter) ListModelsOfRuntimeFrameworks(ctx interface{}, currentUser interface{}, search interface{}, sort interface{}, per interface{}, page interface{}, deployType interface{}) *MockModelComponent_ListModelsOfRuntimeFrameworks_Call {
	return &MockModelComponent_ListModelsOfRuntimeFrameworks_Call{Call: _e.mock.On("ListModelsOfRuntimeFrameworks", ctx, currentUser, search, sort, per, page, deployType)}
}

func (_c *MockModelComponent_ListModelsOfRuntimeFrameworks_Call) Run(run func(ctx context.Context, currentUser string, search string, sort string, per int, page int, deployType int)) *MockModelComponent_ListModelsOfRuntimeFrameworks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int), args[5].(int), args[6].(int))
	})
	return _c
}

func (_c *MockModelComponent_ListModelsOfRuntimeFrameworks_Call) Return(_a0 []types.Model, _a1 int, _a2 error) *MockModelComponent_ListModelsOfRuntimeFrameworks_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockModelComponent_ListModelsOfRuntimeFrameworks_Call) RunAndReturn(run func(context.Context, string, string, string, int, int, int) ([]types.Model, int, error)) *MockModelComponent_ListModelsOfRuntimeFrameworks_Call {
	_c.Call.Return(run)
	return _c
}

// ListQuantizations provides a mock function with given fields: ctx, namespace, name
func (_m *MockModelComponent) ListQuantizations(ctx context.Context, namespace string, name string) ([]*types.File, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for ListQuantizations")
	}

	var r0 []*types.File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*types.File, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*types.File); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.File)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelComponent_ListQuantizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListQuantizations'
type MockModelComponent_ListQuantizations_Call struct {
	*mock.Call
}

// ListQuantizations is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
func (_e *MockModelComponent_Expecter) ListQuantizations(ctx interface{}, namespace interface{}, name interface{}) *MockModelComponent_ListQuantizations_Call {
	return &MockModelComponent_ListQuantizations_Call{Call: _e.mock.On("ListQuantizations", ctx, namespace, name)}
}

func (_c *MockModelComponent_ListQuantizations_Call) Run(run func(ctx context.Context, namespace string, name string)) *MockModelComponent_ListQuantizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockModelComponent_ListQuantizations_Call) Return(_a0 []*types.File, _a1 error) *MockModelComponent_ListQuantizations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelComponent_ListQuantizations_Call) RunAndReturn(run func(context.Context, string, string) ([]*types.File, error)) *MockModelComponent_ListQuantizations_Call {
	_c.Call.Return(run)
	return _c
}

// OrgModels provides a mock function with given fields: ctx, req
func (_m *MockModelComponent) OrgModels(ctx context.Context, req *types.OrgModelsReq) ([]types.Model, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for OrgModels")
	}

	var r0 []types.Model
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.OrgModelsReq) ([]types.Model, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.OrgModelsReq) []types.Model); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.OrgModelsReq) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *types.OrgModelsReq) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockModelComponent_OrgModels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrgModels'
type MockModelComponent_OrgModels_Call struct {
	*mock.Call
}

// OrgModels is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.OrgModelsReq
func (_e *MockModelComponent_Expecter) OrgModels(ctx interface{}, req interface{}) *MockModelComponent_OrgModels_Call {
	return &MockModelComponent_OrgModels_Call{Call: _e.mock.On("OrgModels", ctx, req)}
}

func (_c *MockModelComponent_OrgModels_Call) Run(run func(ctx context.Context, req *types.OrgModelsReq)) *MockModelComponent_OrgModels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.OrgModelsReq))
	})
	return _c
}

func (_c *MockModelComponent_OrgModels_Call) Return(_a0 []types.Model, _a1 int, _a2 error) *MockModelComponent_OrgModels_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockModelComponent_OrgModels_Call) RunAndReturn(run func(context.Context, *types.OrgModelsReq) ([]types.Model, int, error)) *MockModelComponent_OrgModels_Call {
	_c.Call.Return(run)
	return _c
}

// Relations provides a mock function with given fields: ctx, namespace, name, currentUser
func (_m *MockModelComponent) Relations(ctx context.Context, namespace string, name string, currentUser string) (*types.Relations, error) {
	ret := _m.Called(ctx, namespace, name, currentUser)

	if len(ret) == 0 {
		panic("no return value specified for Relations")
	}

	var r0 *types.Relations
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*types.Relations, error)); ok {
		return rf(ctx, namespace, name, currentUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *types.Relations); ok {
		r0 = rf(ctx, namespace, name, currentUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Relations)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, namespace, name, currentUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelComponent_Relations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Relations'
type MockModelComponent_Relations_Call struct {
	*mock.Call
}

// Relations is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - currentUser string
func (_e *MockModelComponent_Expecter) Relations(ctx interface{}, namespace interface{}, name interface{}, currentUser interface{}) *MockModelComponent_Relations_Call {
	return &MockModelComponent_Relations_Call{Call: _e.mock.On("Relations", ctx, namespace, name, currentUser)}
}

func (_c *MockModelComponent_Relations_Call) Run(run func(ctx context.Context, namespace string, name string, currentUser string)) *MockModelComponent_Relations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockModelComponent_Relations_Call) Return(_a0 *types.Relations, _a1 error) *MockModelComponent_Relations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelComponent_Relations_Call) RunAndReturn(run func(context.Context, string, string, string) (*types.Relations, error)) *MockModelComponent_Relations_Call {
	_c.Call.Return(run)
	return _c
}

// SDKModelInfo provides a mock function with given fields: ctx, namespace, name, ref, currentUser, blobs
func (_m *MockModelComponent) SDKModelInfo(ctx context.Context, namespace string, name string, ref string, currentUser string, blobs bool) (*types.SDKModelInfo, error) {
	ret := _m.Called(ctx, namespace, name, ref, currentUser, blobs)

	if len(ret) == 0 {
		panic("no return value specified for SDKModelInfo")
	}

	var r0 *types.SDKModelInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, bool) (*types.SDKModelInfo, error)); ok {
		return rf(ctx, namespace, name, ref, currentUser, blobs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, bool) *types.SDKModelInfo); ok {
		r0 = rf(ctx, namespace, name, ref, currentUser, blobs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SDKModelInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, bool) error); ok {
		r1 = rf(ctx, namespace, name, ref, currentUser, blobs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelComponent_SDKModelInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SDKModelInfo'
type MockModelComponent_SDKModelInfo_Call struct {
	*mock.Call
}

// SDKModelInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - ref string
//   - currentUser string
//   - blobs bool
func (_e *MockModelComponent_Expecter) SDKModelInfo(ctx interface{}, namespace interface{}, name interface{}, ref interface{}, currentUser interface{}, blobs interface{}) *MockModelComponent_SDKModelInfo_Call {
	return &MockModelComponent_SDKModelInfo_Call{Call: _e.mock.On("SDKModelInfo", ctx, namespace, name, ref, currentUser, blobs)}
}

func (_c *MockModelComponent_SDKModelInfo_Call) Run(run func(ctx context.Context, namespace string, name string, ref string, currentUser string, blobs bool)) *MockModelComponent_SDKModelInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(bool))
	})
	return _c
}

func (_c *MockModelComponent_SDKModelInfo_Call) Return(_a0 *types.SDKModelInfo, _a1 error) *MockModelComponent_SDKModelInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelComponent_SDKModelInfo_Call) RunAndReturn(run func(context.Context, string, string, string, string, bool) (*types.SDKModelInfo, error)) *MockModelComponent_SDKModelInfo_Call {
	_c.Call.Return(run)
	return _c
}

// SetRelationDatasets provides a mock function with given fields: ctx, req
func (_m *MockModelComponent) SetRelationDatasets(ctx context.Context, req types.RelationDatasets) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SetRelationDatasets")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RelationDatasets) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelComponent_SetRelationDatasets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRelationDatasets'
type MockModelComponent_SetRelationDatasets_Call struct {
	*mock.Call
}

// SetRelationDatasets is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.RelationDatasets
func (_e *MockModelComponent_Expecter) SetRelationDatasets(ctx interface{}, req interface{}) *MockModelComponent_SetRelationDatasets_Call {
	return &MockModelComponent_SetRelationDatasets_Call{Call: _e.mock.On("SetRelationDatasets", ctx, req)}
}

func (_c *MockModelComponent_SetRelationDatasets_Call) Run(run func(ctx context.Context, req types.RelationDatasets)) *MockModelComponent_SetRelationDatasets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RelationDatasets))
	})
	return _c
}

func (_c *MockModelComponent_SetRelationDatasets_Call) Return(_a0 error) *MockModelComponent_SetRelationDatasets_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelComponent_SetRelationDatasets_Call) RunAndReturn(run func(context.Context, types.RelationDatasets) error) *MockModelComponent_SetRelationDatasets_Call {
	_c.Call.Return(run)
	return _c
}

// SetRuntimeFrameworkModes provides a mock function with given fields: ctx, deployType, id, paths
func (_m *MockModelComponent) SetRuntimeFrameworkModes(ctx context.Context, deployType int, id int64, paths []string) ([]string, error) {
	ret := _m.Called(ctx, deployType, id, paths)

	if len(ret) == 0 {
		panic("no return value specified for SetRuntimeFrameworkModes")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int64, []string) ([]string, error)); ok {
		return rf(ctx, deployType, id, paths)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int64, []string) []string); ok {
		r0 = rf(ctx, deployType, id, paths)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int64, []string) error); ok {
		r1 = rf(ctx, deployType, id, paths)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelComponent_SetRuntimeFrameworkModes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRuntimeFrameworkModes'
type MockModelComponent_SetRuntimeFrameworkModes_Call struct {
	*mock.Call
}

// SetRuntimeFrameworkModes is a helper method to define mock.On call
//   - ctx context.Context
//   - deployType int
//   - id int64
//   - paths []string
func (_e *MockModelComponent_Expecter) SetRuntimeFrameworkModes(ctx interface{}, deployType interface{}, id interface{}, paths interface{}) *MockModelComponent_SetRuntimeFrameworkModes_Call {
	return &MockModelComponent_SetRuntimeFrameworkModes_Call{Call: _e.mock.On("SetRuntimeFrameworkModes", ctx, deployType, id, paths)}
}

func (_c *MockModelComponent_SetRuntimeFrameworkModes_Call) Run(run func(ctx context.Context, deployType int, id int64, paths []string)) *MockModelComponent_SetRuntimeFrameworkModes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int64), args[3].([]string))
	})
	return _c
}

func (_c *MockModelComponent_SetRuntimeFrameworkModes_Call) Return(_a0 []string, _a1 error) *MockModelComponent_SetRuntimeFrameworkModes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelComponent_SetRuntimeFrameworkModes_Call) RunAndReturn(run func(context.Context, int, int64, []string) ([]string, error)) *MockModelComponent_SetRuntimeFrameworkModes_Call {
	_c.Call.Return(run)
	return _c
}

// Show provides a mock function with given fields: ctx, namespace, name, currentUser, needOpWeight, needMultiSync
func (_m *MockModelComponent) Show(ctx context.Context, namespace string, name string, currentUser string, needOpWeight bool, needMultiSync bool) (*types.Model, error) {
	ret := _m.Called(ctx, namespace, name, currentUser, needOpWeight, needMultiSync)

	if len(ret) == 0 {
		panic("no return value specified for Show")
	}

	var r0 *types.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, bool, bool) (*types.Model, error)); ok {
		return rf(ctx, namespace, name, currentUser, needOpWeight, needMultiSync)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, bool, bool) *types.Model); ok {
		r0 = rf(ctx, namespace, name, currentUser, needOpWeight, needMultiSync)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, bool, bool) error); ok {
		r1 = rf(ctx, namespace, name, currentUser, needOpWeight, needMultiSync)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelComponent_Show_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Show'
type MockModelComponent_Show_Call struct {
	*mock.Call
}

// Show is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - currentUser string
//   - needOpWeight bool
//   - needMultiSync bool
func (_e *MockModelComponent_Expecter) Show(ctx interface{}, namespace interface{}, name interface{}, currentUser interface{}, needOpWeight interface{}, needMultiSync interface{}) *MockModelComponent_Show_Call {
	return &MockModelComponent_Show_Call{Call: _e.mock.On("Show", ctx, namespace, name, currentUser, needOpWeight, needMultiSync)}
}

func (_c *MockModelComponent_Show_Call) Run(run func(ctx context.Context, namespace string, name string, currentUser string, needOpWeight bool, needMultiSync bool)) *MockModelComponent_Show_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(bool), args[5].(bool))
	})
	return _c
}

func (_c *MockModelComponent_Show_Call) Return(_a0 *types.Model, _a1 error) *MockModelComponent_Show_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelComponent_Show_Call) RunAndReturn(run func(context.Context, string, string, string, bool, bool) (*types.Model, error)) *MockModelComponent_Show_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, req
func (_m *MockModelComponent) Update(ctx context.Context, req *types.UpdateModelReq) (*types.Model, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *types.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdateModelReq) (*types.Model, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdateModelReq) *types.Model); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.UpdateModelReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelComponent_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockModelComponent_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.UpdateModelReq
func (_e *MockModelComponent_Expecter) Update(ctx interface{}, req interface{}) *MockModelComponent_Update_Call {
	return &MockModelComponent_Update_Call{Call: _e.mock.On("Update", ctx, req)}
}

func (_c *MockModelComponent_Update_Call) Run(run func(ctx context.Context, req *types.UpdateModelReq)) *MockModelComponent_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.UpdateModelReq))
	})
	return _c
}

func (_c *MockModelComponent_Update_Call) Return(_a0 *types.Model, _a1 error) *MockModelComponent_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelComponent_Update_Call) RunAndReturn(run func(context.Context, *types.UpdateModelReq) (*types.Model, error)) *MockModelComponent_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Wakeup provides a mock function with given fields: ctx, namespace, name, id
func (_m *MockModelComponent) Wakeup(ctx context.Context, namespace string, name string, id int64) error {
	ret := _m.Called(ctx, namespace, name, id)

	if len(ret) == 0 {
		panic("no return value specified for Wakeup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) error); ok {
		r0 = rf(ctx, namespace, name, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelComponent_Wakeup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wakeup'
type MockModelComponent_Wakeup_Call struct {
	*mock.Call
}

// Wakeup is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - id int64
func (_e *MockModelComponent_Expecter) Wakeup(ctx interface{}, namespace interface{}, name interface{}, id interface{}) *MockModelComponent_Wakeup_Call {
	return &MockModelComponent_Wakeup_Call{Call: _e.mock.On("Wakeup", ctx, namespace, name, id)}
}

func (_c *MockModelComponent_Wakeup_Call) Run(run func(ctx context.Context, namespace string, name string, id int64)) *MockModelComponent_Wakeup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64))
	})
	return _c
}

func (_c *MockModelComponent_Wakeup_Call) Return(_a0 error) *MockModelComponent_Wakeup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelComponent_Wakeup_Call) RunAndReturn(run func(context.Context, string, string, int64) error) *MockModelComponent_Wakeup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModelComponent creates a new instance of MockModelComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModelComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModelComponent {
	mock := &MockModelComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

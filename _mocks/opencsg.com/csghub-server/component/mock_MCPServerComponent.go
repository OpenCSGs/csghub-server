// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockMCPServerComponent is an autogenerated mock type for the MCPServerComponent type
type MockMCPServerComponent struct {
	mock.Mock
}

type MockMCPServerComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMCPServerComponent) EXPECT() *MockMCPServerComponent_Expecter {
	return &MockMCPServerComponent_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *MockMCPServerComponent) Create(ctx context.Context, req *types.CreateMCPServerReq) (*types.MCPServer, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *types.MCPServer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateMCPServerReq) (*types.MCPServer, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateMCPServerReq) *types.MCPServer); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MCPServer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CreateMCPServerReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMCPServerComponent_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMCPServerComponent_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.CreateMCPServerReq
func (_e *MockMCPServerComponent_Expecter) Create(ctx interface{}, req interface{}) *MockMCPServerComponent_Create_Call {
	return &MockMCPServerComponent_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockMCPServerComponent_Create_Call) Run(run func(ctx context.Context, req *types.CreateMCPServerReq)) *MockMCPServerComponent_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CreateMCPServerReq))
	})
	return _c
}

func (_c *MockMCPServerComponent_Create_Call) Return(_a0 *types.MCPServer, _a1 error) *MockMCPServerComponent_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMCPServerComponent_Create_Call) RunAndReturn(run func(context.Context, *types.CreateMCPServerReq) (*types.MCPServer, error)) *MockMCPServerComponent_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, req
func (_m *MockMCPServerComponent) Delete(ctx context.Context, req *types.UpdateMCPServerReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdateMCPServerReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMCPServerComponent_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMCPServerComponent_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.UpdateMCPServerReq
func (_e *MockMCPServerComponent_Expecter) Delete(ctx interface{}, req interface{}) *MockMCPServerComponent_Delete_Call {
	return &MockMCPServerComponent_Delete_Call{Call: _e.mock.On("Delete", ctx, req)}
}

func (_c *MockMCPServerComponent_Delete_Call) Run(run func(ctx context.Context, req *types.UpdateMCPServerReq)) *MockMCPServerComponent_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.UpdateMCPServerReq))
	})
	return _c
}

func (_c *MockMCPServerComponent_Delete_Call) Return(_a0 error) *MockMCPServerComponent_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMCPServerComponent_Delete_Call) RunAndReturn(run func(context.Context, *types.UpdateMCPServerReq) error) *MockMCPServerComponent_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Deploy provides a mock function with given fields: ctx, req
func (_m *MockMCPServerComponent) Deploy(ctx context.Context, req *types.DeployMCPServerReq) (*types.Space, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Deploy")
	}

	var r0 *types.Space
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.DeployMCPServerReq) (*types.Space, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.DeployMCPServerReq) *types.Space); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Space)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.DeployMCPServerReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMCPServerComponent_Deploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deploy'
type MockMCPServerComponent_Deploy_Call struct {
	*mock.Call
}

// Deploy is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.DeployMCPServerReq
func (_e *MockMCPServerComponent_Expecter) Deploy(ctx interface{}, req interface{}) *MockMCPServerComponent_Deploy_Call {
	return &MockMCPServerComponent_Deploy_Call{Call: _e.mock.On("Deploy", ctx, req)}
}

func (_c *MockMCPServerComponent_Deploy_Call) Run(run func(ctx context.Context, req *types.DeployMCPServerReq)) *MockMCPServerComponent_Deploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.DeployMCPServerReq))
	})
	return _c
}

func (_c *MockMCPServerComponent_Deploy_Call) Return(_a0 *types.Space, _a1 error) *MockMCPServerComponent_Deploy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMCPServerComponent_Deploy_Call) RunAndReturn(run func(context.Context, *types.DeployMCPServerReq) (*types.Space, error)) *MockMCPServerComponent_Deploy_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx, filter, per, page, needOpWeight
func (_m *MockMCPServerComponent) Index(ctx context.Context, filter *types.RepoFilter, per int, page int, needOpWeight bool) ([]*types.MCPServer, int, error) {
	ret := _m.Called(ctx, filter, per, page, needOpWeight)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []*types.MCPServer
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.RepoFilter, int, int, bool) ([]*types.MCPServer, int, error)); ok {
		return rf(ctx, filter, per, page, needOpWeight)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.RepoFilter, int, int, bool) []*types.MCPServer); ok {
		r0 = rf(ctx, filter, per, page, needOpWeight)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.MCPServer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.RepoFilter, int, int, bool) int); ok {
		r1 = rf(ctx, filter, per, page, needOpWeight)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *types.RepoFilter, int, int, bool) error); ok {
		r2 = rf(ctx, filter, per, page, needOpWeight)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMCPServerComponent_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockMCPServerComponent_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *types.RepoFilter
//   - per int
//   - page int
//   - needOpWeight bool
func (_e *MockMCPServerComponent_Expecter) Index(ctx interface{}, filter interface{}, per interface{}, page interface{}, needOpWeight interface{}) *MockMCPServerComponent_Index_Call {
	return &MockMCPServerComponent_Index_Call{Call: _e.mock.On("Index", ctx, filter, per, page, needOpWeight)}
}

func (_c *MockMCPServerComponent_Index_Call) Run(run func(ctx context.Context, filter *types.RepoFilter, per int, page int, needOpWeight bool)) *MockMCPServerComponent_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RepoFilter), args[2].(int), args[3].(int), args[4].(bool))
	})
	return _c
}

func (_c *MockMCPServerComponent_Index_Call) Return(_a0 []*types.MCPServer, _a1 int, _a2 error) *MockMCPServerComponent_Index_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMCPServerComponent_Index_Call) RunAndReturn(run func(context.Context, *types.RepoFilter, int, int, bool) ([]*types.MCPServer, int, error)) *MockMCPServerComponent_Index_Call {
	_c.Call.Return(run)
	return _c
}

// OrgMCPServers provides a mock function with given fields: ctx, req
func (_m *MockMCPServerComponent) OrgMCPServers(ctx context.Context, req *types.OrgMCPsReq) ([]types.MCPServer, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for OrgMCPServers")
	}

	var r0 []types.MCPServer
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.OrgMCPsReq) ([]types.MCPServer, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.OrgMCPsReq) []types.MCPServer); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.MCPServer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.OrgMCPsReq) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *types.OrgMCPsReq) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMCPServerComponent_OrgMCPServers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrgMCPServers'
type MockMCPServerComponent_OrgMCPServers_Call struct {
	*mock.Call
}

// OrgMCPServers is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.OrgMCPsReq
func (_e *MockMCPServerComponent_Expecter) OrgMCPServers(ctx interface{}, req interface{}) *MockMCPServerComponent_OrgMCPServers_Call {
	return &MockMCPServerComponent_OrgMCPServers_Call{Call: _e.mock.On("OrgMCPServers", ctx, req)}
}

func (_c *MockMCPServerComponent_OrgMCPServers_Call) Run(run func(ctx context.Context, req *types.OrgMCPsReq)) *MockMCPServerComponent_OrgMCPServers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.OrgMCPsReq))
	})
	return _c
}

func (_c *MockMCPServerComponent_OrgMCPServers_Call) Return(_a0 []types.MCPServer, _a1 int, _a2 error) *MockMCPServerComponent_OrgMCPServers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMCPServerComponent_OrgMCPServers_Call) RunAndReturn(run func(context.Context, *types.OrgMCPsReq) ([]types.MCPServer, int, error)) *MockMCPServerComponent_OrgMCPServers_Call {
	_c.Call.Return(run)
	return _c
}

// Properties provides a mock function with given fields: ctx, req
func (_m *MockMCPServerComponent) Properties(ctx context.Context, req *types.MCPPropertyFilter) ([]types.MCPServerProperties, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Properties")
	}

	var r0 []types.MCPServerProperties
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MCPPropertyFilter) ([]types.MCPServerProperties, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MCPPropertyFilter) []types.MCPServerProperties); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.MCPServerProperties)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MCPPropertyFilter) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *types.MCPPropertyFilter) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMCPServerComponent_Properties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Properties'
type MockMCPServerComponent_Properties_Call struct {
	*mock.Call
}

// Properties is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.MCPPropertyFilter
func (_e *MockMCPServerComponent_Expecter) Properties(ctx interface{}, req interface{}) *MockMCPServerComponent_Properties_Call {
	return &MockMCPServerComponent_Properties_Call{Call: _e.mock.On("Properties", ctx, req)}
}

func (_c *MockMCPServerComponent_Properties_Call) Run(run func(ctx context.Context, req *types.MCPPropertyFilter)) *MockMCPServerComponent_Properties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.MCPPropertyFilter))
	})
	return _c
}

func (_c *MockMCPServerComponent_Properties_Call) Return(_a0 []types.MCPServerProperties, _a1 int, _a2 error) *MockMCPServerComponent_Properties_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMCPServerComponent_Properties_Call) RunAndReturn(run func(context.Context, *types.MCPPropertyFilter) ([]types.MCPServerProperties, int, error)) *MockMCPServerComponent_Properties_Call {
	_c.Call.Return(run)
	return _c
}

// Show provides a mock function with given fields: ctx, namespace, name, currentUser, needOpWeight, needMultiSync
func (_m *MockMCPServerComponent) Show(ctx context.Context, namespace string, name string, currentUser string, needOpWeight bool, needMultiSync bool) (*types.MCPServer, error) {
	ret := _m.Called(ctx, namespace, name, currentUser, needOpWeight, needMultiSync)

	if len(ret) == 0 {
		panic("no return value specified for Show")
	}

	var r0 *types.MCPServer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, bool, bool) (*types.MCPServer, error)); ok {
		return rf(ctx, namespace, name, currentUser, needOpWeight, needMultiSync)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, bool, bool) *types.MCPServer); ok {
		r0 = rf(ctx, namespace, name, currentUser, needOpWeight, needMultiSync)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MCPServer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, bool, bool) error); ok {
		r1 = rf(ctx, namespace, name, currentUser, needOpWeight, needMultiSync)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMCPServerComponent_Show_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Show'
type MockMCPServerComponent_Show_Call struct {
	*mock.Call
}

// Show is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
//   - currentUser string
//   - needOpWeight bool
//   - needMultiSync bool
func (_e *MockMCPServerComponent_Expecter) Show(ctx interface{}, namespace interface{}, name interface{}, currentUser interface{}, needOpWeight interface{}, needMultiSync interface{}) *MockMCPServerComponent_Show_Call {
	return &MockMCPServerComponent_Show_Call{Call: _e.mock.On("Show", ctx, namespace, name, currentUser, needOpWeight, needMultiSync)}
}

func (_c *MockMCPServerComponent_Show_Call) Run(run func(ctx context.Context, namespace string, name string, currentUser string, needOpWeight bool, needMultiSync bool)) *MockMCPServerComponent_Show_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(bool), args[5].(bool))
	})
	return _c
}

func (_c *MockMCPServerComponent_Show_Call) Return(_a0 *types.MCPServer, _a1 error) *MockMCPServerComponent_Show_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMCPServerComponent_Show_Call) RunAndReturn(run func(context.Context, string, string, string, bool, bool) (*types.MCPServer, error)) *MockMCPServerComponent_Show_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, req
func (_m *MockMCPServerComponent) Update(ctx context.Context, req *types.UpdateMCPServerReq) (*types.MCPServer, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *types.MCPServer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdateMCPServerReq) (*types.MCPServer, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.UpdateMCPServerReq) *types.MCPServer); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MCPServer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.UpdateMCPServerReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMCPServerComponent_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockMCPServerComponent_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.UpdateMCPServerReq
func (_e *MockMCPServerComponent_Expecter) Update(ctx interface{}, req interface{}) *MockMCPServerComponent_Update_Call {
	return &MockMCPServerComponent_Update_Call{Call: _e.mock.On("Update", ctx, req)}
}

func (_c *MockMCPServerComponent_Update_Call) Run(run func(ctx context.Context, req *types.UpdateMCPServerReq)) *MockMCPServerComponent_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.UpdateMCPServerReq))
	})
	return _c
}

func (_c *MockMCPServerComponent_Update_Call) Return(_a0 *types.MCPServer, _a1 error) *MockMCPServerComponent_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMCPServerComponent_Update_Call) RunAndReturn(run func(context.Context, *types.UpdateMCPServerReq) (*types.MCPServer, error)) *MockMCPServerComponent_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMCPServerComponent creates a new instance of MockMCPServerComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMCPServerComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMCPServerComponent {
	mock := &MockMCPServerComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

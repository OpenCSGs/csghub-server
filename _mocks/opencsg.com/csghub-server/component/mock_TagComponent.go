// Code generated by mockery v2.49.1. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockTagComponent is an autogenerated mock type for the TagComponent type
type MockTagComponent struct {
	mock.Mock
}

type MockTagComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagComponent) EXPECT() *MockTagComponent_Expecter {
	return &MockTagComponent_Expecter{mock: &_m.Mock}
}

// AllTagsByScopeAndCategory provides a mock function with given fields: ctx, scope, category
func (_m *MockTagComponent) AllTagsByScopeAndCategory(ctx context.Context, scope string, category string) ([]*database.Tag, error) {
	ret := _m.Called(ctx, scope, category)

	if len(ret) == 0 {
		panic("no return value specified for AllTagsByScopeAndCategory")
	}

	var r0 []*database.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*database.Tag, error)); ok {
		return rf(ctx, scope, category)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*database.Tag); ok {
		r0 = rf(ctx, scope, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, scope, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagComponent_AllTagsByScopeAndCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllTagsByScopeAndCategory'
type MockTagComponent_AllTagsByScopeAndCategory_Call struct {
	*mock.Call
}

// AllTagsByScopeAndCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - scope string
//   - category string
func (_e *MockTagComponent_Expecter) AllTagsByScopeAndCategory(ctx interface{}, scope interface{}, category interface{}) *MockTagComponent_AllTagsByScopeAndCategory_Call {
	return &MockTagComponent_AllTagsByScopeAndCategory_Call{Call: _e.mock.On("AllTagsByScopeAndCategory", ctx, scope, category)}
}

func (_c *MockTagComponent_AllTagsByScopeAndCategory_Call) Run(run func(ctx context.Context, scope string, category string)) *MockTagComponent_AllTagsByScopeAndCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockTagComponent_AllTagsByScopeAndCategory_Call) Return(_a0 []*database.Tag, _a1 error) *MockTagComponent_AllTagsByScopeAndCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagComponent_AllTagsByScopeAndCategory_Call) RunAndReturn(run func(context.Context, string, string) ([]*database.Tag, error)) *MockTagComponent_AllTagsByScopeAndCategory_Call {
	_c.Call.Return(run)
	return _c
}

// ClearMetaTags provides a mock function with given fields: ctx, repoType, namespace, name
func (_m *MockTagComponent) ClearMetaTags(ctx context.Context, repoType types.RepositoryType, namespace string, name string) error {
	ret := _m.Called(ctx, repoType, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for ClearMetaTags")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RepositoryType, string, string) error); ok {
		r0 = rf(ctx, repoType, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagComponent_ClearMetaTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearMetaTags'
type MockTagComponent_ClearMetaTags_Call struct {
	*mock.Call
}

// ClearMetaTags is a helper method to define mock.On call
//   - ctx context.Context
//   - repoType types.RepositoryType
//   - namespace string
//   - name string
func (_e *MockTagComponent_Expecter) ClearMetaTags(ctx interface{}, repoType interface{}, namespace interface{}, name interface{}) *MockTagComponent_ClearMetaTags_Call {
	return &MockTagComponent_ClearMetaTags_Call{Call: _e.mock.On("ClearMetaTags", ctx, repoType, namespace, name)}
}

func (_c *MockTagComponent_ClearMetaTags_Call) Run(run func(ctx context.Context, repoType types.RepositoryType, namespace string, name string)) *MockTagComponent_ClearMetaTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RepositoryType), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockTagComponent_ClearMetaTags_Call) Return(_a0 error) *MockTagComponent_ClearMetaTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagComponent_ClearMetaTags_Call) RunAndReturn(run func(context.Context, types.RepositoryType, string, string) error) *MockTagComponent_ClearMetaTags_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLibraryTags provides a mock function with given fields: ctx, tagScope, namespace, name, oldFilePath, newFilePath
func (_m *MockTagComponent) UpdateLibraryTags(ctx context.Context, tagScope database.TagScope, namespace string, name string, oldFilePath string, newFilePath string) error {
	ret := _m.Called(ctx, tagScope, namespace, name, oldFilePath, newFilePath)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLibraryTags")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.TagScope, string, string, string, string) error); ok {
		r0 = rf(ctx, tagScope, namespace, name, oldFilePath, newFilePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagComponent_UpdateLibraryTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLibraryTags'
type MockTagComponent_UpdateLibraryTags_Call struct {
	*mock.Call
}

// UpdateLibraryTags is a helper method to define mock.On call
//   - ctx context.Context
//   - tagScope database.TagScope
//   - namespace string
//   - name string
//   - oldFilePath string
//   - newFilePath string
func (_e *MockTagComponent_Expecter) UpdateLibraryTags(ctx interface{}, tagScope interface{}, namespace interface{}, name interface{}, oldFilePath interface{}, newFilePath interface{}) *MockTagComponent_UpdateLibraryTags_Call {
	return &MockTagComponent_UpdateLibraryTags_Call{Call: _e.mock.On("UpdateLibraryTags", ctx, tagScope, namespace, name, oldFilePath, newFilePath)}
}

func (_c *MockTagComponent_UpdateLibraryTags_Call) Run(run func(ctx context.Context, tagScope database.TagScope, namespace string, name string, oldFilePath string, newFilePath string)) *MockTagComponent_UpdateLibraryTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.TagScope), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockTagComponent_UpdateLibraryTags_Call) Return(_a0 error) *MockTagComponent_UpdateLibraryTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagComponent_UpdateLibraryTags_Call) RunAndReturn(run func(context.Context, database.TagScope, string, string, string, string) error) *MockTagComponent_UpdateLibraryTags_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMetaTags provides a mock function with given fields: ctx, tagScope, namespace, name, content
func (_m *MockTagComponent) UpdateMetaTags(ctx context.Context, tagScope database.TagScope, namespace string, name string, content string) ([]*database.RepositoryTag, error) {
	ret := _m.Called(ctx, tagScope, namespace, name, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetaTags")
	}

	var r0 []*database.RepositoryTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.TagScope, string, string, string) ([]*database.RepositoryTag, error)); ok {
		return rf(ctx, tagScope, namespace, name, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.TagScope, string, string, string) []*database.RepositoryTag); ok {
		r0 = rf(ctx, tagScope, namespace, name, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.RepositoryTag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.TagScope, string, string, string) error); ok {
		r1 = rf(ctx, tagScope, namespace, name, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagComponent_UpdateMetaTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMetaTags'
type MockTagComponent_UpdateMetaTags_Call struct {
	*mock.Call
}

// UpdateMetaTags is a helper method to define mock.On call
//   - ctx context.Context
//   - tagScope database.TagScope
//   - namespace string
//   - name string
//   - content string
func (_e *MockTagComponent_Expecter) UpdateMetaTags(ctx interface{}, tagScope interface{}, namespace interface{}, name interface{}, content interface{}) *MockTagComponent_UpdateMetaTags_Call {
	return &MockTagComponent_UpdateMetaTags_Call{Call: _e.mock.On("UpdateMetaTags", ctx, tagScope, namespace, name, content)}
}

func (_c *MockTagComponent_UpdateMetaTags_Call) Run(run func(ctx context.Context, tagScope database.TagScope, namespace string, name string, content string)) *MockTagComponent_UpdateMetaTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.TagScope), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockTagComponent_UpdateMetaTags_Call) Return(_a0 []*database.RepositoryTag, _a1 error) *MockTagComponent_UpdateMetaTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagComponent_UpdateMetaTags_Call) RunAndReturn(run func(context.Context, database.TagScope, string, string, string) ([]*database.RepositoryTag, error)) *MockTagComponent_UpdateMetaTags_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRepoTagsByCategory provides a mock function with given fields: ctx, tagScope, repoID, category, tagNames
func (_m *MockTagComponent) UpdateRepoTagsByCategory(ctx context.Context, tagScope database.TagScope, repoID int64, category string, tagNames []string) error {
	ret := _m.Called(ctx, tagScope, repoID, category, tagNames)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRepoTagsByCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.TagScope, int64, string, []string) error); ok {
		r0 = rf(ctx, tagScope, repoID, category, tagNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTagComponent_UpdateRepoTagsByCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRepoTagsByCategory'
type MockTagComponent_UpdateRepoTagsByCategory_Call struct {
	*mock.Call
}

// UpdateRepoTagsByCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - tagScope database.TagScope
//   - repoID int64
//   - category string
//   - tagNames []string
func (_e *MockTagComponent_Expecter) UpdateRepoTagsByCategory(ctx interface{}, tagScope interface{}, repoID interface{}, category interface{}, tagNames interface{}) *MockTagComponent_UpdateRepoTagsByCategory_Call {
	return &MockTagComponent_UpdateRepoTagsByCategory_Call{Call: _e.mock.On("UpdateRepoTagsByCategory", ctx, tagScope, repoID, category, tagNames)}
}

func (_c *MockTagComponent_UpdateRepoTagsByCategory_Call) Run(run func(ctx context.Context, tagScope database.TagScope, repoID int64, category string, tagNames []string)) *MockTagComponent_UpdateRepoTagsByCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.TagScope), args[2].(int64), args[3].(string), args[4].([]string))
	})
	return _c
}

func (_c *MockTagComponent_UpdateRepoTagsByCategory_Call) Return(_a0 error) *MockTagComponent_UpdateRepoTagsByCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagComponent_UpdateRepoTagsByCategory_Call) RunAndReturn(run func(context.Context, database.TagScope, int64, string, []string) error) *MockTagComponent_UpdateRepoTagsByCategory_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTagComponent creates a new instance of MockTagComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTagComponent {
	mock := &MockTagComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockMonitorComponent is an autogenerated mock type for the MonitorComponent type
type MockMonitorComponent struct {
	mock.Mock
}

type MockMonitorComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMonitorComponent) EXPECT() *MockMonitorComponent_Expecter {
	return &MockMonitorComponent_Expecter{mock: &_m.Mock}
}

// CPUUsage provides a mock function with given fields: ctx, req
func (_m *MockMonitorComponent) CPUUsage(ctx context.Context, req *types.MonitorReq) (*types.MonitorCPUResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CPUUsage")
	}

	var r0 *types.MonitorCPUResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MonitorReq) (*types.MonitorCPUResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MonitorReq) *types.MonitorCPUResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MonitorCPUResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MonitorReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMonitorComponent_CPUUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CPUUsage'
type MockMonitorComponent_CPUUsage_Call struct {
	*mock.Call
}

// CPUUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.MonitorReq
func (_e *MockMonitorComponent_Expecter) CPUUsage(ctx interface{}, req interface{}) *MockMonitorComponent_CPUUsage_Call {
	return &MockMonitorComponent_CPUUsage_Call{Call: _e.mock.On("CPUUsage", ctx, req)}
}

func (_c *MockMonitorComponent_CPUUsage_Call) Run(run func(ctx context.Context, req *types.MonitorReq)) *MockMonitorComponent_CPUUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.MonitorReq))
	})
	return _c
}

func (_c *MockMonitorComponent_CPUUsage_Call) Return(_a0 *types.MonitorCPUResp, _a1 error) *MockMonitorComponent_CPUUsage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMonitorComponent_CPUUsage_Call) RunAndReturn(run func(context.Context, *types.MonitorReq) (*types.MonitorCPUResp, error)) *MockMonitorComponent_CPUUsage_Call {
	_c.Call.Return(run)
	return _c
}

// MemoryUsage provides a mock function with given fields: ctx, req
func (_m *MockMonitorComponent) MemoryUsage(ctx context.Context, req *types.MonitorReq) (*types.MonitorMemoryResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for MemoryUsage")
	}

	var r0 *types.MonitorMemoryResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MonitorReq) (*types.MonitorMemoryResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MonitorReq) *types.MonitorMemoryResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MonitorMemoryResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MonitorReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMonitorComponent_MemoryUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MemoryUsage'
type MockMonitorComponent_MemoryUsage_Call struct {
	*mock.Call
}

// MemoryUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.MonitorReq
func (_e *MockMonitorComponent_Expecter) MemoryUsage(ctx interface{}, req interface{}) *MockMonitorComponent_MemoryUsage_Call {
	return &MockMonitorComponent_MemoryUsage_Call{Call: _e.mock.On("MemoryUsage", ctx, req)}
}

func (_c *MockMonitorComponent_MemoryUsage_Call) Run(run func(ctx context.Context, req *types.MonitorReq)) *MockMonitorComponent_MemoryUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.MonitorReq))
	})
	return _c
}

func (_c *MockMonitorComponent_MemoryUsage_Call) Return(_a0 *types.MonitorMemoryResp, _a1 error) *MockMonitorComponent_MemoryUsage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMonitorComponent_MemoryUsage_Call) RunAndReturn(run func(context.Context, *types.MonitorReq) (*types.MonitorMemoryResp, error)) *MockMonitorComponent_MemoryUsage_Call {
	_c.Call.Return(run)
	return _c
}

// RequestCount provides a mock function with given fields: ctx, req
func (_m *MockMonitorComponent) RequestCount(ctx context.Context, req *types.MonitorReq) (*types.MonitorRequestCountResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RequestCount")
	}

	var r0 *types.MonitorRequestCountResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MonitorReq) (*types.MonitorRequestCountResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MonitorReq) *types.MonitorRequestCountResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MonitorRequestCountResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MonitorReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMonitorComponent_RequestCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestCount'
type MockMonitorComponent_RequestCount_Call struct {
	*mock.Call
}

// RequestCount is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.MonitorReq
func (_e *MockMonitorComponent_Expecter) RequestCount(ctx interface{}, req interface{}) *MockMonitorComponent_RequestCount_Call {
	return &MockMonitorComponent_RequestCount_Call{Call: _e.mock.On("RequestCount", ctx, req)}
}

func (_c *MockMonitorComponent_RequestCount_Call) Run(run func(ctx context.Context, req *types.MonitorReq)) *MockMonitorComponent_RequestCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.MonitorReq))
	})
	return _c
}

func (_c *MockMonitorComponent_RequestCount_Call) Return(_a0 *types.MonitorRequestCountResp, _a1 error) *MockMonitorComponent_RequestCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMonitorComponent_RequestCount_Call) RunAndReturn(run func(context.Context, *types.MonitorReq) (*types.MonitorRequestCountResp, error)) *MockMonitorComponent_RequestCount_Call {
	_c.Call.Return(run)
	return _c
}

// RequestLatency provides a mock function with given fields: ctx, req
func (_m *MockMonitorComponent) RequestLatency(ctx context.Context, req *types.MonitorReq) (*types.MonitorRequestLatencyResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RequestLatency")
	}

	var r0 *types.MonitorRequestLatencyResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MonitorReq) (*types.MonitorRequestLatencyResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MonitorReq) *types.MonitorRequestLatencyResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.MonitorRequestLatencyResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MonitorReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMonitorComponent_RequestLatency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestLatency'
type MockMonitorComponent_RequestLatency_Call struct {
	*mock.Call
}

// RequestLatency is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.MonitorReq
func (_e *MockMonitorComponent_Expecter) RequestLatency(ctx interface{}, req interface{}) *MockMonitorComponent_RequestLatency_Call {
	return &MockMonitorComponent_RequestLatency_Call{Call: _e.mock.On("RequestLatency", ctx, req)}
}

func (_c *MockMonitorComponent_RequestLatency_Call) Run(run func(ctx context.Context, req *types.MonitorReq)) *MockMonitorComponent_RequestLatency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.MonitorReq))
	})
	return _c
}

func (_c *MockMonitorComponent_RequestLatency_Call) Return(_a0 *types.MonitorRequestLatencyResp, _a1 error) *MockMonitorComponent_RequestLatency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMonitorComponent_RequestLatency_Call) RunAndReturn(run func(context.Context, *types.MonitorReq) (*types.MonitorRequestLatencyResp, error)) *MockMonitorComponent_RequestLatency_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMonitorComponent creates a new instance of MockMonitorComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMonitorComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMonitorComponent {
	mock := &MockMonitorComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

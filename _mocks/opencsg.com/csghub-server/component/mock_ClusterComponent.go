// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockClusterComponent is an autogenerated mock type for the ClusterComponent type
type MockClusterComponent struct {
	mock.Mock
}

type MockClusterComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterComponent) EXPECT() *MockClusterComponent_Expecter {
	return &MockClusterComponent_Expecter{mock: &_m.Mock}
}

// GetClusterById provides a mock function with given fields: ctx, clusterId
func (_m *MockClusterComponent) GetClusterById(ctx context.Context, clusterId string) (*types.ClusterRes, error) {
	ret := _m.Called(ctx, clusterId)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterById")
	}

	var r0 *types.ClusterRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.ClusterRes, error)); ok {
		return rf(ctx, clusterId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.ClusterRes); ok {
		r0 = rf(ctx, clusterId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ClusterRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clusterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterComponent_GetClusterById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterById'
type MockClusterComponent_GetClusterById_Call struct {
	*mock.Call
}

// GetClusterById is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
func (_e *MockClusterComponent_Expecter) GetClusterById(ctx interface{}, clusterId interface{}) *MockClusterComponent_GetClusterById_Call {
	return &MockClusterComponent_GetClusterById_Call{Call: _e.mock.On("GetClusterById", ctx, clusterId)}
}

func (_c *MockClusterComponent_GetClusterById_Call) Run(run func(ctx context.Context, clusterId string)) *MockClusterComponent_GetClusterById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClusterComponent_GetClusterById_Call) Return(_a0 *types.ClusterRes, _a1 error) *MockClusterComponent_GetClusterById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterComponent_GetClusterById_Call) RunAndReturn(run func(context.Context, string) (*types.ClusterRes, error)) *MockClusterComponent_GetClusterById_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterUsages provides a mock function with given fields: ctx
func (_m *MockClusterComponent) GetClusterUsages(ctx context.Context) ([]types.ClusterRes, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterUsages")
	}

	var r0 []types.ClusterRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]types.ClusterRes, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []types.ClusterRes); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ClusterRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterComponent_GetClusterUsages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterUsages'
type MockClusterComponent_GetClusterUsages_Call struct {
	*mock.Call
}

// GetClusterUsages is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterComponent_Expecter) GetClusterUsages(ctx interface{}) *MockClusterComponent_GetClusterUsages_Call {
	return &MockClusterComponent_GetClusterUsages_Call{Call: _e.mock.On("GetClusterUsages", ctx)}
}

func (_c *MockClusterComponent_GetClusterUsages_Call) Run(run func(ctx context.Context)) *MockClusterComponent_GetClusterUsages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterComponent_GetClusterUsages_Call) Return(_a0 []types.ClusterRes, _a1 error) *MockClusterComponent_GetClusterUsages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterComponent_GetClusterUsages_Call) RunAndReturn(run func(context.Context) ([]types.ClusterRes, error)) *MockClusterComponent_GetClusterUsages_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeploys provides a mock function with given fields: ctx, req
func (_m *MockClusterComponent) GetDeploys(ctx context.Context, req types.DeployReq) ([]types.DeployRes, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploys")
	}

	var r0 []types.DeployRes
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.DeployReq) ([]types.DeployRes, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.DeployReq) []types.DeployRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.DeployRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.DeployReq) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.DeployReq) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockClusterComponent_GetDeploys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeploys'
type MockClusterComponent_GetDeploys_Call struct {
	*mock.Call
}

// GetDeploys is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.DeployReq
func (_e *MockClusterComponent_Expecter) GetDeploys(ctx interface{}, req interface{}) *MockClusterComponent_GetDeploys_Call {
	return &MockClusterComponent_GetDeploys_Call{Call: _e.mock.On("GetDeploys", ctx, req)}
}

func (_c *MockClusterComponent_GetDeploys_Call) Run(run func(ctx context.Context, req types.DeployReq)) *MockClusterComponent_GetDeploys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.DeployReq))
	})
	return _c
}

func (_c *MockClusterComponent_GetDeploys_Call) Return(_a0 []types.DeployRes, _a1 int, _a2 error) *MockClusterComponent_GetDeploys_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockClusterComponent_GetDeploys_Call) RunAndReturn(run func(context.Context, types.DeployReq) ([]types.DeployRes, int, error)) *MockClusterComponent_GetDeploys_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx
func (_m *MockClusterComponent) Index(ctx context.Context) ([]types.ClusterRes, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []types.ClusterRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]types.ClusterRes, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []types.ClusterRes); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ClusterRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterComponent_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockClusterComponent_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterComponent_Expecter) Index(ctx interface{}) *MockClusterComponent_Index_Call {
	return &MockClusterComponent_Index_Call{Call: _e.mock.On("Index", ctx)}
}

func (_c *MockClusterComponent_Index_Call) Run(run func(ctx context.Context)) *MockClusterComponent_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterComponent_Index_Call) Return(_a0 []types.ClusterRes, _a1 error) *MockClusterComponent_Index_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterComponent_Index_Call) RunAndReturn(run func(context.Context) ([]types.ClusterRes, error)) *MockClusterComponent_Index_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, data
func (_m *MockClusterComponent) Update(ctx context.Context, data types.ClusterRequest) (*types.ClusterRes, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *types.ClusterRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ClusterRequest) (*types.ClusterRes, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ClusterRequest) *types.ClusterRes); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ClusterRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ClusterRequest) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterComponent_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockClusterComponent_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - data types.ClusterRequest
func (_e *MockClusterComponent_Expecter) Update(ctx interface{}, data interface{}) *MockClusterComponent_Update_Call {
	return &MockClusterComponent_Update_Call{Call: _e.mock.On("Update", ctx, data)}
}

func (_c *MockClusterComponent_Update_Call) Run(run func(ctx context.Context, data types.ClusterRequest)) *MockClusterComponent_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ClusterRequest))
	})
	return _c
}

func (_c *MockClusterComponent_Update_Call) Return(_a0 *types.ClusterRes, _a1 error) *MockClusterComponent_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterComponent_Update_Call) RunAndReturn(run func(context.Context, types.ClusterRequest) (*types.ClusterRes, error)) *MockClusterComponent_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClusterComponent creates a new instance of MockClusterComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterComponent {
	mock := &MockClusterComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockMCPScannerComponent is an autogenerated mock type for the MCPScannerComponent type
type MockMCPScannerComponent struct {
	mock.Mock
}

type MockMCPScannerComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMCPScannerComponent) EXPECT() *MockMCPScannerComponent_Expecter {
	return &MockMCPScannerComponent_Expecter{mock: &_m.Mock}
}

// Scan provides a mock function with given fields: ctx, namespace, name
func (_m *MockMCPScannerComponent) Scan(ctx context.Context, namespace string, name string) ([]types.ScannerIssue, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 []types.ScannerIssue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]types.ScannerIssue, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []types.ScannerIssue); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ScannerIssue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMCPScannerComponent_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type MockMCPScannerComponent_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
func (_e *MockMCPScannerComponent_Expecter) Scan(ctx interface{}, namespace interface{}, name interface{}) *MockMCPScannerComponent_Scan_Call {
	return &MockMCPScannerComponent_Scan_Call{Call: _e.mock.On("Scan", ctx, namespace, name)}
}

func (_c *MockMCPScannerComponent_Scan_Call) Run(run func(ctx context.Context, namespace string, name string)) *MockMCPScannerComponent_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMCPScannerComponent_Scan_Call) Return(_a0 []types.ScannerIssue, _a1 error) *MockMCPScannerComponent_Scan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMCPScannerComponent_Scan_Call) RunAndReturn(run func(context.Context, string, string) ([]types.ScannerIssue, error)) *MockMCPScannerComponent_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMCPScannerComponent creates a new instance of MockMCPScannerComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMCPScannerComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMCPScannerComponent {
	mock := &MockMCPScannerComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

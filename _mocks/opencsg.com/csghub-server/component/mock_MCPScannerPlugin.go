// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockMCPScannerPlugin is an autogenerated mock type for the MCPScannerPlugin type
type MockMCPScannerPlugin struct {
	mock.Mock
}

type MockMCPScannerPlugin_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMCPScannerPlugin) EXPECT() *MockMCPScannerPlugin_Expecter {
	return &MockMCPScannerPlugin_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: ctx, files
func (_m *MockMCPScannerPlugin) Check(ctx context.Context, files []*types.File) ([]types.ScannerIssue, error) {
	ret := _m.Called(ctx, files)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 []types.ScannerIssue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*types.File) ([]types.ScannerIssue, error)); ok {
		return rf(ctx, files)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*types.File) []types.ScannerIssue); ok {
		r0 = rf(ctx, files)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ScannerIssue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*types.File) error); ok {
		r1 = rf(ctx, files)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMCPScannerPlugin_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockMCPScannerPlugin_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - ctx context.Context
//   - files []*types.File
func (_e *MockMCPScannerPlugin_Expecter) Check(ctx interface{}, files interface{}) *MockMCPScannerPlugin_Check_Call {
	return &MockMCPScannerPlugin_Check_Call{Call: _e.mock.On("Check", ctx, files)}
}

func (_c *MockMCPScannerPlugin_Check_Call) Run(run func(ctx context.Context, files []*types.File)) *MockMCPScannerPlugin_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*types.File))
	})
	return _c
}

func (_c *MockMCPScannerPlugin_Check_Call) Return(_a0 []types.ScannerIssue, _a1 error) *MockMCPScannerPlugin_Check_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMCPScannerPlugin_Check_Call) RunAndReturn(run func(context.Context, []*types.File) ([]types.ScannerIssue, error)) *MockMCPScannerPlugin_Check_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with no fields
func (_m *MockMCPScannerPlugin) GetName() types.PluginName {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 types.PluginName
	if rf, ok := ret.Get(0).(func() types.PluginName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.PluginName)
	}

	return r0
}

// MockMCPScannerPlugin_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockMCPScannerPlugin_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockMCPScannerPlugin_Expecter) GetName() *MockMCPScannerPlugin_GetName_Call {
	return &MockMCPScannerPlugin_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockMCPScannerPlugin_GetName_Call) Run(run func()) *MockMCPScannerPlugin_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMCPScannerPlugin_GetName_Call) Return(_a0 types.PluginName) *MockMCPScannerPlugin_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMCPScannerPlugin_GetName_Call) RunAndReturn(run func() types.PluginName) *MockMCPScannerPlugin_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMCPScannerPlugin creates a new instance of MockMCPScannerPlugin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMCPScannerPlugin(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMCPScannerPlugin {
	mock := &MockMCPScannerPlugin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

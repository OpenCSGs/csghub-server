// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockModelTreeComponent is an autogenerated mock type for the ModelTreeComponent type
type MockModelTreeComponent struct {
	mock.Mock
}

type MockModelTreeComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModelTreeComponent) EXPECT() *MockModelTreeComponent_Expecter {
	return &MockModelTreeComponent_Expecter{mock: &_m.Mock}
}

// GetModelTree provides a mock function with given fields: ctx, currentUser, namespace, name
func (_m *MockModelTreeComponent) GetModelTree(ctx context.Context, currentUser string, namespace string, name string) (*types.ModelTree, error) {
	ret := _m.Called(ctx, currentUser, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetModelTree")
	}

	var r0 *types.ModelTree
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*types.ModelTree, error)); ok {
		return rf(ctx, currentUser, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *types.ModelTree); ok {
		r0 = rf(ctx, currentUser, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ModelTree)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, currentUser, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelTreeComponent_GetModelTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModelTree'
type MockModelTreeComponent_GetModelTree_Call struct {
	*mock.Call
}

// GetModelTree is a helper method to define mock.On call
//   - ctx context.Context
//   - currentUser string
//   - namespace string
//   - name string
func (_e *MockModelTreeComponent_Expecter) GetModelTree(ctx interface{}, currentUser interface{}, namespace interface{}, name interface{}) *MockModelTreeComponent_GetModelTree_Call {
	return &MockModelTreeComponent_GetModelTree_Call{Call: _e.mock.On("GetModelTree", ctx, currentUser, namespace, name)}
}

func (_c *MockModelTreeComponent_GetModelTree_Call) Run(run func(ctx context.Context, currentUser string, namespace string, name string)) *MockModelTreeComponent_GetModelTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockModelTreeComponent_GetModelTree_Call) Return(_a0 *types.ModelTree, _a1 error) *MockModelTreeComponent_GetModelTree_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelTreeComponent_GetModelTree_Call) RunAndReturn(run func(context.Context, string, string, string) (*types.ModelTree, error)) *MockModelTreeComponent_GetModelTree_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessModelTree provides a mock function with given fields: ctx, relations, currentRepo
func (_m *MockModelTreeComponent) ProcessModelTree(ctx context.Context, relations []*types.ModelNode, currentRepo database.Repository) {
	_m.Called(ctx, relations, currentRepo)
}

// MockModelTreeComponent_ProcessModelTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessModelTree'
type MockModelTreeComponent_ProcessModelTree_Call struct {
	*mock.Call
}

// ProcessModelTree is a helper method to define mock.On call
//   - ctx context.Context
//   - relations []*types.ModelNode
//   - currentRepo database.Repository
func (_e *MockModelTreeComponent_Expecter) ProcessModelTree(ctx interface{}, relations interface{}, currentRepo interface{}) *MockModelTreeComponent_ProcessModelTree_Call {
	return &MockModelTreeComponent_ProcessModelTree_Call{Call: _e.mock.On("ProcessModelTree", ctx, relations, currentRepo)}
}

func (_c *MockModelTreeComponent_ProcessModelTree_Call) Run(run func(ctx context.Context, relations []*types.ModelNode, currentRepo database.Repository)) *MockModelTreeComponent_ProcessModelTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*types.ModelNode), args[2].(database.Repository))
	})
	return _c
}

func (_c *MockModelTreeComponent_ProcessModelTree_Call) Return() *MockModelTreeComponent_ProcessModelTree_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockModelTreeComponent_ProcessModelTree_Call) RunAndReturn(run func(context.Context, []*types.ModelNode, database.Repository)) *MockModelTreeComponent_ProcessModelTree_Call {
	_c.Run(run)
	return _c
}

// ScanModelTree provides a mock function with given fields: ctx, req
func (_m *MockModelTreeComponent) ScanModelTree(ctx context.Context, req types.ScanModels) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ScanModelTree")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ScanModels) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelTreeComponent_ScanModelTree_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanModelTree'
type MockModelTreeComponent_ScanModelTree_Call struct {
	*mock.Call
}

// ScanModelTree is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ScanModels
func (_e *MockModelTreeComponent_Expecter) ScanModelTree(ctx interface{}, req interface{}) *MockModelTreeComponent_ScanModelTree_Call {
	return &MockModelTreeComponent_ScanModelTree_Call{Call: _e.mock.On("ScanModelTree", ctx, req)}
}

func (_c *MockModelTreeComponent_ScanModelTree_Call) Run(run func(ctx context.Context, req types.ScanModels)) *MockModelTreeComponent_ScanModelTree_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ScanModels))
	})
	return _c
}

func (_c *MockModelTreeComponent_ScanModelTree_Call) Return(_a0 error) *MockModelTreeComponent_ScanModelTree_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelTreeComponent_ScanModelTree_Call) RunAndReturn(run func(context.Context, types.ScanModels) error) *MockModelTreeComponent_ScanModelTree_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModelTreeComponent creates a new instance of MockModelTreeComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModelTreeComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModelTreeComponent {
	mock := &MockModelTreeComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockImportComponent is an autogenerated mock type for the ImportComponent type
type MockImportComponent struct {
	mock.Mock
}

type MockImportComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImportComponent) EXPECT() *MockImportComponent_Expecter {
	return &MockImportComponent_Expecter{mock: &_m.Mock}
}

// GetGitlabRepos provides a mock function with given fields: ctx, req
func (_m *MockImportComponent) GetGitlabRepos(ctx context.Context, req *types.GetGitlabReposReq) ([]types.RemoteRepository, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetGitlabRepos")
	}

	var r0 []types.RemoteRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.GetGitlabReposReq) ([]types.RemoteRepository, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.GetGitlabReposReq) []types.RemoteRepository); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.RemoteRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.GetGitlabReposReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImportComponent_GetGitlabRepos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGitlabRepos'
type MockImportComponent_GetGitlabRepos_Call struct {
	*mock.Call
}

// GetGitlabRepos is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.GetGitlabReposReq
func (_e *MockImportComponent_Expecter) GetGitlabRepos(ctx interface{}, req interface{}) *MockImportComponent_GetGitlabRepos_Call {
	return &MockImportComponent_GetGitlabRepos_Call{Call: _e.mock.On("GetGitlabRepos", ctx, req)}
}

func (_c *MockImportComponent_GetGitlabRepos_Call) Run(run func(ctx context.Context, req *types.GetGitlabReposReq)) *MockImportComponent_GetGitlabRepos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.GetGitlabReposReq))
	})
	return _c
}

func (_c *MockImportComponent_GetGitlabRepos_Call) Return(_a0 []types.RemoteRepository, _a1 error) *MockImportComponent_GetGitlabRepos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImportComponent_GetGitlabRepos_Call) RunAndReturn(run func(context.Context, *types.GetGitlabReposReq) ([]types.RemoteRepository, error)) *MockImportComponent_GetGitlabRepos_Call {
	_c.Call.Return(run)
	return _c
}

// Import provides a mock function with given fields: ctx, req
func (_m *MockImportComponent) Import(ctx context.Context, req types.ImportReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Import")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ImportReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockImportComponent_Import_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Import'
type MockImportComponent_Import_Call struct {
	*mock.Call
}

// Import is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ImportReq
func (_e *MockImportComponent_Expecter) Import(ctx interface{}, req interface{}) *MockImportComponent_Import_Call {
	return &MockImportComponent_Import_Call{Call: _e.mock.On("Import", ctx, req)}
}

func (_c *MockImportComponent_Import_Call) Run(run func(ctx context.Context, req types.ImportReq)) *MockImportComponent_Import_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ImportReq))
	})
	return _c
}

func (_c *MockImportComponent_Import_Call) Return(_a0 error) *MockImportComponent_Import_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockImportComponent_Import_Call) RunAndReturn(run func(context.Context, types.ImportReq) error) *MockImportComponent_Import_Call {
	_c.Call.Return(run)
	return _c
}

// ImportStatus provides a mock function with given fields: ctx, req
func (_m *MockImportComponent) ImportStatus(ctx context.Context, req types.ImportStatusReq) ([]types.ImportedRepository, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ImportStatus")
	}

	var r0 []types.ImportedRepository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ImportStatusReq) ([]types.ImportedRepository, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ImportStatusReq) []types.ImportedRepository); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ImportedRepository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ImportStatusReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImportComponent_ImportStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportStatus'
type MockImportComponent_ImportStatus_Call struct {
	*mock.Call
}

// ImportStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ImportStatusReq
func (_e *MockImportComponent_Expecter) ImportStatus(ctx interface{}, req interface{}) *MockImportComponent_ImportStatus_Call {
	return &MockImportComponent_ImportStatus_Call{Call: _e.mock.On("ImportStatus", ctx, req)}
}

func (_c *MockImportComponent_ImportStatus_Call) Run(run func(ctx context.Context, req types.ImportStatusReq)) *MockImportComponent_ImportStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ImportStatusReq))
	})
	return _c
}

func (_c *MockImportComponent_ImportStatus_Call) Return(_a0 []types.ImportedRepository, _a1 error) *MockImportComponent_ImportStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImportComponent_ImportStatus_Call) RunAndReturn(run func(context.Context, types.ImportStatusReq) ([]types.ImportedRepository, error)) *MockImportComponent_ImportStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockImportComponent creates a new instance of MockImportComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImportComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImportComponent {
	mock := &MockImportComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

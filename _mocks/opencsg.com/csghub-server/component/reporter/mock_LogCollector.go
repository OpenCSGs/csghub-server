// Code generated by mockery v2.53.0. DO NOT EDIT.

package reporter

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	logcollectortypes "opencsg.com/csghub-server/logcollector/types"

	sender "opencsg.com/csghub-server/component/reporter/sender"

	types "opencsg.com/csghub-server/common/types"
)

// MockLogCollector is an autogenerated mock type for the LogCollector type
type MockLogCollector struct {
	mock.Mock
}

type MockLogCollector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogCollector) EXPECT() *MockLogCollector_Expecter {
	return &MockLogCollector_Expecter{mock: &_m.Mock}
}

// GetLogChan provides a mock function with no fields
func (_m *MockLogCollector) GetLogChan() chan types.LogEntry {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogChan")
	}

	var r0 chan types.LogEntry
	if rf, ok := ret.Get(0).(func() chan types.LogEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan types.LogEntry)
		}
	}

	return r0
}

// MockLogCollector_GetLogChan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogChan'
type MockLogCollector_GetLogChan_Call struct {
	*mock.Call
}

// GetLogChan is a helper method to define mock.On call
func (_e *MockLogCollector_Expecter) GetLogChan() *MockLogCollector_GetLogChan_Call {
	return &MockLogCollector_GetLogChan_Call{Call: _e.mock.On("GetLogChan")}
}

func (_c *MockLogCollector_GetLogChan_Call) Run(run func()) *MockLogCollector_GetLogChan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogCollector_GetLogChan_Call) Return(_a0 chan types.LogEntry) *MockLogCollector_GetLogChan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogCollector_GetLogChan_Call) RunAndReturn(run func() chan types.LogEntry) *MockLogCollector_GetLogChan_Call {
	_c.Call.Return(run)
	return _c
}

// GetSender provides a mock function with no fields
func (_m *MockLogCollector) GetSender() sender.LogSender {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSender")
	}

	var r0 sender.LogSender
	if rf, ok := ret.Get(0).(func() sender.LogSender); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sender.LogSender)
		}
	}

	return r0
}

// MockLogCollector_GetSender_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSender'
type MockLogCollector_GetSender_Call struct {
	*mock.Call
}

// GetSender is a helper method to define mock.On call
func (_e *MockLogCollector_Expecter) GetSender() *MockLogCollector_GetSender_Call {
	return &MockLogCollector_GetSender_Call{Call: _e.mock.On("GetSender")}
}

func (_c *MockLogCollector_GetSender_Call) Run(run func()) *MockLogCollector_GetSender_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogCollector_GetSender_Call) Return(_a0 sender.LogSender) *MockLogCollector_GetSender_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogCollector_GetSender_Call) RunAndReturn(run func() sender.LogSender) *MockLogCollector_GetSender_Call {
	_c.Call.Return(run)
	return _c
}

// GetStats provides a mock function with no fields
func (_m *MockLogCollector) GetStats() logcollectortypes.CollectorStats {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 logcollectortypes.CollectorStats
	if rf, ok := ret.Get(0).(func() logcollectortypes.CollectorStats); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(logcollectortypes.CollectorStats)
	}

	return r0
}

// MockLogCollector_GetStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStats'
type MockLogCollector_GetStats_Call struct {
	*mock.Call
}

// GetStats is a helper method to define mock.On call
func (_e *MockLogCollector_Expecter) GetStats() *MockLogCollector_GetStats_Call {
	return &MockLogCollector_GetStats_Call{Call: _e.mock.On("GetStats")}
}

func (_c *MockLogCollector_GetStats_Call) Run(run func()) *MockLogCollector_GetStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogCollector_GetStats_Call) Return(_a0 logcollectortypes.CollectorStats) *MockLogCollector_GetStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogCollector_GetStats_Call) RunAndReturn(run func() logcollectortypes.CollectorStats) *MockLogCollector_GetStats_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function with no fields
func (_m *MockLogCollector) HealthCheck() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogCollector_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type MockLogCollector_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
func (_e *MockLogCollector_Expecter) HealthCheck() *MockLogCollector_HealthCheck_Call {
	return &MockLogCollector_HealthCheck_Call{Call: _e.mock.On("HealthCheck")}
}

func (_c *MockLogCollector_HealthCheck_Call) Run(run func()) *MockLogCollector_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogCollector_HealthCheck_Call) Return(_a0 error) *MockLogCollector_HealthCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogCollector_HealthCheck_Call) RunAndReturn(run func() error) *MockLogCollector_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// Report provides a mock function with given fields: entry
func (_m *MockLogCollector) Report(entry types.LogEntry) {
	_m.Called(entry)
}

// MockLogCollector_Report_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Report'
type MockLogCollector_Report_Call struct {
	*mock.Call
}

// Report is a helper method to define mock.On call
//   - entry types.LogEntry
func (_e *MockLogCollector_Expecter) Report(entry interface{}) *MockLogCollector_Report_Call {
	return &MockLogCollector_Report_Call{Call: _e.mock.On("Report", entry)}
}

func (_c *MockLogCollector_Report_Call) Run(run func(entry types.LogEntry)) *MockLogCollector_Report_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.LogEntry))
	})
	return _c
}

func (_c *MockLogCollector_Report_Call) Return() *MockLogCollector_Report_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogCollector_Report_Call) RunAndReturn(run func(types.LogEntry)) *MockLogCollector_Report_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockLogCollector) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogCollector_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockLogCollector_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLogCollector_Expecter) Start(ctx interface{}) *MockLogCollector_Start_Call {
	return &MockLogCollector_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockLogCollector_Start_Call) Run(run func(ctx context.Context)) *MockLogCollector_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLogCollector_Start_Call) Return(_a0 error) *MockLogCollector_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogCollector_Start_Call) RunAndReturn(run func(context.Context) error) *MockLogCollector_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockLogCollector) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLogCollector_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockLogCollector_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockLogCollector_Expecter) Stop() *MockLogCollector_Stop_Call {
	return &MockLogCollector_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockLogCollector_Stop_Call) Run(run func()) *MockLogCollector_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockLogCollector_Stop_Call) Return(_a0 error) *MockLogCollector_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLogCollector_Stop_Call) RunAndReturn(run func() error) *MockLogCollector_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogCollector creates a new instance of MockLogCollector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogCollector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogCollector {
	mock := &MockLogCollector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

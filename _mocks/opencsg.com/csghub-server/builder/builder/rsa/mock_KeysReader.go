// Code generated by mockery v2.53.0. DO NOT EDIT.

package rsa

import mock "github.com/stretchr/testify/mock"

// MockKeysReader is an autogenerated mock type for the KeysReader type
type MockKeysReader struct {
	mock.Mock
}

type MockKeysReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeysReader) EXPECT() *MockKeysReader_Expecter {
	return &MockKeysReader_Expecter{mock: &_m.Mock}
}

// ReadKey provides a mock function with given fields: fileName
func (_m *MockKeysReader) ReadKey(fileName string) ([]byte, error) {
	ret := _m.Called(fileName)

	if len(ret) == 0 {
		panic("no return value specified for ReadKey")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(fileName)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeysReader_ReadKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadKey'
type MockKeysReader_ReadKey_Call struct {
	*mock.Call
}

// ReadKey is a helper method to define mock.On call
//   - fileName string
func (_e *MockKeysReader_Expecter) ReadKey(fileName interface{}) *MockKeysReader_ReadKey_Call {
	return &MockKeysReader_ReadKey_Call{Call: _e.mock.On("ReadKey", fileName)}
}

func (_c *MockKeysReader_ReadKey_Call) Run(run func(fileName string)) *MockKeysReader_ReadKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockKeysReader_ReadKey_Call) Return(_a0 []byte, _a1 error) *MockKeysReader_ReadKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeysReader_ReadKey_Call) RunAndReturn(run func(string) ([]byte, error)) *MockKeysReader_ReadKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeysReader creates a new instance of MockKeysReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeysReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeysReader {
	mock := &MockKeysReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

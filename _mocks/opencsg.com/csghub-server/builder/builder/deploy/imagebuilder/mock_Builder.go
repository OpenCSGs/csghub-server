// Code generated by mockery v2.53.0. DO NOT EDIT.

package imagebuilder

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "opencsg.com/csghub-server/common/types"
)

// MockBuilder is an autogenerated mock type for the Builder type
type MockBuilder struct {
	mock.Mock
}

type MockBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBuilder) EXPECT() *MockBuilder_Expecter {
	return &MockBuilder_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields: _a0, _a1
func (_m *MockBuilder) Build(_a0 context.Context, _a1 *types.ImageBuilderRequest) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.ImageBuilderRequest) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBuilder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type MockBuilder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *types.ImageBuilderRequest
func (_e *MockBuilder_Expecter) Build(_a0 interface{}, _a1 interface{}) *MockBuilder_Build_Call {
	return &MockBuilder_Build_Call{Call: _e.mock.On("Build", _a0, _a1)}
}

func (_c *MockBuilder_Build_Call) Run(run func(_a0 context.Context, _a1 *types.ImageBuilderRequest)) *MockBuilder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.ImageBuilderRequest))
	})
	return _c
}

func (_c *MockBuilder_Build_Call) Return(_a0 error) *MockBuilder_Build_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBuilder_Build_Call) RunAndReturn(run func(context.Context, *types.ImageBuilderRequest) error) *MockBuilder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: _a0, _a1
func (_m *MockBuilder) Stop(_a0 context.Context, _a1 types.ImageBuildStopReq) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ImageBuildStopReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBuilder_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockBuilder_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 types.ImageBuildStopReq
func (_e *MockBuilder_Expecter) Stop(_a0 interface{}, _a1 interface{}) *MockBuilder_Stop_Call {
	return &MockBuilder_Stop_Call{Call: _e.mock.On("Stop", _a0, _a1)}
}

func (_c *MockBuilder_Stop_Call) Run(run func(_a0 context.Context, _a1 types.ImageBuildStopReq)) *MockBuilder_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ImageBuildStopReq))
	})
	return _c
}

func (_c *MockBuilder_Stop_Call) Return(_a0 error) *MockBuilder_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBuilder_Stop_Call) RunAndReturn(run func(context.Context, types.ImageBuildStopReq) error) *MockBuilder_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBuilder creates a new instance of MockBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBuilder {
	mock := &MockBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockLLMConfigStore is an autogenerated mock type for the LLMConfigStore type
type MockLLMConfigStore struct {
	mock.Mock
}

type MockLLMConfigStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLLMConfigStore) EXPECT() *MockLLMConfigStore_Expecter {
	return &MockLLMConfigStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, config
func (_m *MockLLMConfigStore) Create(ctx context.Context, config database.LLMConfig) (*database.LLMConfig, error) {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.LLMConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.LLMConfig) (*database.LLMConfig, error)); ok {
		return rf(ctx, config)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.LLMConfig) *database.LLMConfig); ok {
		r0 = rf(ctx, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.LLMConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.LLMConfig) error); ok {
		r1 = rf(ctx, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLLMConfigStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLLMConfigStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - config database.LLMConfig
func (_e *MockLLMConfigStore_Expecter) Create(ctx interface{}, config interface{}) *MockLLMConfigStore_Create_Call {
	return &MockLLMConfigStore_Create_Call{Call: _e.mock.On("Create", ctx, config)}
}

func (_c *MockLLMConfigStore_Create_Call) Run(run func(ctx context.Context, config database.LLMConfig)) *MockLLMConfigStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.LLMConfig))
	})
	return _c
}

func (_c *MockLLMConfigStore_Create_Call) Return(_a0 *database.LLMConfig, _a1 error) *MockLLMConfigStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLLMConfigStore_Create_Call) RunAndReturn(run func(context.Context, database.LLMConfig) (*database.LLMConfig, error)) *MockLLMConfigStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockLLMConfigStore) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLLMConfigStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockLLMConfigStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockLLMConfigStore_Expecter) Delete(ctx interface{}, id interface{}) *MockLLMConfigStore_Delete_Call {
	return &MockLLMConfigStore_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockLLMConfigStore_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockLLMConfigStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLLMConfigStore_Delete_Call) Return(_a0 error) *MockLLMConfigStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLLMConfigStore_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *MockLLMConfigStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockLLMConfigStore) GetByID(ctx context.Context, id int64) (*database.LLMConfig, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *database.LLMConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.LLMConfig, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.LLMConfig); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.LLMConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLLMConfigStore_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockLLMConfigStore_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockLLMConfigStore_Expecter) GetByID(ctx interface{}, id interface{}) *MockLLMConfigStore_GetByID_Call {
	return &MockLLMConfigStore_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockLLMConfigStore_GetByID_Call) Run(run func(ctx context.Context, id int64)) *MockLLMConfigStore_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLLMConfigStore_GetByID_Call) Return(_a0 *database.LLMConfig, _a1 error) *MockLLMConfigStore_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLLMConfigStore_GetByID_Call) RunAndReturn(run func(context.Context, int64) (*database.LLMConfig, error)) *MockLLMConfigStore_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByType provides a mock function with given fields: ctx, llmType
func (_m *MockLLMConfigStore) GetByType(ctx context.Context, llmType int) (*database.LLMConfig, error) {
	ret := _m.Called(ctx, llmType)

	if len(ret) == 0 {
		panic("no return value specified for GetByType")
	}

	var r0 *database.LLMConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*database.LLMConfig, error)); ok {
		return rf(ctx, llmType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *database.LLMConfig); ok {
		r0 = rf(ctx, llmType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.LLMConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, llmType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLLMConfigStore_GetByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByType'
type MockLLMConfigStore_GetByType_Call struct {
	*mock.Call
}

// GetByType is a helper method to define mock.On call
//   - ctx context.Context
//   - llmType int
func (_e *MockLLMConfigStore_Expecter) GetByType(ctx interface{}, llmType interface{}) *MockLLMConfigStore_GetByType_Call {
	return &MockLLMConfigStore_GetByType_Call{Call: _e.mock.On("GetByType", ctx, llmType)}
}

func (_c *MockLLMConfigStore_GetByType_Call) Run(run func(ctx context.Context, llmType int)) *MockLLMConfigStore_GetByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockLLMConfigStore_GetByType_Call) Return(_a0 *database.LLMConfig, _a1 error) *MockLLMConfigStore_GetByType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLLMConfigStore_GetByType_Call) RunAndReturn(run func(context.Context, int) (*database.LLMConfig, error)) *MockLLMConfigStore_GetByType_Call {
	_c.Call.Return(run)
	return _c
}

// GetModelForSummaryReadme provides a mock function with given fields: ctx
func (_m *MockLLMConfigStore) GetModelForSummaryReadme(ctx context.Context) (*database.LLMConfig, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetModelForSummaryReadme")
	}

	var r0 *database.LLMConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*database.LLMConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *database.LLMConfig); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.LLMConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLLMConfigStore_GetModelForSummaryReadme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModelForSummaryReadme'
type MockLLMConfigStore_GetModelForSummaryReadme_Call struct {
	*mock.Call
}

// GetModelForSummaryReadme is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLLMConfigStore_Expecter) GetModelForSummaryReadme(ctx interface{}) *MockLLMConfigStore_GetModelForSummaryReadme_Call {
	return &MockLLMConfigStore_GetModelForSummaryReadme_Call{Call: _e.mock.On("GetModelForSummaryReadme", ctx)}
}

func (_c *MockLLMConfigStore_GetModelForSummaryReadme_Call) Run(run func(ctx context.Context)) *MockLLMConfigStore_GetModelForSummaryReadme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLLMConfigStore_GetModelForSummaryReadme_Call) Return(_a0 *database.LLMConfig, _a1 error) *MockLLMConfigStore_GetModelForSummaryReadme_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLLMConfigStore_GetModelForSummaryReadme_Call) RunAndReturn(run func(context.Context) (*database.LLMConfig, error)) *MockLLMConfigStore_GetModelForSummaryReadme_Call {
	_c.Call.Return(run)
	return _c
}

// GetOptimization provides a mock function with given fields: ctx
func (_m *MockLLMConfigStore) GetOptimization(ctx context.Context) (*database.LLMConfig, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOptimization")
	}

	var r0 *database.LLMConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*database.LLMConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *database.LLMConfig); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.LLMConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLLMConfigStore_GetOptimization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOptimization'
type MockLLMConfigStore_GetOptimization_Call struct {
	*mock.Call
}

// GetOptimization is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLLMConfigStore_Expecter) GetOptimization(ctx interface{}) *MockLLMConfigStore_GetOptimization_Call {
	return &MockLLMConfigStore_GetOptimization_Call{Call: _e.mock.On("GetOptimization", ctx)}
}

func (_c *MockLLMConfigStore_GetOptimization_Call) Run(run func(ctx context.Context)) *MockLLMConfigStore_GetOptimization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLLMConfigStore_GetOptimization_Call) Return(_a0 *database.LLMConfig, _a1 error) *MockLLMConfigStore_GetOptimization_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLLMConfigStore_GetOptimization_Call) RunAndReturn(run func(context.Context) (*database.LLMConfig, error)) *MockLLMConfigStore_GetOptimization_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx, per, page, search
func (_m *MockLLMConfigStore) Index(ctx context.Context, per int, page int, search *types.SearchLLMConfig) ([]*database.LLMConfig, int, error) {
	ret := _m.Called(ctx, per, page, search)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []*database.LLMConfig
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *types.SearchLLMConfig) ([]*database.LLMConfig, int, error)); ok {
		return rf(ctx, per, page, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *types.SearchLLMConfig) []*database.LLMConfig); ok {
		r0 = rf(ctx, per, page, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.LLMConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *types.SearchLLMConfig) int); ok {
		r1 = rf(ctx, per, page, search)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, *types.SearchLLMConfig) error); ok {
		r2 = rf(ctx, per, page, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLLMConfigStore_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockLLMConfigStore_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
//   - per int
//   - page int
//   - search *types.SearchLLMConfig
func (_e *MockLLMConfigStore_Expecter) Index(ctx interface{}, per interface{}, page interface{}, search interface{}) *MockLLMConfigStore_Index_Call {
	return &MockLLMConfigStore_Index_Call{Call: _e.mock.On("Index", ctx, per, page, search)}
}

func (_c *MockLLMConfigStore_Index_Call) Run(run func(ctx context.Context, per int, page int, search *types.SearchLLMConfig)) *MockLLMConfigStore_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*types.SearchLLMConfig))
	})
	return _c
}

func (_c *MockLLMConfigStore_Index_Call) Return(_a0 []*database.LLMConfig, _a1 int, _a2 error) *MockLLMConfigStore_Index_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockLLMConfigStore_Index_Call) RunAndReturn(run func(context.Context, int, int, *types.SearchLLMConfig) ([]*database.LLMConfig, int, error)) *MockLLMConfigStore_Index_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, config
func (_m *MockLLMConfigStore) Update(ctx context.Context, config database.LLMConfig) (*database.LLMConfig, error) {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *database.LLMConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.LLMConfig) (*database.LLMConfig, error)); ok {
		return rf(ctx, config)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.LLMConfig) *database.LLMConfig); ok {
		r0 = rf(ctx, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.LLMConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.LLMConfig) error); ok {
		r1 = rf(ctx, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLLMConfigStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockLLMConfigStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - config database.LLMConfig
func (_e *MockLLMConfigStore_Expecter) Update(ctx interface{}, config interface{}) *MockLLMConfigStore_Update_Call {
	return &MockLLMConfigStore_Update_Call{Call: _e.mock.On("Update", ctx, config)}
}

func (_c *MockLLMConfigStore_Update_Call) Run(run func(ctx context.Context, config database.LLMConfig)) *MockLLMConfigStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.LLMConfig))
	})
	return _c
}

func (_c *MockLLMConfigStore_Update_Call) Return(_a0 *database.LLMConfig, _a1 error) *MockLLMConfigStore_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLLMConfigStore_Update_Call) RunAndReturn(run func(context.Context, database.LLMConfig) (*database.LLMConfig, error)) *MockLLMConfigStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLLMConfigStore creates a new instance of MockLLMConfigStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLLMConfigStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLLMConfigStore {
	mock := &MockLLMConfigStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

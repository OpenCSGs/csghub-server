// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"

	uuid "github.com/google/uuid"
)

// MockAccountStatementStore is an autogenerated mock type for the AccountStatementStore type
type MockAccountStatementStore struct {
	mock.Mock
}

type MockAccountStatementStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountStatementStore) EXPECT() *MockAccountStatementStore_Expecter {
	return &MockAccountStatementStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, input
func (_m *MockAccountStatementStore) Create(ctx context.Context, input database.AccountStatement) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.AccountStatement) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountStatementStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountStatementStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.AccountStatement
func (_e *MockAccountStatementStore_Expecter) Create(ctx interface{}, input interface{}) *MockAccountStatementStore_Create_Call {
	return &MockAccountStatementStore_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *MockAccountStatementStore_Create_Call) Run(run func(ctx context.Context, input database.AccountStatement)) *MockAccountStatementStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.AccountStatement))
	})
	return _c
}

func (_c *MockAccountStatementStore_Create_Call) Return(_a0 error) *MockAccountStatementStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountStatementStore_Create_Call) RunAndReturn(run func(context.Context, database.AccountStatement) error) *MockAccountStatementStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEventID provides a mock function with given fields: ctx, eventID
func (_m *MockAccountStatementStore) GetByEventID(ctx context.Context, eventID uuid.UUID) (database.AccountStatement, error) {
	ret := _m.Called(ctx, eventID)

	if len(ret) == 0 {
		panic("no return value specified for GetByEventID")
	}

	var r0 database.AccountStatement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (database.AccountStatement, error)); ok {
		return rf(ctx, eventID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) database.AccountStatement); ok {
		r0 = rf(ctx, eventID)
	} else {
		r0 = ret.Get(0).(database.AccountStatement)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStatementStore_GetByEventID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEventID'
type MockAccountStatementStore_GetByEventID_Call struct {
	*mock.Call
}

// GetByEventID is a helper method to define mock.On call
//   - ctx context.Context
//   - eventID uuid.UUID
func (_e *MockAccountStatementStore_Expecter) GetByEventID(ctx interface{}, eventID interface{}) *MockAccountStatementStore_GetByEventID_Call {
	return &MockAccountStatementStore_GetByEventID_Call{Call: _e.mock.On("GetByEventID", ctx, eventID)}
}

func (_c *MockAccountStatementStore_GetByEventID_Call) Run(run func(ctx context.Context, eventID uuid.UUID)) *MockAccountStatementStore_GetByEventID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockAccountStatementStore_GetByEventID_Call) Return(_a0 database.AccountStatement, _a1 error) *MockAccountStatementStore_GetByEventID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStatementStore_GetByEventID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (database.AccountStatement, error)) *MockAccountStatementStore_GetByEventID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUserIDAndTime provides a mock function with given fields: ctx, req
func (_m *MockAccountStatementStore) ListByUserIDAndTime(ctx context.Context, req types.ActStatementsReq) (database.AccountStatementRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListByUserIDAndTime")
	}

	var r0 database.AccountStatementRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ActStatementsReq) (database.AccountStatementRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ActStatementsReq) database.AccountStatementRes); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(database.AccountStatementRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ActStatementsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStatementStore_ListByUserIDAndTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUserIDAndTime'
type MockAccountStatementStore_ListByUserIDAndTime_Call struct {
	*mock.Call
}

// ListByUserIDAndTime is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ActStatementsReq
func (_e *MockAccountStatementStore_Expecter) ListByUserIDAndTime(ctx interface{}, req interface{}) *MockAccountStatementStore_ListByUserIDAndTime_Call {
	return &MockAccountStatementStore_ListByUserIDAndTime_Call{Call: _e.mock.On("ListByUserIDAndTime", ctx, req)}
}

func (_c *MockAccountStatementStore_ListByUserIDAndTime_Call) Run(run func(ctx context.Context, req types.ActStatementsReq)) *MockAccountStatementStore_ListByUserIDAndTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ActStatementsReq))
	})
	return _c
}

func (_c *MockAccountStatementStore_ListByUserIDAndTime_Call) Return(_a0 database.AccountStatementRes, _a1 error) *MockAccountStatementStore_ListByUserIDAndTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStatementStore_ListByUserIDAndTime_Call) RunAndReturn(run func(context.Context, types.ActStatementsReq) (database.AccountStatementRes, error)) *MockAccountStatementStore_ListByUserIDAndTime_Call {
	_c.Call.Return(run)
	return _c
}

// ListRechargeByUserIDAndTime provides a mock function with given fields: ctx, req
func (_m *MockAccountStatementStore) ListRechargeByUserIDAndTime(ctx context.Context, req types.AcctRechargeListReq) (database.AccountStatementRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListRechargeByUserIDAndTime")
	}

	var r0 database.AccountStatementRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctRechargeListReq) (database.AccountStatementRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctRechargeListReq) database.AccountStatementRes); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(database.AccountStatementRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AcctRechargeListReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountStatementStore_ListRechargeByUserIDAndTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRechargeByUserIDAndTime'
type MockAccountStatementStore_ListRechargeByUserIDAndTime_Call struct {
	*mock.Call
}

// ListRechargeByUserIDAndTime is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.AcctRechargeListReq
func (_e *MockAccountStatementStore_Expecter) ListRechargeByUserIDAndTime(ctx interface{}, req interface{}) *MockAccountStatementStore_ListRechargeByUserIDAndTime_Call {
	return &MockAccountStatementStore_ListRechargeByUserIDAndTime_Call{Call: _e.mock.On("ListRechargeByUserIDAndTime", ctx, req)}
}

func (_c *MockAccountStatementStore_ListRechargeByUserIDAndTime_Call) Run(run func(ctx context.Context, req types.AcctRechargeListReq)) *MockAccountStatementStore_ListRechargeByUserIDAndTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AcctRechargeListReq))
	})
	return _c
}

func (_c *MockAccountStatementStore_ListRechargeByUserIDAndTime_Call) Return(_a0 database.AccountStatementRes, _a1 error) *MockAccountStatementStore_ListRechargeByUserIDAndTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountStatementStore_ListRechargeByUserIDAndTime_Call) RunAndReturn(run func(context.Context, types.AcctRechargeListReq) (database.AccountStatementRes, error)) *MockAccountStatementStore_ListRechargeByUserIDAndTime_Call {
	_c.Call.Return(run)
	return _c
}

// ListStatementByUserAndSku provides a mock function with given fields: ctx, req
func (_m *MockAccountStatementStore) ListStatementByUserAndSku(ctx context.Context, req types.ActStatementsReq) ([]database.UserSkuStatement, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListStatementByUserAndSku")
	}

	var r0 []database.UserSkuStatement
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ActStatementsReq) ([]database.UserSkuStatement, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ActStatementsReq) []database.UserSkuStatement); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.UserSkuStatement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ActStatementsReq) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.ActStatementsReq) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAccountStatementStore_ListStatementByUserAndSku_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStatementByUserAndSku'
type MockAccountStatementStore_ListStatementByUserAndSku_Call struct {
	*mock.Call
}

// ListStatementByUserAndSku is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ActStatementsReq
func (_e *MockAccountStatementStore_Expecter) ListStatementByUserAndSku(ctx interface{}, req interface{}) *MockAccountStatementStore_ListStatementByUserAndSku_Call {
	return &MockAccountStatementStore_ListStatementByUserAndSku_Call{Call: _e.mock.On("ListStatementByUserAndSku", ctx, req)}
}

func (_c *MockAccountStatementStore_ListStatementByUserAndSku_Call) Run(run func(ctx context.Context, req types.ActStatementsReq)) *MockAccountStatementStore_ListStatementByUserAndSku_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ActStatementsReq))
	})
	return _c
}

func (_c *MockAccountStatementStore_ListStatementByUserAndSku_Call) Return(_a0 []database.UserSkuStatement, _a1 int, _a2 error) *MockAccountStatementStore_ListStatementByUserAndSku_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAccountStatementStore_ListStatementByUserAndSku_Call) RunAndReturn(run func(context.Context, types.ActStatementsReq) ([]database.UserSkuStatement, int, error)) *MockAccountStatementStore_ListStatementByUserAndSku_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountStatementStore creates a new instance of MockAccountStatementStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountStatementStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountStatementStore {
	mock := &MockAccountStatementStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

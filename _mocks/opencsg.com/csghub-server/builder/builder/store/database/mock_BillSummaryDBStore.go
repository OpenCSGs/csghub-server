// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockBillSummaryDBStore is an autogenerated mock type for the BillSummaryDBStore type
type MockBillSummaryDBStore struct {
	mock.Mock
}

type MockBillSummaryDBStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBillSummaryDBStore) EXPECT() *MockBillSummaryDBStore_Expecter {
	return &MockBillSummaryDBStore_Expecter{mock: &_m.Mock}
}

// CreateOrGetBillSummary provides a mock function with given fields: ctx, summary
func (_m *MockBillSummaryDBStore) CreateOrGetBillSummary(ctx context.Context, summary *database.BillSummaryDB) (*database.BillSummaryDB, error) {
	ret := _m.Called(ctx, summary)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrGetBillSummary")
	}

	var r0 *database.BillSummaryDB
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.BillSummaryDB) (*database.BillSummaryDB, error)); ok {
		return rf(ctx, summary)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *database.BillSummaryDB) *database.BillSummaryDB); ok {
		r0 = rf(ctx, summary)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.BillSummaryDB)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *database.BillSummaryDB) error); ok {
		r1 = rf(ctx, summary)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBillSummaryDBStore_CreateOrGetBillSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrGetBillSummary'
type MockBillSummaryDBStore_CreateOrGetBillSummary_Call struct {
	*mock.Call
}

// CreateOrGetBillSummary is a helper method to define mock.On call
//   - ctx context.Context
//   - summary *database.BillSummaryDB
func (_e *MockBillSummaryDBStore_Expecter) CreateOrGetBillSummary(ctx interface{}, summary interface{}) *MockBillSummaryDBStore_CreateOrGetBillSummary_Call {
	return &MockBillSummaryDBStore_CreateOrGetBillSummary_Call{Call: _e.mock.On("CreateOrGetBillSummary", ctx, summary)}
}

func (_c *MockBillSummaryDBStore_CreateOrGetBillSummary_Call) Run(run func(ctx context.Context, summary *database.BillSummaryDB)) *MockBillSummaryDBStore_CreateOrGetBillSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.BillSummaryDB))
	})
	return _c
}

func (_c *MockBillSummaryDBStore_CreateOrGetBillSummary_Call) Return(_a0 *database.BillSummaryDB, _a1 error) *MockBillSummaryDBStore_CreateOrGetBillSummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBillSummaryDBStore_CreateOrGetBillSummary_Call) RunAndReturn(run func(context.Context, *database.BillSummaryDB) (*database.BillSummaryDB, error)) *MockBillSummaryDBStore_CreateOrGetBillSummary_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBillSummaryDBStore creates a new instance of MockBillSummaryDBStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBillSummaryDBStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBillSummaryDBStore {
	mock := &MockBillSummaryDBStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

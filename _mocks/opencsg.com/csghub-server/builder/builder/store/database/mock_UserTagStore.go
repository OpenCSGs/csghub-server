// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockUserTagStore is an autogenerated mock type for the UserTagStore type
type MockUserTagStore struct {
	mock.Mock
}

type MockUserTagStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserTagStore) EXPECT() *MockUserTagStore_Expecter {
	return &MockUserTagStore_Expecter{mock: &_m.Mock}
}

// GetUserTags provides a mock function with given fields: ctx, userId
func (_m *MockUserTagStore) GetUserTags(ctx context.Context, userId int64) ([]*database.Tag, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserTags")
	}

	var r0 []*database.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*database.Tag, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*database.Tag); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserTagStore_GetUserTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserTags'
type MockUserTagStore_GetUserTags_Call struct {
	*mock.Call
}

// GetUserTags is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
func (_e *MockUserTagStore_Expecter) GetUserTags(ctx interface{}, userId interface{}) *MockUserTagStore_GetUserTags_Call {
	return &MockUserTagStore_GetUserTags_Call{Call: _e.mock.On("GetUserTags", ctx, userId)}
}

func (_c *MockUserTagStore_GetUserTags_Call) Run(run func(ctx context.Context, userId int64)) *MockUserTagStore_GetUserTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockUserTagStore_GetUserTags_Call) Return(_a0 []*database.Tag, _a1 error) *MockUserTagStore_GetUserTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserTagStore_GetUserTags_Call) RunAndReturn(run func(context.Context, int64) ([]*database.Tag, error)) *MockUserTagStore_GetUserTags_Call {
	_c.Call.Return(run)
	return _c
}

// ResetUserTags provides a mock function with given fields: ctx, userId, tagIDs
func (_m *MockUserTagStore) ResetUserTags(ctx context.Context, userId int64, tagIDs []int64) error {
	ret := _m.Called(ctx, userId, tagIDs)

	if len(ret) == 0 {
		panic("no return value specified for ResetUserTags")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int64) error); ok {
		r0 = rf(ctx, userId, tagIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserTagStore_ResetUserTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetUserTags'
type MockUserTagStore_ResetUserTags_Call struct {
	*mock.Call
}

// ResetUserTags is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - tagIDs []int64
func (_e *MockUserTagStore_Expecter) ResetUserTags(ctx interface{}, userId interface{}, tagIDs interface{}) *MockUserTagStore_ResetUserTags_Call {
	return &MockUserTagStore_ResetUserTags_Call{Call: _e.mock.On("ResetUserTags", ctx, userId, tagIDs)}
}

func (_c *MockUserTagStore_ResetUserTags_Call) Run(run func(ctx context.Context, userId int64, tagIDs []int64)) *MockUserTagStore_ResetUserTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]int64))
	})
	return _c
}

func (_c *MockUserTagStore_ResetUserTags_Call) Return(_a0 error) *MockUserTagStore_ResetUserTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserTagStore_ResetUserTags_Call) RunAndReturn(run func(context.Context, int64, []int64) error) *MockUserTagStore_ResetUserTags_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserTagStore creates a new instance of MockUserTagStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserTagStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserTagStore {
	mock := &MockUserTagStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockLfsLockStore is an autogenerated mock type for the LfsLockStore type
type MockLfsLockStore struct {
	mock.Mock
}

type MockLfsLockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLfsLockStore) EXPECT() *MockLfsLockStore_Expecter {
	return &MockLfsLockStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, lfsLock
func (_m *MockLfsLockStore) Create(ctx context.Context, lfsLock database.LfsLock) (*database.LfsLock, error) {
	ret := _m.Called(ctx, lfsLock)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.LfsLock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.LfsLock) (*database.LfsLock, error)); ok {
		return rf(ctx, lfsLock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.LfsLock) *database.LfsLock); ok {
		r0 = rf(ctx, lfsLock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.LfsLock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.LfsLock) error); ok {
		r1 = rf(ctx, lfsLock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLfsLockStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLfsLockStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - lfsLock database.LfsLock
func (_e *MockLfsLockStore_Expecter) Create(ctx interface{}, lfsLock interface{}) *MockLfsLockStore_Create_Call {
	return &MockLfsLockStore_Create_Call{Call: _e.mock.On("Create", ctx, lfsLock)}
}

func (_c *MockLfsLockStore_Create_Call) Run(run func(ctx context.Context, lfsLock database.LfsLock)) *MockLfsLockStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.LfsLock))
	})
	return _c
}

func (_c *MockLfsLockStore_Create_Call) Return(_a0 *database.LfsLock, _a1 error) *MockLfsLockStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLfsLockStore_Create_Call) RunAndReturn(run func(context.Context, database.LfsLock) (*database.LfsLock, error)) *MockLfsLockStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *MockLfsLockStore) FindByID(ctx context.Context, ID int64) (*database.LfsLock, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *database.LfsLock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.LfsLock, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.LfsLock); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.LfsLock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLfsLockStore_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockLfsLockStore_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID int64
func (_e *MockLfsLockStore_Expecter) FindByID(ctx interface{}, ID interface{}) *MockLfsLockStore_FindByID_Call {
	return &MockLfsLockStore_FindByID_Call{Call: _e.mock.On("FindByID", ctx, ID)}
}

func (_c *MockLfsLockStore_FindByID_Call) Run(run func(ctx context.Context, ID int64)) *MockLfsLockStore_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLfsLockStore_FindByID_Call) Return(_a0 *database.LfsLock, _a1 error) *MockLfsLockStore_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLfsLockStore_FindByID_Call) RunAndReturn(run func(context.Context, int64) (*database.LfsLock, error)) *MockLfsLockStore_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByPath provides a mock function with given fields: ctx, RepoId, path
func (_m *MockLfsLockStore) FindByPath(ctx context.Context, RepoId int64, path string) (*database.LfsLock, error) {
	ret := _m.Called(ctx, RepoId, path)

	if len(ret) == 0 {
		panic("no return value specified for FindByPath")
	}

	var r0 *database.LfsLock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*database.LfsLock, error)); ok {
		return rf(ctx, RepoId, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *database.LfsLock); ok {
		r0 = rf(ctx, RepoId, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.LfsLock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, RepoId, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLfsLockStore_FindByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByPath'
type MockLfsLockStore_FindByPath_Call struct {
	*mock.Call
}

// FindByPath is a helper method to define mock.On call
//   - ctx context.Context
//   - RepoId int64
//   - path string
func (_e *MockLfsLockStore_Expecter) FindByPath(ctx interface{}, RepoId interface{}, path interface{}) *MockLfsLockStore_FindByPath_Call {
	return &MockLfsLockStore_FindByPath_Call{Call: _e.mock.On("FindByPath", ctx, RepoId, path)}
}

func (_c *MockLfsLockStore_FindByPath_Call) Run(run func(ctx context.Context, RepoId int64, path string)) *MockLfsLockStore_FindByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockLfsLockStore_FindByPath_Call) Return(_a0 *database.LfsLock, _a1 error) *MockLfsLockStore_FindByPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLfsLockStore_FindByPath_Call) RunAndReturn(run func(context.Context, int64, string) (*database.LfsLock, error)) *MockLfsLockStore_FindByPath_Call {
	_c.Call.Return(run)
	return _c
}

// FindByRepoID provides a mock function with given fields: ctx, RepoId, page, per
func (_m *MockLfsLockStore) FindByRepoID(ctx context.Context, RepoId int64, page int, per int) ([]database.LfsLock, error) {
	ret := _m.Called(ctx, RepoId, page, per)

	if len(ret) == 0 {
		panic("no return value specified for FindByRepoID")
	}

	var r0 []database.LfsLock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int) ([]database.LfsLock, error)); ok {
		return rf(ctx, RepoId, page, per)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int) []database.LfsLock); ok {
		r0 = rf(ctx, RepoId, page, per)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.LfsLock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int, int) error); ok {
		r1 = rf(ctx, RepoId, page, per)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLfsLockStore_FindByRepoID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByRepoID'
type MockLfsLockStore_FindByRepoID_Call struct {
	*mock.Call
}

// FindByRepoID is a helper method to define mock.On call
//   - ctx context.Context
//   - RepoId int64
//   - page int
//   - per int
func (_e *MockLfsLockStore_Expecter) FindByRepoID(ctx interface{}, RepoId interface{}, page interface{}, per interface{}) *MockLfsLockStore_FindByRepoID_Call {
	return &MockLfsLockStore_FindByRepoID_Call{Call: _e.mock.On("FindByRepoID", ctx, RepoId, page, per)}
}

func (_c *MockLfsLockStore_FindByRepoID_Call) Run(run func(ctx context.Context, RepoId int64, page int, per int)) *MockLfsLockStore_FindByRepoID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockLfsLockStore_FindByRepoID_Call) Return(_a0 []database.LfsLock, _a1 error) *MockLfsLockStore_FindByRepoID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLfsLockStore_FindByRepoID_Call) RunAndReturn(run func(context.Context, int64, int, int) ([]database.LfsLock, error)) *MockLfsLockStore_FindByRepoID_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveByID provides a mock function with given fields: ctx, ID
func (_m *MockLfsLockStore) RemoveByID(ctx context.Context, ID int64) error {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLfsLockStore_RemoveByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveByID'
type MockLfsLockStore_RemoveByID_Call struct {
	*mock.Call
}

// RemoveByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID int64
func (_e *MockLfsLockStore_Expecter) RemoveByID(ctx interface{}, ID interface{}) *MockLfsLockStore_RemoveByID_Call {
	return &MockLfsLockStore_RemoveByID_Call{Call: _e.mock.On("RemoveByID", ctx, ID)}
}

func (_c *MockLfsLockStore_RemoveByID_Call) Run(run func(ctx context.Context, ID int64)) *MockLfsLockStore_RemoveByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLfsLockStore_RemoveByID_Call) Return(_a0 error) *MockLfsLockStore_RemoveByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLfsLockStore_RemoveByID_Call) RunAndReturn(run func(context.Context, int64) error) *MockLfsLockStore_RemoveByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLfsLockStore creates a new instance of MockLfsLockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLfsLockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLfsLockStore {
	mock := &MockLfsLockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockAccountRechargeStore is an autogenerated mock type for the AccountRechargeStore type
type MockAccountRechargeStore struct {
	mock.Mock
}

type MockAccountRechargeStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountRechargeStore) EXPECT() *MockAccountRechargeStore_Expecter {
	return &MockAccountRechargeStore_Expecter{mock: &_m.Mock}
}

// CountRecharges provides a mock function with given fields: ctx, userUUID, filter
func (_m *MockAccountRechargeStore) CountRecharges(ctx context.Context, userUUID string, filter database.RechargeFilter) (*types.RechargeStats, error) {
	ret := _m.Called(ctx, userUUID, filter)

	if len(ret) == 0 {
		panic("no return value specified for CountRecharges")
	}

	var r0 *types.RechargeStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, database.RechargeFilter) (*types.RechargeStats, error)); ok {
		return rf(ctx, userUUID, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, database.RechargeFilter) *types.RechargeStats); ok {
		r0 = rf(ctx, userUUID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.RechargeStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, database.RechargeFilter) error); ok {
		r1 = rf(ctx, userUUID, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountRechargeStore_CountRecharges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountRecharges'
type MockAccountRechargeStore_CountRecharges_Call struct {
	*mock.Call
}

// CountRecharges is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
//   - filter database.RechargeFilter
func (_e *MockAccountRechargeStore_Expecter) CountRecharges(ctx interface{}, userUUID interface{}, filter interface{}) *MockAccountRechargeStore_CountRecharges_Call {
	return &MockAccountRechargeStore_CountRecharges_Call{Call: _e.mock.On("CountRecharges", ctx, userUUID, filter)}
}

func (_c *MockAccountRechargeStore_CountRecharges_Call) Run(run func(ctx context.Context, userUUID string, filter database.RechargeFilter)) *MockAccountRechargeStore_CountRecharges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(database.RechargeFilter))
	})
	return _c
}

func (_c *MockAccountRechargeStore_CountRecharges_Call) Return(_a0 *types.RechargeStats, _a1 error) *MockAccountRechargeStore_CountRecharges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountRechargeStore_CountRecharges_Call) RunAndReturn(run func(context.Context, string, database.RechargeFilter) (*types.RechargeStats, error)) *MockAccountRechargeStore_CountRecharges_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRecharge provides a mock function with given fields: ctx, recharge
func (_m *MockAccountRechargeStore) CreateRecharge(ctx context.Context, recharge *database.AccountRecharge) error {
	ret := _m.Called(ctx, recharge)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecharge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.AccountRecharge) error); ok {
		r0 = rf(ctx, recharge)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountRechargeStore_CreateRecharge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRecharge'
type MockAccountRechargeStore_CreateRecharge_Call struct {
	*mock.Call
}

// CreateRecharge is a helper method to define mock.On call
//   - ctx context.Context
//   - recharge *database.AccountRecharge
func (_e *MockAccountRechargeStore_Expecter) CreateRecharge(ctx interface{}, recharge interface{}) *MockAccountRechargeStore_CreateRecharge_Call {
	return &MockAccountRechargeStore_CreateRecharge_Call{Call: _e.mock.On("CreateRecharge", ctx, recharge)}
}

func (_c *MockAccountRechargeStore_CreateRecharge_Call) Run(run func(ctx context.Context, recharge *database.AccountRecharge)) *MockAccountRechargeStore_CreateRecharge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.AccountRecharge))
	})
	return _c
}

func (_c *MockAccountRechargeStore_CreateRecharge_Call) Return(_a0 error) *MockAccountRechargeStore_CreateRecharge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountRechargeStore_CreateRecharge_Call) RunAndReturn(run func(context.Context, *database.AccountRecharge) error) *MockAccountRechargeStore_CreateRecharge_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecharge provides a mock function with given fields: ctx, rechargeUUID
func (_m *MockAccountRechargeStore) GetRecharge(ctx context.Context, rechargeUUID string) (*database.AccountRecharge, error) {
	ret := _m.Called(ctx, rechargeUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetRecharge")
	}

	var r0 *database.AccountRecharge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.AccountRecharge, error)); ok {
		return rf(ctx, rechargeUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.AccountRecharge); ok {
		r0 = rf(ctx, rechargeUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountRecharge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, rechargeUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountRechargeStore_GetRecharge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecharge'
type MockAccountRechargeStore_GetRecharge_Call struct {
	*mock.Call
}

// GetRecharge is a helper method to define mock.On call
//   - ctx context.Context
//   - rechargeUUID string
func (_e *MockAccountRechargeStore_Expecter) GetRecharge(ctx interface{}, rechargeUUID interface{}) *MockAccountRechargeStore_GetRecharge_Call {
	return &MockAccountRechargeStore_GetRecharge_Call{Call: _e.mock.On("GetRecharge", ctx, rechargeUUID)}
}

func (_c *MockAccountRechargeStore_GetRecharge_Call) Run(run func(ctx context.Context, rechargeUUID string)) *MockAccountRechargeStore_GetRecharge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountRechargeStore_GetRecharge_Call) Return(_a0 *database.AccountRecharge, _a1 error) *MockAccountRechargeStore_GetRecharge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountRechargeStore_GetRecharge_Call) RunAndReturn(run func(context.Context, string) (*database.AccountRecharge, error)) *MockAccountRechargeStore_GetRecharge_Call {
	_c.Call.Return(run)
	return _c
}

// GetRechargeByOrderNo provides a mock function with given fields: ctx, orderNo
func (_m *MockAccountRechargeStore) GetRechargeByOrderNo(ctx context.Context, orderNo string) (*database.AccountRecharge, error) {
	ret := _m.Called(ctx, orderNo)

	if len(ret) == 0 {
		panic("no return value specified for GetRechargeByOrderNo")
	}

	var r0 *database.AccountRecharge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.AccountRecharge, error)); ok {
		return rf(ctx, orderNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.AccountRecharge); ok {
		r0 = rf(ctx, orderNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountRecharge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountRechargeStore_GetRechargeByOrderNo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRechargeByOrderNo'
type MockAccountRechargeStore_GetRechargeByOrderNo_Call struct {
	*mock.Call
}

// GetRechargeByOrderNo is a helper method to define mock.On call
//   - ctx context.Context
//   - orderNo string
func (_e *MockAccountRechargeStore_Expecter) GetRechargeByOrderNo(ctx interface{}, orderNo interface{}) *MockAccountRechargeStore_GetRechargeByOrderNo_Call {
	return &MockAccountRechargeStore_GetRechargeByOrderNo_Call{Call: _e.mock.On("GetRechargeByOrderNo", ctx, orderNo)}
}

func (_c *MockAccountRechargeStore_GetRechargeByOrderNo_Call) Run(run func(ctx context.Context, orderNo string)) *MockAccountRechargeStore_GetRechargeByOrderNo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountRechargeStore_GetRechargeByOrderNo_Call) Return(_a0 *database.AccountRecharge, _a1 error) *MockAccountRechargeStore_GetRechargeByOrderNo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountRechargeStore_GetRechargeByOrderNo_Call) RunAndReturn(run func(context.Context, string) (*database.AccountRecharge, error)) *MockAccountRechargeStore_GetRechargeByOrderNo_Call {
	_c.Call.Return(run)
	return _c
}

// ListRechargeByUserUUID provides a mock function with given fields: ctx, userUUID, limit, offset
func (_m *MockAccountRechargeStore) ListRechargeByUserUUID(ctx context.Context, userUUID string, limit int, offset int) ([]*database.AccountRecharge, error) {
	ret := _m.Called(ctx, userUUID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListRechargeByUserUUID")
	}

	var r0 []*database.AccountRecharge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*database.AccountRecharge, error)); ok {
		return rf(ctx, userUUID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*database.AccountRecharge); ok {
		r0 = rf(ctx, userUUID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.AccountRecharge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, userUUID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountRechargeStore_ListRechargeByUserUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRechargeByUserUUID'
type MockAccountRechargeStore_ListRechargeByUserUUID_Call struct {
	*mock.Call
}

// ListRechargeByUserUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
//   - limit int
//   - offset int
func (_e *MockAccountRechargeStore_Expecter) ListRechargeByUserUUID(ctx interface{}, userUUID interface{}, limit interface{}, offset interface{}) *MockAccountRechargeStore_ListRechargeByUserUUID_Call {
	return &MockAccountRechargeStore_ListRechargeByUserUUID_Call{Call: _e.mock.On("ListRechargeByUserUUID", ctx, userUUID, limit, offset)}
}

func (_c *MockAccountRechargeStore_ListRechargeByUserUUID_Call) Run(run func(ctx context.Context, userUUID string, limit int, offset int)) *MockAccountRechargeStore_ListRechargeByUserUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockAccountRechargeStore_ListRechargeByUserUUID_Call) Return(_a0 []*database.AccountRecharge, _a1 error) *MockAccountRechargeStore_ListRechargeByUserUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountRechargeStore_ListRechargeByUserUUID_Call) RunAndReturn(run func(context.Context, string, int, int) ([]*database.AccountRecharge, error)) *MockAccountRechargeStore_ListRechargeByUserUUID_Call {
	_c.Call.Return(run)
	return _c
}

// ListRecharges provides a mock function with given fields: ctx, userUUID, filter
func (_m *MockAccountRechargeStore) ListRecharges(ctx context.Context, userUUID string, filter database.RechargeFilter) ([]*database.AccountRecharge, error) {
	ret := _m.Called(ctx, userUUID, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListRecharges")
	}

	var r0 []*database.AccountRecharge
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, database.RechargeFilter) ([]*database.AccountRecharge, error)); ok {
		return rf(ctx, userUUID, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, database.RechargeFilter) []*database.AccountRecharge); ok {
		r0 = rf(ctx, userUUID, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.AccountRecharge)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, database.RechargeFilter) error); ok {
		r1 = rf(ctx, userUUID, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountRechargeStore_ListRecharges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRecharges'
type MockAccountRechargeStore_ListRecharges_Call struct {
	*mock.Call
}

// ListRecharges is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
//   - filter database.RechargeFilter
func (_e *MockAccountRechargeStore_Expecter) ListRecharges(ctx interface{}, userUUID interface{}, filter interface{}) *MockAccountRechargeStore_ListRecharges_Call {
	return &MockAccountRechargeStore_ListRecharges_Call{Call: _e.mock.On("ListRecharges", ctx, userUUID, filter)}
}

func (_c *MockAccountRechargeStore_ListRecharges_Call) Run(run func(ctx context.Context, userUUID string, filter database.RechargeFilter)) *MockAccountRechargeStore_ListRecharges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(database.RechargeFilter))
	})
	return _c
}

func (_c *MockAccountRechargeStore_ListRecharges_Call) Return(_a0 []*database.AccountRecharge, _a1 error) *MockAccountRechargeStore_ListRecharges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountRechargeStore_ListRecharges_Call) RunAndReturn(run func(context.Context, string, database.RechargeFilter) ([]*database.AccountRecharge, error)) *MockAccountRechargeStore_ListRecharges_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRecharge provides a mock function with given fields: ctx, recharge
func (_m *MockAccountRechargeStore) UpdateRecharge(ctx context.Context, recharge *database.AccountRecharge) error {
	ret := _m.Called(ctx, recharge)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRecharge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.AccountRecharge) error); ok {
		r0 = rf(ctx, recharge)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountRechargeStore_UpdateRecharge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRecharge'
type MockAccountRechargeStore_UpdateRecharge_Call struct {
	*mock.Call
}

// UpdateRecharge is a helper method to define mock.On call
//   - ctx context.Context
//   - recharge *database.AccountRecharge
func (_e *MockAccountRechargeStore_Expecter) UpdateRecharge(ctx interface{}, recharge interface{}) *MockAccountRechargeStore_UpdateRecharge_Call {
	return &MockAccountRechargeStore_UpdateRecharge_Call{Call: _e.mock.On("UpdateRecharge", ctx, recharge)}
}

func (_c *MockAccountRechargeStore_UpdateRecharge_Call) Run(run func(ctx context.Context, recharge *database.AccountRecharge)) *MockAccountRechargeStore_UpdateRecharge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.AccountRecharge))
	})
	return _c
}

func (_c *MockAccountRechargeStore_UpdateRecharge_Call) Return(_a0 error) *MockAccountRechargeStore_UpdateRecharge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountRechargeStore_UpdateRecharge_Call) RunAndReturn(run func(context.Context, *database.AccountRecharge) error) *MockAccountRechargeStore_UpdateRecharge_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountRechargeStore creates a new instance of MockAccountRechargeStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountRechargeStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountRechargeStore {
	mock := &MockAccountRechargeStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

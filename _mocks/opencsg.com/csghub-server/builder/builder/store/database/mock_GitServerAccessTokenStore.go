// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockGitServerAccessTokenStore is an autogenerated mock type for the GitServerAccessTokenStore type
type MockGitServerAccessTokenStore struct {
	mock.Mock
}

type MockGitServerAccessTokenStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGitServerAccessTokenStore) EXPECT() *MockGitServerAccessTokenStore_Expecter {
	return &MockGitServerAccessTokenStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, gToken
func (_m *MockGitServerAccessTokenStore) Create(ctx context.Context, gToken *database.GitServerAccessToken) (*database.GitServerAccessToken, error) {
	ret := _m.Called(ctx, gToken)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.GitServerAccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.GitServerAccessToken) (*database.GitServerAccessToken, error)); ok {
		return rf(ctx, gToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *database.GitServerAccessToken) *database.GitServerAccessToken); ok {
		r0 = rf(ctx, gToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.GitServerAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *database.GitServerAccessToken) error); ok {
		r1 = rf(ctx, gToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitServerAccessTokenStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockGitServerAccessTokenStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - gToken *database.GitServerAccessToken
func (_e *MockGitServerAccessTokenStore_Expecter) Create(ctx interface{}, gToken interface{}) *MockGitServerAccessTokenStore_Create_Call {
	return &MockGitServerAccessTokenStore_Create_Call{Call: _e.mock.On("Create", ctx, gToken)}
}

func (_c *MockGitServerAccessTokenStore_Create_Call) Run(run func(ctx context.Context, gToken *database.GitServerAccessToken)) *MockGitServerAccessTokenStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.GitServerAccessToken))
	})
	return _c
}

func (_c *MockGitServerAccessTokenStore_Create_Call) Return(_a0 *database.GitServerAccessToken, _a1 error) *MockGitServerAccessTokenStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitServerAccessTokenStore_Create_Call) RunAndReturn(run func(context.Context, *database.GitServerAccessToken) (*database.GitServerAccessToken, error)) *MockGitServerAccessTokenStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByType provides a mock function with given fields: ctx, serverType
func (_m *MockGitServerAccessTokenStore) FindByType(ctx context.Context, serverType string) ([]database.GitServerAccessToken, error) {
	ret := _m.Called(ctx, serverType)

	if len(ret) == 0 {
		panic("no return value specified for FindByType")
	}

	var r0 []database.GitServerAccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]database.GitServerAccessToken, error)); ok {
		return rf(ctx, serverType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []database.GitServerAccessToken); ok {
		r0 = rf(ctx, serverType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GitServerAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serverType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitServerAccessTokenStore_FindByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByType'
type MockGitServerAccessTokenStore_FindByType_Call struct {
	*mock.Call
}

// FindByType is a helper method to define mock.On call
//   - ctx context.Context
//   - serverType string
func (_e *MockGitServerAccessTokenStore_Expecter) FindByType(ctx interface{}, serverType interface{}) *MockGitServerAccessTokenStore_FindByType_Call {
	return &MockGitServerAccessTokenStore_FindByType_Call{Call: _e.mock.On("FindByType", ctx, serverType)}
}

func (_c *MockGitServerAccessTokenStore_FindByType_Call) Run(run func(ctx context.Context, serverType string)) *MockGitServerAccessTokenStore_FindByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGitServerAccessTokenStore_FindByType_Call) Return(_a0 []database.GitServerAccessToken, _a1 error) *MockGitServerAccessTokenStore_FindByType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitServerAccessTokenStore_FindByType_Call) RunAndReturn(run func(context.Context, string) ([]database.GitServerAccessToken, error)) *MockGitServerAccessTokenStore_FindByType_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx
func (_m *MockGitServerAccessTokenStore) Index(ctx context.Context) ([]database.GitServerAccessToken, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []database.GitServerAccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.GitServerAccessToken, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.GitServerAccessToken); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.GitServerAccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGitServerAccessTokenStore_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockGitServerAccessTokenStore_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGitServerAccessTokenStore_Expecter) Index(ctx interface{}) *MockGitServerAccessTokenStore_Index_Call {
	return &MockGitServerAccessTokenStore_Index_Call{Call: _e.mock.On("Index", ctx)}
}

func (_c *MockGitServerAccessTokenStore_Index_Call) Run(run func(ctx context.Context)) *MockGitServerAccessTokenStore_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGitServerAccessTokenStore_Index_Call) Return(_a0 []database.GitServerAccessToken, _a1 error) *MockGitServerAccessTokenStore_Index_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGitServerAccessTokenStore_Index_Call) RunAndReturn(run func(context.Context) ([]database.GitServerAccessToken, error)) *MockGitServerAccessTokenStore_Index_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGitServerAccessTokenStore creates a new instance of MockGitServerAccessTokenStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGitServerAccessTokenStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGitServerAccessTokenStore {
	mock := &MockGitServerAccessTokenStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

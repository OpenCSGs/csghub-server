// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockStatSnapStore is an autogenerated mock type for the StatSnapStore type
type MockStatSnapStore struct {
	mock.Mock
}

type MockStatSnapStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStatSnapStore) EXPECT() *MockStatSnapStore_Expecter {
	return &MockStatSnapStore_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, snapshot
func (_m *MockStatSnapStore) Add(ctx context.Context, snapshot *database.StatSnapshot) error {
	ret := _m.Called(ctx, snapshot)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.StatSnapshot) error); ok {
		r0 = rf(ctx, snapshot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStatSnapStore_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockStatSnapStore_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - snapshot *database.StatSnapshot
func (_e *MockStatSnapStore_Expecter) Add(ctx interface{}, snapshot interface{}) *MockStatSnapStore_Add_Call {
	return &MockStatSnapStore_Add_Call{Call: _e.mock.On("Add", ctx, snapshot)}
}

func (_c *MockStatSnapStore_Add_Call) Run(run func(ctx context.Context, snapshot *database.StatSnapshot)) *MockStatSnapStore_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.StatSnapshot))
	})
	return _c
}

func (_c *MockStatSnapStore_Add_Call) Return(_a0 error) *MockStatSnapStore_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStatSnapStore_Add_Call) RunAndReturn(run func(context.Context, *database.StatSnapshot) error) *MockStatSnapStore_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, req
func (_m *MockStatSnapStore) Get(ctx context.Context, req types.StatSnapshotReq) (database.StatSnapshot, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 database.StatSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.StatSnapshotReq) (database.StatSnapshot, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.StatSnapshotReq) database.StatSnapshot); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(database.StatSnapshot)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.StatSnapshotReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStatSnapStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStatSnapStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.StatSnapshotReq
func (_e *MockStatSnapStore_Expecter) Get(ctx interface{}, req interface{}) *MockStatSnapStore_Get_Call {
	return &MockStatSnapStore_Get_Call{Call: _e.mock.On("Get", ctx, req)}
}

func (_c *MockStatSnapStore_Get_Call) Run(run func(ctx context.Context, req types.StatSnapshotReq)) *MockStatSnapStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.StatSnapshotReq))
	})
	return _c
}

func (_c *MockStatSnapStore_Get_Call) Return(_a0 database.StatSnapshot, _a1 error) *MockStatSnapStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStatSnapStore_Get_Call) RunAndReturn(run func(context.Context, types.StatSnapshotReq) (database.StatSnapshot, error)) *MockStatSnapStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// QueryCumulativeCountByTime provides a mock function with given fields: ctx, table, timeField, granularity, periodCount
func (_m *MockStatSnapStore) QueryCumulativeCountByTime(ctx context.Context, table string, timeField string, granularity database.TimeGranularity, periodCount int) ([]database.TimeSeriesPoint, error) {
	ret := _m.Called(ctx, table, timeField, granularity, periodCount)

	if len(ret) == 0 {
		panic("no return value specified for QueryCumulativeCountByTime")
	}

	var r0 []database.TimeSeriesPoint
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, database.TimeGranularity, int) ([]database.TimeSeriesPoint, error)); ok {
		return rf(ctx, table, timeField, granularity, periodCount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, database.TimeGranularity, int) []database.TimeSeriesPoint); ok {
		r0 = rf(ctx, table, timeField, granularity, periodCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.TimeSeriesPoint)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, database.TimeGranularity, int) error); ok {
		r1 = rf(ctx, table, timeField, granularity, periodCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStatSnapStore_QueryCumulativeCountByTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryCumulativeCountByTime'
type MockStatSnapStore_QueryCumulativeCountByTime_Call struct {
	*mock.Call
}

// QueryCumulativeCountByTime is a helper method to define mock.On call
//   - ctx context.Context
//   - table string
//   - timeField string
//   - granularity database.TimeGranularity
//   - periodCount int
func (_e *MockStatSnapStore_Expecter) QueryCumulativeCountByTime(ctx interface{}, table interface{}, timeField interface{}, granularity interface{}, periodCount interface{}) *MockStatSnapStore_QueryCumulativeCountByTime_Call {
	return &MockStatSnapStore_QueryCumulativeCountByTime_Call{Call: _e.mock.On("QueryCumulativeCountByTime", ctx, table, timeField, granularity, periodCount)}
}

func (_c *MockStatSnapStore_QueryCumulativeCountByTime_Call) Run(run func(ctx context.Context, table string, timeField string, granularity database.TimeGranularity, periodCount int)) *MockStatSnapStore_QueryCumulativeCountByTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(database.TimeGranularity), args[4].(int))
	})
	return _c
}

func (_c *MockStatSnapStore_QueryCumulativeCountByTime_Call) Return(_a0 []database.TimeSeriesPoint, _a1 error) *MockStatSnapStore_QueryCumulativeCountByTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStatSnapStore_QueryCumulativeCountByTime_Call) RunAndReturn(run func(context.Context, string, string, database.TimeGranularity, int) ([]database.TimeSeriesPoint, error)) *MockStatSnapStore_QueryCumulativeCountByTime_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStatSnapStore creates a new instance of MockStatSnapStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStatSnapStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStatSnapStore {
	mock := &MockStatSnapStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

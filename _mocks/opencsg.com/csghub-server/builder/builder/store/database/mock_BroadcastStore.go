// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockBroadcastStore is an autogenerated mock type for the BroadcastStore type
type MockBroadcastStore struct {
	mock.Mock
}

type MockBroadcastStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBroadcastStore) EXPECT() *MockBroadcastStore_Expecter {
	return &MockBroadcastStore_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function with given fields: ctx
func (_m *MockBroadcastStore) FindAll(ctx context.Context) ([]database.Broadcast, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []database.Broadcast
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.Broadcast, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.Broadcast); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Broadcast)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBroadcastStore_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockBroadcastStore_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBroadcastStore_Expecter) FindAll(ctx interface{}) *MockBroadcastStore_FindAll_Call {
	return &MockBroadcastStore_FindAll_Call{Call: _e.mock.On("FindAll", ctx)}
}

func (_c *MockBroadcastStore_FindAll_Call) Run(run func(ctx context.Context)) *MockBroadcastStore_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBroadcastStore_FindAll_Call) Return(_a0 []database.Broadcast, _a1 error) *MockBroadcastStore_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBroadcastStore_FindAll_Call) RunAndReturn(run func(context.Context) ([]database.Broadcast, error)) *MockBroadcastStore_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockBroadcastStore) Get(ctx context.Context, id int64) (*database.Broadcast, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *database.Broadcast
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.Broadcast, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.Broadcast); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Broadcast)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBroadcastStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBroadcastStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockBroadcastStore_Expecter) Get(ctx interface{}, id interface{}) *MockBroadcastStore_Get_Call {
	return &MockBroadcastStore_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockBroadcastStore_Get_Call) Run(run func(ctx context.Context, id int64)) *MockBroadcastStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockBroadcastStore_Get_Call) Return(_a0 *database.Broadcast, _a1 error) *MockBroadcastStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBroadcastStore_Get_Call) RunAndReturn(run func(context.Context, int64) (*database.Broadcast, error)) *MockBroadcastStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, broadcast
func (_m *MockBroadcastStore) Save(ctx context.Context, broadcast database.Broadcast) error {
	ret := _m.Called(ctx, broadcast)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Broadcast) error); ok {
		r0 = rf(ctx, broadcast)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBroadcastStore_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockBroadcastStore_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - broadcast database.Broadcast
func (_e *MockBroadcastStore_Expecter) Save(ctx interface{}, broadcast interface{}) *MockBroadcastStore_Save_Call {
	return &MockBroadcastStore_Save_Call{Call: _e.mock.On("Save", ctx, broadcast)}
}

func (_c *MockBroadcastStore_Save_Call) Run(run func(ctx context.Context, broadcast database.Broadcast)) *MockBroadcastStore_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Broadcast))
	})
	return _c
}

func (_c *MockBroadcastStore_Save_Call) Return(_a0 error) *MockBroadcastStore_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBroadcastStore_Save_Call) RunAndReturn(run func(context.Context, database.Broadcast) error) *MockBroadcastStore_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, broadcast
func (_m *MockBroadcastStore) Update(ctx context.Context, broadcast database.Broadcast) (*database.Broadcast, error) {
	ret := _m.Called(ctx, broadcast)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *database.Broadcast
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Broadcast) (*database.Broadcast, error)); ok {
		return rf(ctx, broadcast)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Broadcast) *database.Broadcast); ok {
		r0 = rf(ctx, broadcast)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Broadcast)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Broadcast) error); ok {
		r1 = rf(ctx, broadcast)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBroadcastStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockBroadcastStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - broadcast database.Broadcast
func (_e *MockBroadcastStore_Expecter) Update(ctx interface{}, broadcast interface{}) *MockBroadcastStore_Update_Call {
	return &MockBroadcastStore_Update_Call{Call: _e.mock.On("Update", ctx, broadcast)}
}

func (_c *MockBroadcastStore_Update_Call) Run(run func(ctx context.Context, broadcast database.Broadcast)) *MockBroadcastStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Broadcast))
	})
	return _c
}

func (_c *MockBroadcastStore_Update_Call) Return(_a0 *database.Broadcast, _a1 error) *MockBroadcastStore_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBroadcastStore_Update_Call) RunAndReturn(run func(context.Context, database.Broadcast) (*database.Broadcast, error)) *MockBroadcastStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBroadcastStore creates a new instance of MockBroadcastStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBroadcastStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBroadcastStore {
	mock := &MockBroadcastStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

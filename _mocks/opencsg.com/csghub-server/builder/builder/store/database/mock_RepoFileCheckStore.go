// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockRepoFileCheckStore is an autogenerated mock type for the RepoFileCheckStore type
type MockRepoFileCheckStore struct {
	mock.Mock
}

type MockRepoFileCheckStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepoFileCheckStore) EXPECT() *MockRepoFileCheckStore_Expecter {
	return &MockRepoFileCheckStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, history
func (_m *MockRepoFileCheckStore) Create(ctx context.Context, history database.RepositoryFileCheck) error {
	ret := _m.Called(ctx, history)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.RepositoryFileCheck) error); ok {
		r0 = rf(ctx, history)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepoFileCheckStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepoFileCheckStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - history database.RepositoryFileCheck
func (_e *MockRepoFileCheckStore_Expecter) Create(ctx interface{}, history interface{}) *MockRepoFileCheckStore_Create_Call {
	return &MockRepoFileCheckStore_Create_Call{Call: _e.mock.On("Create", ctx, history)}
}

func (_c *MockRepoFileCheckStore_Create_Call) Run(run func(ctx context.Context, history database.RepositoryFileCheck)) *MockRepoFileCheckStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.RepositoryFileCheck))
	})
	return _c
}

func (_c *MockRepoFileCheckStore_Create_Call) Return(_a0 error) *MockRepoFileCheckStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepoFileCheckStore_Create_Call) RunAndReturn(run func(context.Context, database.RepositoryFileCheck) error) *MockRepoFileCheckStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: ctx, history
func (_m *MockRepoFileCheckStore) Upsert(ctx context.Context, history database.RepositoryFileCheck) error {
	ret := _m.Called(ctx, history)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.RepositoryFileCheck) error); ok {
		r0 = rf(ctx, history)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepoFileCheckStore_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockRepoFileCheckStore_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - ctx context.Context
//   - history database.RepositoryFileCheck
func (_e *MockRepoFileCheckStore_Expecter) Upsert(ctx interface{}, history interface{}) *MockRepoFileCheckStore_Upsert_Call {
	return &MockRepoFileCheckStore_Upsert_Call{Call: _e.mock.On("Upsert", ctx, history)}
}

func (_c *MockRepoFileCheckStore_Upsert_Call) Run(run func(ctx context.Context, history database.RepositoryFileCheck)) *MockRepoFileCheckStore_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.RepositoryFileCheck))
	})
	return _c
}

func (_c *MockRepoFileCheckStore_Upsert_Call) Return(_a0 error) *MockRepoFileCheckStore_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepoFileCheckStore_Upsert_Call) RunAndReturn(run func(context.Context, database.RepositoryFileCheck) error) *MockRepoFileCheckStore_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepoFileCheckStore creates a new instance of MockRepoFileCheckStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepoFileCheckStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepoFileCheckStore {
	mock := &MockRepoFileCheckStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

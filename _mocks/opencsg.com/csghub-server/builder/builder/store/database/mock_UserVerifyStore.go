// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockUserVerifyStore is an autogenerated mock type for the UserVerifyStore type
type MockUserVerifyStore struct {
	mock.Mock
}

type MockUserVerifyStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserVerifyStore) EXPECT() *MockUserVerifyStore_Expecter {
	return &MockUserVerifyStore_Expecter{mock: &_m.Mock}
}

// CreateUserVerify provides a mock function with given fields: ctx, user
func (_m *MockUserVerifyStore) CreateUserVerify(ctx context.Context, user *database.UserVerify) (*database.UserVerify, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserVerify")
	}

	var r0 *database.UserVerify
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.UserVerify) (*database.UserVerify, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *database.UserVerify) *database.UserVerify); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.UserVerify)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *database.UserVerify) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserVerifyStore_CreateUserVerify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserVerify'
type MockUserVerifyStore_CreateUserVerify_Call struct {
	*mock.Call
}

// CreateUserVerify is a helper method to define mock.On call
//   - ctx context.Context
//   - user *database.UserVerify
func (_e *MockUserVerifyStore_Expecter) CreateUserVerify(ctx interface{}, user interface{}) *MockUserVerifyStore_CreateUserVerify_Call {
	return &MockUserVerifyStore_CreateUserVerify_Call{Call: _e.mock.On("CreateUserVerify", ctx, user)}
}

func (_c *MockUserVerifyStore_CreateUserVerify_Call) Run(run func(ctx context.Context, user *database.UserVerify)) *MockUserVerifyStore_CreateUserVerify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.UserVerify))
	})
	return _c
}

func (_c *MockUserVerifyStore_CreateUserVerify_Call) Return(_a0 *database.UserVerify, _a1 error) *MockUserVerifyStore_CreateUserVerify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserVerifyStore_CreateUserVerify_Call) RunAndReturn(run func(context.Context, *database.UserVerify) (*database.UserVerify, error)) *MockUserVerifyStore_CreateUserVerify_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserVerify provides a mock function with given fields: ctx, uuid
func (_m *MockUserVerifyStore) GetUserVerify(ctx context.Context, uuid string) (*database.UserVerify, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetUserVerify")
	}

	var r0 *database.UserVerify
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.UserVerify, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.UserVerify); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.UserVerify)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserVerifyStore_GetUserVerify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserVerify'
type MockUserVerifyStore_GetUserVerify_Call struct {
	*mock.Call
}

// GetUserVerify is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockUserVerifyStore_Expecter) GetUserVerify(ctx interface{}, uuid interface{}) *MockUserVerifyStore_GetUserVerify_Call {
	return &MockUserVerifyStore_GetUserVerify_Call{Call: _e.mock.On("GetUserVerify", ctx, uuid)}
}

func (_c *MockUserVerifyStore_GetUserVerify_Call) Run(run func(ctx context.Context, uuid string)) *MockUserVerifyStore_GetUserVerify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserVerifyStore_GetUserVerify_Call) Return(_a0 *database.UserVerify, _a1 error) *MockUserVerifyStore_GetUserVerify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserVerifyStore_GetUserVerify_Call) RunAndReturn(run func(context.Context, string) (*database.UserVerify, error)) *MockUserVerifyStore_GetUserVerify_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserVerify provides a mock function with given fields: ctx, id, status, reason
func (_m *MockUserVerifyStore) UpdateUserVerify(ctx context.Context, id int64, status types.VerifyStatus, reason string) (*database.UserVerify, error) {
	ret := _m.Called(ctx, id, status, reason)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserVerify")
	}

	var r0 *database.UserVerify
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, types.VerifyStatus, string) (*database.UserVerify, error)); ok {
		return rf(ctx, id, status, reason)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, types.VerifyStatus, string) *database.UserVerify); ok {
		r0 = rf(ctx, id, status, reason)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.UserVerify)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, types.VerifyStatus, string) error); ok {
		r1 = rf(ctx, id, status, reason)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserVerifyStore_UpdateUserVerify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserVerify'
type MockUserVerifyStore_UpdateUserVerify_Call struct {
	*mock.Call
}

// UpdateUserVerify is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - status types.VerifyStatus
//   - reason string
func (_e *MockUserVerifyStore_Expecter) UpdateUserVerify(ctx interface{}, id interface{}, status interface{}, reason interface{}) *MockUserVerifyStore_UpdateUserVerify_Call {
	return &MockUserVerifyStore_UpdateUserVerify_Call{Call: _e.mock.On("UpdateUserVerify", ctx, id, status, reason)}
}

func (_c *MockUserVerifyStore_UpdateUserVerify_Call) Run(run func(ctx context.Context, id int64, status types.VerifyStatus, reason string)) *MockUserVerifyStore_UpdateUserVerify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(types.VerifyStatus), args[3].(string))
	})
	return _c
}

func (_c *MockUserVerifyStore_UpdateUserVerify_Call) Return(_a0 *database.UserVerify, _a1 error) *MockUserVerifyStore_UpdateUserVerify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserVerifyStore_UpdateUserVerify_Call) RunAndReturn(run func(context.Context, int64, types.VerifyStatus, string) (*database.UserVerify, error)) *MockUserVerifyStore_UpdateUserVerify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserVerifyStore creates a new instance of MockUserVerifyStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserVerifyStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserVerifyStore {
	mock := &MockUserVerifyStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

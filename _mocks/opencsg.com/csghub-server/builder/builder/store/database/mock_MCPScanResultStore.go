// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockMCPScanResultStore is an autogenerated mock type for the MCPScanResultStore type
type MockMCPScanResultStore struct {
	mock.Mock
}

type MockMCPScanResultStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMCPScanResultStore) EXPECT() *MockMCPScanResultStore_Expecter {
	return &MockMCPScanResultStore_Expecter{mock: &_m.Mock}
}

// BatchCreate provides a mock function with given fields: ctx, input
func (_m *MockMCPScanResultStore) BatchCreate(ctx context.Context, input []database.MCPScanResult) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []database.MCPScanResult) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMCPScanResultStore_BatchCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchCreate'
type MockMCPScanResultStore_BatchCreate_Call struct {
	*mock.Call
}

// BatchCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - input []database.MCPScanResult
func (_e *MockMCPScanResultStore_Expecter) BatchCreate(ctx interface{}, input interface{}) *MockMCPScanResultStore_BatchCreate_Call {
	return &MockMCPScanResultStore_BatchCreate_Call{Call: _e.mock.On("BatchCreate", ctx, input)}
}

func (_c *MockMCPScanResultStore_BatchCreate_Call) Run(run func(ctx context.Context, input []database.MCPScanResult)) *MockMCPScanResultStore_BatchCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]database.MCPScanResult))
	})
	return _c
}

func (_c *MockMCPScanResultStore_BatchCreate_Call) Return(_a0 error) *MockMCPScanResultStore_BatchCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMCPScanResultStore_BatchCreate_Call) RunAndReturn(run func(context.Context, []database.MCPScanResult) error) *MockMCPScanResultStore_BatchCreate_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, input
func (_m *MockMCPScanResultStore) Create(ctx context.Context, input database.MCPScanResult) (*database.MCPScanResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.MCPScanResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.MCPScanResult) (*database.MCPScanResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.MCPScanResult) *database.MCPScanResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.MCPScanResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.MCPScanResult) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMCPScanResultStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMCPScanResultStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.MCPScanResult
func (_e *MockMCPScanResultStore_Expecter) Create(ctx interface{}, input interface{}) *MockMCPScanResultStore_Create_Call {
	return &MockMCPScanResultStore_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *MockMCPScanResultStore_Create_Call) Run(run func(ctx context.Context, input database.MCPScanResult)) *MockMCPScanResultStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.MCPScanResult))
	})
	return _c
}

func (_c *MockMCPScanResultStore_Create_Call) Return(_a0 *database.MCPScanResult, _a1 error) *MockMCPScanResultStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMCPScanResultStore_Create_Call) RunAndReturn(run func(context.Context, database.MCPScanResult) (*database.MCPScanResult, error)) *MockMCPScanResultStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, input
func (_m *MockMCPScanResultStore) Update(ctx context.Context, input database.MCPScanResult) (*database.MCPScanResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *database.MCPScanResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.MCPScanResult) (*database.MCPScanResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.MCPScanResult) *database.MCPScanResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.MCPScanResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.MCPScanResult) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMCPScanResultStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockMCPScanResultStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.MCPScanResult
func (_e *MockMCPScanResultStore_Expecter) Update(ctx interface{}, input interface{}) *MockMCPScanResultStore_Update_Call {
	return &MockMCPScanResultStore_Update_Call{Call: _e.mock.On("Update", ctx, input)}
}

func (_c *MockMCPScanResultStore_Update_Call) Run(run func(ctx context.Context, input database.MCPScanResult)) *MockMCPScanResultStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.MCPScanResult))
	})
	return _c
}

func (_c *MockMCPScanResultStore_Update_Call) Return(_a0 *database.MCPScanResult, _a1 error) *MockMCPScanResultStore_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMCPScanResultStore_Update_Call) RunAndReturn(run func(context.Context, database.MCPScanResult) (*database.MCPScanResult, error)) *MockMCPScanResultStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMCPScanResultStore creates a new instance of MockMCPScanResultStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMCPScanResultStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMCPScanResultStore {
	mock := &MockMCPScanResultStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	enum "opencsg.com/csghub-server/common/types/enum"

	mock "github.com/stretchr/testify/mock"

	types "opencsg.com/csghub-server/common/types"
)

// MockRuleStore is an autogenerated mock type for the RuleStore type
type MockRuleStore struct {
	mock.Mock
}

type MockRuleStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRuleStore) EXPECT() *MockRuleStore_Expecter {
	return &MockRuleStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, rule
func (_m *MockRuleStore) Create(ctx context.Context, rule types.Rule) (types.Rule, error) {
	ret := _m.Called(ctx, rule)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 types.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Rule) (types.Rule, error)); ok {
		return rf(ctx, rule)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Rule) types.Rule); ok {
		r0 = rf(ctx, rule)
	} else {
		r0 = ret.Get(0).(types.Rule)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Rule) error); ok {
		r1 = rf(ctx, rule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuleStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRuleStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - rule types.Rule
func (_e *MockRuleStore_Expecter) Create(ctx interface{}, rule interface{}) *MockRuleStore_Create_Call {
	return &MockRuleStore_Create_Call{Call: _e.mock.On("Create", ctx, rule)}
}

func (_c *MockRuleStore_Create_Call) Run(run func(ctx context.Context, rule types.Rule)) *MockRuleStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Rule))
	})
	return _c
}

func (_c *MockRuleStore_Create_Call) Return(_a0 types.Rule, _a1 error) *MockRuleStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuleStore_Create_Call) RunAndReturn(run func(context.Context, types.Rule) (types.Rule, error)) *MockRuleStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByRuleType provides a mock function with given fields: ctx, ruleType
func (_m *MockRuleStore) FindByRuleType(ctx context.Context, ruleType enum.RuleType) (types.Rule, error) {
	ret := _m.Called(ctx, ruleType)

	if len(ret) == 0 {
		panic("no return value specified for FindByRuleType")
	}

	var r0 types.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, enum.RuleType) (types.Rule, error)); ok {
		return rf(ctx, ruleType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, enum.RuleType) types.Rule); ok {
		r0 = rf(ctx, ruleType)
	} else {
		r0 = ret.Get(0).(types.Rule)
	}

	if rf, ok := ret.Get(1).(func(context.Context, enum.RuleType) error); ok {
		r1 = rf(ctx, ruleType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuleStore_FindByRuleType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByRuleType'
type MockRuleStore_FindByRuleType_Call struct {
	*mock.Call
}

// FindByRuleType is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleType enum.RuleType
func (_e *MockRuleStore_Expecter) FindByRuleType(ctx interface{}, ruleType interface{}) *MockRuleStore_FindByRuleType_Call {
	return &MockRuleStore_FindByRuleType_Call{Call: _e.mock.On("FindByRuleType", ctx, ruleType)}
}

func (_c *MockRuleStore_FindByRuleType_Call) Run(run func(ctx context.Context, ruleType enum.RuleType)) *MockRuleStore_FindByRuleType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(enum.RuleType))
	})
	return _c
}

func (_c *MockRuleStore_FindByRuleType_Call) Return(_a0 types.Rule, _a1 error) *MockRuleStore_FindByRuleType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuleStore_FindByRuleType_Call) RunAndReturn(run func(context.Context, enum.RuleType) (types.Rule, error)) *MockRuleStore_FindByRuleType_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, rule
func (_m *MockRuleStore) Update(ctx context.Context, rule types.Rule) (types.Rule, error) {
	ret := _m.Called(ctx, rule)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 types.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Rule) (types.Rule, error)); ok {
		return rf(ctx, rule)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Rule) types.Rule); ok {
		r0 = rf(ctx, rule)
	} else {
		r0 = ret.Get(0).(types.Rule)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Rule) error); ok {
		r1 = rf(ctx, rule)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuleStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRuleStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - rule types.Rule
func (_e *MockRuleStore_Expecter) Update(ctx interface{}, rule interface{}) *MockRuleStore_Update_Call {
	return &MockRuleStore_Update_Call{Call: _e.mock.On("Update", ctx, rule)}
}

func (_c *MockRuleStore_Update_Call) Run(run func(ctx context.Context, rule types.Rule)) *MockRuleStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Rule))
	})
	return _c
}

func (_c *MockRuleStore_Update_Call) Return(_a0 types.Rule, _a1 error) *MockRuleStore_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuleStore_Update_Call) RunAndReturn(run func(context.Context, types.Rule) (types.Rule, error)) *MockRuleStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRuleStore creates a new instance of MockRuleStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRuleStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRuleStore {
	mock := &MockRuleStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

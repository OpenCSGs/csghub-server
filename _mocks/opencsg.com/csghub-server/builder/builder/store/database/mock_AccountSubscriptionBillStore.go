// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockAccountSubscriptionBillStore is an autogenerated mock type for the AccountSubscriptionBillStore type
type MockAccountSubscriptionBillStore struct {
	mock.Mock
}

type MockAccountSubscriptionBillStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountSubscriptionBillStore) EXPECT() *MockAccountSubscriptionBillStore_Expecter {
	return &MockAccountSubscriptionBillStore_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockAccountSubscriptionBillStore) GetByID(ctx context.Context, id int64) (*database.AccountSubscriptionBill, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *database.AccountSubscriptionBill
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.AccountSubscriptionBill, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.AccountSubscriptionBill); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountSubscriptionBill)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSubscriptionBillStore_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockAccountSubscriptionBillStore_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockAccountSubscriptionBillStore_Expecter) GetByID(ctx interface{}, id interface{}) *MockAccountSubscriptionBillStore_GetByID_Call {
	return &MockAccountSubscriptionBillStore_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockAccountSubscriptionBillStore_GetByID_Call) Run(run func(ctx context.Context, id int64)) *MockAccountSubscriptionBillStore_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAccountSubscriptionBillStore_GetByID_Call) Return(_a0 *database.AccountSubscriptionBill, _a1 error) *MockAccountSubscriptionBillStore_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSubscriptionBillStore_GetByID_Call) RunAndReturn(run func(context.Context, int64) (*database.AccountSubscriptionBill, error)) *MockAccountSubscriptionBillStore_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, req
func (_m *MockAccountSubscriptionBillStore) List(ctx context.Context, req *types.SubscriptionBillListReq) (*database.SubBillListResult, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *database.SubBillListResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionBillListReq) (*database.SubBillListResult, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionBillListReq) *database.SubBillListResult); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SubBillListResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.SubscriptionBillListReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSubscriptionBillStore_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAccountSubscriptionBillStore_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.SubscriptionBillListReq
func (_e *MockAccountSubscriptionBillStore_Expecter) List(ctx interface{}, req interface{}) *MockAccountSubscriptionBillStore_List_Call {
	return &MockAccountSubscriptionBillStore_List_Call{Call: _e.mock.On("List", ctx, req)}
}

func (_c *MockAccountSubscriptionBillStore_List_Call) Run(run func(ctx context.Context, req *types.SubscriptionBillListReq)) *MockAccountSubscriptionBillStore_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.SubscriptionBillListReq))
	})
	return _c
}

func (_c *MockAccountSubscriptionBillStore_List_Call) Return(_a0 *database.SubBillListResult, _a1 error) *MockAccountSubscriptionBillStore_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSubscriptionBillStore_List_Call) RunAndReturn(run func(context.Context, *types.SubscriptionBillListReq) (*database.SubBillListResult, error)) *MockAccountSubscriptionBillStore_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountSubscriptionBillStore creates a new instance of MockAccountSubscriptionBillStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountSubscriptionBillStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountSubscriptionBillStore {
	mock := &MockAccountSubscriptionBillStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

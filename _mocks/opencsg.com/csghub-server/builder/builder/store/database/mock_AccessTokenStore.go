// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	time "time"
)

// MockAccessTokenStore is an autogenerated mock type for the AccessTokenStore type
type MockAccessTokenStore struct {
	mock.Mock
}

type MockAccessTokenStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccessTokenStore) EXPECT() *MockAccessTokenStore_Expecter {
	return &MockAccessTokenStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, token
func (_m *MockAccessTokenStore) Create(ctx context.Context, token *database.AccessToken) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.AccessToken) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccessTokenStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccessTokenStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - token *database.AccessToken
func (_e *MockAccessTokenStore_Expecter) Create(ctx interface{}, token interface{}) *MockAccessTokenStore_Create_Call {
	return &MockAccessTokenStore_Create_Call{Call: _e.mock.On("Create", ctx, token)}
}

func (_c *MockAccessTokenStore_Create_Call) Run(run func(ctx context.Context, token *database.AccessToken)) *MockAccessTokenStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.AccessToken))
	})
	return _c
}

func (_c *MockAccessTokenStore_Create_Call) Return(err error) *MockAccessTokenStore_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccessTokenStore_Create_Call) RunAndReturn(run func(context.Context, *database.AccessToken) error) *MockAccessTokenStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, username, tkName, app
func (_m *MockAccessTokenStore) Delete(ctx context.Context, username string, tkName string, app string) error {
	ret := _m.Called(ctx, username, tkName, app)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, username, tkName, app)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccessTokenStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccessTokenStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - tkName string
//   - app string
func (_e *MockAccessTokenStore_Expecter) Delete(ctx interface{}, username interface{}, tkName interface{}, app interface{}) *MockAccessTokenStore_Delete_Call {
	return &MockAccessTokenStore_Delete_Call{Call: _e.mock.On("Delete", ctx, username, tkName, app)}
}

func (_c *MockAccessTokenStore_Delete_Call) Run(run func(ctx context.Context, username string, tkName string, app string)) *MockAccessTokenStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockAccessTokenStore_Delete_Call) Return(err error) *MockAccessTokenStore_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccessTokenStore_Delete_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockAccessTokenStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *MockAccessTokenStore) FindByID(ctx context.Context, id int64) (*database.AccessToken, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *database.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.AccessToken, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.AccessToken); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessTokenStore_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockAccessTokenStore_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockAccessTokenStore_Expecter) FindByID(ctx interface{}, id interface{}) *MockAccessTokenStore_FindByID_Call {
	return &MockAccessTokenStore_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockAccessTokenStore_FindByID_Call) Run(run func(ctx context.Context, id int64)) *MockAccessTokenStore_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAccessTokenStore_FindByID_Call) Return(token *database.AccessToken, err error) *MockAccessTokenStore_FindByID_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockAccessTokenStore_FindByID_Call) RunAndReturn(run func(context.Context, int64) (*database.AccessToken, error)) *MockAccessTokenStore_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByToken provides a mock function with given fields: ctx, tokenValue, app
func (_m *MockAccessTokenStore) FindByToken(ctx context.Context, tokenValue string, app string) (*database.AccessToken, error) {
	ret := _m.Called(ctx, tokenValue, app)

	if len(ret) == 0 {
		panic("no return value specified for FindByToken")
	}

	var r0 *database.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*database.AccessToken, error)); ok {
		return rf(ctx, tokenValue, app)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *database.AccessToken); ok {
		r0 = rf(ctx, tokenValue, app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tokenValue, app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessTokenStore_FindByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByToken'
type MockAccessTokenStore_FindByToken_Call struct {
	*mock.Call
}

// FindByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenValue string
//   - app string
func (_e *MockAccessTokenStore_Expecter) FindByToken(ctx interface{}, tokenValue interface{}, app interface{}) *MockAccessTokenStore_FindByToken_Call {
	return &MockAccessTokenStore_FindByToken_Call{Call: _e.mock.On("FindByToken", ctx, tokenValue, app)}
}

func (_c *MockAccessTokenStore_FindByToken_Call) Run(run func(ctx context.Context, tokenValue string, app string)) *MockAccessTokenStore_FindByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAccessTokenStore_FindByToken_Call) Return(_a0 *database.AccessToken, _a1 error) *MockAccessTokenStore_FindByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessTokenStore_FindByToken_Call) RunAndReturn(run func(context.Context, string, string) (*database.AccessToken, error)) *MockAccessTokenStore_FindByToken_Call {
	_c.Call.Return(run)
	return _c
}

// FindByTokenName provides a mock function with given fields: ctx, username, tokenName, app
func (_m *MockAccessTokenStore) FindByTokenName(ctx context.Context, username string, tokenName string, app string) (*database.AccessToken, error) {
	ret := _m.Called(ctx, username, tokenName, app)

	if len(ret) == 0 {
		panic("no return value specified for FindByTokenName")
	}

	var r0 *database.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*database.AccessToken, error)); ok {
		return rf(ctx, username, tokenName, app)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *database.AccessToken); ok {
		r0 = rf(ctx, username, tokenName, app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, username, tokenName, app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessTokenStore_FindByTokenName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByTokenName'
type MockAccessTokenStore_FindByTokenName_Call struct {
	*mock.Call
}

// FindByTokenName is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - tokenName string
//   - app string
func (_e *MockAccessTokenStore_Expecter) FindByTokenName(ctx interface{}, username interface{}, tokenName interface{}, app interface{}) *MockAccessTokenStore_FindByTokenName_Call {
	return &MockAccessTokenStore_FindByTokenName_Call{Call: _e.mock.On("FindByTokenName", ctx, username, tokenName, app)}
}

func (_c *MockAccessTokenStore_FindByTokenName_Call) Run(run func(ctx context.Context, username string, tokenName string, app string)) *MockAccessTokenStore_FindByTokenName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockAccessTokenStore_FindByTokenName_Call) Return(_a0 *database.AccessToken, _a1 error) *MockAccessTokenStore_FindByTokenName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessTokenStore_FindByTokenName_Call) RunAndReturn(run func(context.Context, string, string, string) (*database.AccessToken, error)) *MockAccessTokenStore_FindByTokenName_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUID provides a mock function with given fields: ctx, uid
func (_m *MockAccessTokenStore) FindByUID(ctx context.Context, uid int64) (*database.AccessToken, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for FindByUID")
	}

	var r0 *database.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.AccessToken, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.AccessToken); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessTokenStore_FindByUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUID'
type MockAccessTokenStore_FindByUID_Call struct {
	*mock.Call
}

// FindByUID is a helper method to define mock.On call
//   - ctx context.Context
//   - uid int64
func (_e *MockAccessTokenStore_Expecter) FindByUID(ctx interface{}, uid interface{}) *MockAccessTokenStore_FindByUID_Call {
	return &MockAccessTokenStore_FindByUID_Call{Call: _e.mock.On("FindByUID", ctx, uid)}
}

func (_c *MockAccessTokenStore_FindByUID_Call) Run(run func(ctx context.Context, uid int64)) *MockAccessTokenStore_FindByUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAccessTokenStore_FindByUID_Call) Return(token *database.AccessToken, err error) *MockAccessTokenStore_FindByUID_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockAccessTokenStore_FindByUID_Call) RunAndReturn(run func(context.Context, int64) (*database.AccessToken, error)) *MockAccessTokenStore_FindByUID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUser provides a mock function with given fields: ctx, username, app
func (_m *MockAccessTokenStore) FindByUser(ctx context.Context, username string, app string) ([]database.AccessToken, error) {
	ret := _m.Called(ctx, username, app)

	if len(ret) == 0 {
		panic("no return value specified for FindByUser")
	}

	var r0 []database.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]database.AccessToken, error)); ok {
		return rf(ctx, username, app)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []database.AccessToken); ok {
		r0 = rf(ctx, username, app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessTokenStore_FindByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUser'
type MockAccessTokenStore_FindByUser_Call struct {
	*mock.Call
}

// FindByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - app string
func (_e *MockAccessTokenStore_Expecter) FindByUser(ctx interface{}, username interface{}, app interface{}) *MockAccessTokenStore_FindByUser_Call {
	return &MockAccessTokenStore_FindByUser_Call{Call: _e.mock.On("FindByUser", ctx, username, app)}
}

func (_c *MockAccessTokenStore_FindByUser_Call) Run(run func(ctx context.Context, username string, app string)) *MockAccessTokenStore_FindByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAccessTokenStore_FindByUser_Call) Return(_a0 []database.AccessToken, _a1 error) *MockAccessTokenStore_FindByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessTokenStore_FindByUser_Call) RunAndReturn(run func(context.Context, string, string) ([]database.AccessToken, error)) *MockAccessTokenStore_FindByUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserGitToken provides a mock function with given fields: ctx, username
func (_m *MockAccessTokenStore) GetUserGitToken(ctx context.Context, username string) (*database.AccessToken, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserGitToken")
	}

	var r0 *database.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.AccessToken, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.AccessToken); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessTokenStore_GetUserGitToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserGitToken'
type MockAccessTokenStore_GetUserGitToken_Call struct {
	*mock.Call
}

// GetUserGitToken is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockAccessTokenStore_Expecter) GetUserGitToken(ctx interface{}, username interface{}) *MockAccessTokenStore_GetUserGitToken_Call {
	return &MockAccessTokenStore_GetUserGitToken_Call{Call: _e.mock.On("GetUserGitToken", ctx, username)}
}

func (_c *MockAccessTokenStore_GetUserGitToken_Call) Run(run func(ctx context.Context, username string)) *MockAccessTokenStore_GetUserGitToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccessTokenStore_GetUserGitToken_Call) Return(_a0 *database.AccessToken, _a1 error) *MockAccessTokenStore_GetUserGitToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessTokenStore_GetUserGitToken_Call) RunAndReturn(run func(context.Context, string) (*database.AccessToken, error)) *MockAccessTokenStore_GetUserGitToken_Call {
	_c.Call.Return(run)
	return _c
}

// IsExist provides a mock function with given fields: ctx, username, tkName, app
func (_m *MockAccessTokenStore) IsExist(ctx context.Context, username string, tkName string, app string) (bool, error) {
	ret := _m.Called(ctx, username, tkName, app)

	if len(ret) == 0 {
		panic("no return value specified for IsExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, username, tkName, app)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, username, tkName, app)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, username, tkName, app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessTokenStore_IsExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExist'
type MockAccessTokenStore_IsExist_Call struct {
	*mock.Call
}

// IsExist is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - tkName string
//   - app string
func (_e *MockAccessTokenStore_Expecter) IsExist(ctx interface{}, username interface{}, tkName interface{}, app interface{}) *MockAccessTokenStore_IsExist_Call {
	return &MockAccessTokenStore_IsExist_Call{Call: _e.mock.On("IsExist", ctx, username, tkName, app)}
}

func (_c *MockAccessTokenStore_IsExist_Call) Run(run func(ctx context.Context, username string, tkName string, app string)) *MockAccessTokenStore_IsExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockAccessTokenStore_IsExist_Call) Return(exists bool, err error) *MockAccessTokenStore_IsExist_Call {
	_c.Call.Return(exists, err)
	return _c
}

func (_c *MockAccessTokenStore_IsExist_Call) RunAndReturn(run func(context.Context, string, string, string) (bool, error)) *MockAccessTokenStore_IsExist_Call {
	_c.Call.Return(run)
	return _c
}

// Refresh provides a mock function with given fields: ctx, token, newTokenValue, newExpiredAt
func (_m *MockAccessTokenStore) Refresh(ctx context.Context, token *database.AccessToken, newTokenValue string, newExpiredAt time.Time) (*database.AccessToken, error) {
	ret := _m.Called(ctx, token, newTokenValue, newExpiredAt)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 *database.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.AccessToken, string, time.Time) (*database.AccessToken, error)); ok {
		return rf(ctx, token, newTokenValue, newExpiredAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *database.AccessToken, string, time.Time) *database.AccessToken); ok {
		r0 = rf(ctx, token, newTokenValue, newExpiredAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *database.AccessToken, string, time.Time) error); ok {
		r1 = rf(ctx, token, newTokenValue, newExpiredAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessTokenStore_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type MockAccessTokenStore_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
//   - token *database.AccessToken
//   - newTokenValue string
//   - newExpiredAt time.Time
func (_e *MockAccessTokenStore_Expecter) Refresh(ctx interface{}, token interface{}, newTokenValue interface{}, newExpiredAt interface{}) *MockAccessTokenStore_Refresh_Call {
	return &MockAccessTokenStore_Refresh_Call{Call: _e.mock.On("Refresh", ctx, token, newTokenValue, newExpiredAt)}
}

func (_c *MockAccessTokenStore_Refresh_Call) Run(run func(ctx context.Context, token *database.AccessToken, newTokenValue string, newExpiredAt time.Time)) *MockAccessTokenStore_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.AccessToken), args[2].(string), args[3].(time.Time))
	})
	return _c
}

func (_c *MockAccessTokenStore_Refresh_Call) Return(_a0 *database.AccessToken, _a1 error) *MockAccessTokenStore_Refresh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessTokenStore_Refresh_Call) RunAndReturn(run func(context.Context, *database.AccessToken, string, time.Time) (*database.AccessToken, error)) *MockAccessTokenStore_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccessTokenStore creates a new instance of MockAccessTokenStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccessTokenStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccessTokenStore {
	mock := &MockAccessTokenStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

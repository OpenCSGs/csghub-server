// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockSensitiveWordSetStore is an autogenerated mock type for the SensitiveWordSetStore type
type MockSensitiveWordSetStore struct {
	mock.Mock
}

type MockSensitiveWordSetStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSensitiveWordSetStore) EXPECT() *MockSensitiveWordSetStore_Expecter {
	return &MockSensitiveWordSetStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, input
func (_m *MockSensitiveWordSetStore) Create(ctx context.Context, input database.SensitiveWordSet) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.SensitiveWordSet) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSensitiveWordSetStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSensitiveWordSetStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.SensitiveWordSet
func (_e *MockSensitiveWordSetStore_Expecter) Create(ctx interface{}, input interface{}) *MockSensitiveWordSetStore_Create_Call {
	return &MockSensitiveWordSetStore_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *MockSensitiveWordSetStore_Create_Call) Run(run func(ctx context.Context, input database.SensitiveWordSet)) *MockSensitiveWordSetStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.SensitiveWordSet))
	})
	return _c
}

func (_c *MockSensitiveWordSetStore_Create_Call) Return(_a0 error) *MockSensitiveWordSetStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSensitiveWordSetStore_Create_Call) RunAndReturn(run func(context.Context, database.SensitiveWordSet) error) *MockSensitiveWordSetStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockSensitiveWordSetStore) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSensitiveWordSetStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSensitiveWordSetStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockSensitiveWordSetStore_Expecter) Delete(ctx interface{}, id interface{}) *MockSensitiveWordSetStore_Delete_Call {
	return &MockSensitiveWordSetStore_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockSensitiveWordSetStore_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockSensitiveWordSetStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockSensitiveWordSetStore_Delete_Call) Return(_a0 error) *MockSensitiveWordSetStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSensitiveWordSetStore_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *MockSensitiveWordSetStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockSensitiveWordSetStore) Get(ctx context.Context, id int64) (*database.SensitiveWordSet, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *database.SensitiveWordSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.SensitiveWordSet, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.SensitiveWordSet); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SensitiveWordSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSensitiveWordSetStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSensitiveWordSetStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockSensitiveWordSetStore_Expecter) Get(ctx interface{}, id interface{}) *MockSensitiveWordSetStore_Get_Call {
	return &MockSensitiveWordSetStore_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockSensitiveWordSetStore_Get_Call) Run(run func(ctx context.Context, id int64)) *MockSensitiveWordSetStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockSensitiveWordSetStore_Get_Call) Return(_a0 *database.SensitiveWordSet, _a1 error) *MockSensitiveWordSetStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSensitiveWordSetStore_Get_Call) RunAndReturn(run func(context.Context, int64) (*database.SensitiveWordSet, error)) *MockSensitiveWordSetStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filter
func (_m *MockSensitiveWordSetStore) List(ctx context.Context, filter *database.SensitiveWordSetFilter) ([]database.SensitiveWordSet, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []database.SensitiveWordSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.SensitiveWordSetFilter) ([]database.SensitiveWordSet, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *database.SensitiveWordSetFilter) []database.SensitiveWordSet); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.SensitiveWordSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *database.SensitiveWordSetFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSensitiveWordSetStore_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockSensitiveWordSetStore_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *database.SensitiveWordSetFilter
func (_e *MockSensitiveWordSetStore_Expecter) List(ctx interface{}, filter interface{}) *MockSensitiveWordSetStore_List_Call {
	return &MockSensitiveWordSetStore_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *MockSensitiveWordSetStore_List_Call) Run(run func(ctx context.Context, filter *database.SensitiveWordSetFilter)) *MockSensitiveWordSetStore_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.SensitiveWordSetFilter))
	})
	return _c
}

func (_c *MockSensitiveWordSetStore_List_Call) Return(_a0 []database.SensitiveWordSet, _a1 error) *MockSensitiveWordSetStore_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSensitiveWordSetStore_List_Call) RunAndReturn(run func(context.Context, *database.SensitiveWordSetFilter) ([]database.SensitiveWordSet, error)) *MockSensitiveWordSetStore_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, input
func (_m *MockSensitiveWordSetStore) Update(ctx context.Context, input database.SensitiveWordSet) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.SensitiveWordSet) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSensitiveWordSetStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSensitiveWordSetStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.SensitiveWordSet
func (_e *MockSensitiveWordSetStore_Expecter) Update(ctx interface{}, input interface{}) *MockSensitiveWordSetStore_Update_Call {
	return &MockSensitiveWordSetStore_Update_Call{Call: _e.mock.On("Update", ctx, input)}
}

func (_c *MockSensitiveWordSetStore_Update_Call) Run(run func(ctx context.Context, input database.SensitiveWordSet)) *MockSensitiveWordSetStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.SensitiveWordSet))
	})
	return _c
}

func (_c *MockSensitiveWordSetStore_Update_Call) Return(_a0 error) *MockSensitiveWordSetStore_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSensitiveWordSetStore_Update_Call) RunAndReturn(run func(context.Context, database.SensitiveWordSet) error) *MockSensitiveWordSetStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSensitiveWordSetStore creates a new instance of MockSensitiveWordSetStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSensitiveWordSetStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSensitiveWordSetStore {
	mock := &MockSensitiveWordSetStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

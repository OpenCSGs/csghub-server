// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockImageBuilderWorkStore is an autogenerated mock type for the ImageBuilderWorkStore type
type MockImageBuilderWorkStore struct {
	mock.Mock
}

type MockImageBuilderWorkStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImageBuilderWorkStore) EXPECT() *MockImageBuilderWorkStore_Expecter {
	return &MockImageBuilderWorkStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, imageBuilder
func (_m *MockImageBuilderWorkStore) Create(ctx context.Context, imageBuilder *database.ImageBuilderWork) (*database.ImageBuilderWork, error) {
	ret := _m.Called(ctx, imageBuilder)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.ImageBuilderWork
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.ImageBuilderWork) (*database.ImageBuilderWork, error)); ok {
		return rf(ctx, imageBuilder)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *database.ImageBuilderWork) *database.ImageBuilderWork); ok {
		r0 = rf(ctx, imageBuilder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.ImageBuilderWork)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *database.ImageBuilderWork) error); ok {
		r1 = rf(ctx, imageBuilder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImageBuilderWorkStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockImageBuilderWorkStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - imageBuilder *database.ImageBuilderWork
func (_e *MockImageBuilderWorkStore_Expecter) Create(ctx interface{}, imageBuilder interface{}) *MockImageBuilderWorkStore_Create_Call {
	return &MockImageBuilderWorkStore_Create_Call{Call: _e.mock.On("Create", ctx, imageBuilder)}
}

func (_c *MockImageBuilderWorkStore_Create_Call) Run(run func(ctx context.Context, imageBuilder *database.ImageBuilderWork)) *MockImageBuilderWorkStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.ImageBuilderWork))
	})
	return _c
}

func (_c *MockImageBuilderWorkStore_Create_Call) Return(_a0 *database.ImageBuilderWork, _a1 error) *MockImageBuilderWorkStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImageBuilderWorkStore_Create_Call) RunAndReturn(run func(context.Context, *database.ImageBuilderWork) (*database.ImageBuilderWork, error)) *MockImageBuilderWorkStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdateByBuildID provides a mock function with given fields: ctx, imageBuilder
func (_m *MockImageBuilderWorkStore) CreateOrUpdateByBuildID(ctx context.Context, imageBuilder *database.ImageBuilderWork) (*database.ImageBuilderWork, error) {
	ret := _m.Called(ctx, imageBuilder)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdateByBuildID")
	}

	var r0 *database.ImageBuilderWork
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.ImageBuilderWork) (*database.ImageBuilderWork, error)); ok {
		return rf(ctx, imageBuilder)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *database.ImageBuilderWork) *database.ImageBuilderWork); ok {
		r0 = rf(ctx, imageBuilder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.ImageBuilderWork)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *database.ImageBuilderWork) error); ok {
		r1 = rf(ctx, imageBuilder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImageBuilderWorkStore_CreateOrUpdateByBuildID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdateByBuildID'
type MockImageBuilderWorkStore_CreateOrUpdateByBuildID_Call struct {
	*mock.Call
}

// CreateOrUpdateByBuildID is a helper method to define mock.On call
//   - ctx context.Context
//   - imageBuilder *database.ImageBuilderWork
func (_e *MockImageBuilderWorkStore_Expecter) CreateOrUpdateByBuildID(ctx interface{}, imageBuilder interface{}) *MockImageBuilderWorkStore_CreateOrUpdateByBuildID_Call {
	return &MockImageBuilderWorkStore_CreateOrUpdateByBuildID_Call{Call: _e.mock.On("CreateOrUpdateByBuildID", ctx, imageBuilder)}
}

func (_c *MockImageBuilderWorkStore_CreateOrUpdateByBuildID_Call) Run(run func(ctx context.Context, imageBuilder *database.ImageBuilderWork)) *MockImageBuilderWorkStore_CreateOrUpdateByBuildID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.ImageBuilderWork))
	})
	return _c
}

func (_c *MockImageBuilderWorkStore_CreateOrUpdateByBuildID_Call) Return(_a0 *database.ImageBuilderWork, _a1 error) *MockImageBuilderWorkStore_CreateOrUpdateByBuildID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImageBuilderWorkStore_CreateOrUpdateByBuildID_Call) RunAndReturn(run func(context.Context, *database.ImageBuilderWork) (*database.ImageBuilderWork, error)) *MockImageBuilderWorkStore_CreateOrUpdateByBuildID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByImagePath provides a mock function with given fields: ctx, imagePath
func (_m *MockImageBuilderWorkStore) FindByImagePath(ctx context.Context, imagePath string) (*database.ImageBuilderWork, error) {
	ret := _m.Called(ctx, imagePath)

	if len(ret) == 0 {
		panic("no return value specified for FindByImagePath")
	}

	var r0 *database.ImageBuilderWork
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.ImageBuilderWork, error)); ok {
		return rf(ctx, imagePath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.ImageBuilderWork); ok {
		r0 = rf(ctx, imagePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.ImageBuilderWork)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, imagePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImageBuilderWorkStore_FindByImagePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByImagePath'
type MockImageBuilderWorkStore_FindByImagePath_Call struct {
	*mock.Call
}

// FindByImagePath is a helper method to define mock.On call
//   - ctx context.Context
//   - imagePath string
func (_e *MockImageBuilderWorkStore_Expecter) FindByImagePath(ctx interface{}, imagePath interface{}) *MockImageBuilderWorkStore_FindByImagePath_Call {
	return &MockImageBuilderWorkStore_FindByImagePath_Call{Call: _e.mock.On("FindByImagePath", ctx, imagePath)}
}

func (_c *MockImageBuilderWorkStore_FindByImagePath_Call) Run(run func(ctx context.Context, imagePath string)) *MockImageBuilderWorkStore_FindByImagePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockImageBuilderWorkStore_FindByImagePath_Call) Return(_a0 *database.ImageBuilderWork, _a1 error) *MockImageBuilderWorkStore_FindByImagePath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImageBuilderWorkStore_FindByImagePath_Call) RunAndReturn(run func(context.Context, string) (*database.ImageBuilderWork, error)) *MockImageBuilderWorkStore_FindByImagePath_Call {
	_c.Call.Return(run)
	return _c
}

// FindByWorkName provides a mock function with given fields: ctx, workName
func (_m *MockImageBuilderWorkStore) FindByWorkName(ctx context.Context, workName string) (*database.ImageBuilderWork, error) {
	ret := _m.Called(ctx, workName)

	if len(ret) == 0 {
		panic("no return value specified for FindByWorkName")
	}

	var r0 *database.ImageBuilderWork
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.ImageBuilderWork, error)); ok {
		return rf(ctx, workName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.ImageBuilderWork); ok {
		r0 = rf(ctx, workName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.ImageBuilderWork)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImageBuilderWorkStore_FindByWorkName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByWorkName'
type MockImageBuilderWorkStore_FindByWorkName_Call struct {
	*mock.Call
}

// FindByWorkName is a helper method to define mock.On call
//   - ctx context.Context
//   - workName string
func (_e *MockImageBuilderWorkStore_Expecter) FindByWorkName(ctx interface{}, workName interface{}) *MockImageBuilderWorkStore_FindByWorkName_Call {
	return &MockImageBuilderWorkStore_FindByWorkName_Call{Call: _e.mock.On("FindByWorkName", ctx, workName)}
}

func (_c *MockImageBuilderWorkStore_FindByWorkName_Call) Run(run func(ctx context.Context, workName string)) *MockImageBuilderWorkStore_FindByWorkName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockImageBuilderWorkStore_FindByWorkName_Call) Return(_a0 *database.ImageBuilderWork, _a1 error) *MockImageBuilderWorkStore_FindByWorkName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImageBuilderWorkStore_FindByWorkName_Call) RunAndReturn(run func(context.Context, string) (*database.ImageBuilderWork, error)) *MockImageBuilderWorkStore_FindByWorkName_Call {
	_c.Call.Return(run)
	return _c
}

// QueryByBuildID provides a mock function with given fields: ctx, buildId
func (_m *MockImageBuilderWorkStore) QueryByBuildID(ctx context.Context, buildId string) (*database.ImageBuilderWork, error) {
	ret := _m.Called(ctx, buildId)

	if len(ret) == 0 {
		panic("no return value specified for QueryByBuildID")
	}

	var r0 *database.ImageBuilderWork
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.ImageBuilderWork, error)); ok {
		return rf(ctx, buildId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.ImageBuilderWork); ok {
		r0 = rf(ctx, buildId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.ImageBuilderWork)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, buildId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImageBuilderWorkStore_QueryByBuildID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryByBuildID'
type MockImageBuilderWorkStore_QueryByBuildID_Call struct {
	*mock.Call
}

// QueryByBuildID is a helper method to define mock.On call
//   - ctx context.Context
//   - buildId string
func (_e *MockImageBuilderWorkStore_Expecter) QueryByBuildID(ctx interface{}, buildId interface{}) *MockImageBuilderWorkStore_QueryByBuildID_Call {
	return &MockImageBuilderWorkStore_QueryByBuildID_Call{Call: _e.mock.On("QueryByBuildID", ctx, buildId)}
}

func (_c *MockImageBuilderWorkStore_QueryByBuildID_Call) Run(run func(ctx context.Context, buildId string)) *MockImageBuilderWorkStore_QueryByBuildID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockImageBuilderWorkStore_QueryByBuildID_Call) Return(_a0 *database.ImageBuilderWork, _a1 error) *MockImageBuilderWorkStore_QueryByBuildID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImageBuilderWorkStore_QueryByBuildID_Call) RunAndReturn(run func(context.Context, string) (*database.ImageBuilderWork, error)) *MockImageBuilderWorkStore_QueryByBuildID_Call {
	_c.Call.Return(run)
	return _c
}

// QueryStatusByBuildID provides a mock function with given fields: ctx, buildId
func (_m *MockImageBuilderWorkStore) QueryStatusByBuildID(ctx context.Context, buildId string) (*database.ImageBuilderWork, error) {
	ret := _m.Called(ctx, buildId)

	if len(ret) == 0 {
		panic("no return value specified for QueryStatusByBuildID")
	}

	var r0 *database.ImageBuilderWork
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.ImageBuilderWork, error)); ok {
		return rf(ctx, buildId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.ImageBuilderWork); ok {
		r0 = rf(ctx, buildId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.ImageBuilderWork)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, buildId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImageBuilderWorkStore_QueryStatusByBuildID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryStatusByBuildID'
type MockImageBuilderWorkStore_QueryStatusByBuildID_Call struct {
	*mock.Call
}

// QueryStatusByBuildID is a helper method to define mock.On call
//   - ctx context.Context
//   - buildId string
func (_e *MockImageBuilderWorkStore_Expecter) QueryStatusByBuildID(ctx interface{}, buildId interface{}) *MockImageBuilderWorkStore_QueryStatusByBuildID_Call {
	return &MockImageBuilderWorkStore_QueryStatusByBuildID_Call{Call: _e.mock.On("QueryStatusByBuildID", ctx, buildId)}
}

func (_c *MockImageBuilderWorkStore_QueryStatusByBuildID_Call) Run(run func(ctx context.Context, buildId string)) *MockImageBuilderWorkStore_QueryStatusByBuildID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockImageBuilderWorkStore_QueryStatusByBuildID_Call) Return(_a0 *database.ImageBuilderWork, _a1 error) *MockImageBuilderWorkStore_QueryStatusByBuildID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImageBuilderWorkStore_QueryStatusByBuildID_Call) RunAndReturn(run func(context.Context, string) (*database.ImageBuilderWork, error)) *MockImageBuilderWorkStore_QueryStatusByBuildID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByWorkName provides a mock function with given fields: ctx, work
func (_m *MockImageBuilderWorkStore) UpdateByWorkName(ctx context.Context, work *database.ImageBuilderWork) (*database.ImageBuilderWork, error) {
	ret := _m.Called(ctx, work)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByWorkName")
	}

	var r0 *database.ImageBuilderWork
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.ImageBuilderWork) (*database.ImageBuilderWork, error)); ok {
		return rf(ctx, work)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *database.ImageBuilderWork) *database.ImageBuilderWork); ok {
		r0 = rf(ctx, work)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.ImageBuilderWork)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *database.ImageBuilderWork) error); ok {
		r1 = rf(ctx, work)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImageBuilderWorkStore_UpdateByWorkName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByWorkName'
type MockImageBuilderWorkStore_UpdateByWorkName_Call struct {
	*mock.Call
}

// UpdateByWorkName is a helper method to define mock.On call
//   - ctx context.Context
//   - work *database.ImageBuilderWork
func (_e *MockImageBuilderWorkStore_Expecter) UpdateByWorkName(ctx interface{}, work interface{}) *MockImageBuilderWorkStore_UpdateByWorkName_Call {
	return &MockImageBuilderWorkStore_UpdateByWorkName_Call{Call: _e.mock.On("UpdateByWorkName", ctx, work)}
}

func (_c *MockImageBuilderWorkStore_UpdateByWorkName_Call) Run(run func(ctx context.Context, work *database.ImageBuilderWork)) *MockImageBuilderWorkStore_UpdateByWorkName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.ImageBuilderWork))
	})
	return _c
}

func (_c *MockImageBuilderWorkStore_UpdateByWorkName_Call) Return(_a0 *database.ImageBuilderWork, _a1 error) *MockImageBuilderWorkStore_UpdateByWorkName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImageBuilderWorkStore_UpdateByWorkName_Call) RunAndReturn(run func(context.Context, *database.ImageBuilderWork) (*database.ImageBuilderWork, error)) *MockImageBuilderWorkStore_UpdateByWorkName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockImageBuilderWorkStore creates a new instance of MockImageBuilderWorkStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImageBuilderWorkStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImageBuilderWorkStore {
	mock := &MockImageBuilderWorkStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

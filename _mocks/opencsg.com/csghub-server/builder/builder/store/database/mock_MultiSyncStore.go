// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockMultiSyncStore is an autogenerated mock type for the MultiSyncStore type
type MockMultiSyncStore struct {
	mock.Mock
}

type MockMultiSyncStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMultiSyncStore) EXPECT() *MockMultiSyncStore_Expecter {
	return &MockMultiSyncStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, v
func (_m *MockMultiSyncStore) Create(ctx context.Context, v database.SyncVersion) (*database.SyncVersion, error) {
	ret := _m.Called(ctx, v)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.SyncVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.SyncVersion) (*database.SyncVersion, error)); ok {
		return rf(ctx, v)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.SyncVersion) *database.SyncVersion); ok {
		r0 = rf(ctx, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SyncVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.SyncVersion) error); ok {
		r1 = rf(ctx, v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMultiSyncStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMultiSyncStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - v database.SyncVersion
func (_e *MockMultiSyncStore_Expecter) Create(ctx interface{}, v interface{}) *MockMultiSyncStore_Create_Call {
	return &MockMultiSyncStore_Create_Call{Call: _e.mock.On("Create", ctx, v)}
}

func (_c *MockMultiSyncStore_Create_Call) Run(run func(ctx context.Context, v database.SyncVersion)) *MockMultiSyncStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.SyncVersion))
	})
	return _c
}

func (_c *MockMultiSyncStore_Create_Call) Return(_a0 *database.SyncVersion, _a1 error) *MockMultiSyncStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMultiSyncStore_Create_Call) RunAndReturn(run func(context.Context, database.SyncVersion) (*database.SyncVersion, error)) *MockMultiSyncStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAfter provides a mock function with given fields: ctx, version, limit
func (_m *MockMultiSyncStore) GetAfter(ctx context.Context, version int64, limit int64) ([]database.SyncVersion, error) {
	ret := _m.Called(ctx, version, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAfter")
	}

	var r0 []database.SyncVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]database.SyncVersion, error)); ok {
		return rf(ctx, version, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []database.SyncVersion); ok {
		r0 = rf(ctx, version, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.SyncVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, version, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMultiSyncStore_GetAfter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAfter'
type MockMultiSyncStore_GetAfter_Call struct {
	*mock.Call
}

// GetAfter is a helper method to define mock.On call
//   - ctx context.Context
//   - version int64
//   - limit int64
func (_e *MockMultiSyncStore_Expecter) GetAfter(ctx interface{}, version interface{}, limit interface{}) *MockMultiSyncStore_GetAfter_Call {
	return &MockMultiSyncStore_GetAfter_Call{Call: _e.mock.On("GetAfter", ctx, version, limit)}
}

func (_c *MockMultiSyncStore_GetAfter_Call) Run(run func(ctx context.Context, version int64, limit int64)) *MockMultiSyncStore_GetAfter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockMultiSyncStore_GetAfter_Call) Return(_a0 []database.SyncVersion, _a1 error) *MockMultiSyncStore_GetAfter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMultiSyncStore_GetAfter_Call) RunAndReturn(run func(context.Context, int64, int64) ([]database.SyncVersion, error)) *MockMultiSyncStore_GetAfter_Call {
	_c.Call.Return(run)
	return _c
}

// GetAfterDistinct provides a mock function with given fields: ctx, version
func (_m *MockMultiSyncStore) GetAfterDistinct(ctx context.Context, version int64) ([]database.SyncVersion, error) {
	ret := _m.Called(ctx, version)

	if len(ret) == 0 {
		panic("no return value specified for GetAfterDistinct")
	}

	var r0 []database.SyncVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]database.SyncVersion, error)); ok {
		return rf(ctx, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []database.SyncVersion); ok {
		r0 = rf(ctx, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.SyncVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMultiSyncStore_GetAfterDistinct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAfterDistinct'
type MockMultiSyncStore_GetAfterDistinct_Call struct {
	*mock.Call
}

// GetAfterDistinct is a helper method to define mock.On call
//   - ctx context.Context
//   - version int64
func (_e *MockMultiSyncStore_Expecter) GetAfterDistinct(ctx interface{}, version interface{}) *MockMultiSyncStore_GetAfterDistinct_Call {
	return &MockMultiSyncStore_GetAfterDistinct_Call{Call: _e.mock.On("GetAfterDistinct", ctx, version)}
}

func (_c *MockMultiSyncStore_GetAfterDistinct_Call) Run(run func(ctx context.Context, version int64)) *MockMultiSyncStore_GetAfterDistinct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockMultiSyncStore_GetAfterDistinct_Call) Return(_a0 []database.SyncVersion, _a1 error) *MockMultiSyncStore_GetAfterDistinct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMultiSyncStore_GetAfterDistinct_Call) RunAndReturn(run func(context.Context, int64) ([]database.SyncVersion, error)) *MockMultiSyncStore_GetAfterDistinct_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatest provides a mock function with given fields: ctx
func (_m *MockMultiSyncStore) GetLatest(ctx context.Context) (database.SyncVersion, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatest")
	}

	var r0 database.SyncVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (database.SyncVersion, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) database.SyncVersion); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(database.SyncVersion)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMultiSyncStore_GetLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatest'
type MockMultiSyncStore_GetLatest_Call struct {
	*mock.Call
}

// GetLatest is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMultiSyncStore_Expecter) GetLatest(ctx interface{}) *MockMultiSyncStore_GetLatest_Call {
	return &MockMultiSyncStore_GetLatest_Call{Call: _e.mock.On("GetLatest", ctx)}
}

func (_c *MockMultiSyncStore_GetLatest_Call) Run(run func(ctx context.Context)) *MockMultiSyncStore_GetLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMultiSyncStore_GetLatest_Call) Return(_a0 database.SyncVersion, _a1 error) *MockMultiSyncStore_GetLatest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMultiSyncStore_GetLatest_Call) RunAndReturn(run func(context.Context) (database.SyncVersion, error)) *MockMultiSyncStore_GetLatest_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotCompletedDistinct provides a mock function with given fields: ctx
func (_m *MockMultiSyncStore) GetNotCompletedDistinct(ctx context.Context) ([]database.SyncVersion, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNotCompletedDistinct")
	}

	var r0 []database.SyncVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.SyncVersion, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.SyncVersion); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.SyncVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMultiSyncStore_GetNotCompletedDistinct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotCompletedDistinct'
type MockMultiSyncStore_GetNotCompletedDistinct_Call struct {
	*mock.Call
}

// GetNotCompletedDistinct is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMultiSyncStore_Expecter) GetNotCompletedDistinct(ctx interface{}) *MockMultiSyncStore_GetNotCompletedDistinct_Call {
	return &MockMultiSyncStore_GetNotCompletedDistinct_Call{Call: _e.mock.On("GetNotCompletedDistinct", ctx)}
}

func (_c *MockMultiSyncStore_GetNotCompletedDistinct_Call) Run(run func(ctx context.Context)) *MockMultiSyncStore_GetNotCompletedDistinct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMultiSyncStore_GetNotCompletedDistinct_Call) Return(_a0 []database.SyncVersion, _a1 error) *MockMultiSyncStore_GetNotCompletedDistinct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMultiSyncStore_GetNotCompletedDistinct_Call) RunAndReturn(run func(context.Context) ([]database.SyncVersion, error)) *MockMultiSyncStore_GetNotCompletedDistinct_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMultiSyncStore creates a new instance of MockMultiSyncStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMultiSyncStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMultiSyncStore {
	mock := &MockMultiSyncStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

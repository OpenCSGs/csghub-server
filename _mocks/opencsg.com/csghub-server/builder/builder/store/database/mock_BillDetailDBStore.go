// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockBillDetailDBStore is an autogenerated mock type for the BillDetailDBStore type
type MockBillDetailDBStore struct {
	mock.Mock
}

type MockBillDetailDBStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBillDetailDBStore) EXPECT() *MockBillDetailDBStore_Expecter {
	return &MockBillDetailDBStore_Expecter{mock: &_m.Mock}
}

// CreateBillDetails provides a mock function with given fields: ctx, details
func (_m *MockBillDetailDBStore) CreateBillDetails(ctx context.Context, details []*database.BillDetailDB) error {
	ret := _m.Called(ctx, details)

	if len(ret) == 0 {
		panic("no return value specified for CreateBillDetails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*database.BillDetailDB) error); ok {
		r0 = rf(ctx, details)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBillDetailDBStore_CreateBillDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBillDetails'
type MockBillDetailDBStore_CreateBillDetails_Call struct {
	*mock.Call
}

// CreateBillDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - details []*database.BillDetailDB
func (_e *MockBillDetailDBStore_Expecter) CreateBillDetails(ctx interface{}, details interface{}) *MockBillDetailDBStore_CreateBillDetails_Call {
	return &MockBillDetailDBStore_CreateBillDetails_Call{Call: _e.mock.On("CreateBillDetails", ctx, details)}
}

func (_c *MockBillDetailDBStore_CreateBillDetails_Call) Run(run func(ctx context.Context, details []*database.BillDetailDB)) *MockBillDetailDBStore_CreateBillDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*database.BillDetailDB))
	})
	return _c
}

func (_c *MockBillDetailDBStore_CreateBillDetails_Call) Return(_a0 error) *MockBillDetailDBStore_CreateBillDetails_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBillDetailDBStore_CreateBillDetails_Call) RunAndReturn(run func(context.Context, []*database.BillDetailDB) error) *MockBillDetailDBStore_CreateBillDetails_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBillDetailDBStore creates a new instance of MockBillDetailDBStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBillDetailDBStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBillDetailDBStore {
	mock := &MockBillDetailDBStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

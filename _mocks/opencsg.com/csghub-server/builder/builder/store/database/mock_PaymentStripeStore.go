// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockPaymentStripeStore is an autogenerated mock type for the PaymentStripeStore type
type MockPaymentStripeStore struct {
	mock.Mock
}

type MockPaymentStripeStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymentStripeStore) EXPECT() *MockPaymentStripeStore_Expecter {
	return &MockPaymentStripeStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, input
func (_m *MockPaymentStripeStore) Create(ctx context.Context, input database.PaymentStripe) (*database.PaymentStripe, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.PaymentStripe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.PaymentStripe) (*database.PaymentStripe, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.PaymentStripe) *database.PaymentStripe); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.PaymentStripe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.PaymentStripe) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentStripeStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPaymentStripeStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.PaymentStripe
func (_e *MockPaymentStripeStore_Expecter) Create(ctx interface{}, input interface{}) *MockPaymentStripeStore_Create_Call {
	return &MockPaymentStripeStore_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *MockPaymentStripeStore_Create_Call) Run(run func(ctx context.Context, input database.PaymentStripe)) *MockPaymentStripeStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.PaymentStripe))
	})
	return _c
}

func (_c *MockPaymentStripeStore_Create_Call) Return(_a0 *database.PaymentStripe, _a1 error) *MockPaymentStripeStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentStripeStore_Create_Call) RunAndReturn(run func(context.Context, database.PaymentStripe) (*database.PaymentStripe, error)) *MockPaymentStripeStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockPaymentStripeStore) Get(ctx context.Context, id int64) (*database.PaymentStripe, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *database.PaymentStripe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.PaymentStripe, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.PaymentStripe); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.PaymentStripe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentStripeStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockPaymentStripeStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockPaymentStripeStore_Expecter) Get(ctx interface{}, id interface{}) *MockPaymentStripeStore_Get_Call {
	return &MockPaymentStripeStore_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockPaymentStripeStore_Get_Call) Run(run func(ctx context.Context, id int64)) *MockPaymentStripeStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockPaymentStripeStore_Get_Call) Return(_a0 *database.PaymentStripe, _a1 error) *MockPaymentStripeStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentStripeStore_Get_Call) RunAndReturn(run func(context.Context, int64) (*database.PaymentStripe, error)) *MockPaymentStripeStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySessionID provides a mock function with given fields: ctx, sessionID
func (_m *MockPaymentStripeStore) GetBySessionID(ctx context.Context, sessionID string) (*database.PaymentStripe, error) {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for GetBySessionID")
	}

	var r0 *database.PaymentStripe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.PaymentStripe, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.PaymentStripe); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.PaymentStripe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentStripeStore_GetBySessionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySessionID'
type MockPaymentStripeStore_GetBySessionID_Call struct {
	*mock.Call
}

// GetBySessionID is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
func (_e *MockPaymentStripeStore_Expecter) GetBySessionID(ctx interface{}, sessionID interface{}) *MockPaymentStripeStore_GetBySessionID_Call {
	return &MockPaymentStripeStore_GetBySessionID_Call{Call: _e.mock.On("GetBySessionID", ctx, sessionID)}
}

func (_c *MockPaymentStripeStore_GetBySessionID_Call) Run(run func(ctx context.Context, sessionID string)) *MockPaymentStripeStore_GetBySessionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPaymentStripeStore_GetBySessionID_Call) Return(_a0 *database.PaymentStripe, _a1 error) *MockPaymentStripeStore_GetBySessionID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentStripeStore_GetBySessionID_Call) RunAndReturn(run func(context.Context, string) (*database.PaymentStripe, error)) *MockPaymentStripeStore_GetBySessionID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, req
func (_m *MockPaymentStripeStore) List(ctx context.Context, req *types.StripeSessionListReq) (*database.PaymentStripeListResult, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *database.PaymentStripeListResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.StripeSessionListReq) (*database.PaymentStripeListResult, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.StripeSessionListReq) *database.PaymentStripeListResult); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.PaymentStripeListResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.StripeSessionListReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentStripeStore_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockPaymentStripeStore_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.StripeSessionListReq
func (_e *MockPaymentStripeStore_Expecter) List(ctx interface{}, req interface{}) *MockPaymentStripeStore_List_Call {
	return &MockPaymentStripeStore_List_Call{Call: _e.mock.On("List", ctx, req)}
}

func (_c *MockPaymentStripeStore_List_Call) Run(run func(ctx context.Context, req *types.StripeSessionListReq)) *MockPaymentStripeStore_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.StripeSessionListReq))
	})
	return _c
}

func (_c *MockPaymentStripeStore_List_Call) Return(_a0 *database.PaymentStripeListResult, _a1 error) *MockPaymentStripeStore_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentStripeStore_List_Call) RunAndReturn(run func(context.Context, *types.StripeSessionListReq) (*database.PaymentStripeListResult, error)) *MockPaymentStripeStore_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, input
func (_m *MockPaymentStripeStore) Update(ctx context.Context, input database.PaymentStripe) (*database.PaymentStripe, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *database.PaymentStripe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.PaymentStripe) (*database.PaymentStripe, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.PaymentStripe) *database.PaymentStripe); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.PaymentStripe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.PaymentStripe) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentStripeStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPaymentStripeStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.PaymentStripe
func (_e *MockPaymentStripeStore_Expecter) Update(ctx interface{}, input interface{}) *MockPaymentStripeStore_Update_Call {
	return &MockPaymentStripeStore_Update_Call{Call: _e.mock.On("Update", ctx, input)}
}

func (_c *MockPaymentStripeStore_Update_Call) Run(run func(ctx context.Context, input database.PaymentStripe)) *MockPaymentStripeStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.PaymentStripe))
	})
	return _c
}

func (_c *MockPaymentStripeStore_Update_Call) Return(_a0 *database.PaymentStripe, _a1 error) *MockPaymentStripeStore_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentStripeStore_Update_Call) RunAndReturn(run func(context.Context, database.PaymentStripe) (*database.PaymentStripe, error)) *MockPaymentStripeStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPaymentStripeStore creates a new instance of MockPaymentStripeStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentStripeStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentStripeStore {
	mock := &MockPaymentStripeStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

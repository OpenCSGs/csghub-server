// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockPendingDeletionStore is an autogenerated mock type for the PendingDeletionStore type
type MockPendingDeletionStore struct {
	mock.Mock
}

type MockPendingDeletionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPendingDeletionStore) EXPECT() *MockPendingDeletionStore_Expecter {
	return &MockPendingDeletionStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, pendingDeletion
func (_m *MockPendingDeletionStore) Create(ctx context.Context, pendingDeletion *database.PendingDeletion) error {
	ret := _m.Called(ctx, pendingDeletion)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.PendingDeletion) error); ok {
		r0 = rf(ctx, pendingDeletion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPendingDeletionStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPendingDeletionStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - pendingDeletion *database.PendingDeletion
func (_e *MockPendingDeletionStore_Expecter) Create(ctx interface{}, pendingDeletion interface{}) *MockPendingDeletionStore_Create_Call {
	return &MockPendingDeletionStore_Create_Call{Call: _e.mock.On("Create", ctx, pendingDeletion)}
}

func (_c *MockPendingDeletionStore_Create_Call) Run(run func(ctx context.Context, pendingDeletion *database.PendingDeletion)) *MockPendingDeletionStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.PendingDeletion))
	})
	return _c
}

func (_c *MockPendingDeletionStore_Create_Call) Return(err error) *MockPendingDeletionStore_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPendingDeletionStore_Create_Call) RunAndReturn(run func(context.Context, *database.PendingDeletion) error) *MockPendingDeletionStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByTableName provides a mock function with given fields: ctx, tableName
func (_m *MockPendingDeletionStore) FindByTableName(ctx context.Context, tableName string) ([]*database.PendingDeletion, error) {
	ret := _m.Called(ctx, tableName)

	if len(ret) == 0 {
		panic("no return value specified for FindByTableName")
	}

	var r0 []*database.PendingDeletion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*database.PendingDeletion, error)); ok {
		return rf(ctx, tableName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*database.PendingDeletion); ok {
		r0 = rf(ctx, tableName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.PendingDeletion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tableName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPendingDeletionStore_FindByTableName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByTableName'
type MockPendingDeletionStore_FindByTableName_Call struct {
	*mock.Call
}

// FindByTableName is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName string
func (_e *MockPendingDeletionStore_Expecter) FindByTableName(ctx interface{}, tableName interface{}) *MockPendingDeletionStore_FindByTableName_Call {
	return &MockPendingDeletionStore_FindByTableName_Call{Call: _e.mock.On("FindByTableName", ctx, tableName)}
}

func (_c *MockPendingDeletionStore_FindByTableName_Call) Run(run func(ctx context.Context, tableName string)) *MockPendingDeletionStore_FindByTableName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPendingDeletionStore_FindByTableName_Call) Return(pendingDeletions []*database.PendingDeletion, err error) *MockPendingDeletionStore_FindByTableName_Call {
	_c.Call.Return(pendingDeletions, err)
	return _c
}

func (_c *MockPendingDeletionStore_FindByTableName_Call) RunAndReturn(run func(context.Context, string) ([]*database.PendingDeletion, error)) *MockPendingDeletionStore_FindByTableName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPendingDeletionStore creates a new instance of MockPendingDeletionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPendingDeletionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPendingDeletionStore {
	mock := &MockPendingDeletionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

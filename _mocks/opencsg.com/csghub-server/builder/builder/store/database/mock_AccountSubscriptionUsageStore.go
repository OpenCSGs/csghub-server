// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockAccountSubscriptionUsageStore is an autogenerated mock type for the AccountSubscriptionUsageStore type
type MockAccountSubscriptionUsageStore struct {
	mock.Mock
}

type MockAccountSubscriptionUsageStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountSubscriptionUsageStore) EXPECT() *MockAccountSubscriptionUsageStore_Expecter {
	return &MockAccountSubscriptionUsageStore_Expecter{mock: &_m.Mock}
}

// GetByBillID provides a mock function with given fields: ctx, billID, userUUID
func (_m *MockAccountSubscriptionUsageStore) GetByBillID(ctx context.Context, billID int64, userUUID string) ([]database.AccountSubscriptionUsage, error) {
	ret := _m.Called(ctx, billID, userUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetByBillID")
	}

	var r0 []database.AccountSubscriptionUsage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) ([]database.AccountSubscriptionUsage, error)); ok {
		return rf(ctx, billID, userUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) []database.AccountSubscriptionUsage); ok {
		r0 = rf(ctx, billID, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.AccountSubscriptionUsage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, billID, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSubscriptionUsageStore_GetByBillID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByBillID'
type MockAccountSubscriptionUsageStore_GetByBillID_Call struct {
	*mock.Call
}

// GetByBillID is a helper method to define mock.On call
//   - ctx context.Context
//   - billID int64
//   - userUUID string
func (_e *MockAccountSubscriptionUsageStore_Expecter) GetByBillID(ctx interface{}, billID interface{}, userUUID interface{}) *MockAccountSubscriptionUsageStore_GetByBillID_Call {
	return &MockAccountSubscriptionUsageStore_GetByBillID_Call{Call: _e.mock.On("GetByBillID", ctx, billID, userUUID)}
}

func (_c *MockAccountSubscriptionUsageStore_GetByBillID_Call) Run(run func(ctx context.Context, billID int64, userUUID string)) *MockAccountSubscriptionUsageStore_GetByBillID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockAccountSubscriptionUsageStore_GetByBillID_Call) Return(_a0 []database.AccountSubscriptionUsage, _a1 error) *MockAccountSubscriptionUsageStore_GetByBillID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSubscriptionUsageStore_GetByBillID_Call) RunAndReturn(run func(context.Context, int64, string) ([]database.AccountSubscriptionUsage, error)) *MockAccountSubscriptionUsageStore_GetByBillID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByBillMonth provides a mock function with given fields: ctx, billMonth, userUUID
func (_m *MockAccountSubscriptionUsageStore) GetByBillMonth(ctx context.Context, billMonth string, userUUID string) ([]database.AccountSubscriptionUsage, error) {
	ret := _m.Called(ctx, billMonth, userUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetByBillMonth")
	}

	var r0 []database.AccountSubscriptionUsage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]database.AccountSubscriptionUsage, error)); ok {
		return rf(ctx, billMonth, userUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []database.AccountSubscriptionUsage); ok {
		r0 = rf(ctx, billMonth, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.AccountSubscriptionUsage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, billMonth, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSubscriptionUsageStore_GetByBillMonth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByBillMonth'
type MockAccountSubscriptionUsageStore_GetByBillMonth_Call struct {
	*mock.Call
}

// GetByBillMonth is a helper method to define mock.On call
//   - ctx context.Context
//   - billMonth string
//   - userUUID string
func (_e *MockAccountSubscriptionUsageStore_Expecter) GetByBillMonth(ctx interface{}, billMonth interface{}, userUUID interface{}) *MockAccountSubscriptionUsageStore_GetByBillMonth_Call {
	return &MockAccountSubscriptionUsageStore_GetByBillMonth_Call{Call: _e.mock.On("GetByBillMonth", ctx, billMonth, userUUID)}
}

func (_c *MockAccountSubscriptionUsageStore_GetByBillMonth_Call) Run(run func(ctx context.Context, billMonth string, userUUID string)) *MockAccountSubscriptionUsageStore_GetByBillMonth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAccountSubscriptionUsageStore_GetByBillMonth_Call) Return(_a0 []database.AccountSubscriptionUsage, _a1 error) *MockAccountSubscriptionUsageStore_GetByBillMonth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSubscriptionUsageStore_GetByBillMonth_Call) RunAndReturn(run func(context.Context, string, string) ([]database.AccountSubscriptionUsage, error)) *MockAccountSubscriptionUsageStore_GetByBillMonth_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountSubscriptionUsageStore creates a new instance of MockAccountSubscriptionUsageStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountSubscriptionUsageStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountSubscriptionUsageStore {
	mock := &MockAccountSubscriptionUsageStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

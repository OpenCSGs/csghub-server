// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockSpaceTemplateStore is an autogenerated mock type for the SpaceTemplateStore type
type MockSpaceTemplateStore struct {
	mock.Mock
}

type MockSpaceTemplateStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpaceTemplateStore) EXPECT() *MockSpaceTemplateStore_Expecter {
	return &MockSpaceTemplateStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, input
func (_m *MockSpaceTemplateStore) Create(ctx context.Context, input database.SpaceTemplate) (*database.SpaceTemplate, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.SpaceTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.SpaceTemplate) (*database.SpaceTemplate, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.SpaceTemplate) *database.SpaceTemplate); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SpaceTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.SpaceTemplate) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceTemplateStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSpaceTemplateStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.SpaceTemplate
func (_e *MockSpaceTemplateStore_Expecter) Create(ctx interface{}, input interface{}) *MockSpaceTemplateStore_Create_Call {
	return &MockSpaceTemplateStore_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *MockSpaceTemplateStore_Create_Call) Run(run func(ctx context.Context, input database.SpaceTemplate)) *MockSpaceTemplateStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.SpaceTemplate))
	})
	return _c
}

func (_c *MockSpaceTemplateStore_Create_Call) Return(_a0 *database.SpaceTemplate, _a1 error) *MockSpaceTemplateStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpaceTemplateStore_Create_Call) RunAndReturn(run func(context.Context, database.SpaceTemplate) (*database.SpaceTemplate, error)) *MockSpaceTemplateStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockSpaceTemplateStore) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpaceTemplateStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSpaceTemplateStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockSpaceTemplateStore_Expecter) Delete(ctx interface{}, id interface{}) *MockSpaceTemplateStore_Delete_Call {
	return &MockSpaceTemplateStore_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockSpaceTemplateStore_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockSpaceTemplateStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockSpaceTemplateStore_Delete_Call) Return(_a0 error) *MockSpaceTemplateStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpaceTemplateStore_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *MockSpaceTemplateStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllByType provides a mock function with given fields: ctx, templateType
func (_m *MockSpaceTemplateStore) FindAllByType(ctx context.Context, templateType string) ([]database.SpaceTemplate, error) {
	ret := _m.Called(ctx, templateType)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByType")
	}

	var r0 []database.SpaceTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]database.SpaceTemplate, error)); ok {
		return rf(ctx, templateType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []database.SpaceTemplate); ok {
		r0 = rf(ctx, templateType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.SpaceTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, templateType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceTemplateStore_FindAllByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllByType'
type MockSpaceTemplateStore_FindAllByType_Call struct {
	*mock.Call
}

// FindAllByType is a helper method to define mock.On call
//   - ctx context.Context
//   - templateType string
func (_e *MockSpaceTemplateStore_Expecter) FindAllByType(ctx interface{}, templateType interface{}) *MockSpaceTemplateStore_FindAllByType_Call {
	return &MockSpaceTemplateStore_FindAllByType_Call{Call: _e.mock.On("FindAllByType", ctx, templateType)}
}

func (_c *MockSpaceTemplateStore_FindAllByType_Call) Run(run func(ctx context.Context, templateType string)) *MockSpaceTemplateStore_FindAllByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSpaceTemplateStore_FindAllByType_Call) Return(_a0 []database.SpaceTemplate, _a1 error) *MockSpaceTemplateStore_FindAllByType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpaceTemplateStore_FindAllByType_Call) RunAndReturn(run func(context.Context, string) ([]database.SpaceTemplate, error)) *MockSpaceTemplateStore_FindAllByType_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *MockSpaceTemplateStore) FindByID(ctx context.Context, id int64) (*database.SpaceTemplate, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *database.SpaceTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.SpaceTemplate, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.SpaceTemplate); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SpaceTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceTemplateStore_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockSpaceTemplateStore_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockSpaceTemplateStore_Expecter) FindByID(ctx interface{}, id interface{}) *MockSpaceTemplateStore_FindByID_Call {
	return &MockSpaceTemplateStore_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockSpaceTemplateStore_FindByID_Call) Run(run func(ctx context.Context, id int64)) *MockSpaceTemplateStore_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockSpaceTemplateStore_FindByID_Call) Return(_a0 *database.SpaceTemplate, _a1 error) *MockSpaceTemplateStore_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpaceTemplateStore_FindByID_Call) RunAndReturn(run func(context.Context, int64) (*database.SpaceTemplate, error)) *MockSpaceTemplateStore_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByName provides a mock function with given fields: ctx, templateType, templateName
func (_m *MockSpaceTemplateStore) FindByName(ctx context.Context, templateType string, templateName string) (*database.SpaceTemplate, error) {
	ret := _m.Called(ctx, templateType, templateName)

	if len(ret) == 0 {
		panic("no return value specified for FindByName")
	}

	var r0 *database.SpaceTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*database.SpaceTemplate, error)); ok {
		return rf(ctx, templateType, templateName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *database.SpaceTemplate); ok {
		r0 = rf(ctx, templateType, templateName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SpaceTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, templateType, templateName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceTemplateStore_FindByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByName'
type MockSpaceTemplateStore_FindByName_Call struct {
	*mock.Call
}

// FindByName is a helper method to define mock.On call
//   - ctx context.Context
//   - templateType string
//   - templateName string
func (_e *MockSpaceTemplateStore_Expecter) FindByName(ctx interface{}, templateType interface{}, templateName interface{}) *MockSpaceTemplateStore_FindByName_Call {
	return &MockSpaceTemplateStore_FindByName_Call{Call: _e.mock.On("FindByName", ctx, templateType, templateName)}
}

func (_c *MockSpaceTemplateStore_FindByName_Call) Run(run func(ctx context.Context, templateType string, templateName string)) *MockSpaceTemplateStore_FindByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSpaceTemplateStore_FindByName_Call) Return(_a0 *database.SpaceTemplate, _a1 error) *MockSpaceTemplateStore_FindByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpaceTemplateStore_FindByName_Call) RunAndReturn(run func(context.Context, string, string) (*database.SpaceTemplate, error)) *MockSpaceTemplateStore_FindByName_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx
func (_m *MockSpaceTemplateStore) Index(ctx context.Context) ([]database.SpaceTemplate, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []database.SpaceTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.SpaceTemplate, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.SpaceTemplate); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.SpaceTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceTemplateStore_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockSpaceTemplateStore_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSpaceTemplateStore_Expecter) Index(ctx interface{}) *MockSpaceTemplateStore_Index_Call {
	return &MockSpaceTemplateStore_Index_Call{Call: _e.mock.On("Index", ctx)}
}

func (_c *MockSpaceTemplateStore_Index_Call) Run(run func(ctx context.Context)) *MockSpaceTemplateStore_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSpaceTemplateStore_Index_Call) Return(_a0 []database.SpaceTemplate, _a1 error) *MockSpaceTemplateStore_Index_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpaceTemplateStore_Index_Call) RunAndReturn(run func(context.Context) ([]database.SpaceTemplate, error)) *MockSpaceTemplateStore_Index_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, input
func (_m *MockSpaceTemplateStore) Update(ctx context.Context, input database.SpaceTemplate) (*database.SpaceTemplate, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *database.SpaceTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.SpaceTemplate) (*database.SpaceTemplate, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.SpaceTemplate) *database.SpaceTemplate); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SpaceTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.SpaceTemplate) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpaceTemplateStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSpaceTemplateStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.SpaceTemplate
func (_e *MockSpaceTemplateStore_Expecter) Update(ctx interface{}, input interface{}) *MockSpaceTemplateStore_Update_Call {
	return &MockSpaceTemplateStore_Update_Call{Call: _e.mock.On("Update", ctx, input)}
}

func (_c *MockSpaceTemplateStore_Update_Call) Run(run func(ctx context.Context, input database.SpaceTemplate)) *MockSpaceTemplateStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.SpaceTemplate))
	})
	return _c
}

func (_c *MockSpaceTemplateStore_Update_Call) Return(_a0 *database.SpaceTemplate, _a1 error) *MockSpaceTemplateStore_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpaceTemplateStore_Update_Call) RunAndReturn(run func(context.Context, database.SpaceTemplate) (*database.SpaceTemplate, error)) *MockSpaceTemplateStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSpaceTemplateStore creates a new instance of MockSpaceTemplateStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpaceTemplateStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpaceTemplateStore {
	mock := &MockSpaceTemplateStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

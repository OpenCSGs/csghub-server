// Code generated by mockery v2.53.0. DO NOT EDIT.

//go:build saas || ee

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database/ee"

	types "opencsg.com/csghub-server/common/types"
)

// MockModelTreeStore is an autogenerated mock type for the ModelTreeStore type
type MockModelTreeStore struct {
	mock.Mock
}

type MockModelTreeStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModelTreeStore) EXPECT() *MockModelTreeStore_Expecter {
	return &MockModelTreeStore_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, relation
func (_m *MockModelTreeStore) Add(ctx context.Context, relation types.ModelTreeReq) error {
	ret := _m.Called(ctx, relation)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ModelTreeReq) error); ok {
		r0 = rf(ctx, relation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelTreeStore_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockModelTreeStore_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - relation types.ModelTreeReq
func (_e *MockModelTreeStore_Expecter) Add(ctx interface{}, relation interface{}) *MockModelTreeStore_Add_Call {
	return &MockModelTreeStore_Add_Call{Call: _e.mock.On("Add", ctx, relation)}
}

func (_c *MockModelTreeStore_Add_Call) Run(run func(ctx context.Context, relation types.ModelTreeReq)) *MockModelTreeStore_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ModelTreeReq))
	})
	return _c
}

func (_c *MockModelTreeStore_Add_Call) Return(_a0 error) *MockModelTreeStore_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelTreeStore_Add_Call) RunAndReturn(run func(context.Context, types.ModelTreeReq) error) *MockModelTreeStore_Add_Call {
	_c.Call.Return(run)
	return _c
}

// CheckRelationExist provides a mock function with given fields: ctx, repoID
func (_m *MockModelTreeStore) CheckRelationExist(ctx context.Context, repoID int64) (bool, error) {
	ret := _m.Called(ctx, repoID)

	if len(ret) == 0 {
		panic("no return value specified for CheckRelationExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, error)); ok {
		return rf(ctx, repoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, repoID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, repoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelTreeStore_CheckRelationExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckRelationExist'
type MockModelTreeStore_CheckRelationExist_Call struct {
	*mock.Call
}

// CheckRelationExist is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
func (_e *MockModelTreeStore_Expecter) CheckRelationExist(ctx interface{}, repoID interface{}) *MockModelTreeStore_CheckRelationExist_Call {
	return &MockModelTreeStore_CheckRelationExist_Call{Call: _e.mock.On("CheckRelationExist", ctx, repoID)}
}

func (_c *MockModelTreeStore_CheckRelationExist_Call) Run(run func(ctx context.Context, repoID int64)) *MockModelTreeStore_CheckRelationExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockModelTreeStore_CheckRelationExist_Call) Return(_a0 bool, _a1 error) *MockModelTreeStore_CheckRelationExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelTreeStore_CheckRelationExist_Call) RunAndReturn(run func(context.Context, int64) (bool, error)) *MockModelTreeStore_CheckRelationExist_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, targetRepoID
func (_m *MockModelTreeStore) Delete(ctx context.Context, targetRepoID int64) error {
	ret := _m.Called(ctx, targetRepoID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, targetRepoID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelTreeStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockModelTreeStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - targetRepoID int64
func (_e *MockModelTreeStore_Expecter) Delete(ctx interface{}, targetRepoID interface{}) *MockModelTreeStore_Delete_Call {
	return &MockModelTreeStore_Delete_Call{Call: _e.mock.On("Delete", ctx, targetRepoID)}
}

func (_c *MockModelTreeStore_Delete_Call) Run(run func(ctx context.Context, targetRepoID int64)) *MockModelTreeStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockModelTreeStore_Delete_Call) Return(_a0 error) *MockModelTreeStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelTreeStore_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *MockModelTreeStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetParent provides a mock function with given fields: ctx, targetRepoID
func (_m *MockModelTreeStore) GetParent(ctx context.Context, targetRepoID int64) ([]database.ModelTree, error) {
	ret := _m.Called(ctx, targetRepoID)

	if len(ret) == 0 {
		panic("no return value specified for GetParent")
	}

	var r0 []database.ModelTree
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]database.ModelTree, error)); ok {
		return rf(ctx, targetRepoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []database.ModelTree); ok {
		r0 = rf(ctx, targetRepoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.ModelTree)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, targetRepoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelTreeStore_GetParent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParent'
type MockModelTreeStore_GetParent_Call struct {
	*mock.Call
}

// GetParent is a helper method to define mock.On call
//   - ctx context.Context
//   - targetRepoID int64
func (_e *MockModelTreeStore_Expecter) GetParent(ctx interface{}, targetRepoID interface{}) *MockModelTreeStore_GetParent_Call {
	return &MockModelTreeStore_GetParent_Call{Call: _e.mock.On("GetParent", ctx, targetRepoID)}
}

func (_c *MockModelTreeStore_GetParent_Call) Run(run func(ctx context.Context, targetRepoID int64)) *MockModelTreeStore_GetParent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockModelTreeStore_GetParent_Call) Return(_a0 []database.ModelTree, _a1 error) *MockModelTreeStore_GetParent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelTreeStore_GetParent_Call) RunAndReturn(run func(context.Context, int64) ([]database.ModelTree, error)) *MockModelTreeStore_GetParent_Call {
	_c.Call.Return(run)
	return _c
}

// GetSourceRelationCount provides a mock function with given fields: ctx, sourceRepoID, relation
func (_m *MockModelTreeStore) GetSourceRelationCount(ctx context.Context, sourceRepoID int64, relation types.ModelRelation) (int, error) {
	ret := _m.Called(ctx, sourceRepoID, relation)

	if len(ret) == 0 {
		panic("no return value specified for GetSourceRelationCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, types.ModelRelation) (int, error)); ok {
		return rf(ctx, sourceRepoID, relation)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, types.ModelRelation) int); ok {
		r0 = rf(ctx, sourceRepoID, relation)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, types.ModelRelation) error); ok {
		r1 = rf(ctx, sourceRepoID, relation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelTreeStore_GetSourceRelationCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSourceRelationCount'
type MockModelTreeStore_GetSourceRelationCount_Call struct {
	*mock.Call
}

// GetSourceRelationCount is a helper method to define mock.On call
//   - ctx context.Context
//   - sourceRepoID int64
//   - relation types.ModelRelation
func (_e *MockModelTreeStore_Expecter) GetSourceRelationCount(ctx interface{}, sourceRepoID interface{}, relation interface{}) *MockModelTreeStore_GetSourceRelationCount_Call {
	return &MockModelTreeStore_GetSourceRelationCount_Call{Call: _e.mock.On("GetSourceRelationCount", ctx, sourceRepoID, relation)}
}

func (_c *MockModelTreeStore_GetSourceRelationCount_Call) Run(run func(ctx context.Context, sourceRepoID int64, relation types.ModelRelation)) *MockModelTreeStore_GetSourceRelationCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(types.ModelRelation))
	})
	return _c
}

func (_c *MockModelTreeStore_GetSourceRelationCount_Call) Return(_a0 int, _a1 error) *MockModelTreeStore_GetSourceRelationCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelTreeStore_GetSourceRelationCount_Call) RunAndReturn(run func(context.Context, int64, types.ModelRelation) (int, error)) *MockModelTreeStore_GetSourceRelationCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModelTreeStore creates a new instance of MockModelTreeStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModelTreeStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModelTreeStore {
	mock := &MockModelTreeStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockSyncVersionStore is an autogenerated mock type for the SyncVersionStore type
type MockSyncVersionStore struct {
	mock.Mock
}

type MockSyncVersionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSyncVersionStore) EXPECT() *MockSyncVersionStore_Expecter {
	return &MockSyncVersionStore_Expecter{mock: &_m.Mock}
}

// BatchCreate provides a mock function with given fields: ctx, versions
func (_m *MockSyncVersionStore) BatchCreate(ctx context.Context, versions []database.SyncVersion) error {
	ret := _m.Called(ctx, versions)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []database.SyncVersion) error); ok {
		r0 = rf(ctx, versions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyncVersionStore_BatchCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchCreate'
type MockSyncVersionStore_BatchCreate_Call struct {
	*mock.Call
}

// BatchCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - versions []database.SyncVersion
func (_e *MockSyncVersionStore_Expecter) BatchCreate(ctx interface{}, versions interface{}) *MockSyncVersionStore_BatchCreate_Call {
	return &MockSyncVersionStore_BatchCreate_Call{Call: _e.mock.On("BatchCreate", ctx, versions)}
}

func (_c *MockSyncVersionStore_BatchCreate_Call) Run(run func(ctx context.Context, versions []database.SyncVersion)) *MockSyncVersionStore_BatchCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]database.SyncVersion))
	})
	return _c
}

func (_c *MockSyncVersionStore_BatchCreate_Call) Return(_a0 error) *MockSyncVersionStore_BatchCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyncVersionStore_BatchCreate_Call) RunAndReturn(run func(context.Context, []database.SyncVersion) error) *MockSyncVersionStore_BatchCreate_Call {
	_c.Call.Return(run)
	return _c
}

// BatchDeleteOthers provides a mock function with given fields: ctx, repoType, keepPaths
func (_m *MockSyncVersionStore) BatchDeleteOthers(ctx context.Context, repoType types.RepositoryType, keepPaths []string) error {
	ret := _m.Called(ctx, repoType, keepPaths)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeleteOthers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RepositoryType, []string) error); ok {
		r0 = rf(ctx, repoType, keepPaths)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyncVersionStore_BatchDeleteOthers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchDeleteOthers'
type MockSyncVersionStore_BatchDeleteOthers_Call struct {
	*mock.Call
}

// BatchDeleteOthers is a helper method to define mock.On call
//   - ctx context.Context
//   - repoType types.RepositoryType
//   - keepPaths []string
func (_e *MockSyncVersionStore_Expecter) BatchDeleteOthers(ctx interface{}, repoType interface{}, keepPaths interface{}) *MockSyncVersionStore_BatchDeleteOthers_Call {
	return &MockSyncVersionStore_BatchDeleteOthers_Call{Call: _e.mock.On("BatchDeleteOthers", ctx, repoType, keepPaths)}
}

func (_c *MockSyncVersionStore_BatchDeleteOthers_Call) Run(run func(ctx context.Context, repoType types.RepositoryType, keepPaths []string)) *MockSyncVersionStore_BatchDeleteOthers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RepositoryType), args[2].([]string))
	})
	return _c
}

func (_c *MockSyncVersionStore_BatchDeleteOthers_Call) Return(_a0 error) *MockSyncVersionStore_BatchDeleteOthers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyncVersionStore_BatchDeleteOthers_Call) RunAndReturn(run func(context.Context, types.RepositoryType, []string) error) *MockSyncVersionStore_BatchDeleteOthers_Call {
	_c.Call.Return(run)
	return _c
}

// Complete provides a mock function with given fields: ctx, version
func (_m *MockSyncVersionStore) Complete(ctx context.Context, version database.SyncVersion) error {
	ret := _m.Called(ctx, version)

	if len(ret) == 0 {
		panic("no return value specified for Complete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.SyncVersion) error); ok {
		r0 = rf(ctx, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyncVersionStore_Complete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Complete'
type MockSyncVersionStore_Complete_Call struct {
	*mock.Call
}

// Complete is a helper method to define mock.On call
//   - ctx context.Context
//   - version database.SyncVersion
func (_e *MockSyncVersionStore_Expecter) Complete(ctx interface{}, version interface{}) *MockSyncVersionStore_Complete_Call {
	return &MockSyncVersionStore_Complete_Call{Call: _e.mock.On("Complete", ctx, version)}
}

func (_c *MockSyncVersionStore_Complete_Call) Run(run func(ctx context.Context, version database.SyncVersion)) *MockSyncVersionStore_Complete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.SyncVersion))
	})
	return _c
}

func (_c *MockSyncVersionStore_Complete_Call) Return(_a0 error) *MockSyncVersionStore_Complete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyncVersionStore_Complete_Call) RunAndReturn(run func(context.Context, database.SyncVersion) error) *MockSyncVersionStore_Complete_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, version
func (_m *MockSyncVersionStore) Create(ctx context.Context, version *database.SyncVersion) error {
	ret := _m.Called(ctx, version)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.SyncVersion) error); ok {
		r0 = rf(ctx, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyncVersionStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSyncVersionStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - version *database.SyncVersion
func (_e *MockSyncVersionStore_Expecter) Create(ctx interface{}, version interface{}) *MockSyncVersionStore_Create_Call {
	return &MockSyncVersionStore_Create_Call{Call: _e.mock.On("Create", ctx, version)}
}

func (_c *MockSyncVersionStore_Create_Call) Run(run func(ctx context.Context, version *database.SyncVersion)) *MockSyncVersionStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.SyncVersion))
	})
	return _c
}

func (_c *MockSyncVersionStore_Create_Call) Return(err error) *MockSyncVersionStore_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSyncVersionStore_Create_Call) RunAndReturn(run func(context.Context, *database.SyncVersion) error) *MockSyncVersionStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAll provides a mock function with given fields: ctx, repoType
func (_m *MockSyncVersionStore) DeleteAll(ctx context.Context, repoType types.RepositoryType) error {
	ret := _m.Called(ctx, repoType)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RepositoryType) error); ok {
		r0 = rf(ctx, repoType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyncVersionStore_DeleteAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAll'
type MockSyncVersionStore_DeleteAll_Call struct {
	*mock.Call
}

// DeleteAll is a helper method to define mock.On call
//   - ctx context.Context
//   - repoType types.RepositoryType
func (_e *MockSyncVersionStore_Expecter) DeleteAll(ctx interface{}, repoType interface{}) *MockSyncVersionStore_DeleteAll_Call {
	return &MockSyncVersionStore_DeleteAll_Call{Call: _e.mock.On("DeleteAll", ctx, repoType)}
}

func (_c *MockSyncVersionStore_DeleteAll_Call) Run(run func(ctx context.Context, repoType types.RepositoryType)) *MockSyncVersionStore_DeleteAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RepositoryType))
	})
	return _c
}

func (_c *MockSyncVersionStore_DeleteAll_Call) Return(_a0 error) *MockSyncVersionStore_DeleteAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyncVersionStore_DeleteAll_Call) RunAndReturn(run func(context.Context, types.RepositoryType) error) *MockSyncVersionStore_DeleteAll_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOldVersions provides a mock function with given fields: ctx
func (_m *MockSyncVersionStore) DeleteOldVersions(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOldVersions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyncVersionStore_DeleteOldVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOldVersions'
type MockSyncVersionStore_DeleteOldVersions_Call struct {
	*mock.Call
}

// DeleteOldVersions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSyncVersionStore_Expecter) DeleteOldVersions(ctx interface{}) *MockSyncVersionStore_DeleteOldVersions_Call {
	return &MockSyncVersionStore_DeleteOldVersions_Call{Call: _e.mock.On("DeleteOldVersions", ctx)}
}

func (_c *MockSyncVersionStore_DeleteOldVersions_Call) Run(run func(ctx context.Context)) *MockSyncVersionStore_DeleteOldVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSyncVersionStore_DeleteOldVersions_Call) Return(_a0 error) *MockSyncVersionStore_DeleteOldVersions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyncVersionStore_DeleteOldVersions_Call) RunAndReturn(run func(context.Context) error) *MockSyncVersionStore_DeleteOldVersions_Call {
	_c.Call.Return(run)
	return _c
}

// FindByPath provides a mock function with given fields: ctx, path
func (_m *MockSyncVersionStore) FindByPath(ctx context.Context, path string) (*database.SyncVersion, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for FindByPath")
	}

	var r0 *database.SyncVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.SyncVersion, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.SyncVersion); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SyncVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncVersionStore_FindByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByPath'
type MockSyncVersionStore_FindByPath_Call struct {
	*mock.Call
}

// FindByPath is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockSyncVersionStore_Expecter) FindByPath(ctx interface{}, path interface{}) *MockSyncVersionStore_FindByPath_Call {
	return &MockSyncVersionStore_FindByPath_Call{Call: _e.mock.On("FindByPath", ctx, path)}
}

func (_c *MockSyncVersionStore_FindByPath_Call) Run(run func(ctx context.Context, path string)) *MockSyncVersionStore_FindByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSyncVersionStore_FindByPath_Call) Return(_a0 *database.SyncVersion, _a1 error) *MockSyncVersionStore_FindByPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncVersionStore_FindByPath_Call) RunAndReturn(run func(context.Context, string) (*database.SyncVersion, error)) *MockSyncVersionStore_FindByPath_Call {
	_c.Call.Return(run)
	return _c
}

// FindByRepoTypeAndPath provides a mock function with given fields: ctx, path, repoType
func (_m *MockSyncVersionStore) FindByRepoTypeAndPath(ctx context.Context, path string, repoType types.RepositoryType) (*database.SyncVersion, error) {
	ret := _m.Called(ctx, path, repoType)

	if len(ret) == 0 {
		panic("no return value specified for FindByRepoTypeAndPath")
	}

	var r0 *database.SyncVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.RepositoryType) (*database.SyncVersion, error)); ok {
		return rf(ctx, path, repoType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.RepositoryType) *database.SyncVersion); ok {
		r0 = rf(ctx, path, repoType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SyncVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.RepositoryType) error); ok {
		r1 = rf(ctx, path, repoType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncVersionStore_FindByRepoTypeAndPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByRepoTypeAndPath'
type MockSyncVersionStore_FindByRepoTypeAndPath_Call struct {
	*mock.Call
}

// FindByRepoTypeAndPath is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - repoType types.RepositoryType
func (_e *MockSyncVersionStore_Expecter) FindByRepoTypeAndPath(ctx interface{}, path interface{}, repoType interface{}) *MockSyncVersionStore_FindByRepoTypeAndPath_Call {
	return &MockSyncVersionStore_FindByRepoTypeAndPath_Call{Call: _e.mock.On("FindByRepoTypeAndPath", ctx, path, repoType)}
}

func (_c *MockSyncVersionStore_FindByRepoTypeAndPath_Call) Run(run func(ctx context.Context, path string, repoType types.RepositoryType)) *MockSyncVersionStore_FindByRepoTypeAndPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.RepositoryType))
	})
	return _c
}

func (_c *MockSyncVersionStore_FindByRepoTypeAndPath_Call) Return(_a0 *database.SyncVersion, _a1 error) *MockSyncVersionStore_FindByRepoTypeAndPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncVersionStore_FindByRepoTypeAndPath_Call) RunAndReturn(run func(context.Context, string, types.RepositoryType) (*database.SyncVersion, error)) *MockSyncVersionStore_FindByRepoTypeAndPath_Call {
	_c.Call.Return(run)
	return _c
}

// FindWithBatch provides a mock function with given fields: ctx, repoType, batchSize, batch
func (_m *MockSyncVersionStore) FindWithBatch(ctx context.Context, repoType types.RepositoryType, batchSize int, batch int) ([]database.SyncVersion, error) {
	ret := _m.Called(ctx, repoType, batchSize, batch)

	if len(ret) == 0 {
		panic("no return value specified for FindWithBatch")
	}

	var r0 []database.SyncVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RepositoryType, int, int) ([]database.SyncVersion, error)); ok {
		return rf(ctx, repoType, batchSize, batch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.RepositoryType, int, int) []database.SyncVersion); ok {
		r0 = rf(ctx, repoType, batchSize, batch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.SyncVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.RepositoryType, int, int) error); ok {
		r1 = rf(ctx, repoType, batchSize, batch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncVersionStore_FindWithBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindWithBatch'
type MockSyncVersionStore_FindWithBatch_Call struct {
	*mock.Call
}

// FindWithBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - repoType types.RepositoryType
//   - batchSize int
//   - batch int
func (_e *MockSyncVersionStore_Expecter) FindWithBatch(ctx interface{}, repoType interface{}, batchSize interface{}, batch interface{}) *MockSyncVersionStore_FindWithBatch_Call {
	return &MockSyncVersionStore_FindWithBatch_Call{Call: _e.mock.On("FindWithBatch", ctx, repoType, batchSize, batch)}
}

func (_c *MockSyncVersionStore_FindWithBatch_Call) Run(run func(ctx context.Context, repoType types.RepositoryType, batchSize int, batch int)) *MockSyncVersionStore_FindWithBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RepositoryType), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockSyncVersionStore_FindWithBatch_Call) Return(_a0 []database.SyncVersion, _a1 error) *MockSyncVersionStore_FindWithBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncVersionStore_FindWithBatch_Call) RunAndReturn(run func(context.Context, types.RepositoryType, int, int) ([]database.SyncVersion, error)) *MockSyncVersionStore_FindWithBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSyncVersionStore creates a new instance of MockSyncVersionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSyncVersionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSyncVersionStore {
	mock := &MockSyncVersionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

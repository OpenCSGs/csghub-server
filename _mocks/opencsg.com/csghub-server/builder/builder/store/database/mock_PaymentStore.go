// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockPaymentStore is an autogenerated mock type for the PaymentStore type
type MockPaymentStore struct {
	mock.Mock
}

type MockPaymentStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymentStore) EXPECT() *MockPaymentStore_Expecter {
	return &MockPaymentStore_Expecter{mock: &_m.Mock}
}

// CreatePayment provides a mock function with given fields: ctx, payment
func (_m *MockPaymentStore) CreatePayment(ctx context.Context, payment *database.Payment) error {
	ret := _m.Called(ctx, payment)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.Payment) error); ok {
		r0 = rf(ctx, payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPaymentStore_CreatePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePayment'
type MockPaymentStore_CreatePayment_Call struct {
	*mock.Call
}

// CreatePayment is a helper method to define mock.On call
//   - ctx context.Context
//   - payment *database.Payment
func (_e *MockPaymentStore_Expecter) CreatePayment(ctx interface{}, payment interface{}) *MockPaymentStore_CreatePayment_Call {
	return &MockPaymentStore_CreatePayment_Call{Call: _e.mock.On("CreatePayment", ctx, payment)}
}

func (_c *MockPaymentStore_CreatePayment_Call) Run(run func(ctx context.Context, payment *database.Payment)) *MockPaymentStore_CreatePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.Payment))
	})
	return _c
}

func (_c *MockPaymentStore_CreatePayment_Call) Return(_a0 error) *MockPaymentStore_CreatePayment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaymentStore_CreatePayment_Call) RunAndReturn(run func(context.Context, *database.Payment) error) *MockPaymentStore_CreatePayment_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentByID provides a mock function with given fields: ctx, paymentUUID
func (_m *MockPaymentStore) GetPaymentByID(ctx context.Context, paymentUUID string) (*database.Payment, error) {
	ret := _m.Called(ctx, paymentUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentByID")
	}

	var r0 *database.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.Payment, error)); ok {
		return rf(ctx, paymentUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.Payment); ok {
		r0 = rf(ctx, paymentUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, paymentUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentStore_GetPaymentByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentByID'
type MockPaymentStore_GetPaymentByID_Call struct {
	*mock.Call
}

// GetPaymentByID is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentUUID string
func (_e *MockPaymentStore_Expecter) GetPaymentByID(ctx interface{}, paymentUUID interface{}) *MockPaymentStore_GetPaymentByID_Call {
	return &MockPaymentStore_GetPaymentByID_Call{Call: _e.mock.On("GetPaymentByID", ctx, paymentUUID)}
}

func (_c *MockPaymentStore_GetPaymentByID_Call) Run(run func(ctx context.Context, paymentUUID string)) *MockPaymentStore_GetPaymentByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPaymentStore_GetPaymentByID_Call) Return(_a0 *database.Payment, _a1 error) *MockPaymentStore_GetPaymentByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentStore_GetPaymentByID_Call) RunAndReturn(run func(context.Context, string) (*database.Payment, error)) *MockPaymentStore_GetPaymentByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetPaymentByOrderNo provides a mock function with given fields: ctx, orderNo
func (_m *MockPaymentStore) GetPaymentByOrderNo(ctx context.Context, orderNo string) (*database.Payment, error) {
	ret := _m.Called(ctx, orderNo)

	if len(ret) == 0 {
		panic("no return value specified for GetPaymentByOrderNo")
	}

	var r0 *database.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.Payment, error)); ok {
		return rf(ctx, orderNo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.Payment); ok {
		r0 = rf(ctx, orderNo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderNo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentStore_GetPaymentByOrderNo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPaymentByOrderNo'
type MockPaymentStore_GetPaymentByOrderNo_Call struct {
	*mock.Call
}

// GetPaymentByOrderNo is a helper method to define mock.On call
//   - ctx context.Context
//   - orderNo string
func (_e *MockPaymentStore_Expecter) GetPaymentByOrderNo(ctx interface{}, orderNo interface{}) *MockPaymentStore_GetPaymentByOrderNo_Call {
	return &MockPaymentStore_GetPaymentByOrderNo_Call{Call: _e.mock.On("GetPaymentByOrderNo", ctx, orderNo)}
}

func (_c *MockPaymentStore_GetPaymentByOrderNo_Call) Run(run func(ctx context.Context, orderNo string)) *MockPaymentStore_GetPaymentByOrderNo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPaymentStore_GetPaymentByOrderNo_Call) Return(_a0 *database.Payment, _a1 error) *MockPaymentStore_GetPaymentByOrderNo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentStore_GetPaymentByOrderNo_Call) RunAndReturn(run func(context.Context, string) (*database.Payment, error)) *MockPaymentStore_GetPaymentByOrderNo_Call {
	_c.Call.Return(run)
	return _c
}

// ListPayments provides a mock function with given fields: ctx, filter
func (_m *MockPaymentStore) ListPayments(ctx context.Context, filter *database.PaymentFilter) ([]*database.Payment, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListPayments")
	}

	var r0 []*database.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.PaymentFilter) ([]*database.Payment, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *database.PaymentFilter) []*database.Payment); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *database.PaymentFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentStore_ListPayments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPayments'
type MockPaymentStore_ListPayments_Call struct {
	*mock.Call
}

// ListPayments is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *database.PaymentFilter
func (_e *MockPaymentStore_Expecter) ListPayments(ctx interface{}, filter interface{}) *MockPaymentStore_ListPayments_Call {
	return &MockPaymentStore_ListPayments_Call{Call: _e.mock.On("ListPayments", ctx, filter)}
}

func (_c *MockPaymentStore_ListPayments_Call) Run(run func(ctx context.Context, filter *database.PaymentFilter)) *MockPaymentStore_ListPayments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.PaymentFilter))
	})
	return _c
}

func (_c *MockPaymentStore_ListPayments_Call) Return(_a0 []*database.Payment, _a1 error) *MockPaymentStore_ListPayments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentStore_ListPayments_Call) RunAndReturn(run func(context.Context, *database.PaymentFilter) ([]*database.Payment, error)) *MockPaymentStore_ListPayments_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePayment provides a mock function with given fields: ctx, payment
func (_m *MockPaymentStore) UpdatePayment(ctx context.Context, payment *database.Payment) error {
	ret := _m.Called(ctx, payment)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.Payment) error); ok {
		r0 = rf(ctx, payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPaymentStore_UpdatePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePayment'
type MockPaymentStore_UpdatePayment_Call struct {
	*mock.Call
}

// UpdatePayment is a helper method to define mock.On call
//   - ctx context.Context
//   - payment *database.Payment
func (_e *MockPaymentStore_Expecter) UpdatePayment(ctx interface{}, payment interface{}) *MockPaymentStore_UpdatePayment_Call {
	return &MockPaymentStore_UpdatePayment_Call{Call: _e.mock.On("UpdatePayment", ctx, payment)}
}

func (_c *MockPaymentStore_UpdatePayment_Call) Run(run func(ctx context.Context, payment *database.Payment)) *MockPaymentStore_UpdatePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.Payment))
	})
	return _c
}

func (_c *MockPaymentStore_UpdatePayment_Call) Return(_a0 error) *MockPaymentStore_UpdatePayment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaymentStore_UpdatePayment_Call) RunAndReturn(run func(context.Context, *database.Payment) error) *MockPaymentStore_UpdatePayment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPaymentStore creates a new instance of MockPaymentStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentStore {
	mock := &MockPaymentStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

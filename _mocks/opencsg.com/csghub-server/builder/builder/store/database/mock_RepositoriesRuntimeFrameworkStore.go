// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockRepositoriesRuntimeFrameworkStore is an autogenerated mock type for the RepositoriesRuntimeFrameworkStore type
type MockRepositoriesRuntimeFrameworkStore struct {
	mock.Mock
}

type MockRepositoriesRuntimeFrameworkStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositoriesRuntimeFrameworkStore) EXPECT() *MockRepositoriesRuntimeFrameworkStore_Expecter {
	return &MockRepositoriesRuntimeFrameworkStore_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, runtimeFrameworkID, repoID, deployType
func (_m *MockRepositoriesRuntimeFrameworkStore) Add(ctx context.Context, runtimeFrameworkID int64, repoID int64, deployType int) error {
	ret := _m.Called(ctx, runtimeFrameworkID, repoID, deployType)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int) error); ok {
		r0 = rf(ctx, runtimeFrameworkID, repoID, deployType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepositoriesRuntimeFrameworkStore_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockRepositoriesRuntimeFrameworkStore_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - runtimeFrameworkID int64
//   - repoID int64
//   - deployType int
func (_e *MockRepositoriesRuntimeFrameworkStore_Expecter) Add(ctx interface{}, runtimeFrameworkID interface{}, repoID interface{}, deployType interface{}) *MockRepositoriesRuntimeFrameworkStore_Add_Call {
	return &MockRepositoriesRuntimeFrameworkStore_Add_Call{Call: _e.mock.On("Add", ctx, runtimeFrameworkID, repoID, deployType)}
}

func (_c *MockRepositoriesRuntimeFrameworkStore_Add_Call) Run(run func(ctx context.Context, runtimeFrameworkID int64, repoID int64, deployType int)) *MockRepositoriesRuntimeFrameworkStore_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int))
	})
	return _c
}

func (_c *MockRepositoriesRuntimeFrameworkStore_Add_Call) Return(_a0 error) *MockRepositoriesRuntimeFrameworkStore_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepositoriesRuntimeFrameworkStore_Add_Call) RunAndReturn(run func(context.Context, int64, int64, int) error) *MockRepositoriesRuntimeFrameworkStore_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, runtimeFrameworkID, repoID, deployType
func (_m *MockRepositoriesRuntimeFrameworkStore) Delete(ctx context.Context, runtimeFrameworkID int64, repoID int64, deployType int) error {
	ret := _m.Called(ctx, runtimeFrameworkID, repoID, deployType)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int) error); ok {
		r0 = rf(ctx, runtimeFrameworkID, repoID, deployType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepositoriesRuntimeFrameworkStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepositoriesRuntimeFrameworkStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - runtimeFrameworkID int64
//   - repoID int64
//   - deployType int
func (_e *MockRepositoriesRuntimeFrameworkStore_Expecter) Delete(ctx interface{}, runtimeFrameworkID interface{}, repoID interface{}, deployType interface{}) *MockRepositoriesRuntimeFrameworkStore_Delete_Call {
	return &MockRepositoriesRuntimeFrameworkStore_Delete_Call{Call: _e.mock.On("Delete", ctx, runtimeFrameworkID, repoID, deployType)}
}

func (_c *MockRepositoriesRuntimeFrameworkStore_Delete_Call) Run(run func(ctx context.Context, runtimeFrameworkID int64, repoID int64, deployType int)) *MockRepositoriesRuntimeFrameworkStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int))
	})
	return _c
}

func (_c *MockRepositoriesRuntimeFrameworkStore_Delete_Call) Return(_a0 error) *MockRepositoriesRuntimeFrameworkStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepositoriesRuntimeFrameworkStore_Delete_Call) RunAndReturn(run func(context.Context, int64, int64, int) error) *MockRepositoriesRuntimeFrameworkStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByRepoID provides a mock function with given fields: ctx, repoID
func (_m *MockRepositoriesRuntimeFrameworkStore) DeleteByRepoID(ctx context.Context, repoID int64) error {
	ret := _m.Called(ctx, repoID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByRepoID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, repoID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepositoriesRuntimeFrameworkStore_DeleteByRepoID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByRepoID'
type MockRepositoriesRuntimeFrameworkStore_DeleteByRepoID_Call struct {
	*mock.Call
}

// DeleteByRepoID is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
func (_e *MockRepositoriesRuntimeFrameworkStore_Expecter) DeleteByRepoID(ctx interface{}, repoID interface{}) *MockRepositoriesRuntimeFrameworkStore_DeleteByRepoID_Call {
	return &MockRepositoriesRuntimeFrameworkStore_DeleteByRepoID_Call{Call: _e.mock.On("DeleteByRepoID", ctx, repoID)}
}

func (_c *MockRepositoriesRuntimeFrameworkStore_DeleteByRepoID_Call) Run(run func(ctx context.Context, repoID int64)) *MockRepositoriesRuntimeFrameworkStore_DeleteByRepoID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepositoriesRuntimeFrameworkStore_DeleteByRepoID_Call) Return(_a0 error) *MockRepositoriesRuntimeFrameworkStore_DeleteByRepoID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepositoriesRuntimeFrameworkStore_DeleteByRepoID_Call) RunAndReturn(run func(context.Context, int64) error) *MockRepositoriesRuntimeFrameworkStore_DeleteByRepoID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIDsAndType provides a mock function with given fields: ctx, runtimeFrameworkID, repoID, deployType
func (_m *MockRepositoriesRuntimeFrameworkStore) GetByIDsAndType(ctx context.Context, runtimeFrameworkID int64, repoID int64, deployType int) ([]database.RepositoriesRuntimeFramework, error) {
	ret := _m.Called(ctx, runtimeFrameworkID, repoID, deployType)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDsAndType")
	}

	var r0 []database.RepositoriesRuntimeFramework
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int) ([]database.RepositoriesRuntimeFramework, error)); ok {
		return rf(ctx, runtimeFrameworkID, repoID, deployType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int) []database.RepositoriesRuntimeFramework); ok {
		r0 = rf(ctx, runtimeFrameworkID, repoID, deployType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.RepositoriesRuntimeFramework)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int) error); ok {
		r1 = rf(ctx, runtimeFrameworkID, repoID, deployType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoriesRuntimeFrameworkStore_GetByIDsAndType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIDsAndType'
type MockRepositoriesRuntimeFrameworkStore_GetByIDsAndType_Call struct {
	*mock.Call
}

// GetByIDsAndType is a helper method to define mock.On call
//   - ctx context.Context
//   - runtimeFrameworkID int64
//   - repoID int64
//   - deployType int
func (_e *MockRepositoriesRuntimeFrameworkStore_Expecter) GetByIDsAndType(ctx interface{}, runtimeFrameworkID interface{}, repoID interface{}, deployType interface{}) *MockRepositoriesRuntimeFrameworkStore_GetByIDsAndType_Call {
	return &MockRepositoriesRuntimeFrameworkStore_GetByIDsAndType_Call{Call: _e.mock.On("GetByIDsAndType", ctx, runtimeFrameworkID, repoID, deployType)}
}

func (_c *MockRepositoriesRuntimeFrameworkStore_GetByIDsAndType_Call) Run(run func(ctx context.Context, runtimeFrameworkID int64, repoID int64, deployType int)) *MockRepositoriesRuntimeFrameworkStore_GetByIDsAndType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int))
	})
	return _c
}

func (_c *MockRepositoriesRuntimeFrameworkStore_GetByIDsAndType_Call) Return(_a0 []database.RepositoriesRuntimeFramework, _a1 error) *MockRepositoriesRuntimeFrameworkStore_GetByIDsAndType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoriesRuntimeFrameworkStore_GetByIDsAndType_Call) RunAndReturn(run func(context.Context, int64, int64, int) ([]database.RepositoriesRuntimeFramework, error)) *MockRepositoriesRuntimeFrameworkStore_GetByIDsAndType_Call {
	_c.Call.Return(run)
	return _c
}

// GetByRepoIDs provides a mock function with given fields: ctx, repoID
func (_m *MockRepositoriesRuntimeFrameworkStore) GetByRepoIDs(ctx context.Context, repoID int64) ([]database.RepositoriesRuntimeFramework, error) {
	ret := _m.Called(ctx, repoID)

	if len(ret) == 0 {
		panic("no return value specified for GetByRepoIDs")
	}

	var r0 []database.RepositoriesRuntimeFramework
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]database.RepositoriesRuntimeFramework, error)); ok {
		return rf(ctx, repoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []database.RepositoriesRuntimeFramework); ok {
		r0 = rf(ctx, repoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.RepositoriesRuntimeFramework)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, repoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoriesRuntimeFrameworkStore_GetByRepoIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByRepoIDs'
type MockRepositoriesRuntimeFrameworkStore_GetByRepoIDs_Call struct {
	*mock.Call
}

// GetByRepoIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
func (_e *MockRepositoriesRuntimeFrameworkStore_Expecter) GetByRepoIDs(ctx interface{}, repoID interface{}) *MockRepositoriesRuntimeFrameworkStore_GetByRepoIDs_Call {
	return &MockRepositoriesRuntimeFrameworkStore_GetByRepoIDs_Call{Call: _e.mock.On("GetByRepoIDs", ctx, repoID)}
}

func (_c *MockRepositoriesRuntimeFrameworkStore_GetByRepoIDs_Call) Run(run func(ctx context.Context, repoID int64)) *MockRepositoriesRuntimeFrameworkStore_GetByRepoIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepositoriesRuntimeFrameworkStore_GetByRepoIDs_Call) Return(_a0 []database.RepositoriesRuntimeFramework, _a1 error) *MockRepositoriesRuntimeFrameworkStore_GetByRepoIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoriesRuntimeFrameworkStore_GetByRepoIDs_Call) RunAndReturn(run func(context.Context, int64) ([]database.RepositoriesRuntimeFramework, error)) *MockRepositoriesRuntimeFrameworkStore_GetByRepoIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetByRepoIDsAndType provides a mock function with given fields: ctx, repoID, deployType
func (_m *MockRepositoriesRuntimeFrameworkStore) GetByRepoIDsAndType(ctx context.Context, repoID int64, deployType int) ([]database.RepositoriesRuntimeFramework, error) {
	ret := _m.Called(ctx, repoID, deployType)

	if len(ret) == 0 {
		panic("no return value specified for GetByRepoIDsAndType")
	}

	var r0 []database.RepositoriesRuntimeFramework
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) ([]database.RepositoriesRuntimeFramework, error)); ok {
		return rf(ctx, repoID, deployType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) []database.RepositoriesRuntimeFramework); ok {
		r0 = rf(ctx, repoID, deployType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.RepositoriesRuntimeFramework)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int) error); ok {
		r1 = rf(ctx, repoID, deployType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoriesRuntimeFrameworkStore_GetByRepoIDsAndType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByRepoIDsAndType'
type MockRepositoriesRuntimeFrameworkStore_GetByRepoIDsAndType_Call struct {
	*mock.Call
}

// GetByRepoIDsAndType is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
//   - deployType int
func (_e *MockRepositoriesRuntimeFrameworkStore_Expecter) GetByRepoIDsAndType(ctx interface{}, repoID interface{}, deployType interface{}) *MockRepositoriesRuntimeFrameworkStore_GetByRepoIDsAndType_Call {
	return &MockRepositoriesRuntimeFrameworkStore_GetByRepoIDsAndType_Call{Call: _e.mock.On("GetByRepoIDsAndType", ctx, repoID, deployType)}
}

func (_c *MockRepositoriesRuntimeFrameworkStore_GetByRepoIDsAndType_Call) Run(run func(ctx context.Context, repoID int64, deployType int)) *MockRepositoriesRuntimeFrameworkStore_GetByRepoIDsAndType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int))
	})
	return _c
}

func (_c *MockRepositoriesRuntimeFrameworkStore_GetByRepoIDsAndType_Call) Return(_a0 []database.RepositoriesRuntimeFramework, _a1 error) *MockRepositoriesRuntimeFrameworkStore_GetByRepoIDsAndType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoriesRuntimeFrameworkStore_GetByRepoIDsAndType_Call) RunAndReturn(run func(context.Context, int64, int) ([]database.RepositoriesRuntimeFramework, error)) *MockRepositoriesRuntimeFrameworkStore_GetByRepoIDsAndType_Call {
	_c.Call.Return(run)
	return _c
}

// ListByRuntimeFrameworkID provides a mock function with given fields: ctx, runtimeFrameworkID, deployType
func (_m *MockRepositoriesRuntimeFrameworkStore) ListByRuntimeFrameworkID(ctx context.Context, runtimeFrameworkID int64, deployType int) ([]database.RepositoriesRuntimeFramework, error) {
	ret := _m.Called(ctx, runtimeFrameworkID, deployType)

	if len(ret) == 0 {
		panic("no return value specified for ListByRuntimeFrameworkID")
	}

	var r0 []database.RepositoriesRuntimeFramework
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) ([]database.RepositoriesRuntimeFramework, error)); ok {
		return rf(ctx, runtimeFrameworkID, deployType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int) []database.RepositoriesRuntimeFramework); ok {
		r0 = rf(ctx, runtimeFrameworkID, deployType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.RepositoriesRuntimeFramework)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int) error); ok {
		r1 = rf(ctx, runtimeFrameworkID, deployType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoriesRuntimeFrameworkStore_ListByRuntimeFrameworkID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByRuntimeFrameworkID'
type MockRepositoriesRuntimeFrameworkStore_ListByRuntimeFrameworkID_Call struct {
	*mock.Call
}

// ListByRuntimeFrameworkID is a helper method to define mock.On call
//   - ctx context.Context
//   - runtimeFrameworkID int64
//   - deployType int
func (_e *MockRepositoriesRuntimeFrameworkStore_Expecter) ListByRuntimeFrameworkID(ctx interface{}, runtimeFrameworkID interface{}, deployType interface{}) *MockRepositoriesRuntimeFrameworkStore_ListByRuntimeFrameworkID_Call {
	return &MockRepositoriesRuntimeFrameworkStore_ListByRuntimeFrameworkID_Call{Call: _e.mock.On("ListByRuntimeFrameworkID", ctx, runtimeFrameworkID, deployType)}
}

func (_c *MockRepositoriesRuntimeFrameworkStore_ListByRuntimeFrameworkID_Call) Run(run func(ctx context.Context, runtimeFrameworkID int64, deployType int)) *MockRepositoriesRuntimeFrameworkStore_ListByRuntimeFrameworkID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int))
	})
	return _c
}

func (_c *MockRepositoriesRuntimeFrameworkStore_ListByRuntimeFrameworkID_Call) Return(_a0 []database.RepositoriesRuntimeFramework, _a1 error) *MockRepositoriesRuntimeFrameworkStore_ListByRuntimeFrameworkID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoriesRuntimeFrameworkStore_ListByRuntimeFrameworkID_Call) RunAndReturn(run func(context.Context, int64, int) ([]database.RepositoriesRuntimeFramework, error)) *MockRepositoriesRuntimeFrameworkStore_ListByRuntimeFrameworkID_Call {
	_c.Call.Return(run)
	return _c
}

// ListRepoIDsByType provides a mock function with given fields: ctx, deployType
func (_m *MockRepositoriesRuntimeFrameworkStore) ListRepoIDsByType(ctx context.Context, deployType int) ([]database.RepositoriesRuntimeFramework, error) {
	ret := _m.Called(ctx, deployType)

	if len(ret) == 0 {
		panic("no return value specified for ListRepoIDsByType")
	}

	var r0 []database.RepositoriesRuntimeFramework
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]database.RepositoriesRuntimeFramework, error)); ok {
		return rf(ctx, deployType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []database.RepositoriesRuntimeFramework); ok {
		r0 = rf(ctx, deployType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.RepositoriesRuntimeFramework)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, deployType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoriesRuntimeFrameworkStore_ListRepoIDsByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRepoIDsByType'
type MockRepositoriesRuntimeFrameworkStore_ListRepoIDsByType_Call struct {
	*mock.Call
}

// ListRepoIDsByType is a helper method to define mock.On call
//   - ctx context.Context
//   - deployType int
func (_e *MockRepositoriesRuntimeFrameworkStore_Expecter) ListRepoIDsByType(ctx interface{}, deployType interface{}) *MockRepositoriesRuntimeFrameworkStore_ListRepoIDsByType_Call {
	return &MockRepositoriesRuntimeFrameworkStore_ListRepoIDsByType_Call{Call: _e.mock.On("ListRepoIDsByType", ctx, deployType)}
}

func (_c *MockRepositoriesRuntimeFrameworkStore_ListRepoIDsByType_Call) Run(run func(ctx context.Context, deployType int)) *MockRepositoriesRuntimeFrameworkStore_ListRepoIDsByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockRepositoriesRuntimeFrameworkStore_ListRepoIDsByType_Call) Return(_a0 []database.RepositoriesRuntimeFramework, _a1 error) *MockRepositoriesRuntimeFrameworkStore_ListRepoIDsByType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoriesRuntimeFrameworkStore_ListRepoIDsByType_Call) RunAndReturn(run func(context.Context, int) ([]database.RepositoriesRuntimeFramework, error)) *MockRepositoriesRuntimeFrameworkStore_ListRepoIDsByType_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepositoriesRuntimeFrameworkStore creates a new instance of MockRepositoriesRuntimeFrameworkStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoriesRuntimeFrameworkStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoriesRuntimeFrameworkStore {
	mock := &MockRepositoriesRuntimeFrameworkStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

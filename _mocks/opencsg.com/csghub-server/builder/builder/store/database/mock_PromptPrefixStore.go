// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockPromptPrefixStore is an autogenerated mock type for the PromptPrefixStore type
type MockPromptPrefixStore struct {
	mock.Mock
}

type MockPromptPrefixStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPromptPrefixStore) EXPECT() *MockPromptPrefixStore_Expecter {
	return &MockPromptPrefixStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, prefix
func (_m *MockPromptPrefixStore) Create(ctx context.Context, prefix database.PromptPrefix) (*database.PromptPrefix, error) {
	ret := _m.Called(ctx, prefix)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.PromptPrefix
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.PromptPrefix) (*database.PromptPrefix, error)); ok {
		return rf(ctx, prefix)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.PromptPrefix) *database.PromptPrefix); ok {
		r0 = rf(ctx, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.PromptPrefix)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.PromptPrefix) error); ok {
		r1 = rf(ctx, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptPrefixStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPromptPrefixStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix database.PromptPrefix
func (_e *MockPromptPrefixStore_Expecter) Create(ctx interface{}, prefix interface{}) *MockPromptPrefixStore_Create_Call {
	return &MockPromptPrefixStore_Create_Call{Call: _e.mock.On("Create", ctx, prefix)}
}

func (_c *MockPromptPrefixStore_Create_Call) Run(run func(ctx context.Context, prefix database.PromptPrefix)) *MockPromptPrefixStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.PromptPrefix))
	})
	return _c
}

func (_c *MockPromptPrefixStore_Create_Call) Return(_a0 *database.PromptPrefix, _a1 error) *MockPromptPrefixStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptPrefixStore_Create_Call) RunAndReturn(run func(context.Context, database.PromptPrefix) (*database.PromptPrefix, error)) *MockPromptPrefixStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockPromptPrefixStore) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPromptPrefixStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockPromptPrefixStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockPromptPrefixStore_Expecter) Delete(ctx interface{}, id interface{}) *MockPromptPrefixStore_Delete_Call {
	return &MockPromptPrefixStore_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockPromptPrefixStore_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockPromptPrefixStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockPromptPrefixStore_Delete_Call) Return(_a0 error) *MockPromptPrefixStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPromptPrefixStore_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *MockPromptPrefixStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, kind
func (_m *MockPromptPrefixStore) Get(ctx context.Context, kind types.PromptPrefixKind) (*database.PromptPrefix, error) {
	ret := _m.Called(ctx, kind)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *database.PromptPrefix
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PromptPrefixKind) (*database.PromptPrefix, error)); ok {
		return rf(ctx, kind)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.PromptPrefixKind) *database.PromptPrefix); ok {
		r0 = rf(ctx, kind)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.PromptPrefix)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.PromptPrefixKind) error); ok {
		r1 = rf(ctx, kind)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptPrefixStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockPromptPrefixStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - kind types.PromptPrefixKind
func (_e *MockPromptPrefixStore_Expecter) Get(ctx interface{}, kind interface{}) *MockPromptPrefixStore_Get_Call {
	return &MockPromptPrefixStore_Get_Call{Call: _e.mock.On("Get", ctx, kind)}
}

func (_c *MockPromptPrefixStore_Get_Call) Run(run func(ctx context.Context, kind types.PromptPrefixKind)) *MockPromptPrefixStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PromptPrefixKind))
	})
	return _c
}

func (_c *MockPromptPrefixStore_Get_Call) Return(_a0 *database.PromptPrefix, _a1 error) *MockPromptPrefixStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptPrefixStore_Get_Call) RunAndReturn(run func(context.Context, types.PromptPrefixKind) (*database.PromptPrefix, error)) *MockPromptPrefixStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockPromptPrefixStore) GetByID(ctx context.Context, id int64) (*database.PromptPrefix, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *database.PromptPrefix
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.PromptPrefix, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.PromptPrefix); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.PromptPrefix)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptPrefixStore_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockPromptPrefixStore_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockPromptPrefixStore_Expecter) GetByID(ctx interface{}, id interface{}) *MockPromptPrefixStore_GetByID_Call {
	return &MockPromptPrefixStore_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockPromptPrefixStore_GetByID_Call) Run(run func(ctx context.Context, id int64)) *MockPromptPrefixStore_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockPromptPrefixStore_GetByID_Call) Return(_a0 *database.PromptPrefix, _a1 error) *MockPromptPrefixStore_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptPrefixStore_GetByID_Call) RunAndReturn(run func(context.Context, int64) (*database.PromptPrefix, error)) *MockPromptPrefixStore_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx, per, page, search
func (_m *MockPromptPrefixStore) Index(ctx context.Context, per int, page int, search *types.SearchPromptPrefix) ([]*database.PromptPrefix, int, error) {
	ret := _m.Called(ctx, per, page, search)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []*database.PromptPrefix
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *types.SearchPromptPrefix) ([]*database.PromptPrefix, int, error)); ok {
		return rf(ctx, per, page, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, *types.SearchPromptPrefix) []*database.PromptPrefix); ok {
		r0 = rf(ctx, per, page, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.PromptPrefix)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, *types.SearchPromptPrefix) int); ok {
		r1 = rf(ctx, per, page, search)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, *types.SearchPromptPrefix) error); ok {
		r2 = rf(ctx, per, page, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPromptPrefixStore_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockPromptPrefixStore_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
//   - per int
//   - page int
//   - search *types.SearchPromptPrefix
func (_e *MockPromptPrefixStore_Expecter) Index(ctx interface{}, per interface{}, page interface{}, search interface{}) *MockPromptPrefixStore_Index_Call {
	return &MockPromptPrefixStore_Index_Call{Call: _e.mock.On("Index", ctx, per, page, search)}
}

func (_c *MockPromptPrefixStore_Index_Call) Run(run func(ctx context.Context, per int, page int, search *types.SearchPromptPrefix)) *MockPromptPrefixStore_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(*types.SearchPromptPrefix))
	})
	return _c
}

func (_c *MockPromptPrefixStore_Index_Call) Return(_a0 []*database.PromptPrefix, _a1 int, _a2 error) *MockPromptPrefixStore_Index_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPromptPrefixStore_Index_Call) RunAndReturn(run func(context.Context, int, int, *types.SearchPromptPrefix) ([]*database.PromptPrefix, int, error)) *MockPromptPrefixStore_Index_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, prefix
func (_m *MockPromptPrefixStore) Update(ctx context.Context, prefix database.PromptPrefix) (*database.PromptPrefix, error) {
	ret := _m.Called(ctx, prefix)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *database.PromptPrefix
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.PromptPrefix) (*database.PromptPrefix, error)); ok {
		return rf(ctx, prefix)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.PromptPrefix) *database.PromptPrefix); ok {
		r0 = rf(ctx, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.PromptPrefix)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.PromptPrefix) error); ok {
		r1 = rf(ctx, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPromptPrefixStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockPromptPrefixStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix database.PromptPrefix
func (_e *MockPromptPrefixStore_Expecter) Update(ctx interface{}, prefix interface{}) *MockPromptPrefixStore_Update_Call {
	return &MockPromptPrefixStore_Update_Call{Call: _e.mock.On("Update", ctx, prefix)}
}

func (_c *MockPromptPrefixStore_Update_Call) Run(run func(ctx context.Context, prefix database.PromptPrefix)) *MockPromptPrefixStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.PromptPrefix))
	})
	return _c
}

func (_c *MockPromptPrefixStore_Update_Call) Return(_a0 *database.PromptPrefix, _a1 error) *MockPromptPrefixStore_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPromptPrefixStore_Update_Call) RunAndReturn(run func(context.Context, database.PromptPrefix) (*database.PromptPrefix, error)) *MockPromptPrefixStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPromptPrefixStore creates a new instance of MockPromptPrefixStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPromptPrefixStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPromptPrefixStore {
	mock := &MockPromptPrefixStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

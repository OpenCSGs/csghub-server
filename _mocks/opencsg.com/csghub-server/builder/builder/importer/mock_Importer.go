// Code generated by mockery v2.53.0. DO NOT EDIT.

package importer

import (
	mock "github.com/stretchr/testify/mock"
	importer "opencsg.com/csghub-server/builder/importer"
)

// MockImporter is an autogenerated mock type for the Importer type
type MockImporter struct {
	mock.Mock
}

type MockImporter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImporter) EXPECT() *MockImporter_Expecter {
	return &MockImporter_Expecter{mock: &_m.Mock}
}

// GetRepositoryList provides a mock function with given fields: baseURL, accessToken, search, page, per
func (_m *MockImporter) GetRepositoryList(baseURL string, accessToken string, search string, page int, per int) ([]importer.Repository, error) {
	ret := _m.Called(baseURL, accessToken, search, page, per)

	if len(ret) == 0 {
		panic("no return value specified for GetRepositoryList")
	}

	var r0 []importer.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) ([]importer.Repository, error)); ok {
		return rf(baseURL, accessToken, search, page, per)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) []importer.Repository); ok {
		r0 = rf(baseURL, accessToken, search, page, per)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]importer.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int, int) error); ok {
		r1 = rf(baseURL, accessToken, search, page, per)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImporter_GetRepositoryList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepositoryList'
type MockImporter_GetRepositoryList_Call struct {
	*mock.Call
}

// GetRepositoryList is a helper method to define mock.On call
//   - baseURL string
//   - accessToken string
//   - search string
//   - page int
//   - per int
func (_e *MockImporter_Expecter) GetRepositoryList(baseURL interface{}, accessToken interface{}, search interface{}, page interface{}, per interface{}) *MockImporter_GetRepositoryList_Call {
	return &MockImporter_GetRepositoryList_Call{Call: _e.mock.On("GetRepositoryList", baseURL, accessToken, search, page, per)}
}

func (_c *MockImporter_GetRepositoryList_Call) Run(run func(baseURL string, accessToken string, search string, page int, per int)) *MockImporter_GetRepositoryList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *MockImporter_GetRepositoryList_Call) Return(_a0 []importer.Repository, _a1 error) *MockImporter_GetRepositoryList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImporter_GetRepositoryList_Call) RunAndReturn(run func(string, string, string, int, int) ([]importer.Repository, error)) *MockImporter_GetRepositoryList_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: baseURL, accessToken
func (_m *MockImporter) GetUser(baseURL string, accessToken string) (*importer.User, error) {
	ret := _m.Called(baseURL, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *importer.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*importer.User, error)); ok {
		return rf(baseURL, accessToken)
	}
	if rf, ok := ret.Get(0).(func(string, string) *importer.User); ok {
		r0 = rf(baseURL, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*importer.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(baseURL, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImporter_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockImporter_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - baseURL string
//   - accessToken string
func (_e *MockImporter_Expecter) GetUser(baseURL interface{}, accessToken interface{}) *MockImporter_GetUser_Call {
	return &MockImporter_GetUser_Call{Call: _e.mock.On("GetUser", baseURL, accessToken)}
}

func (_c *MockImporter_GetUser_Call) Run(run func(baseURL string, accessToken string)) *MockImporter_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockImporter_GetUser_Call) Return(_a0 *importer.User, _a1 error) *MockImporter_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImporter_GetUser_Call) RunAndReturn(run func(string, string) (*importer.User, error)) *MockImporter_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockImporter creates a new instance of MockImporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImporter {
	mock := &MockImporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

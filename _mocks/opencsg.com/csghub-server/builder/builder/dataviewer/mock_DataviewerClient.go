// Code generated by mockery v2.53.0. DO NOT EDIT.

package dataviewer

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "opencsg.com/csghub-server/common/types"
)

// MockDataviewerClient is an autogenerated mock type for the DataviewerClient type
type MockDataviewerClient struct {
	mock.Mock
}

type MockDataviewerClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataviewerClient) EXPECT() *MockDataviewerClient_Expecter {
	return &MockDataviewerClient_Expecter{mock: &_m.Mock}
}

// TriggerWorkflow provides a mock function with given fields: ctx, req
func (_m *MockDataviewerClient) TriggerWorkflow(ctx context.Context, req types.UpdateViewerReq) (*types.WorkFlowInfo, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for TriggerWorkflow")
	}

	var r0 *types.WorkFlowInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.UpdateViewerReq) (*types.WorkFlowInfo, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.UpdateViewerReq) *types.WorkFlowInfo); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.WorkFlowInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.UpdateViewerReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataviewerClient_TriggerWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerWorkflow'
type MockDataviewerClient_TriggerWorkflow_Call struct {
	*mock.Call
}

// TriggerWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.UpdateViewerReq
func (_e *MockDataviewerClient_Expecter) TriggerWorkflow(ctx interface{}, req interface{}) *MockDataviewerClient_TriggerWorkflow_Call {
	return &MockDataviewerClient_TriggerWorkflow_Call{Call: _e.mock.On("TriggerWorkflow", ctx, req)}
}

func (_c *MockDataviewerClient_TriggerWorkflow_Call) Run(run func(ctx context.Context, req types.UpdateViewerReq)) *MockDataviewerClient_TriggerWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.UpdateViewerReq))
	})
	return _c
}

func (_c *MockDataviewerClient_TriggerWorkflow_Call) Return(_a0 *types.WorkFlowInfo, _a1 error) *MockDataviewerClient_TriggerWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataviewerClient_TriggerWorkflow_Call) RunAndReturn(run func(context.Context, types.UpdateViewerReq) (*types.WorkFlowInfo, error)) *MockDataviewerClient_TriggerWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataviewerClient creates a new instance of MockDataviewerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataviewerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataviewerClient {
	mock := &MockDataviewerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package prometheus

import (
	mock "github.com/stretchr/testify/mock"

	types "opencsg.com/csghub-server/common/types"
)

// MockPrometheusClient is an autogenerated mock type for the PrometheusClient type
type MockPrometheusClient struct {
	mock.Mock
}

type MockPrometheusClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPrometheusClient) EXPECT() *MockPrometheusClient_Expecter {
	return &MockPrometheusClient_Expecter{mock: &_m.Mock}
}

// SerialData provides a mock function with given fields: query
func (_m *MockPrometheusClient) SerialData(query string) (*types.PrometheusResponse, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for SerialData")
	}

	var r0 *types.PrometheusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*types.PrometheusResponse, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) *types.PrometheusResponse); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PrometheusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPrometheusClient_SerialData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SerialData'
type MockPrometheusClient_SerialData_Call struct {
	*mock.Call
}

// SerialData is a helper method to define mock.On call
//   - query string
func (_e *MockPrometheusClient_Expecter) SerialData(query interface{}) *MockPrometheusClient_SerialData_Call {
	return &MockPrometheusClient_SerialData_Call{Call: _e.mock.On("SerialData", query)}
}

func (_c *MockPrometheusClient_SerialData_Call) Run(run func(query string)) *MockPrometheusClient_SerialData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPrometheusClient_SerialData_Call) Return(_a0 *types.PrometheusResponse, _a1 error) *MockPrometheusClient_SerialData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPrometheusClient_SerialData_Call) RunAndReturn(run func(string) (*types.PrometheusResponse, error)) *MockPrometheusClient_SerialData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPrometheusClient creates a new instance of MockPrometheusClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPrometheusClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPrometheusClient {
	mock := &MockPrometheusClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

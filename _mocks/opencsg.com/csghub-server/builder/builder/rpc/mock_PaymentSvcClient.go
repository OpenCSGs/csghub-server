// Code generated by mockery v2.53.0. DO NOT EDIT.

package rpc

import (
	context "context"

	consts "opencsg.com/csghub-server/common/utils/payment/consts"

	mock "github.com/stretchr/testify/mock"

	money "opencsg.com/csghub-server/common/utils/money"

	rpc "opencsg.com/csghub-server/builder/rpc"
)

// MockPaymentSvcClient is an autogenerated mock type for the PaymentSvcClient type
type MockPaymentSvcClient struct {
	mock.Mock
}

type MockPaymentSvcClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymentSvcClient) EXPECT() *MockPaymentSvcClient_Expecter {
	return &MockPaymentSvcClient_Expecter{mock: &_m.Mock}
}

// CreateSimplePayment provides a mock function with given fields: ctx, orderNo, subject, body, amount, extra, channel
func (_m *MockPaymentSvcClient) CreateSimplePayment(ctx context.Context, orderNo string, subject string, body string, amount *money.Money, extra string, channel consts.PaymentChannel) (*rpc.PaymentResponse, error) {
	ret := _m.Called(ctx, orderNo, subject, body, amount, extra, channel)

	if len(ret) == 0 {
		panic("no return value specified for CreateSimplePayment")
	}

	var r0 *rpc.PaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *money.Money, string, consts.PaymentChannel) (*rpc.PaymentResponse, error)); ok {
		return rf(ctx, orderNo, subject, body, amount, extra, channel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *money.Money, string, consts.PaymentChannel) *rpc.PaymentResponse); ok {
		r0 = rf(ctx, orderNo, subject, body, amount, extra, channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.PaymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *money.Money, string, consts.PaymentChannel) error); ok {
		r1 = rf(ctx, orderNo, subject, body, amount, extra, channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentSvcClient_CreateSimplePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSimplePayment'
type MockPaymentSvcClient_CreateSimplePayment_Call struct {
	*mock.Call
}

// CreateSimplePayment is a helper method to define mock.On call
//   - ctx context.Context
//   - orderNo string
//   - subject string
//   - body string
//   - amount *money.Money
//   - extra string
//   - channel consts.PaymentChannel
func (_e *MockPaymentSvcClient_Expecter) CreateSimplePayment(ctx interface{}, orderNo interface{}, subject interface{}, body interface{}, amount interface{}, extra interface{}, channel interface{}) *MockPaymentSvcClient_CreateSimplePayment_Call {
	return &MockPaymentSvcClient_CreateSimplePayment_Call{Call: _e.mock.On("CreateSimplePayment", ctx, orderNo, subject, body, amount, extra, channel)}
}

func (_c *MockPaymentSvcClient_CreateSimplePayment_Call) Run(run func(ctx context.Context, orderNo string, subject string, body string, amount *money.Money, extra string, channel consts.PaymentChannel)) *MockPaymentSvcClient_CreateSimplePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*money.Money), args[5].(string), args[6].(consts.PaymentChannel))
	})
	return _c
}

func (_c *MockPaymentSvcClient_CreateSimplePayment_Call) Return(_a0 *rpc.PaymentResponse, _a1 error) *MockPaymentSvcClient_CreateSimplePayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentSvcClient_CreateSimplePayment_Call) RunAndReturn(run func(context.Context, string, string, string, *money.Money, string, consts.PaymentChannel) (*rpc.PaymentResponse, error)) *MockPaymentSvcClient_CreateSimplePayment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPaymentSvcClient creates a new instance of MockPaymentSvcClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentSvcClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentSvcClient {
	mock := &MockPaymentSvcClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

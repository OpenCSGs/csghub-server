// Code generated by mockery v2.53.0. DO NOT EDIT.

package rpc

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "opencsg.com/csghub-server/common/types"
)

// MockNotificationSvcClient is an autogenerated mock type for the NotificationSvcClient type
type MockNotificationSvcClient struct {
	mock.Mock
}

type MockNotificationSvcClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationSvcClient) EXPECT() *MockNotificationSvcClient_Expecter {
	return &MockNotificationSvcClient_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: ctx, message
func (_m *MockNotificationSvcClient) Send(ctx context.Context, message *types.MessageRequest) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MessageRequest) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationSvcClient_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockNotificationSvcClient_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - message *types.MessageRequest
func (_e *MockNotificationSvcClient_Expecter) Send(ctx interface{}, message interface{}) *MockNotificationSvcClient_Send_Call {
	return &MockNotificationSvcClient_Send_Call{Call: _e.mock.On("Send", ctx, message)}
}

func (_c *MockNotificationSvcClient_Send_Call) Run(run func(ctx context.Context, message *types.MessageRequest)) *MockNotificationSvcClient_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.MessageRequest))
	})
	return _c
}

func (_c *MockNotificationSvcClient_Send_Call) Return(_a0 error) *MockNotificationSvcClient_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationSvcClient_Send_Call) RunAndReturn(run func(context.Context, *types.MessageRequest) error) *MockNotificationSvcClient_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationSvcClient creates a new instance of MockNotificationSvcClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationSvcClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationSvcClient {
	mock := &MockNotificationSvcClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

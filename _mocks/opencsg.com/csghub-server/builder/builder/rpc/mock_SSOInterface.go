// Code generated by mockery v2.53.0. DO NOT EDIT.

package rpc

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	oauth2 "golang.org/x/oauth2"

	rpc "opencsg.com/csghub-server/builder/rpc"
)

// MockSSOInterface is an autogenerated mock type for the SSOInterface type
type MockSSOInterface struct {
	mock.Mock
}

type MockSSOInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSSOInterface) EXPECT() *MockSSOInterface_Expecter {
	return &MockSSOInterface_Expecter{mock: &_m.Mock}
}

// DeleteUser provides a mock function with given fields: ctx, uuid
func (_m *MockSSOInterface) DeleteUser(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSSOInterface_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockSSOInterface_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockSSOInterface_Expecter) DeleteUser(ctx interface{}, uuid interface{}) *MockSSOInterface_DeleteUser_Call {
	return &MockSSOInterface_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, uuid)}
}

func (_c *MockSSOInterface_DeleteUser_Call) Run(run func(ctx context.Context, uuid string)) *MockSSOInterface_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSSOInterface_DeleteUser_Call) Return(_a0 error) *MockSSOInterface_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSOInterface_DeleteUser_Call) RunAndReturn(run func(context.Context, string) error) *MockSSOInterface_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetOAuthToken provides a mock function with given fields: ctx, code, state
func (_m *MockSSOInterface) GetOAuthToken(ctx context.Context, code string, state string) (*oauth2.Token, error) {
	ret := _m.Called(ctx, code, state)

	if len(ret) == 0 {
		panic("no return value specified for GetOAuthToken")
	}

	var r0 *oauth2.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*oauth2.Token, error)); ok {
		return rf(ctx, code, state)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *oauth2.Token); ok {
		r0 = rf(ctx, code, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, code, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSSOInterface_GetOAuthToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOAuthToken'
type MockSSOInterface_GetOAuthToken_Call struct {
	*mock.Call
}

// GetOAuthToken is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
//   - state string
func (_e *MockSSOInterface_Expecter) GetOAuthToken(ctx interface{}, code interface{}, state interface{}) *MockSSOInterface_GetOAuthToken_Call {
	return &MockSSOInterface_GetOAuthToken_Call{Call: _e.mock.On("GetOAuthToken", ctx, code, state)}
}

func (_c *MockSSOInterface_GetOAuthToken_Call) Run(run func(ctx context.Context, code string, state string)) *MockSSOInterface_GetOAuthToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSSOInterface_GetOAuthToken_Call) Return(_a0 *oauth2.Token, _a1 error) *MockSSOInterface_GetOAuthToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSSOInterface_GetOAuthToken_Call) RunAndReturn(run func(context.Context, string, string) (*oauth2.Token, error)) *MockSSOInterface_GetOAuthToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserInfo provides a mock function with given fields: ctx, accessToken
func (_m *MockSSOInterface) GetUserInfo(ctx context.Context, accessToken string) (*rpc.SSOUserInfo, error) {
	ret := _m.Called(ctx, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 *rpc.SSOUserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*rpc.SSOUserInfo, error)); ok {
		return rf(ctx, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *rpc.SSOUserInfo); ok {
		r0 = rf(ctx, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.SSOUserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSSOInterface_GetUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfo'
type MockSSOInterface_GetUserInfo_Call struct {
	*mock.Call
}

// GetUserInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - accessToken string
func (_e *MockSSOInterface_Expecter) GetUserInfo(ctx interface{}, accessToken interface{}) *MockSSOInterface_GetUserInfo_Call {
	return &MockSSOInterface_GetUserInfo_Call{Call: _e.mock.On("GetUserInfo", ctx, accessToken)}
}

func (_c *MockSSOInterface_GetUserInfo_Call) Run(run func(ctx context.Context, accessToken string)) *MockSSOInterface_GetUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSSOInterface_GetUserInfo_Call) Return(_a0 *rpc.SSOUserInfo, _a1 error) *MockSSOInterface_GetUserInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSSOInterface_GetUserInfo_Call) RunAndReturn(run func(context.Context, string) (*rpc.SSOUserInfo, error)) *MockSSOInterface_GetUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// IsExistByEmail provides a mock function with given fields: ctx, email
func (_m *MockSSOInterface) IsExistByEmail(ctx context.Context, email string) (bool, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for IsExistByEmail")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSSOInterface_IsExistByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExistByEmail'
type MockSSOInterface_IsExistByEmail_Call struct {
	*mock.Call
}

// IsExistByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockSSOInterface_Expecter) IsExistByEmail(ctx interface{}, email interface{}) *MockSSOInterface_IsExistByEmail_Call {
	return &MockSSOInterface_IsExistByEmail_Call{Call: _e.mock.On("IsExistByEmail", ctx, email)}
}

func (_c *MockSSOInterface_IsExistByEmail_Call) Run(run func(ctx context.Context, email string)) *MockSSOInterface_IsExistByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSSOInterface_IsExistByEmail_Call) Return(_a0 bool, _a1 error) *MockSSOInterface_IsExistByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSSOInterface_IsExistByEmail_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockSSOInterface_IsExistByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// IsExistByName provides a mock function with given fields: ctx, name
func (_m *MockSSOInterface) IsExistByName(ctx context.Context, name string) (bool, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for IsExistByName")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSSOInterface_IsExistByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExistByName'
type MockSSOInterface_IsExistByName_Call struct {
	*mock.Call
}

// IsExistByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockSSOInterface_Expecter) IsExistByName(ctx interface{}, name interface{}) *MockSSOInterface_IsExistByName_Call {
	return &MockSSOInterface_IsExistByName_Call{Call: _e.mock.On("IsExistByName", ctx, name)}
}

func (_c *MockSSOInterface_IsExistByName_Call) Run(run func(ctx context.Context, name string)) *MockSSOInterface_IsExistByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSSOInterface_IsExistByName_Call) Return(_a0 bool, _a1 error) *MockSSOInterface_IsExistByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSSOInterface_IsExistByName_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockSSOInterface_IsExistByName_Call {
	_c.Call.Return(run)
	return _c
}

// IsExistByPhone provides a mock function with given fields: ctx, phone
func (_m *MockSSOInterface) IsExistByPhone(ctx context.Context, phone string) (bool, error) {
	ret := _m.Called(ctx, phone)

	if len(ret) == 0 {
		panic("no return value specified for IsExistByPhone")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, phone)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, phone)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, phone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSSOInterface_IsExistByPhone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExistByPhone'
type MockSSOInterface_IsExistByPhone_Call struct {
	*mock.Call
}

// IsExistByPhone is a helper method to define mock.On call
//   - ctx context.Context
//   - phone string
func (_e *MockSSOInterface_Expecter) IsExistByPhone(ctx interface{}, phone interface{}) *MockSSOInterface_IsExistByPhone_Call {
	return &MockSSOInterface_IsExistByPhone_Call{Call: _e.mock.On("IsExistByPhone", ctx, phone)}
}

func (_c *MockSSOInterface_IsExistByPhone_Call) Run(run func(ctx context.Context, phone string)) *MockSSOInterface_IsExistByPhone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSSOInterface_IsExistByPhone_Call) Return(_a0 bool, _a1 error) *MockSSOInterface_IsExistByPhone_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSSOInterface_IsExistByPhone_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockSSOInterface_IsExistByPhone_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserInfo provides a mock function with given fields: ctx, userInfo
func (_m *MockSSOInterface) UpdateUserInfo(ctx context.Context, userInfo *rpc.SSOUpdateUserInfo) error {
	ret := _m.Called(ctx, userInfo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *rpc.SSOUpdateUserInfo) error); ok {
		r0 = rf(ctx, userInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSSOInterface_UpdateUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserInfo'
type MockSSOInterface_UpdateUserInfo_Call struct {
	*mock.Call
}

// UpdateUserInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - userInfo *rpc.SSOUpdateUserInfo
func (_e *MockSSOInterface_Expecter) UpdateUserInfo(ctx interface{}, userInfo interface{}) *MockSSOInterface_UpdateUserInfo_Call {
	return &MockSSOInterface_UpdateUserInfo_Call{Call: _e.mock.On("UpdateUserInfo", ctx, userInfo)}
}

func (_c *MockSSOInterface_UpdateUserInfo_Call) Run(run func(ctx context.Context, userInfo *rpc.SSOUpdateUserInfo)) *MockSSOInterface_UpdateUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*rpc.SSOUpdateUserInfo))
	})
	return _c
}

func (_c *MockSSOInterface_UpdateUserInfo_Call) Return(_a0 error) *MockSSOInterface_UpdateUserInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSSOInterface_UpdateUserInfo_Call) RunAndReturn(run func(context.Context, *rpc.SSOUpdateUserInfo) error) *MockSSOInterface_UpdateUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSSOInterface creates a new instance of MockSSOInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSSOInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSSOInterface {
	mock := &MockSSOInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package mq

import (
	mock "github.com/stretchr/testify/mock"
	mq "opencsg.com/csghub-server/builder/mq"
)

// MockMessageQueueFactory is an autogenerated mock type for the MessageQueueFactory type
type MockMessageQueueFactory struct {
	mock.Mock
}

type MockMessageQueueFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageQueueFactory) EXPECT() *MockMessageQueueFactory_Expecter {
	return &MockMessageQueueFactory_Expecter{mock: &_m.Mock}
}

// GetInstance provides a mock function with no fields
func (_m *MockMessageQueueFactory) GetInstance() (mq.MessageQueue, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInstance")
	}

	var r0 mq.MessageQueue
	var r1 error
	if rf, ok := ret.Get(0).(func() (mq.MessageQueue, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() mq.MessageQueue); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mq.MessageQueue)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageQueueFactory_GetInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstance'
type MockMessageQueueFactory_GetInstance_Call struct {
	*mock.Call
}

// GetInstance is a helper method to define mock.On call
func (_e *MockMessageQueueFactory_Expecter) GetInstance() *MockMessageQueueFactory_GetInstance_Call {
	return &MockMessageQueueFactory_GetInstance_Call{Call: _e.mock.On("GetInstance")}
}

func (_c *MockMessageQueueFactory_GetInstance_Call) Run(run func()) *MockMessageQueueFactory_GetInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessageQueueFactory_GetInstance_Call) Return(_a0 mq.MessageQueue, _a1 error) *MockMessageQueueFactory_GetInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageQueueFactory_GetInstance_Call) RunAndReturn(run func() (mq.MessageQueue, error)) *MockMessageQueueFactory_GetInstance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageQueueFactory creates a new instance of MockMessageQueueFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageQueueFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageQueueFactory {
	mock := &MockMessageQueueFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

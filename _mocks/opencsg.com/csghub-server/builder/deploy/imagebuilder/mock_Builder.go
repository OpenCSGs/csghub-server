// Code generated by mockery v2.49.1. DO NOT EDIT.

package imagebuilder

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	imagebuilder "opencsg.com/csghub-server/builder/deploy/imagebuilder"
)

// MockBuilder is an autogenerated mock type for the Builder type
type MockBuilder struct {
	mock.Mock
}

type MockBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBuilder) EXPECT() *MockBuilder_Expecter {
	return &MockBuilder_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields: _a0, _a1
func (_m *MockBuilder) Build(_a0 context.Context, _a1 *imagebuilder.BuildRequest) (*imagebuilder.BuildResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 *imagebuilder.BuildResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.BuildRequest) (*imagebuilder.BuildResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.BuildRequest) *imagebuilder.BuildResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.BuildResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.BuildRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBuilder_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type MockBuilder_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *imagebuilder.BuildRequest
func (_e *MockBuilder_Expecter) Build(_a0 interface{}, _a1 interface{}) *MockBuilder_Build_Call {
	return &MockBuilder_Build_Call{Call: _e.mock.On("Build", _a0, _a1)}
}

func (_c *MockBuilder_Build_Call) Run(run func(_a0 context.Context, _a1 *imagebuilder.BuildRequest)) *MockBuilder_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*imagebuilder.BuildRequest))
	})
	return _c
}

func (_c *MockBuilder_Build_Call) Return(_a0 *imagebuilder.BuildResponse, _a1 error) *MockBuilder_Build_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBuilder_Build_Call) RunAndReturn(run func(context.Context, *imagebuilder.BuildRequest) (*imagebuilder.BuildResponse, error)) *MockBuilder_Build_Call {
	_c.Call.Return(run)
	return _c
}

// Logs provides a mock function with given fields: _a0, _a1
func (_m *MockBuilder) Logs(_a0 context.Context, _a1 *imagebuilder.LogsRequest) (<-chan string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Logs")
	}

	var r0 <-chan string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.LogsRequest) (<-chan string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.LogsRequest) <-chan string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.LogsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBuilder_Logs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logs'
type MockBuilder_Logs_Call struct {
	*mock.Call
}

// Logs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *imagebuilder.LogsRequest
func (_e *MockBuilder_Expecter) Logs(_a0 interface{}, _a1 interface{}) *MockBuilder_Logs_Call {
	return &MockBuilder_Logs_Call{Call: _e.mock.On("Logs", _a0, _a1)}
}

func (_c *MockBuilder_Logs_Call) Run(run func(_a0 context.Context, _a1 *imagebuilder.LogsRequest)) *MockBuilder_Logs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*imagebuilder.LogsRequest))
	})
	return _c
}

func (_c *MockBuilder_Logs_Call) Return(_a0 <-chan string, _a1 error) *MockBuilder_Logs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBuilder_Logs_Call) RunAndReturn(run func(context.Context, *imagebuilder.LogsRequest) (<-chan string, error)) *MockBuilder_Logs_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: _a0, _a1
func (_m *MockBuilder) Status(_a0 context.Context, _a1 *imagebuilder.StatusRequest) (*imagebuilder.StatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 *imagebuilder.StatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.StatusRequest) (*imagebuilder.StatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *imagebuilder.StatusRequest) *imagebuilder.StatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*imagebuilder.StatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *imagebuilder.StatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBuilder_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockBuilder_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *imagebuilder.StatusRequest
func (_e *MockBuilder_Expecter) Status(_a0 interface{}, _a1 interface{}) *MockBuilder_Status_Call {
	return &MockBuilder_Status_Call{Call: _e.mock.On("Status", _a0, _a1)}
}

func (_c *MockBuilder_Status_Call) Run(run func(_a0 context.Context, _a1 *imagebuilder.StatusRequest)) *MockBuilder_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*imagebuilder.StatusRequest))
	})
	return _c
}

func (_c *MockBuilder_Status_Call) Return(_a0 *imagebuilder.StatusResponse, _a1 error) *MockBuilder_Status_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBuilder_Status_Call) RunAndReturn(run func(context.Context, *imagebuilder.StatusRequest) (*imagebuilder.StatusResponse, error)) *MockBuilder_Status_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBuilder creates a new instance of MockBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBuilder {
	mock := &MockBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

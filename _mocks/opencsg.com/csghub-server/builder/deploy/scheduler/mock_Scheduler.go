// Code generated by mockery v2.53.0. DO NOT EDIT.

package scheduler

import mock "github.com/stretchr/testify/mock"

// MockScheduler is an autogenerated mock type for the Scheduler type
type MockScheduler struct {
	mock.Mock
}

type MockScheduler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScheduler) EXPECT() *MockScheduler_Expecter {
	return &MockScheduler_Expecter{mock: &_m.Mock}
}

// Queue provides a mock function with given fields: deployTaskID
func (_m *MockScheduler) Queue(deployTaskID int64) error {
	ret := _m.Called(deployTaskID)

	if len(ret) == 0 {
		panic("no return value specified for Queue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(deployTaskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScheduler_Queue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Queue'
type MockScheduler_Queue_Call struct {
	*mock.Call
}

// Queue is a helper method to define mock.On call
//   - deployTaskID int64
func (_e *MockScheduler_Expecter) Queue(deployTaskID interface{}) *MockScheduler_Queue_Call {
	return &MockScheduler_Queue_Call{Call: _e.mock.On("Queue", deployTaskID)}
}

func (_c *MockScheduler_Queue_Call) Run(run func(deployTaskID int64)) *MockScheduler_Queue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockScheduler_Queue_Call) Return(_a0 error) *MockScheduler_Queue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScheduler_Queue_Call) RunAndReturn(run func(int64) error) *MockScheduler_Queue_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with no fields
func (_m *MockScheduler) Run() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockScheduler_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockScheduler_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *MockScheduler_Expecter) Run() *MockScheduler_Run_Call {
	return &MockScheduler_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *MockScheduler_Run_Call) Run(run func()) *MockScheduler_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockScheduler_Run_Call) Return(_a0 error) *MockScheduler_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockScheduler_Run_Call) RunAndReturn(run func() error) *MockScheduler_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScheduler creates a new instance of MockScheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScheduler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScheduler {
	mock := &MockScheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.49.1. DO NOT EDIT.

package imagerunner

import (
	context "context"

	httpbase "opencsg.com/csghub-server/api/httpbase"

	mock "github.com/stretchr/testify/mock"

	types "opencsg.com/csghub-server/common/types"
)

// MockRunner is an autogenerated mock type for the Runner type
type MockRunner struct {
	mock.Mock
}

type MockRunner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRunner) EXPECT() *MockRunner_Expecter {
	return &MockRunner_Expecter{mock: &_m.Mock}
}

// DeleteWorkFlow provides a mock function with given fields: _a0, _a1
func (_m *MockRunner) DeleteWorkFlow(_a0 context.Context, _a1 types.ArgoWorkFlowDeleteReq) (*httpbase.R, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkFlow")
	}

	var r0 *httpbase.R
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ArgoWorkFlowDeleteReq) (*httpbase.R, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ArgoWorkFlowDeleteReq) *httpbase.R); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*httpbase.R)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ArgoWorkFlowDeleteReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRunner_DeleteWorkFlow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkFlow'
type MockRunner_DeleteWorkFlow_Call struct {
	*mock.Call
}

// DeleteWorkFlow is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 types.ArgoWorkFlowDeleteReq
func (_e *MockRunner_Expecter) DeleteWorkFlow(_a0 interface{}, _a1 interface{}) *MockRunner_DeleteWorkFlow_Call {
	return &MockRunner_DeleteWorkFlow_Call{Call: _e.mock.On("DeleteWorkFlow", _a0, _a1)}
}

func (_c *MockRunner_DeleteWorkFlow_Call) Run(run func(_a0 context.Context, _a1 types.ArgoWorkFlowDeleteReq)) *MockRunner_DeleteWorkFlow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ArgoWorkFlowDeleteReq))
	})
	return _c
}

func (_c *MockRunner_DeleteWorkFlow_Call) Return(_a0 *httpbase.R, _a1 error) *MockRunner_DeleteWorkFlow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRunner_DeleteWorkFlow_Call) RunAndReturn(run func(context.Context, types.ArgoWorkFlowDeleteReq) (*httpbase.R, error)) *MockRunner_DeleteWorkFlow_Call {
	_c.Call.Return(run)
	return _c
}

// Exist provides a mock function with given fields: _a0, _a1
func (_m *MockRunner) Exist(_a0 context.Context, _a1 *types.CheckRequest) (*types.StatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Exist")
	}

	var r0 *types.StatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CheckRequest) (*types.StatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CheckRequest) *types.StatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.StatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CheckRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRunner_Exist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exist'
type MockRunner_Exist_Call struct {
	*mock.Call
}

// Exist is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *types.CheckRequest
func (_e *MockRunner_Expecter) Exist(_a0 interface{}, _a1 interface{}) *MockRunner_Exist_Call {
	return &MockRunner_Exist_Call{Call: _e.mock.On("Exist", _a0, _a1)}
}

func (_c *MockRunner_Exist_Call) Run(run func(_a0 context.Context, _a1 *types.CheckRequest)) *MockRunner_Exist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CheckRequest))
	})
	return _c
}

func (_c *MockRunner_Exist_Call) Return(_a0 *types.StatusResponse, _a1 error) *MockRunner_Exist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRunner_Exist_Call) RunAndReturn(run func(context.Context, *types.CheckRequest) (*types.StatusResponse, error)) *MockRunner_Exist_Call {
	_c.Call.Return(run)
	return _c
}

// GetClusterById provides a mock function with given fields: ctx, clusterId
func (_m *MockRunner) GetClusterById(ctx context.Context, clusterId string) (*types.ClusterResponse, error) {
	ret := _m.Called(ctx, clusterId)

	if len(ret) == 0 {
		panic("no return value specified for GetClusterById")
	}

	var r0 *types.ClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.ClusterResponse, error)); ok {
		return rf(ctx, clusterId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.ClusterResponse); ok {
		r0 = rf(ctx, clusterId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clusterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRunner_GetClusterById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterById'
type MockRunner_GetClusterById_Call struct {
	*mock.Call
}

// GetClusterById is a helper method to define mock.On call
//   - ctx context.Context
//   - clusterId string
func (_e *MockRunner_Expecter) GetClusterById(ctx interface{}, clusterId interface{}) *MockRunner_GetClusterById_Call {
	return &MockRunner_GetClusterById_Call{Call: _e.mock.On("GetClusterById", ctx, clusterId)}
}

func (_c *MockRunner_GetClusterById_Call) Run(run func(ctx context.Context, clusterId string)) *MockRunner_GetClusterById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRunner_GetClusterById_Call) Return(_a0 *types.ClusterResponse, _a1 error) *MockRunner_GetClusterById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRunner_GetClusterById_Call) RunAndReturn(run func(context.Context, string) (*types.ClusterResponse, error)) *MockRunner_GetClusterById_Call {
	_c.Call.Return(run)
	return _c
}

// GetReplica provides a mock function with given fields: _a0, _a1
func (_m *MockRunner) GetReplica(_a0 context.Context, _a1 *types.StatusRequest) (*types.ReplicaResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetReplica")
	}

	var r0 *types.ReplicaResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.StatusRequest) (*types.ReplicaResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.StatusRequest) *types.ReplicaResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ReplicaResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.StatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRunner_GetReplica_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplica'
type MockRunner_GetReplica_Call struct {
	*mock.Call
}

// GetReplica is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *types.StatusRequest
func (_e *MockRunner_Expecter) GetReplica(_a0 interface{}, _a1 interface{}) *MockRunner_GetReplica_Call {
	return &MockRunner_GetReplica_Call{Call: _e.mock.On("GetReplica", _a0, _a1)}
}

func (_c *MockRunner_GetReplica_Call) Run(run func(_a0 context.Context, _a1 *types.StatusRequest)) *MockRunner_GetReplica_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.StatusRequest))
	})
	return _c
}

func (_c *MockRunner_GetReplica_Call) Return(_a0 *types.ReplicaResponse, _a1 error) *MockRunner_GetReplica_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRunner_GetReplica_Call) RunAndReturn(run func(context.Context, *types.StatusRequest) (*types.ReplicaResponse, error)) *MockRunner_GetReplica_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkFlow provides a mock function with given fields: _a0, _a1
func (_m *MockRunner) GetWorkFlow(_a0 context.Context, _a1 types.ArgoWorkFlowDeleteReq) (*types.ArgoWorkFlowRes, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkFlow")
	}

	var r0 *types.ArgoWorkFlowRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ArgoWorkFlowDeleteReq) (*types.ArgoWorkFlowRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ArgoWorkFlowDeleteReq) *types.ArgoWorkFlowRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ArgoWorkFlowRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ArgoWorkFlowDeleteReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRunner_GetWorkFlow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkFlow'
type MockRunner_GetWorkFlow_Call struct {
	*mock.Call
}

// GetWorkFlow is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 types.ArgoWorkFlowDeleteReq
func (_e *MockRunner_Expecter) GetWorkFlow(_a0 interface{}, _a1 interface{}) *MockRunner_GetWorkFlow_Call {
	return &MockRunner_GetWorkFlow_Call{Call: _e.mock.On("GetWorkFlow", _a0, _a1)}
}

func (_c *MockRunner_GetWorkFlow_Call) Run(run func(_a0 context.Context, _a1 types.ArgoWorkFlowDeleteReq)) *MockRunner_GetWorkFlow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ArgoWorkFlowDeleteReq))
	})
	return _c
}

func (_c *MockRunner_GetWorkFlow_Call) Return(_a0 *types.ArgoWorkFlowRes, _a1 error) *MockRunner_GetWorkFlow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRunner_GetWorkFlow_Call) RunAndReturn(run func(context.Context, types.ArgoWorkFlowDeleteReq) (*types.ArgoWorkFlowRes, error)) *MockRunner_GetWorkFlow_Call {
	_c.Call.Return(run)
	return _c
}

// InstanceLogs provides a mock function with given fields: _a0, _a1
func (_m *MockRunner) InstanceLogs(_a0 context.Context, _a1 *types.InstanceLogsRequest) (<-chan string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InstanceLogs")
	}

	var r0 <-chan string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.InstanceLogsRequest) (<-chan string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.InstanceLogsRequest) <-chan string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.InstanceLogsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRunner_InstanceLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstanceLogs'
type MockRunner_InstanceLogs_Call struct {
	*mock.Call
}

// InstanceLogs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *types.InstanceLogsRequest
func (_e *MockRunner_Expecter) InstanceLogs(_a0 interface{}, _a1 interface{}) *MockRunner_InstanceLogs_Call {
	return &MockRunner_InstanceLogs_Call{Call: _e.mock.On("InstanceLogs", _a0, _a1)}
}

func (_c *MockRunner_InstanceLogs_Call) Run(run func(_a0 context.Context, _a1 *types.InstanceLogsRequest)) *MockRunner_InstanceLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.InstanceLogsRequest))
	})
	return _c
}

func (_c *MockRunner_InstanceLogs_Call) Return(_a0 <-chan string, _a1 error) *MockRunner_InstanceLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRunner_InstanceLogs_Call) RunAndReturn(run func(context.Context, *types.InstanceLogsRequest) (<-chan string, error)) *MockRunner_InstanceLogs_Call {
	_c.Call.Return(run)
	return _c
}

// ListCluster provides a mock function with given fields: ctx
func (_m *MockRunner) ListCluster(ctx context.Context) ([]types.ClusterResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListCluster")
	}

	var r0 []types.ClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]types.ClusterResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []types.ClusterResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRunner_ListCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCluster'
type MockRunner_ListCluster_Call struct {
	*mock.Call
}

// ListCluster is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRunner_Expecter) ListCluster(ctx interface{}) *MockRunner_ListCluster_Call {
	return &MockRunner_ListCluster_Call{Call: _e.mock.On("ListCluster", ctx)}
}

func (_c *MockRunner_ListCluster_Call) Run(run func(ctx context.Context)) *MockRunner_ListCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRunner_ListCluster_Call) Return(_a0 []types.ClusterResponse, _a1 error) *MockRunner_ListCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRunner_ListCluster_Call) RunAndReturn(run func(context.Context) ([]types.ClusterResponse, error)) *MockRunner_ListCluster_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkFlows provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockRunner) ListWorkFlows(_a0 context.Context, _a1 string, _a2 int, _a3 int) (*types.ArgoWorkFlowListRes, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkFlows")
	}

	var r0 *types.ArgoWorkFlowListRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) (*types.ArgoWorkFlowListRes, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) *types.ArgoWorkFlowListRes); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ArgoWorkFlowListRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRunner_ListWorkFlows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkFlows'
type MockRunner_ListWorkFlows_Call struct {
	*mock.Call
}

// ListWorkFlows is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 int
//   - _a3 int
func (_e *MockRunner_Expecter) ListWorkFlows(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockRunner_ListWorkFlows_Call {
	return &MockRunner_ListWorkFlows_Call{Call: _e.mock.On("ListWorkFlows", _a0, _a1, _a2, _a3)}
}

func (_c *MockRunner_ListWorkFlows_Call) Run(run func(_a0 context.Context, _a1 string, _a2 int, _a3 int)) *MockRunner_ListWorkFlows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockRunner_ListWorkFlows_Call) Return(_a0 *types.ArgoWorkFlowListRes, _a1 error) *MockRunner_ListWorkFlows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRunner_ListWorkFlows_Call) RunAndReturn(run func(context.Context, string, int, int) (*types.ArgoWorkFlowListRes, error)) *MockRunner_ListWorkFlows_Call {
	_c.Call.Return(run)
	return _c
}

// Logs provides a mock function with given fields: _a0, _a1
func (_m *MockRunner) Logs(_a0 context.Context, _a1 *types.LogsRequest) (<-chan string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Logs")
	}

	var r0 <-chan string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.LogsRequest) (<-chan string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.LogsRequest) <-chan string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.LogsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRunner_Logs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logs'
type MockRunner_Logs_Call struct {
	*mock.Call
}

// Logs is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *types.LogsRequest
func (_e *MockRunner_Expecter) Logs(_a0 interface{}, _a1 interface{}) *MockRunner_Logs_Call {
	return &MockRunner_Logs_Call{Call: _e.mock.On("Logs", _a0, _a1)}
}

func (_c *MockRunner_Logs_Call) Run(run func(_a0 context.Context, _a1 *types.LogsRequest)) *MockRunner_Logs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.LogsRequest))
	})
	return _c
}

func (_c *MockRunner_Logs_Call) Return(_a0 <-chan string, _a1 error) *MockRunner_Logs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRunner_Logs_Call) RunAndReturn(run func(context.Context, *types.LogsRequest) (<-chan string, error)) *MockRunner_Logs_Call {
	_c.Call.Return(run)
	return _c
}

// Purge provides a mock function with given fields: _a0, _a1
func (_m *MockRunner) Purge(_a0 context.Context, _a1 *types.PurgeRequest) (*types.PurgeResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Purge")
	}

	var r0 *types.PurgeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.PurgeRequest) (*types.PurgeResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.PurgeRequest) *types.PurgeResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.PurgeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.PurgeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRunner_Purge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Purge'
type MockRunner_Purge_Call struct {
	*mock.Call
}

// Purge is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *types.PurgeRequest
func (_e *MockRunner_Expecter) Purge(_a0 interface{}, _a1 interface{}) *MockRunner_Purge_Call {
	return &MockRunner_Purge_Call{Call: _e.mock.On("Purge", _a0, _a1)}
}

func (_c *MockRunner_Purge_Call) Run(run func(_a0 context.Context, _a1 *types.PurgeRequest)) *MockRunner_Purge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.PurgeRequest))
	})
	return _c
}

func (_c *MockRunner_Purge_Call) Return(_a0 *types.PurgeResponse, _a1 error) *MockRunner_Purge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRunner_Purge_Call) RunAndReturn(run func(context.Context, *types.PurgeRequest) (*types.PurgeResponse, error)) *MockRunner_Purge_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: _a0, _a1
func (_m *MockRunner) Run(_a0 context.Context, _a1 *types.RunRequest) (*types.RunResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 *types.RunResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.RunRequest) (*types.RunResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.RunRequest) *types.RunResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.RunResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.RunRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRunner_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockRunner_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *types.RunRequest
func (_e *MockRunner_Expecter) Run(_a0 interface{}, _a1 interface{}) *MockRunner_Run_Call {
	return &MockRunner_Run_Call{Call: _e.mock.On("Run", _a0, _a1)}
}

func (_c *MockRunner_Run_Call) Run(run func(_a0 context.Context, _a1 *types.RunRequest)) *MockRunner_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.RunRequest))
	})
	return _c
}

func (_c *MockRunner_Run_Call) Return(_a0 *types.RunResponse, _a1 error) *MockRunner_Run_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRunner_Run_Call) RunAndReturn(run func(context.Context, *types.RunRequest) (*types.RunResponse, error)) *MockRunner_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: _a0, _a1
func (_m *MockRunner) Status(_a0 context.Context, _a1 *types.StatusRequest) (*types.StatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 *types.StatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.StatusRequest) (*types.StatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.StatusRequest) *types.StatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.StatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.StatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRunner_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockRunner_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *types.StatusRequest
func (_e *MockRunner_Expecter) Status(_a0 interface{}, _a1 interface{}) *MockRunner_Status_Call {
	return &MockRunner_Status_Call{Call: _e.mock.On("Status", _a0, _a1)}
}

func (_c *MockRunner_Status_Call) Run(run func(_a0 context.Context, _a1 *types.StatusRequest)) *MockRunner_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.StatusRequest))
	})
	return _c
}

func (_c *MockRunner_Status_Call) Return(_a0 *types.StatusResponse, _a1 error) *MockRunner_Status_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRunner_Status_Call) RunAndReturn(run func(context.Context, *types.StatusRequest) (*types.StatusResponse, error)) *MockRunner_Status_Call {
	_c.Call.Return(run)
	return _c
}

// StatusAll provides a mock function with given fields: _a0
func (_m *MockRunner) StatusAll(_a0 context.Context) (map[string]types.StatusResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for StatusAll")
	}

	var r0 map[string]types.StatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]types.StatusResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]types.StatusResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]types.StatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRunner_StatusAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatusAll'
type MockRunner_StatusAll_Call struct {
	*mock.Call
}

// StatusAll is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockRunner_Expecter) StatusAll(_a0 interface{}) *MockRunner_StatusAll_Call {
	return &MockRunner_StatusAll_Call{Call: _e.mock.On("StatusAll", _a0)}
}

func (_c *MockRunner_StatusAll_Call) Run(run func(_a0 context.Context)) *MockRunner_StatusAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRunner_StatusAll_Call) Return(_a0 map[string]types.StatusResponse, _a1 error) *MockRunner_StatusAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRunner_StatusAll_Call) RunAndReturn(run func(context.Context) (map[string]types.StatusResponse, error)) *MockRunner_StatusAll_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: _a0, _a1
func (_m *MockRunner) Stop(_a0 context.Context, _a1 *types.StopRequest) (*types.StopResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 *types.StopResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.StopRequest) (*types.StopResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.StopRequest) *types.StopResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.StopResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.StopRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRunner_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockRunner_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *types.StopRequest
func (_e *MockRunner_Expecter) Stop(_a0 interface{}, _a1 interface{}) *MockRunner_Stop_Call {
	return &MockRunner_Stop_Call{Call: _e.mock.On("Stop", _a0, _a1)}
}

func (_c *MockRunner_Stop_Call) Run(run func(_a0 context.Context, _a1 *types.StopRequest)) *MockRunner_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.StopRequest))
	})
	return _c
}

func (_c *MockRunner_Stop_Call) Return(_a0 *types.StopResponse, _a1 error) *MockRunner_Stop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRunner_Stop_Call) RunAndReturn(run func(context.Context, *types.StopRequest) (*types.StopResponse, error)) *MockRunner_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitWorkFlow provides a mock function with given fields: _a0, _a1
func (_m *MockRunner) SubmitWorkFlow(_a0 context.Context, _a1 *types.ArgoWorkFlowReq) (*types.ArgoWorkFlowRes, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SubmitWorkFlow")
	}

	var r0 *types.ArgoWorkFlowRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.ArgoWorkFlowReq) (*types.ArgoWorkFlowRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.ArgoWorkFlowReq) *types.ArgoWorkFlowRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ArgoWorkFlowRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.ArgoWorkFlowReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRunner_SubmitWorkFlow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitWorkFlow'
type MockRunner_SubmitWorkFlow_Call struct {
	*mock.Call
}

// SubmitWorkFlow is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *types.ArgoWorkFlowReq
func (_e *MockRunner_Expecter) SubmitWorkFlow(_a0 interface{}, _a1 interface{}) *MockRunner_SubmitWorkFlow_Call {
	return &MockRunner_SubmitWorkFlow_Call{Call: _e.mock.On("SubmitWorkFlow", _a0, _a1)}
}

func (_c *MockRunner_SubmitWorkFlow_Call) Run(run func(_a0 context.Context, _a1 *types.ArgoWorkFlowReq)) *MockRunner_SubmitWorkFlow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.ArgoWorkFlowReq))
	})
	return _c
}

func (_c *MockRunner_SubmitWorkFlow_Call) Return(_a0 *types.ArgoWorkFlowRes, _a1 error) *MockRunner_SubmitWorkFlow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRunner_SubmitWorkFlow_Call) RunAndReturn(run func(context.Context, *types.ArgoWorkFlowReq) (*types.ArgoWorkFlowRes, error)) *MockRunner_SubmitWorkFlow_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCluster provides a mock function with given fields: ctx, data
func (_m *MockRunner) UpdateCluster(ctx context.Context, data *types.ClusterRequest) (*types.UpdateClusterResponse, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCluster")
	}

	var r0 *types.UpdateClusterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.ClusterRequest) (*types.UpdateClusterResponse, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.ClusterRequest) *types.UpdateClusterResponse); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.UpdateClusterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.ClusterRequest) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRunner_UpdateCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCluster'
type MockRunner_UpdateCluster_Call struct {
	*mock.Call
}

// UpdateCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - data *types.ClusterRequest
func (_e *MockRunner_Expecter) UpdateCluster(ctx interface{}, data interface{}) *MockRunner_UpdateCluster_Call {
	return &MockRunner_UpdateCluster_Call{Call: _e.mock.On("UpdateCluster", ctx, data)}
}

func (_c *MockRunner_UpdateCluster_Call) Run(run func(ctx context.Context, data *types.ClusterRequest)) *MockRunner_UpdateCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.ClusterRequest))
	})
	return _c
}

func (_c *MockRunner_UpdateCluster_Call) Return(_a0 *types.UpdateClusterResponse, _a1 error) *MockRunner_UpdateCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRunner_UpdateCluster_Call) RunAndReturn(run func(context.Context, *types.ClusterRequest) (*types.UpdateClusterResponse, error)) *MockRunner_UpdateCluster_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRunner creates a new instance of MockRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRunner {
	mock := &MockRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

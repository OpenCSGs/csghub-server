// Code generated by mockery v2.53.0. DO NOT EDIT.

package cache

import (
	context "context"

	redis "github.com/redis/go-redis/v9"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockRedisClient is an autogenerated mock type for the RedisClient type
type MockRedisClient struct {
	mock.Mock
}

type MockRedisClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRedisClient) EXPECT() *MockRedisClient_Expecter {
	return &MockRedisClient_Expecter{mock: &_m.Mock}
}

// BZPopMax provides a mock function with given fields: ctx, key
func (_m *MockRedisClient) BZPopMax(ctx context.Context, key string) (*redis.ZWithKey, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for BZPopMax")
	}

	var r0 *redis.ZWithKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*redis.ZWithKey, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.ZWithKey); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.ZWithKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_BZPopMax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BZPopMax'
type MockRedisClient_BZPopMax_Call struct {
	*mock.Call
}

// BZPopMax is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRedisClient_Expecter) BZPopMax(ctx interface{}, key interface{}) *MockRedisClient_BZPopMax_Call {
	return &MockRedisClient_BZPopMax_Call{Call: _e.mock.On("BZPopMax", ctx, key)}
}

func (_c *MockRedisClient_BZPopMax_Call) Run(run func(ctx context.Context, key string)) *MockRedisClient_BZPopMax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisClient_BZPopMax_Call) Return(_a0 *redis.ZWithKey, _a1 error) *MockRedisClient_BZPopMax_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRedisClient_BZPopMax_Call) RunAndReturn(run func(context.Context, string) (*redis.ZWithKey, error)) *MockRedisClient_BZPopMax_Call {
	_c.Call.Return(run)
	return _c
}

// Del provides a mock function with given fields: ctx, keys
func (_m *MockRedisClient) Del(ctx context.Context, keys ...string) error {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Del")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) error); ok {
		r0 = rf(ctx, keys...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockRedisClient_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - ctx context.Context
//   - keys ...string
func (_e *MockRedisClient_Expecter) Del(ctx interface{}, keys ...interface{}) *MockRedisClient_Del_Call {
	return &MockRedisClient_Del_Call{Call: _e.mock.On("Del",
		append([]interface{}{ctx}, keys...)...)}
}

func (_c *MockRedisClient_Del_Call) Run(run func(ctx context.Context, keys ...string)) *MockRedisClient_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockRedisClient_Del_Call) Return(_a0 error) *MockRedisClient_Del_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRedisClient_Del_Call) RunAndReturn(run func(context.Context, ...string) error) *MockRedisClient_Del_Call {
	_c.Call.Return(run)
	return _c
}

// FlushAll provides a mock function with given fields: ctx
func (_m *MockRedisClient) FlushAll(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FlushAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_FlushAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushAll'
type MockRedisClient_FlushAll_Call struct {
	*mock.Call
}

// FlushAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRedisClient_Expecter) FlushAll(ctx interface{}) *MockRedisClient_FlushAll_Call {
	return &MockRedisClient_FlushAll_Call{Call: _e.mock.On("FlushAll", ctx)}
}

func (_c *MockRedisClient_FlushAll_Call) Run(run func(ctx context.Context)) *MockRedisClient_FlushAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRedisClient_FlushAll_Call) Return(_a0 error) *MockRedisClient_FlushAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRedisClient_FlushAll_Call) RunAndReturn(run func(context.Context) error) *MockRedisClient_FlushAll_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key
func (_m *MockRedisClient) Get(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRedisClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRedisClient_Expecter) Get(ctx interface{}, key interface{}) *MockRedisClient_Get_Call {
	return &MockRedisClient_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *MockRedisClient_Get_Call) Run(run func(ctx context.Context, key string)) *MockRedisClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisClient_Get_Call) Return(_a0 string, _a1 error) *MockRedisClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRedisClient_Get_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockRedisClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// RunWhileLocked provides a mock function with given fields: ctx, resourceName, expiration, fn
func (_m *MockRedisClient) RunWhileLocked(ctx context.Context, resourceName string, expiration time.Duration, fn func(context.Context) error) error {
	ret := _m.Called(ctx, resourceName, expiration, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunWhileLocked")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(context.Context) error) error); ok {
		r0 = rf(ctx, resourceName, expiration, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_RunWhileLocked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunWhileLocked'
type MockRedisClient_RunWhileLocked_Call struct {
	*mock.Call
}

// RunWhileLocked is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceName string
//   - expiration time.Duration
//   - fn func(context.Context) error
func (_e *MockRedisClient_Expecter) RunWhileLocked(ctx interface{}, resourceName interface{}, expiration interface{}, fn interface{}) *MockRedisClient_RunWhileLocked_Call {
	return &MockRedisClient_RunWhileLocked_Call{Call: _e.mock.On("RunWhileLocked", ctx, resourceName, expiration, fn)}
}

func (_c *MockRedisClient_RunWhileLocked_Call) Run(run func(ctx context.Context, resourceName string, expiration time.Duration, fn func(context.Context) error)) *MockRedisClient_RunWhileLocked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(func(context.Context) error))
	})
	return _c
}

func (_c *MockRedisClient_RunWhileLocked_Call) Return(_a0 error) *MockRedisClient_RunWhileLocked_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRedisClient_RunWhileLocked_Call) RunAndReturn(run func(context.Context, string, time.Duration, func(context.Context) error) error) *MockRedisClient_RunWhileLocked_Call {
	_c.Call.Return(run)
	return _c
}

// SAdd provides a mock function with given fields: ctx, key, members
func (_m *MockRedisClient) SAdd(ctx context.Context, key string, members ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, members...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SAdd")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) error); ok {
		r0 = rf(ctx, key, members...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_SAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SAdd'
type MockRedisClient_SAdd_Call struct {
	*mock.Call
}

// SAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - members ...interface{}
func (_e *MockRedisClient_Expecter) SAdd(ctx interface{}, key interface{}, members ...interface{}) *MockRedisClient_SAdd_Call {
	return &MockRedisClient_SAdd_Call{Call: _e.mock.On("SAdd",
		append([]interface{}{ctx, key}, members...)...)}
}

func (_c *MockRedisClient_SAdd_Call) Run(run func(ctx context.Context, key string, members ...interface{})) *MockRedisClient_SAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockRedisClient_SAdd_Call) Return(_a0 error) *MockRedisClient_SAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRedisClient_SAdd_Call) RunAndReturn(run func(context.Context, string, ...interface{}) error) *MockRedisClient_SAdd_Call {
	_c.Call.Return(run)
	return _c
}

// SCard provides a mock function with given fields: ctx, key
func (_m *MockRedisClient) SCard(ctx context.Context, key string) (int64, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for SCard")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_SCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SCard'
type MockRedisClient_SCard_Call struct {
	*mock.Call
}

// SCard is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockRedisClient_Expecter) SCard(ctx interface{}, key interface{}) *MockRedisClient_SCard_Call {
	return &MockRedisClient_SCard_Call{Call: _e.mock.On("SCard", ctx, key)}
}

func (_c *MockRedisClient_SCard_Call) Run(run func(ctx context.Context, key string)) *MockRedisClient_SCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRedisClient_SCard_Call) Return(_a0 int64, _a1 error) *MockRedisClient_SCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRedisClient_SCard_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockRedisClient_SCard_Call {
	_c.Call.Return(run)
	return _c
}

// SIsMember provides a mock function with given fields: ctx, key, member
func (_m *MockRedisClient) SIsMember(ctx context.Context, key string, member interface{}) (bool, error) {
	ret := _m.Called(ctx, key, member)

	if len(ret) == 0 {
		panic("no return value specified for SIsMember")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (bool, error)); ok {
		return rf(ctx, key, member)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) bool); ok {
		r0 = rf(ctx, key, member)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, key, member)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRedisClient_SIsMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SIsMember'
type MockRedisClient_SIsMember_Call struct {
	*mock.Call
}

// SIsMember is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - member interface{}
func (_e *MockRedisClient_Expecter) SIsMember(ctx interface{}, key interface{}, member interface{}) *MockRedisClient_SIsMember_Call {
	return &MockRedisClient_SIsMember_Call{Call: _e.mock.On("SIsMember", ctx, key, member)}
}

func (_c *MockRedisClient_SIsMember_Call) Run(run func(ctx context.Context, key string, member interface{})) *MockRedisClient_SIsMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockRedisClient_SIsMember_Call) Return(_a0 bool, _a1 error) *MockRedisClient_SIsMember_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRedisClient_SIsMember_Call) RunAndReturn(run func(context.Context, string, interface{}) (bool, error)) *MockRedisClient_SIsMember_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, value
func (_m *MockRedisClient) Set(ctx context.Context, key string, value string) error {
	ret := _m.Called(ctx, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockRedisClient_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - value string
func (_e *MockRedisClient_Expecter) Set(ctx interface{}, key interface{}, value interface{}) *MockRedisClient_Set_Call {
	return &MockRedisClient_Set_Call{Call: _e.mock.On("Set", ctx, key, value)}
}

func (_c *MockRedisClient_Set_Call) Run(run func(ctx context.Context, key string, value string)) *MockRedisClient_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRedisClient_Set_Call) Return(_a0 error) *MockRedisClient_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRedisClient_Set_Call) RunAndReturn(run func(context.Context, string, string) error) *MockRedisClient_Set_Call {
	_c.Call.Return(run)
	return _c
}

// WaitLockToRun provides a mock function with given fields: ctx, resourceName, expiration, fn
func (_m *MockRedisClient) WaitLockToRun(ctx context.Context, resourceName string, expiration time.Duration, fn func(context.Context) error) error {
	ret := _m.Called(ctx, resourceName, expiration, fn)

	if len(ret) == 0 {
		panic("no return value specified for WaitLockToRun")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func(context.Context) error) error); ok {
		r0 = rf(ctx, resourceName, expiration, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_WaitLockToRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitLockToRun'
type MockRedisClient_WaitLockToRun_Call struct {
	*mock.Call
}

// WaitLockToRun is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceName string
//   - expiration time.Duration
//   - fn func(context.Context) error
func (_e *MockRedisClient_Expecter) WaitLockToRun(ctx interface{}, resourceName interface{}, expiration interface{}, fn interface{}) *MockRedisClient_WaitLockToRun_Call {
	return &MockRedisClient_WaitLockToRun_Call{Call: _e.mock.On("WaitLockToRun", ctx, resourceName, expiration, fn)}
}

func (_c *MockRedisClient_WaitLockToRun_Call) Run(run func(ctx context.Context, resourceName string, expiration time.Duration, fn func(context.Context) error)) *MockRedisClient_WaitLockToRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Duration), args[3].(func(context.Context) error))
	})
	return _c
}

func (_c *MockRedisClient_WaitLockToRun_Call) Return(_a0 error) *MockRedisClient_WaitLockToRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRedisClient_WaitLockToRun_Call) RunAndReturn(run func(context.Context, string, time.Duration, func(context.Context) error) error) *MockRedisClient_WaitLockToRun_Call {
	_c.Call.Return(run)
	return _c
}

// ZAdd provides a mock function with given fields: ctx, key, z
func (_m *MockRedisClient) ZAdd(ctx context.Context, key string, z redis.Z) error {
	ret := _m.Called(ctx, key, z)

	if len(ret) == 0 {
		panic("no return value specified for ZAdd")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, redis.Z) error); ok {
		r0 = rf(ctx, key, z)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRedisClient_ZAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZAdd'
type MockRedisClient_ZAdd_Call struct {
	*mock.Call
}

// ZAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - z redis.Z
func (_e *MockRedisClient_Expecter) ZAdd(ctx interface{}, key interface{}, z interface{}) *MockRedisClient_ZAdd_Call {
	return &MockRedisClient_ZAdd_Call{Call: _e.mock.On("ZAdd", ctx, key, z)}
}

func (_c *MockRedisClient_ZAdd_Call) Run(run func(ctx context.Context, key string, z redis.Z)) *MockRedisClient_ZAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(redis.Z))
	})
	return _c
}

func (_c *MockRedisClient_ZAdd_Call) Return(_a0 error) *MockRedisClient_ZAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRedisClient_ZAdd_Call) RunAndReturn(run func(context.Context, string, redis.Z) error) *MockRedisClient_ZAdd_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRedisClient creates a new instance of MockRedisClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRedisClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRedisClient {
	mock := &MockRedisClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

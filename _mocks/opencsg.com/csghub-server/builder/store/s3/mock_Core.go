// Code generated by mockery v2.53.0. DO NOT EDIT.

package s3

import (
	context "context"
	http "net/http"

	io "io"

	minio "github.com/minio/minio-go/v7"

	mock "github.com/stretchr/testify/mock"

	time "time"

	url "net/url"
)

// MockCore is an autogenerated mock type for the Core type
type MockCore struct {
	mock.Mock
}

type MockCore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCore) EXPECT() *MockCore_Expecter {
	return &MockCore_Expecter{mock: &_m.Mock}
}

// AbortMultipartUpload provides a mock function with given fields: ctx, bucket, object, uploadID
func (_m *MockCore) AbortMultipartUpload(ctx context.Context, bucket string, object string, uploadID string) error {
	ret := _m.Called(ctx, bucket, object, uploadID)

	if len(ret) == 0 {
		panic("no return value specified for AbortMultipartUpload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, bucket, object, uploadID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCore_AbortMultipartUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AbortMultipartUpload'
type MockCore_AbortMultipartUpload_Call struct {
	*mock.Call
}

// AbortMultipartUpload is a helper method to define mock.On call
//   - ctx context.Context
//   - bucket string
//   - object string
//   - uploadID string
func (_e *MockCore_Expecter) AbortMultipartUpload(ctx interface{}, bucket interface{}, object interface{}, uploadID interface{}) *MockCore_AbortMultipartUpload_Call {
	return &MockCore_AbortMultipartUpload_Call{Call: _e.mock.On("AbortMultipartUpload", ctx, bucket, object, uploadID)}
}

func (_c *MockCore_AbortMultipartUpload_Call) Run(run func(ctx context.Context, bucket string, object string, uploadID string)) *MockCore_AbortMultipartUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockCore_AbortMultipartUpload_Call) Return(_a0 error) *MockCore_AbortMultipartUpload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCore_AbortMultipartUpload_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockCore_AbortMultipartUpload_Call {
	_c.Call.Return(run)
	return _c
}

// CompleteMultipartUpload provides a mock function with given fields: ctx, bucket, object, uploadID, parts, opts
func (_m *MockCore) CompleteMultipartUpload(ctx context.Context, bucket string, object string, uploadID string, parts []minio.CompletePart, opts minio.PutObjectOptions) (minio.UploadInfo, error) {
	ret := _m.Called(ctx, bucket, object, uploadID, parts, opts)

	if len(ret) == 0 {
		panic("no return value specified for CompleteMultipartUpload")
	}

	var r0 minio.UploadInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []minio.CompletePart, minio.PutObjectOptions) (minio.UploadInfo, error)); ok {
		return rf(ctx, bucket, object, uploadID, parts, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []minio.CompletePart, minio.PutObjectOptions) minio.UploadInfo); ok {
		r0 = rf(ctx, bucket, object, uploadID, parts, opts)
	} else {
		r0 = ret.Get(0).(minio.UploadInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []minio.CompletePart, minio.PutObjectOptions) error); ok {
		r1 = rf(ctx, bucket, object, uploadID, parts, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCore_CompleteMultipartUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteMultipartUpload'
type MockCore_CompleteMultipartUpload_Call struct {
	*mock.Call
}

// CompleteMultipartUpload is a helper method to define mock.On call
//   - ctx context.Context
//   - bucket string
//   - object string
//   - uploadID string
//   - parts []minio.CompletePart
//   - opts minio.PutObjectOptions
func (_e *MockCore_Expecter) CompleteMultipartUpload(ctx interface{}, bucket interface{}, object interface{}, uploadID interface{}, parts interface{}, opts interface{}) *MockCore_CompleteMultipartUpload_Call {
	return &MockCore_CompleteMultipartUpload_Call{Call: _e.mock.On("CompleteMultipartUpload", ctx, bucket, object, uploadID, parts, opts)}
}

func (_c *MockCore_CompleteMultipartUpload_Call) Run(run func(ctx context.Context, bucket string, object string, uploadID string, parts []minio.CompletePart, opts minio.PutObjectOptions)) *MockCore_CompleteMultipartUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]minio.CompletePart), args[5].(minio.PutObjectOptions))
	})
	return _c
}

func (_c *MockCore_CompleteMultipartUpload_Call) Return(_a0 minio.UploadInfo, _a1 error) *MockCore_CompleteMultipartUpload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCore_CompleteMultipartUpload_Call) RunAndReturn(run func(context.Context, string, string, string, []minio.CompletePart, minio.PutObjectOptions) (minio.UploadInfo, error)) *MockCore_CompleteMultipartUpload_Call {
	_c.Call.Return(run)
	return _c
}

// ListObjectParts provides a mock function with given fields: ctx, bucket, object, uploadID, partNumberMarker, maxParts
func (_m *MockCore) ListObjectParts(ctx context.Context, bucket string, object string, uploadID string, partNumberMarker int, maxParts int) (minio.ListObjectPartsResult, error) {
	ret := _m.Called(ctx, bucket, object, uploadID, partNumberMarker, maxParts)

	if len(ret) == 0 {
		panic("no return value specified for ListObjectParts")
	}

	var r0 minio.ListObjectPartsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, int) (minio.ListObjectPartsResult, error)); ok {
		return rf(ctx, bucket, object, uploadID, partNumberMarker, maxParts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, int) minio.ListObjectPartsResult); ok {
		r0 = rf(ctx, bucket, object, uploadID, partNumberMarker, maxParts)
	} else {
		r0 = ret.Get(0).(minio.ListObjectPartsResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int, int) error); ok {
		r1 = rf(ctx, bucket, object, uploadID, partNumberMarker, maxParts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCore_ListObjectParts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListObjectParts'
type MockCore_ListObjectParts_Call struct {
	*mock.Call
}

// ListObjectParts is a helper method to define mock.On call
//   - ctx context.Context
//   - bucket string
//   - object string
//   - uploadID string
//   - partNumberMarker int
//   - maxParts int
func (_e *MockCore_Expecter) ListObjectParts(ctx interface{}, bucket interface{}, object interface{}, uploadID interface{}, partNumberMarker interface{}, maxParts interface{}) *MockCore_ListObjectParts_Call {
	return &MockCore_ListObjectParts_Call{Call: _e.mock.On("ListObjectParts", ctx, bucket, object, uploadID, partNumberMarker, maxParts)}
}

func (_c *MockCore_ListObjectParts_Call) Run(run func(ctx context.Context, bucket string, object string, uploadID string, partNumberMarker int, maxParts int)) *MockCore_ListObjectParts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int), args[5].(int))
	})
	return _c
}

func (_c *MockCore_ListObjectParts_Call) Return(result minio.ListObjectPartsResult, err error) *MockCore_ListObjectParts_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockCore_ListObjectParts_Call) RunAndReturn(run func(context.Context, string, string, string, int, int) (minio.ListObjectPartsResult, error)) *MockCore_ListObjectParts_Call {
	_c.Call.Return(run)
	return _c
}

// NewMultipartUpload provides a mock function with given fields: ctx, bucket, object, opts
func (_m *MockCore) NewMultipartUpload(ctx context.Context, bucket string, object string, opts minio.PutObjectOptions) (string, error) {
	ret := _m.Called(ctx, bucket, object, opts)

	if len(ret) == 0 {
		panic("no return value specified for NewMultipartUpload")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.PutObjectOptions) (string, error)); ok {
		return rf(ctx, bucket, object, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.PutObjectOptions) string); ok {
		r0 = rf(ctx, bucket, object, opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.PutObjectOptions) error); ok {
		r1 = rf(ctx, bucket, object, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCore_NewMultipartUpload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewMultipartUpload'
type MockCore_NewMultipartUpload_Call struct {
	*mock.Call
}

// NewMultipartUpload is a helper method to define mock.On call
//   - ctx context.Context
//   - bucket string
//   - object string
//   - opts minio.PutObjectOptions
func (_e *MockCore_Expecter) NewMultipartUpload(ctx interface{}, bucket interface{}, object interface{}, opts interface{}) *MockCore_NewMultipartUpload_Call {
	return &MockCore_NewMultipartUpload_Call{Call: _e.mock.On("NewMultipartUpload", ctx, bucket, object, opts)}
}

func (_c *MockCore_NewMultipartUpload_Call) Run(run func(ctx context.Context, bucket string, object string, opts minio.PutObjectOptions)) *MockCore_NewMultipartUpload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(minio.PutObjectOptions))
	})
	return _c
}

func (_c *MockCore_NewMultipartUpload_Call) Return(uploadID string, err error) *MockCore_NewMultipartUpload_Call {
	_c.Call.Return(uploadID, err)
	return _c
}

func (_c *MockCore_NewMultipartUpload_Call) RunAndReturn(run func(context.Context, string, string, minio.PutObjectOptions) (string, error)) *MockCore_NewMultipartUpload_Call {
	_c.Call.Return(run)
	return _c
}

// PresignHeader provides a mock function with given fields: ctx, method, bucketName, objectName, expires, reqParams, extraHeaders
func (_m *MockCore) PresignHeader(ctx context.Context, method string, bucketName string, objectName string, expires time.Duration, reqParams url.Values, extraHeaders http.Header) (*url.URL, error) {
	ret := _m.Called(ctx, method, bucketName, objectName, expires, reqParams, extraHeaders)

	if len(ret) == 0 {
		panic("no return value specified for PresignHeader")
	}

	var r0 *url.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Duration, url.Values, http.Header) (*url.URL, error)); ok {
		return rf(ctx, method, bucketName, objectName, expires, reqParams, extraHeaders)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Duration, url.Values, http.Header) *url.URL); ok {
		r0 = rf(ctx, method, bucketName, objectName, expires, reqParams, extraHeaders)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, time.Duration, url.Values, http.Header) error); ok {
		r1 = rf(ctx, method, bucketName, objectName, expires, reqParams, extraHeaders)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCore_PresignHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PresignHeader'
type MockCore_PresignHeader_Call struct {
	*mock.Call
}

// PresignHeader is a helper method to define mock.On call
//   - ctx context.Context
//   - method string
//   - bucketName string
//   - objectName string
//   - expires time.Duration
//   - reqParams url.Values
//   - extraHeaders http.Header
func (_e *MockCore_Expecter) PresignHeader(ctx interface{}, method interface{}, bucketName interface{}, objectName interface{}, expires interface{}, reqParams interface{}, extraHeaders interface{}) *MockCore_PresignHeader_Call {
	return &MockCore_PresignHeader_Call{Call: _e.mock.On("PresignHeader", ctx, method, bucketName, objectName, expires, reqParams, extraHeaders)}
}

func (_c *MockCore_PresignHeader_Call) Run(run func(ctx context.Context, method string, bucketName string, objectName string, expires time.Duration, reqParams url.Values, extraHeaders http.Header)) *MockCore_PresignHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(time.Duration), args[5].(url.Values), args[6].(http.Header))
	})
	return _c
}

func (_c *MockCore_PresignHeader_Call) Return(u *url.URL, err error) *MockCore_PresignHeader_Call {
	_c.Call.Return(u, err)
	return _c
}

func (_c *MockCore_PresignHeader_Call) RunAndReturn(run func(context.Context, string, string, string, time.Duration, url.Values, http.Header) (*url.URL, error)) *MockCore_PresignHeader_Call {
	_c.Call.Return(run)
	return _c
}

// PutObjectPart provides a mock function with given fields: ctx, bucket, object, uploadID, partID, data, size, opts
func (_m *MockCore) PutObjectPart(ctx context.Context, bucket string, object string, uploadID string, partID int, data io.Reader, size int64, opts minio.PutObjectPartOptions) (minio.ObjectPart, error) {
	ret := _m.Called(ctx, bucket, object, uploadID, partID, data, size, opts)

	if len(ret) == 0 {
		panic("no return value specified for PutObjectPart")
	}

	var r0 minio.ObjectPart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, io.Reader, int64, minio.PutObjectPartOptions) (minio.ObjectPart, error)); ok {
		return rf(ctx, bucket, object, uploadID, partID, data, size, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, io.Reader, int64, minio.PutObjectPartOptions) minio.ObjectPart); ok {
		r0 = rf(ctx, bucket, object, uploadID, partID, data, size, opts)
	} else {
		r0 = ret.Get(0).(minio.ObjectPart)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int, io.Reader, int64, minio.PutObjectPartOptions) error); ok {
		r1 = rf(ctx, bucket, object, uploadID, partID, data, size, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCore_PutObjectPart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObjectPart'
type MockCore_PutObjectPart_Call struct {
	*mock.Call
}

// PutObjectPart is a helper method to define mock.On call
//   - ctx context.Context
//   - bucket string
//   - object string
//   - uploadID string
//   - partID int
//   - data io.Reader
//   - size int64
//   - opts minio.PutObjectPartOptions
func (_e *MockCore_Expecter) PutObjectPart(ctx interface{}, bucket interface{}, object interface{}, uploadID interface{}, partID interface{}, data interface{}, size interface{}, opts interface{}) *MockCore_PutObjectPart_Call {
	return &MockCore_PutObjectPart_Call{Call: _e.mock.On("PutObjectPart", ctx, bucket, object, uploadID, partID, data, size, opts)}
}

func (_c *MockCore_PutObjectPart_Call) Run(run func(ctx context.Context, bucket string, object string, uploadID string, partID int, data io.Reader, size int64, opts minio.PutObjectPartOptions)) *MockCore_PutObjectPart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int), args[5].(io.Reader), args[6].(int64), args[7].(minio.PutObjectPartOptions))
	})
	return _c
}

func (_c *MockCore_PutObjectPart_Call) Return(_a0 minio.ObjectPart, _a1 error) *MockCore_PutObjectPart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCore_PutObjectPart_Call) RunAndReturn(run func(context.Context, string, string, string, int, io.Reader, int64, minio.PutObjectPartOptions) (minio.ObjectPart, error)) *MockCore_PutObjectPart_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCore creates a new instance of MockCore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCore {
	mock := &MockCore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

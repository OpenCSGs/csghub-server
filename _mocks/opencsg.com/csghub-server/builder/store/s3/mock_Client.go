// Code generated by mockery v2.49.1. DO NOT EDIT.

package s3

import (
	context "context"
	io "io"

	minio "github.com/minio/minio-go/v7"

	mock "github.com/stretchr/testify/mock"

	time "time"

	url "net/url"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// GetObject provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MockClient) GetObject(ctx context.Context, bucketName string, objectName string, opts minio.GetObjectOptions) (*minio.Object, error) {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 *minio.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) (*minio.Object, error)); ok {
		return rf(ctx, bucketName, objectName, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) *minio.Object); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minio.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.GetObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type MockClient_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - opts minio.GetObjectOptions
func (_e *MockClient_Expecter) GetObject(ctx interface{}, bucketName interface{}, objectName interface{}, opts interface{}) *MockClient_GetObject_Call {
	return &MockClient_GetObject_Call{Call: _e.mock.On("GetObject", ctx, bucketName, objectName, opts)}
}

func (_c *MockClient_GetObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, opts minio.GetObjectOptions)) *MockClient_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(minio.GetObjectOptions))
	})
	return _c
}

func (_c *MockClient_GetObject_Call) Return(_a0 *minio.Object, _a1 error) *MockClient_GetObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetObject_Call) RunAndReturn(run func(context.Context, string, string, minio.GetObjectOptions) (*minio.Object, error)) *MockClient_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// PresignedGetObject provides a mock function with given fields: ctx, bucketName, objectName, expires, reqParams
func (_m *MockClient) PresignedGetObject(ctx context.Context, bucketName string, objectName string, expires time.Duration, reqParams url.Values) (*url.URL, error) {
	ret := _m.Called(ctx, bucketName, objectName, expires, reqParams)

	if len(ret) == 0 {
		panic("no return value specified for PresignedGetObject")
	}

	var r0 *url.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration, url.Values) (*url.URL, error)); ok {
		return rf(ctx, bucketName, objectName, expires, reqParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration, url.Values) *url.URL); ok {
		r0 = rf(ctx, bucketName, objectName, expires, reqParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Duration, url.Values) error); ok {
		r1 = rf(ctx, bucketName, objectName, expires, reqParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_PresignedGetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PresignedGetObject'
type MockClient_PresignedGetObject_Call struct {
	*mock.Call
}

// PresignedGetObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - expires time.Duration
//   - reqParams url.Values
func (_e *MockClient_Expecter) PresignedGetObject(ctx interface{}, bucketName interface{}, objectName interface{}, expires interface{}, reqParams interface{}) *MockClient_PresignedGetObject_Call {
	return &MockClient_PresignedGetObject_Call{Call: _e.mock.On("PresignedGetObject", ctx, bucketName, objectName, expires, reqParams)}
}

func (_c *MockClient_PresignedGetObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, expires time.Duration, reqParams url.Values)) *MockClient_PresignedGetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration), args[4].(url.Values))
	})
	return _c
}

func (_c *MockClient_PresignedGetObject_Call) Return(_a0 *url.URL, _a1 error) *MockClient_PresignedGetObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_PresignedGetObject_Call) RunAndReturn(run func(context.Context, string, string, time.Duration, url.Values) (*url.URL, error)) *MockClient_PresignedGetObject_Call {
	_c.Call.Return(run)
	return _c
}

// PresignedPutObject provides a mock function with given fields: ctx, bucketName, objectName, expires
func (_m *MockClient) PresignedPutObject(ctx context.Context, bucketName string, objectName string, expires time.Duration) (*url.URL, error) {
	ret := _m.Called(ctx, bucketName, objectName, expires)

	if len(ret) == 0 {
		panic("no return value specified for PresignedPutObject")
	}

	var r0 *url.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) (*url.URL, error)); ok {
		return rf(ctx, bucketName, objectName, expires)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) *url.URL); ok {
		r0 = rf(ctx, bucketName, objectName, expires)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Duration) error); ok {
		r1 = rf(ctx, bucketName, objectName, expires)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_PresignedPutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PresignedPutObject'
type MockClient_PresignedPutObject_Call struct {
	*mock.Call
}

// PresignedPutObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - expires time.Duration
func (_e *MockClient_Expecter) PresignedPutObject(ctx interface{}, bucketName interface{}, objectName interface{}, expires interface{}) *MockClient_PresignedPutObject_Call {
	return &MockClient_PresignedPutObject_Call{Call: _e.mock.On("PresignedPutObject", ctx, bucketName, objectName, expires)}
}

func (_c *MockClient_PresignedPutObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, expires time.Duration)) *MockClient_PresignedPutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockClient_PresignedPutObject_Call) Return(u *url.URL, err error) *MockClient_PresignedPutObject_Call {
	_c.Call.Return(u, err)
	return _c
}

func (_c *MockClient_PresignedPutObject_Call) RunAndReturn(run func(context.Context, string, string, time.Duration) (*url.URL, error)) *MockClient_PresignedPutObject_Call {
	_c.Call.Return(run)
	return _c
}

// PutObject provides a mock function with given fields: ctx, bucketName, objectName, reader, objectSize, opts
func (_m *MockClient) PutObject(ctx context.Context, bucketName string, objectName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions) (minio.UploadInfo, error) {
	ret := _m.Called(ctx, bucketName, objectName, reader, objectSize, opts)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 minio.UploadInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) (minio.UploadInfo, error)); ok {
		return rf(ctx, bucketName, objectName, reader, objectSize, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) minio.UploadInfo); ok {
		r0 = rf(ctx, bucketName, objectName, reader, objectSize, opts)
	} else {
		r0 = ret.Get(0).(minio.UploadInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, objectName, reader, objectSize, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_PutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObject'
type MockClient_PutObject_Call struct {
	*mock.Call
}

// PutObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - reader io.Reader
//   - objectSize int64
//   - opts minio.PutObjectOptions
func (_e *MockClient_Expecter) PutObject(ctx interface{}, bucketName interface{}, objectName interface{}, reader interface{}, objectSize interface{}, opts interface{}) *MockClient_PutObject_Call {
	return &MockClient_PutObject_Call{Call: _e.mock.On("PutObject", ctx, bucketName, objectName, reader, objectSize, opts)}
}

func (_c *MockClient_PutObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions)) *MockClient_PutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), args[4].(int64), args[5].(minio.PutObjectOptions))
	})
	return _c
}

func (_c *MockClient_PutObject_Call) Return(info minio.UploadInfo, err error) *MockClient_PutObject_Call {
	_c.Call.Return(info, err)
	return _c
}

func (_c *MockClient_PutObject_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) (minio.UploadInfo, error)) *MockClient_PutObject_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveObject provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MockClient) RemoveObject(ctx context.Context, bucketName string, objectName string, opts minio.RemoveObjectOptions) error {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	if len(ret) == 0 {
		panic("no return value specified for RemoveObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.RemoveObjectOptions) error); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_RemoveObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveObject'
type MockClient_RemoveObject_Call struct {
	*mock.Call
}

// RemoveObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - opts minio.RemoveObjectOptions
func (_e *MockClient_Expecter) RemoveObject(ctx interface{}, bucketName interface{}, objectName interface{}, opts interface{}) *MockClient_RemoveObject_Call {
	return &MockClient_RemoveObject_Call{Call: _e.mock.On("RemoveObject", ctx, bucketName, objectName, opts)}
}

func (_c *MockClient_RemoveObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, opts minio.RemoveObjectOptions)) *MockClient_RemoveObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(minio.RemoveObjectOptions))
	})
	return _c
}

func (_c *MockClient_RemoveObject_Call) Return(_a0 error) *MockClient_RemoveObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_RemoveObject_Call) RunAndReturn(run func(context.Context, string, string, minio.RemoveObjectOptions) error) *MockClient_RemoveObject_Call {
	_c.Call.Return(run)
	return _c
}

// StatObject provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MockClient) StatObject(ctx context.Context, bucketName string, objectName string, opts minio.StatObjectOptions) (minio.ObjectInfo, error) {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	if len(ret) == 0 {
		panic("no return value specified for StatObject")
	}

	var r0 minio.ObjectInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.StatObjectOptions) (minio.ObjectInfo, error)); ok {
		return rf(ctx, bucketName, objectName, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.StatObjectOptions) minio.ObjectInfo); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		r0 = ret.Get(0).(minio.ObjectInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.StatObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_StatObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatObject'
type MockClient_StatObject_Call struct {
	*mock.Call
}

// StatObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - opts minio.StatObjectOptions
func (_e *MockClient_Expecter) StatObject(ctx interface{}, bucketName interface{}, objectName interface{}, opts interface{}) *MockClient_StatObject_Call {
	return &MockClient_StatObject_Call{Call: _e.mock.On("StatObject", ctx, bucketName, objectName, opts)}
}

func (_c *MockClient_StatObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, opts minio.StatObjectOptions)) *MockClient_StatObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(minio.StatObjectOptions))
	})
	return _c
}

func (_c *MockClient_StatObject_Call) Return(_a0 minio.ObjectInfo, _a1 error) *MockClient_StatObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_StatObject_Call) RunAndReturn(run func(context.Context, string, string, minio.StatObjectOptions) (minio.ObjectInfo, error)) *MockClient_StatObject_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

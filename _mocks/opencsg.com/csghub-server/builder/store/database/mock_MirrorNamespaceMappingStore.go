// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockMirrorNamespaceMappingStore is an autogenerated mock type for the MirrorNamespaceMappingStore type
type MockMirrorNamespaceMappingStore struct {
	mock.Mock
}

type MockMirrorNamespaceMappingStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMirrorNamespaceMappingStore) EXPECT() *MockMirrorNamespaceMappingStore_Expecter {
	return &MockMirrorNamespaceMappingStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, mirrorNamespaceMapping
func (_m *MockMirrorNamespaceMappingStore) Create(ctx context.Context, mirrorNamespaceMapping *database.MirrorNamespaceMapping) (*database.MirrorNamespaceMapping, error) {
	ret := _m.Called(ctx, mirrorNamespaceMapping)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.MirrorNamespaceMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.MirrorNamespaceMapping) (*database.MirrorNamespaceMapping, error)); ok {
		return rf(ctx, mirrorNamespaceMapping)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *database.MirrorNamespaceMapping) *database.MirrorNamespaceMapping); ok {
		r0 = rf(ctx, mirrorNamespaceMapping)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.MirrorNamespaceMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *database.MirrorNamespaceMapping) error); ok {
		r1 = rf(ctx, mirrorNamespaceMapping)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorNamespaceMappingStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMirrorNamespaceMappingStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - mirrorNamespaceMapping *database.MirrorNamespaceMapping
func (_e *MockMirrorNamespaceMappingStore_Expecter) Create(ctx interface{}, mirrorNamespaceMapping interface{}) *MockMirrorNamespaceMappingStore_Create_Call {
	return &MockMirrorNamespaceMappingStore_Create_Call{Call: _e.mock.On("Create", ctx, mirrorNamespaceMapping)}
}

func (_c *MockMirrorNamespaceMappingStore_Create_Call) Run(run func(ctx context.Context, mirrorNamespaceMapping *database.MirrorNamespaceMapping)) *MockMirrorNamespaceMappingStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.MirrorNamespaceMapping))
	})
	return _c
}

func (_c *MockMirrorNamespaceMappingStore_Create_Call) Return(_a0 *database.MirrorNamespaceMapping, _a1 error) *MockMirrorNamespaceMappingStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorNamespaceMappingStore_Create_Call) RunAndReturn(run func(context.Context, *database.MirrorNamespaceMapping) (*database.MirrorNamespaceMapping, error)) *MockMirrorNamespaceMappingStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, mirrorNamespaceMapping
func (_m *MockMirrorNamespaceMappingStore) Delete(ctx context.Context, mirrorNamespaceMapping *database.MirrorNamespaceMapping) error {
	ret := _m.Called(ctx, mirrorNamespaceMapping)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.MirrorNamespaceMapping) error); ok {
		r0 = rf(ctx, mirrorNamespaceMapping)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMirrorNamespaceMappingStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMirrorNamespaceMappingStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - mirrorNamespaceMapping *database.MirrorNamespaceMapping
func (_e *MockMirrorNamespaceMappingStore_Expecter) Delete(ctx interface{}, mirrorNamespaceMapping interface{}) *MockMirrorNamespaceMappingStore_Delete_Call {
	return &MockMirrorNamespaceMappingStore_Delete_Call{Call: _e.mock.On("Delete", ctx, mirrorNamespaceMapping)}
}

func (_c *MockMirrorNamespaceMappingStore_Delete_Call) Run(run func(ctx context.Context, mirrorNamespaceMapping *database.MirrorNamespaceMapping)) *MockMirrorNamespaceMappingStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.MirrorNamespaceMapping))
	})
	return _c
}

func (_c *MockMirrorNamespaceMappingStore_Delete_Call) Return(err error) *MockMirrorNamespaceMappingStore_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMirrorNamespaceMappingStore_Delete_Call) RunAndReturn(run func(context.Context, *database.MirrorNamespaceMapping) error) *MockMirrorNamespaceMappingStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindBySourceNamespace provides a mock function with given fields: ctx, name
func (_m *MockMirrorNamespaceMappingStore) FindBySourceNamespace(ctx context.Context, name string) (*database.MirrorNamespaceMapping, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for FindBySourceNamespace")
	}

	var r0 *database.MirrorNamespaceMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.MirrorNamespaceMapping, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.MirrorNamespaceMapping); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.MirrorNamespaceMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorNamespaceMappingStore_FindBySourceNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBySourceNamespace'
type MockMirrorNamespaceMappingStore_FindBySourceNamespace_Call struct {
	*mock.Call
}

// FindBySourceNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockMirrorNamespaceMappingStore_Expecter) FindBySourceNamespace(ctx interface{}, name interface{}) *MockMirrorNamespaceMappingStore_FindBySourceNamespace_Call {
	return &MockMirrorNamespaceMappingStore_FindBySourceNamespace_Call{Call: _e.mock.On("FindBySourceNamespace", ctx, name)}
}

func (_c *MockMirrorNamespaceMappingStore_FindBySourceNamespace_Call) Run(run func(ctx context.Context, name string)) *MockMirrorNamespaceMappingStore_FindBySourceNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMirrorNamespaceMappingStore_FindBySourceNamespace_Call) Return(_a0 *database.MirrorNamespaceMapping, _a1 error) *MockMirrorNamespaceMappingStore_FindBySourceNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorNamespaceMappingStore_FindBySourceNamespace_Call) RunAndReturn(run func(context.Context, string) (*database.MirrorNamespaceMapping, error)) *MockMirrorNamespaceMappingStore_FindBySourceNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockMirrorNamespaceMappingStore) Get(ctx context.Context, id int64) (*database.MirrorNamespaceMapping, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *database.MirrorNamespaceMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.MirrorNamespaceMapping, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.MirrorNamespaceMapping); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.MirrorNamespaceMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorNamespaceMappingStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockMirrorNamespaceMappingStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockMirrorNamespaceMappingStore_Expecter) Get(ctx interface{}, id interface{}) *MockMirrorNamespaceMappingStore_Get_Call {
	return &MockMirrorNamespaceMappingStore_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockMirrorNamespaceMappingStore_Get_Call) Run(run func(ctx context.Context, id int64)) *MockMirrorNamespaceMappingStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockMirrorNamespaceMappingStore_Get_Call) Return(_a0 *database.MirrorNamespaceMapping, _a1 error) *MockMirrorNamespaceMappingStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorNamespaceMappingStore_Get_Call) RunAndReturn(run func(context.Context, int64) (*database.MirrorNamespaceMapping, error)) *MockMirrorNamespaceMappingStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx
func (_m *MockMirrorNamespaceMappingStore) Index(ctx context.Context) ([]database.MirrorNamespaceMapping, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []database.MirrorNamespaceMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.MirrorNamespaceMapping, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.MirrorNamespaceMapping); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.MirrorNamespaceMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorNamespaceMappingStore_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockMirrorNamespaceMappingStore_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMirrorNamespaceMappingStore_Expecter) Index(ctx interface{}) *MockMirrorNamespaceMappingStore_Index_Call {
	return &MockMirrorNamespaceMappingStore_Index_Call{Call: _e.mock.On("Index", ctx)}
}

func (_c *MockMirrorNamespaceMappingStore_Index_Call) Run(run func(ctx context.Context)) *MockMirrorNamespaceMappingStore_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMirrorNamespaceMappingStore_Index_Call) Return(_a0 []database.MirrorNamespaceMapping, _a1 error) *MockMirrorNamespaceMappingStore_Index_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorNamespaceMappingStore_Index_Call) RunAndReturn(run func(context.Context) ([]database.MirrorNamespaceMapping, error)) *MockMirrorNamespaceMappingStore_Index_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, mirrorNamespaceMapping
func (_m *MockMirrorNamespaceMappingStore) Update(ctx context.Context, mirrorNamespaceMapping *database.MirrorNamespaceMapping) (database.MirrorNamespaceMapping, error) {
	ret := _m.Called(ctx, mirrorNamespaceMapping)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 database.MirrorNamespaceMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.MirrorNamespaceMapping) (database.MirrorNamespaceMapping, error)); ok {
		return rf(ctx, mirrorNamespaceMapping)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *database.MirrorNamespaceMapping) database.MirrorNamespaceMapping); ok {
		r0 = rf(ctx, mirrorNamespaceMapping)
	} else {
		r0 = ret.Get(0).(database.MirrorNamespaceMapping)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *database.MirrorNamespaceMapping) error); ok {
		r1 = rf(ctx, mirrorNamespaceMapping)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorNamespaceMappingStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockMirrorNamespaceMappingStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - mirrorNamespaceMapping *database.MirrorNamespaceMapping
func (_e *MockMirrorNamespaceMappingStore_Expecter) Update(ctx interface{}, mirrorNamespaceMapping interface{}) *MockMirrorNamespaceMappingStore_Update_Call {
	return &MockMirrorNamespaceMappingStore_Update_Call{Call: _e.mock.On("Update", ctx, mirrorNamespaceMapping)}
}

func (_c *MockMirrorNamespaceMappingStore_Update_Call) Run(run func(ctx context.Context, mirrorNamespaceMapping *database.MirrorNamespaceMapping)) *MockMirrorNamespaceMappingStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.MirrorNamespaceMapping))
	})
	return _c
}

func (_c *MockMirrorNamespaceMappingStore_Update_Call) Return(_a0 database.MirrorNamespaceMapping, _a1 error) *MockMirrorNamespaceMappingStore_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorNamespaceMappingStore_Update_Call) RunAndReturn(run func(context.Context, *database.MirrorNamespaceMapping) (database.MirrorNamespaceMapping, error)) *MockMirrorNamespaceMappingStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMirrorNamespaceMappingStore creates a new instance of MockMirrorNamespaceMappingStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMirrorNamespaceMappingStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMirrorNamespaceMappingStore {
	mock := &MockMirrorNamespaceMappingStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.49.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockAccountSyncQuotaStatementStore is an autogenerated mock type for the AccountSyncQuotaStatementStore type
type MockAccountSyncQuotaStatementStore struct {
	mock.Mock
}

type MockAccountSyncQuotaStatementStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountSyncQuotaStatementStore) EXPECT() *MockAccountSyncQuotaStatementStore_Expecter {
	return &MockAccountSyncQuotaStatementStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, acctQuotaStatement
func (_m *MockAccountSyncQuotaStatementStore) Create(ctx context.Context, acctQuotaStatement database.AccountSyncQuotaStatement) error {
	ret := _m.Called(ctx, acctQuotaStatement)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.AccountSyncQuotaStatement) error); ok {
		r0 = rf(ctx, acctQuotaStatement)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountSyncQuotaStatementStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountSyncQuotaStatementStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - acctQuotaStatement database.AccountSyncQuotaStatement
func (_e *MockAccountSyncQuotaStatementStore_Expecter) Create(ctx interface{}, acctQuotaStatement interface{}) *MockAccountSyncQuotaStatementStore_Create_Call {
	return &MockAccountSyncQuotaStatementStore_Create_Call{Call: _e.mock.On("Create", ctx, acctQuotaStatement)}
}

func (_c *MockAccountSyncQuotaStatementStore_Create_Call) Run(run func(ctx context.Context, acctQuotaStatement database.AccountSyncQuotaStatement)) *MockAccountSyncQuotaStatementStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.AccountSyncQuotaStatement))
	})
	return _c
}

func (_c *MockAccountSyncQuotaStatementStore_Create_Call) Return(_a0 error) *MockAccountSyncQuotaStatementStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountSyncQuotaStatementStore_Create_Call) RunAndReturn(run func(context.Context, database.AccountSyncQuotaStatement) error) *MockAccountSyncQuotaStatementStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, userID, req
func (_m *MockAccountSyncQuotaStatementStore) Get(ctx context.Context, userID int64, req types.ACCT_QUOTA_STATEMENT_REQ) (*database.AccountSyncQuotaStatement, error) {
	ret := _m.Called(ctx, userID, req)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *database.AccountSyncQuotaStatement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, types.ACCT_QUOTA_STATEMENT_REQ) (*database.AccountSyncQuotaStatement, error)); ok {
		return rf(ctx, userID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, types.ACCT_QUOTA_STATEMENT_REQ) *database.AccountSyncQuotaStatement); ok {
		r0 = rf(ctx, userID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountSyncQuotaStatement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, types.ACCT_QUOTA_STATEMENT_REQ) error); ok {
		r1 = rf(ctx, userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSyncQuotaStatementStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAccountSyncQuotaStatementStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - req types.ACCT_QUOTA_STATEMENT_REQ
func (_e *MockAccountSyncQuotaStatementStore_Expecter) Get(ctx interface{}, userID interface{}, req interface{}) *MockAccountSyncQuotaStatementStore_Get_Call {
	return &MockAccountSyncQuotaStatementStore_Get_Call{Call: _e.mock.On("Get", ctx, userID, req)}
}

func (_c *MockAccountSyncQuotaStatementStore_Get_Call) Run(run func(ctx context.Context, userID int64, req types.ACCT_QUOTA_STATEMENT_REQ)) *MockAccountSyncQuotaStatementStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(types.ACCT_QUOTA_STATEMENT_REQ))
	})
	return _c
}

func (_c *MockAccountSyncQuotaStatementStore_Get_Call) Return(_a0 *database.AccountSyncQuotaStatement, _a1 error) *MockAccountSyncQuotaStatementStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSyncQuotaStatementStore_Get_Call) RunAndReturn(run func(context.Context, int64, types.ACCT_QUOTA_STATEMENT_REQ) (*database.AccountSyncQuotaStatement, error)) *MockAccountSyncQuotaStatementStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountSyncQuotaStatementStore creates a new instance of MockAccountSyncQuotaStatementStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountSyncQuotaStatementStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountSyncQuotaStatementStore {
	mock := &MockAccountSyncQuotaStatementStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

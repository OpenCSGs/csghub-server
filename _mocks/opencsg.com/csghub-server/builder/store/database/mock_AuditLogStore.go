// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockAuditLogStore is an autogenerated mock type for the AuditLogStore type
type MockAuditLogStore struct {
	mock.Mock
}

type MockAuditLogStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuditLogStore) EXPECT() *MockAuditLogStore_Expecter {
	return &MockAuditLogStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, log
func (_m *MockAuditLogStore) Create(ctx context.Context, log *database.AuditLog) error {
	ret := _m.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.AuditLog) error); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuditLogStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAuditLogStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - log *database.AuditLog
func (_e *MockAuditLogStore_Expecter) Create(ctx interface{}, log interface{}) *MockAuditLogStore_Create_Call {
	return &MockAuditLogStore_Create_Call{Call: _e.mock.On("Create", ctx, log)}
}

func (_c *MockAuditLogStore_Create_Call) Run(run func(ctx context.Context, log *database.AuditLog)) *MockAuditLogStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.AuditLog))
	})
	return _c
}

func (_c *MockAuditLogStore_Create_Call) Return(_a0 error) *MockAuditLogStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuditLogStore_Create_Call) RunAndReturn(run func(context.Context, *database.AuditLog) error) *MockAuditLogStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuditLogStore creates a new instance of MockAuditLogStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuditLogStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuditLogStore {
	mock := &MockAuditLogStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

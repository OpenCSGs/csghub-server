// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockMCPServerStore is an autogenerated mock type for the MCPServerStore type
type MockMCPServerStore struct {
	mock.Mock
}

type MockMCPServerStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMCPServerStore) EXPECT() *MockMCPServerStore_Expecter {
	return &MockMCPServerStore_Expecter{mock: &_m.Mock}
}

// AddProperty provides a mock function with given fields: ctx, input
func (_m *MockMCPServerStore) AddProperty(ctx context.Context, input database.MCPServerProperty) (*database.MCPServerProperty, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for AddProperty")
	}

	var r0 *database.MCPServerProperty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.MCPServerProperty) (*database.MCPServerProperty, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.MCPServerProperty) *database.MCPServerProperty); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.MCPServerProperty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.MCPServerProperty) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMCPServerStore_AddProperty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProperty'
type MockMCPServerStore_AddProperty_Call struct {
	*mock.Call
}

// AddProperty is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.MCPServerProperty
func (_e *MockMCPServerStore_Expecter) AddProperty(ctx interface{}, input interface{}) *MockMCPServerStore_AddProperty_Call {
	return &MockMCPServerStore_AddProperty_Call{Call: _e.mock.On("AddProperty", ctx, input)}
}

func (_c *MockMCPServerStore_AddProperty_Call) Run(run func(ctx context.Context, input database.MCPServerProperty)) *MockMCPServerStore_AddProperty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.MCPServerProperty))
	})
	return _c
}

func (_c *MockMCPServerStore_AddProperty_Call) Return(_a0 *database.MCPServerProperty, _a1 error) *MockMCPServerStore_AddProperty_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMCPServerStore_AddProperty_Call) RunAndReturn(run func(context.Context, database.MCPServerProperty) (*database.MCPServerProperty, error)) *MockMCPServerStore_AddProperty_Call {
	_c.Call.Return(run)
	return _c
}

// ByPath provides a mock function with given fields: ctx, namespace, name
func (_m *MockMCPServerStore) ByPath(ctx context.Context, namespace string, name string) (*database.MCPServer, error) {
	ret := _m.Called(ctx, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for ByPath")
	}

	var r0 *database.MCPServer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*database.MCPServer, error)); ok {
		return rf(ctx, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *database.MCPServer); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.MCPServer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMCPServerStore_ByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByPath'
type MockMCPServerStore_ByPath_Call struct {
	*mock.Call
}

// ByPath is a helper method to define mock.On call
//   - ctx context.Context
//   - namespace string
//   - name string
func (_e *MockMCPServerStore_Expecter) ByPath(ctx interface{}, namespace interface{}, name interface{}) *MockMCPServerStore_ByPath_Call {
	return &MockMCPServerStore_ByPath_Call{Call: _e.mock.On("ByPath", ctx, namespace, name)}
}

func (_c *MockMCPServerStore_ByPath_Call) Run(run func(ctx context.Context, namespace string, name string)) *MockMCPServerStore_ByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMCPServerStore_ByPath_Call) Return(_a0 *database.MCPServer, _a1 error) *MockMCPServerStore_ByPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMCPServerStore_ByPath_Call) RunAndReturn(run func(context.Context, string, string) (*database.MCPServer, error)) *MockMCPServerStore_ByPath_Call {
	_c.Call.Return(run)
	return _c
}

// ByRepoID provides a mock function with given fields: ctx, repoID
func (_m *MockMCPServerStore) ByRepoID(ctx context.Context, repoID int64) (*database.MCPServer, error) {
	ret := _m.Called(ctx, repoID)

	if len(ret) == 0 {
		panic("no return value specified for ByRepoID")
	}

	var r0 *database.MCPServer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.MCPServer, error)); ok {
		return rf(ctx, repoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.MCPServer); ok {
		r0 = rf(ctx, repoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.MCPServer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, repoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMCPServerStore_ByRepoID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByRepoID'
type MockMCPServerStore_ByRepoID_Call struct {
	*mock.Call
}

// ByRepoID is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
func (_e *MockMCPServerStore_Expecter) ByRepoID(ctx interface{}, repoID interface{}) *MockMCPServerStore_ByRepoID_Call {
	return &MockMCPServerStore_ByRepoID_Call{Call: _e.mock.On("ByRepoID", ctx, repoID)}
}

func (_c *MockMCPServerStore_ByRepoID_Call) Run(run func(ctx context.Context, repoID int64)) *MockMCPServerStore_ByRepoID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockMCPServerStore_ByRepoID_Call) Return(_a0 *database.MCPServer, _a1 error) *MockMCPServerStore_ByRepoID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMCPServerStore_ByRepoID_Call) RunAndReturn(run func(context.Context, int64) (*database.MCPServer, error)) *MockMCPServerStore_ByRepoID_Call {
	_c.Call.Return(run)
	return _c
}

// ByRepoIDs provides a mock function with given fields: ctx, repoIDs
func (_m *MockMCPServerStore) ByRepoIDs(ctx context.Context, repoIDs []int64) ([]database.MCPServer, error) {
	ret := _m.Called(ctx, repoIDs)

	if len(ret) == 0 {
		panic("no return value specified for ByRepoIDs")
	}

	var r0 []database.MCPServer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]database.MCPServer, error)); ok {
		return rf(ctx, repoIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []database.MCPServer); ok {
		r0 = rf(ctx, repoIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.MCPServer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, repoIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMCPServerStore_ByRepoIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ByRepoIDs'
type MockMCPServerStore_ByRepoIDs_Call struct {
	*mock.Call
}

// ByRepoIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - repoIDs []int64
func (_e *MockMCPServerStore_Expecter) ByRepoIDs(ctx interface{}, repoIDs interface{}) *MockMCPServerStore_ByRepoIDs_Call {
	return &MockMCPServerStore_ByRepoIDs_Call{Call: _e.mock.On("ByRepoIDs", ctx, repoIDs)}
}

func (_c *MockMCPServerStore_ByRepoIDs_Call) Run(run func(ctx context.Context, repoIDs []int64)) *MockMCPServerStore_ByRepoIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *MockMCPServerStore_ByRepoIDs_Call) Return(_a0 []database.MCPServer, _a1 error) *MockMCPServerStore_ByRepoIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMCPServerStore_ByRepoIDs_Call) RunAndReturn(run func(context.Context, []int64) ([]database.MCPServer, error)) *MockMCPServerStore_ByRepoIDs_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, input
func (_m *MockMCPServerStore) Create(ctx context.Context, input database.MCPServer) (*database.MCPServer, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.MCPServer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.MCPServer) (*database.MCPServer, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.MCPServer) *database.MCPServer); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.MCPServer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.MCPServer) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMCPServerStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMCPServerStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.MCPServer
func (_e *MockMCPServerStore_Expecter) Create(ctx interface{}, input interface{}) *MockMCPServerStore_Create_Call {
	return &MockMCPServerStore_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *MockMCPServerStore_Create_Call) Run(run func(ctx context.Context, input database.MCPServer)) *MockMCPServerStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.MCPServer))
	})
	return _c
}

func (_c *MockMCPServerStore_Create_Call) Return(_a0 *database.MCPServer, _a1 error) *MockMCPServerStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMCPServerStore_Create_Call) RunAndReturn(run func(context.Context, database.MCPServer) (*database.MCPServer, error)) *MockMCPServerStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, input
func (_m *MockMCPServerStore) Delete(ctx context.Context, input database.MCPServer) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.MCPServer) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMCPServerStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMCPServerStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.MCPServer
func (_e *MockMCPServerStore_Expecter) Delete(ctx interface{}, input interface{}) *MockMCPServerStore_Delete_Call {
	return &MockMCPServerStore_Delete_Call{Call: _e.mock.On("Delete", ctx, input)}
}

func (_c *MockMCPServerStore_Delete_Call) Run(run func(ctx context.Context, input database.MCPServer)) *MockMCPServerStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.MCPServer))
	})
	return _c
}

func (_c *MockMCPServerStore_Delete_Call) Return(_a0 error) *MockMCPServerStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMCPServerStore_Delete_Call) RunAndReturn(run func(context.Context, database.MCPServer) error) *MockMCPServerStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePropertiesByServerID provides a mock function with given fields: ctx, serverID
func (_m *MockMCPServerStore) DeletePropertiesByServerID(ctx context.Context, serverID int64) error {
	ret := _m.Called(ctx, serverID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePropertiesByServerID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, serverID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMCPServerStore_DeletePropertiesByServerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePropertiesByServerID'
type MockMCPServerStore_DeletePropertiesByServerID_Call struct {
	*mock.Call
}

// DeletePropertiesByServerID is a helper method to define mock.On call
//   - ctx context.Context
//   - serverID int64
func (_e *MockMCPServerStore_Expecter) DeletePropertiesByServerID(ctx interface{}, serverID interface{}) *MockMCPServerStore_DeletePropertiesByServerID_Call {
	return &MockMCPServerStore_DeletePropertiesByServerID_Call{Call: _e.mock.On("DeletePropertiesByServerID", ctx, serverID)}
}

func (_c *MockMCPServerStore_DeletePropertiesByServerID_Call) Run(run func(ctx context.Context, serverID int64)) *MockMCPServerStore_DeletePropertiesByServerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockMCPServerStore_DeletePropertiesByServerID_Call) Return(_a0 error) *MockMCPServerStore_DeletePropertiesByServerID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMCPServerStore_DeletePropertiesByServerID_Call) RunAndReturn(run func(context.Context, int64) error) *MockMCPServerStore_DeletePropertiesByServerID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProperty provides a mock function with given fields: ctx, input
func (_m *MockMCPServerStore) DeleteProperty(ctx context.Context, input database.MCPServerProperty) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProperty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.MCPServerProperty) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMCPServerStore_DeleteProperty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProperty'
type MockMCPServerStore_DeleteProperty_Call struct {
	*mock.Call
}

// DeleteProperty is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.MCPServerProperty
func (_e *MockMCPServerStore_Expecter) DeleteProperty(ctx interface{}, input interface{}) *MockMCPServerStore_DeleteProperty_Call {
	return &MockMCPServerStore_DeleteProperty_Call{Call: _e.mock.On("DeleteProperty", ctx, input)}
}

func (_c *MockMCPServerStore_DeleteProperty_Call) Run(run func(ctx context.Context, input database.MCPServerProperty)) *MockMCPServerStore_DeleteProperty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.MCPServerProperty))
	})
	return _c
}

func (_c *MockMCPServerStore_DeleteProperty_Call) Return(_a0 error) *MockMCPServerStore_DeleteProperty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMCPServerStore_DeleteProperty_Call) RunAndReturn(run func(context.Context, database.MCPServerProperty) error) *MockMCPServerStore_DeleteProperty_Call {
	_c.Call.Return(run)
	return _c
}

// ListProperties provides a mock function with given fields: ctx, req
func (_m *MockMCPServerStore) ListProperties(ctx context.Context, req *types.MCPPropertyFilter) ([]database.MCPServerProperty, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListProperties")
	}

	var r0 []database.MCPServerProperty
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MCPPropertyFilter) ([]database.MCPServerProperty, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.MCPPropertyFilter) []database.MCPServerProperty); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.MCPServerProperty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.MCPPropertyFilter) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *types.MCPPropertyFilter) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMCPServerStore_ListProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProperties'
type MockMCPServerStore_ListProperties_Call struct {
	*mock.Call
}

// ListProperties is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.MCPPropertyFilter
func (_e *MockMCPServerStore_Expecter) ListProperties(ctx interface{}, req interface{}) *MockMCPServerStore_ListProperties_Call {
	return &MockMCPServerStore_ListProperties_Call{Call: _e.mock.On("ListProperties", ctx, req)}
}

func (_c *MockMCPServerStore_ListProperties_Call) Run(run func(ctx context.Context, req *types.MCPPropertyFilter)) *MockMCPServerStore_ListProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.MCPPropertyFilter))
	})
	return _c
}

func (_c *MockMCPServerStore_ListProperties_Call) Return(_a0 []database.MCPServerProperty, _a1 int, _a2 error) *MockMCPServerStore_ListProperties_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMCPServerStore_ListProperties_Call) RunAndReturn(run func(context.Context, *types.MCPPropertyFilter) ([]database.MCPServerProperty, int, error)) *MockMCPServerStore_ListProperties_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, input
func (_m *MockMCPServerStore) Update(ctx context.Context, input database.MCPServer) (*database.MCPServer, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *database.MCPServer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.MCPServer) (*database.MCPServer, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.MCPServer) *database.MCPServer); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.MCPServer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.MCPServer) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMCPServerStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockMCPServerStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.MCPServer
func (_e *MockMCPServerStore_Expecter) Update(ctx interface{}, input interface{}) *MockMCPServerStore_Update_Call {
	return &MockMCPServerStore_Update_Call{Call: _e.mock.On("Update", ctx, input)}
}

func (_c *MockMCPServerStore_Update_Call) Run(run func(ctx context.Context, input database.MCPServer)) *MockMCPServerStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.MCPServer))
	})
	return _c
}

func (_c *MockMCPServerStore_Update_Call) Return(_a0 *database.MCPServer, _a1 error) *MockMCPServerStore_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMCPServerStore_Update_Call) RunAndReturn(run func(context.Context, database.MCPServer) (*database.MCPServer, error)) *MockMCPServerStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMCPServerStore creates a new instance of MockMCPServerStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMCPServerStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMCPServerStore {
	mock := &MockMCPServerStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

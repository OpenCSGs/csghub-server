// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockMirrorTaskStore is an autogenerated mock type for the MirrorTaskStore type
type MockMirrorTaskStore struct {
	mock.Mock
}

type MockMirrorTaskStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMirrorTaskStore) EXPECT() *MockMirrorTaskStore_Expecter {
	return &MockMirrorTaskStore_Expecter{mock: &_m.Mock}
}

// CancelOtherTasksAndCreate provides a mock function with given fields: ctx, task
func (_m *MockMirrorTaskStore) CancelOtherTasksAndCreate(ctx context.Context, task database.MirrorTask) (database.MirrorTask, error) {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for CancelOtherTasksAndCreate")
	}

	var r0 database.MirrorTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.MirrorTask) (database.MirrorTask, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.MirrorTask) database.MirrorTask); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Get(0).(database.MirrorTask)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.MirrorTask) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorTaskStore_CancelOtherTasksAndCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelOtherTasksAndCreate'
type MockMirrorTaskStore_CancelOtherTasksAndCreate_Call struct {
	*mock.Call
}

// CancelOtherTasksAndCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - task database.MirrorTask
func (_e *MockMirrorTaskStore_Expecter) CancelOtherTasksAndCreate(ctx interface{}, task interface{}) *MockMirrorTaskStore_CancelOtherTasksAndCreate_Call {
	return &MockMirrorTaskStore_CancelOtherTasksAndCreate_Call{Call: _e.mock.On("CancelOtherTasksAndCreate", ctx, task)}
}

func (_c *MockMirrorTaskStore_CancelOtherTasksAndCreate_Call) Run(run func(ctx context.Context, task database.MirrorTask)) *MockMirrorTaskStore_CancelOtherTasksAndCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.MirrorTask))
	})
	return _c
}

func (_c *MockMirrorTaskStore_CancelOtherTasksAndCreate_Call) Return(_a0 database.MirrorTask, _a1 error) *MockMirrorTaskStore_CancelOtherTasksAndCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorTaskStore_CancelOtherTasksAndCreate_Call) RunAndReturn(run func(context.Context, database.MirrorTask) (database.MirrorTask, error)) *MockMirrorTaskStore_CancelOtherTasksAndCreate_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, task
func (_m *MockMirrorTaskStore) Create(ctx context.Context, task database.MirrorTask) (database.MirrorTask, error) {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 database.MirrorTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.MirrorTask) (database.MirrorTask, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.MirrorTask) database.MirrorTask); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Get(0).(database.MirrorTask)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.MirrorTask) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorTaskStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMirrorTaskStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - task database.MirrorTask
func (_e *MockMirrorTaskStore_Expecter) Create(ctx interface{}, task interface{}) *MockMirrorTaskStore_Create_Call {
	return &MockMirrorTaskStore_Create_Call{Call: _e.mock.On("Create", ctx, task)}
}

func (_c *MockMirrorTaskStore_Create_Call) Run(run func(ctx context.Context, task database.MirrorTask)) *MockMirrorTaskStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.MirrorTask))
	})
	return _c
}

func (_c *MockMirrorTaskStore_Create_Call) Return(_a0 database.MirrorTask, _a1 error) *MockMirrorTaskStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorTaskStore_Create_Call) RunAndReturn(run func(context.Context, database.MirrorTask) (database.MirrorTask, error)) *MockMirrorTaskStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, ID
func (_m *MockMirrorTaskStore) Delete(ctx context.Context, ID int64) error {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMirrorTaskStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMirrorTaskStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - ID int64
func (_e *MockMirrorTaskStore_Expecter) Delete(ctx interface{}, ID interface{}) *MockMirrorTaskStore_Delete_Call {
	return &MockMirrorTaskStore_Delete_Call{Call: _e.mock.On("Delete", ctx, ID)}
}

func (_c *MockMirrorTaskStore_Delete_Call) Run(run func(ctx context.Context, ID int64)) *MockMirrorTaskStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockMirrorTaskStore_Delete_Call) Return(_a0 error) *MockMirrorTaskStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMirrorTaskStore_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *MockMirrorTaskStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *MockMirrorTaskStore) FindByID(ctx context.Context, ID int64) (*database.MirrorTask, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *database.MirrorTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.MirrorTask, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.MirrorTask); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.MirrorTask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorTaskStore_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockMirrorTaskStore_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID int64
func (_e *MockMirrorTaskStore_Expecter) FindByID(ctx interface{}, ID interface{}) *MockMirrorTaskStore_FindByID_Call {
	return &MockMirrorTaskStore_FindByID_Call{Call: _e.mock.On("FindByID", ctx, ID)}
}

func (_c *MockMirrorTaskStore_FindByID_Call) Run(run func(ctx context.Context, ID int64)) *MockMirrorTaskStore_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockMirrorTaskStore_FindByID_Call) Return(_a0 *database.MirrorTask, _a1 error) *MockMirrorTaskStore_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorTaskStore_FindByID_Call) RunAndReturn(run func(context.Context, int64) (*database.MirrorTask, error)) *MockMirrorTaskStore_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByMirrorID provides a mock function with given fields: ctx, mirrorID
func (_m *MockMirrorTaskStore) FindByMirrorID(ctx context.Context, mirrorID int64) (*database.MirrorTask, error) {
	ret := _m.Called(ctx, mirrorID)

	if len(ret) == 0 {
		panic("no return value specified for FindByMirrorID")
	}

	var r0 *database.MirrorTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.MirrorTask, error)); ok {
		return rf(ctx, mirrorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.MirrorTask); ok {
		r0 = rf(ctx, mirrorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.MirrorTask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, mirrorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorTaskStore_FindByMirrorID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByMirrorID'
type MockMirrorTaskStore_FindByMirrorID_Call struct {
	*mock.Call
}

// FindByMirrorID is a helper method to define mock.On call
//   - ctx context.Context
//   - mirrorID int64
func (_e *MockMirrorTaskStore_Expecter) FindByMirrorID(ctx interface{}, mirrorID interface{}) *MockMirrorTaskStore_FindByMirrorID_Call {
	return &MockMirrorTaskStore_FindByMirrorID_Call{Call: _e.mock.On("FindByMirrorID", ctx, mirrorID)}
}

func (_c *MockMirrorTaskStore_FindByMirrorID_Call) Run(run func(ctx context.Context, mirrorID int64)) *MockMirrorTaskStore_FindByMirrorID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockMirrorTaskStore_FindByMirrorID_Call) Return(_a0 *database.MirrorTask, _a1 error) *MockMirrorTaskStore_FindByMirrorID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorTaskStore_FindByMirrorID_Call) RunAndReturn(run func(context.Context, int64) (*database.MirrorTask, error)) *MockMirrorTaskStore_FindByMirrorID_Call {
	_c.Call.Return(run)
	return _c
}

// GetHighestPriorityByTaskStatus provides a mock function with given fields: ctx, status
func (_m *MockMirrorTaskStore) GetHighestPriorityByTaskStatus(ctx context.Context, status []types.MirrorTaskStatus) (database.MirrorTask, error) {
	ret := _m.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for GetHighestPriorityByTaskStatus")
	}

	var r0 database.MirrorTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []types.MirrorTaskStatus) (database.MirrorTask, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []types.MirrorTaskStatus) database.MirrorTask); ok {
		r0 = rf(ctx, status)
	} else {
		r0 = ret.Get(0).(database.MirrorTask)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []types.MirrorTaskStatus) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorTaskStore_GetHighestPriorityByTaskStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHighestPriorityByTaskStatus'
type MockMirrorTaskStore_GetHighestPriorityByTaskStatus_Call struct {
	*mock.Call
}

// GetHighestPriorityByTaskStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - status []types.MirrorTaskStatus
func (_e *MockMirrorTaskStore_Expecter) GetHighestPriorityByTaskStatus(ctx interface{}, status interface{}) *MockMirrorTaskStore_GetHighestPriorityByTaskStatus_Call {
	return &MockMirrorTaskStore_GetHighestPriorityByTaskStatus_Call{Call: _e.mock.On("GetHighestPriorityByTaskStatus", ctx, status)}
}

func (_c *MockMirrorTaskStore_GetHighestPriorityByTaskStatus_Call) Run(run func(ctx context.Context, status []types.MirrorTaskStatus)) *MockMirrorTaskStore_GetHighestPriorityByTaskStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]types.MirrorTaskStatus))
	})
	return _c
}

func (_c *MockMirrorTaskStore_GetHighestPriorityByTaskStatus_Call) Return(_a0 database.MirrorTask, _a1 error) *MockMirrorTaskStore_GetHighestPriorityByTaskStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorTaskStore_GetHighestPriorityByTaskStatus_Call) RunAndReturn(run func(context.Context, []types.MirrorTaskStatus) (database.MirrorTask, error)) *MockMirrorTaskStore_GetHighestPriorityByTaskStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ListByStatusWithPriority provides a mock function with given fields: ctx, status, per, page
func (_m *MockMirrorTaskStore) ListByStatusWithPriority(ctx context.Context, status []types.MirrorTaskStatus, per int, page int) ([]database.MirrorTask, error) {
	ret := _m.Called(ctx, status, per, page)

	if len(ret) == 0 {
		panic("no return value specified for ListByStatusWithPriority")
	}

	var r0 []database.MirrorTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []types.MirrorTaskStatus, int, int) ([]database.MirrorTask, error)); ok {
		return rf(ctx, status, per, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []types.MirrorTaskStatus, int, int) []database.MirrorTask); ok {
		r0 = rf(ctx, status, per, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.MirrorTask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []types.MirrorTaskStatus, int, int) error); ok {
		r1 = rf(ctx, status, per, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorTaskStore_ListByStatusWithPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByStatusWithPriority'
type MockMirrorTaskStore_ListByStatusWithPriority_Call struct {
	*mock.Call
}

// ListByStatusWithPriority is a helper method to define mock.On call
//   - ctx context.Context
//   - status []types.MirrorTaskStatus
//   - per int
//   - page int
func (_e *MockMirrorTaskStore_Expecter) ListByStatusWithPriority(ctx interface{}, status interface{}, per interface{}, page interface{}) *MockMirrorTaskStore_ListByStatusWithPriority_Call {
	return &MockMirrorTaskStore_ListByStatusWithPriority_Call{Call: _e.mock.On("ListByStatusWithPriority", ctx, status, per, page)}
}

func (_c *MockMirrorTaskStore_ListByStatusWithPriority_Call) Run(run func(ctx context.Context, status []types.MirrorTaskStatus, per int, page int)) *MockMirrorTaskStore_ListByStatusWithPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]types.MirrorTaskStatus), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockMirrorTaskStore_ListByStatusWithPriority_Call) Return(_a0 []database.MirrorTask, _a1 error) *MockMirrorTaskStore_ListByStatusWithPriority_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorTaskStore_ListByStatusWithPriority_Call) RunAndReturn(run func(context.Context, []types.MirrorTaskStatus, int, int) ([]database.MirrorTask, error)) *MockMirrorTaskStore_ListByStatusWithPriority_Call {
	_c.Call.Return(run)
	return _c
}

// SetMirrorCurrentTaskID provides a mock function with given fields: ctx, task
func (_m *MockMirrorTaskStore) SetMirrorCurrentTaskID(ctx context.Context, task database.MirrorTask) error {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for SetMirrorCurrentTaskID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.MirrorTask) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMirrorTaskStore_SetMirrorCurrentTaskID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMirrorCurrentTaskID'
type MockMirrorTaskStore_SetMirrorCurrentTaskID_Call struct {
	*mock.Call
}

// SetMirrorCurrentTaskID is a helper method to define mock.On call
//   - ctx context.Context
//   - task database.MirrorTask
func (_e *MockMirrorTaskStore_Expecter) SetMirrorCurrentTaskID(ctx interface{}, task interface{}) *MockMirrorTaskStore_SetMirrorCurrentTaskID_Call {
	return &MockMirrorTaskStore_SetMirrorCurrentTaskID_Call{Call: _e.mock.On("SetMirrorCurrentTaskID", ctx, task)}
}

func (_c *MockMirrorTaskStore_SetMirrorCurrentTaskID_Call) Run(run func(ctx context.Context, task database.MirrorTask)) *MockMirrorTaskStore_SetMirrorCurrentTaskID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.MirrorTask))
	})
	return _c
}

func (_c *MockMirrorTaskStore_SetMirrorCurrentTaskID_Call) Return(_a0 error) *MockMirrorTaskStore_SetMirrorCurrentTaskID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMirrorTaskStore_SetMirrorCurrentTaskID_Call) RunAndReturn(run func(context.Context, database.MirrorTask) error) *MockMirrorTaskStore_SetMirrorCurrentTaskID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, task
func (_m *MockMirrorTaskStore) Update(ctx context.Context, task database.MirrorTask) (database.MirrorTask, error) {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 database.MirrorTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.MirrorTask) (database.MirrorTask, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.MirrorTask) database.MirrorTask); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Get(0).(database.MirrorTask)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.MirrorTask) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorTaskStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockMirrorTaskStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - task database.MirrorTask
func (_e *MockMirrorTaskStore_Expecter) Update(ctx interface{}, task interface{}) *MockMirrorTaskStore_Update_Call {
	return &MockMirrorTaskStore_Update_Call{Call: _e.mock.On("Update", ctx, task)}
}

func (_c *MockMirrorTaskStore_Update_Call) Run(run func(ctx context.Context, task database.MirrorTask)) *MockMirrorTaskStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.MirrorTask))
	})
	return _c
}

func (_c *MockMirrorTaskStore_Update_Call) Return(_a0 database.MirrorTask, _a1 error) *MockMirrorTaskStore_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorTaskStore_Update_Call) RunAndReturn(run func(context.Context, database.MirrorTask) (database.MirrorTask, error)) *MockMirrorTaskStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMirrorTaskStore creates a new instance of MockMirrorTaskStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMirrorTaskStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMirrorTaskStore {
	mock := &MockMirrorTaskStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

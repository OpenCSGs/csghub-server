// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockMetadataStore is an autogenerated mock type for the MetadataStore type
type MockMetadataStore struct {
	mock.Mock
}

type MockMetadataStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetadataStore) EXPECT() *MockMetadataStore_Expecter {
	return &MockMetadataStore_Expecter{mock: &_m.Mock}
}

// FindByRepoID provides a mock function with given fields: ctx, repoID
func (_m *MockMetadataStore) FindByRepoID(ctx context.Context, repoID int64) (*database.Metadata, error) {
	ret := _m.Called(ctx, repoID)

	if len(ret) == 0 {
		panic("no return value specified for FindByRepoID")
	}

	var r0 *database.Metadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.Metadata, error)); ok {
		return rf(ctx, repoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.Metadata); ok {
		r0 = rf(ctx, repoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Metadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, repoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMetadataStore_FindByRepoID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByRepoID'
type MockMetadataStore_FindByRepoID_Call struct {
	*mock.Call
}

// FindByRepoID is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
func (_e *MockMetadataStore_Expecter) FindByRepoID(ctx interface{}, repoID interface{}) *MockMetadataStore_FindByRepoID_Call {
	return &MockMetadataStore_FindByRepoID_Call{Call: _e.mock.On("FindByRepoID", ctx, repoID)}
}

func (_c *MockMetadataStore_FindByRepoID_Call) Run(run func(ctx context.Context, repoID int64)) *MockMetadataStore_FindByRepoID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockMetadataStore_FindByRepoID_Call) Return(_a0 *database.Metadata, _a1 error) *MockMetadataStore_FindByRepoID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetadataStore_FindByRepoID_Call) RunAndReturn(run func(context.Context, int64) (*database.Metadata, error)) *MockMetadataStore_FindByRepoID_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: ctx, metadata
func (_m *MockMetadataStore) Upsert(ctx context.Context, metadata *database.Metadata) error {
	ret := _m.Called(ctx, metadata)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.Metadata) error); ok {
		r0 = rf(ctx, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMetadataStore_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockMetadataStore_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - ctx context.Context
//   - metadata *database.Metadata
func (_e *MockMetadataStore_Expecter) Upsert(ctx interface{}, metadata interface{}) *MockMetadataStore_Upsert_Call {
	return &MockMetadataStore_Upsert_Call{Call: _e.mock.On("Upsert", ctx, metadata)}
}

func (_c *MockMetadataStore_Upsert_Call) Run(run func(ctx context.Context, metadata *database.Metadata)) *MockMetadataStore_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.Metadata))
	})
	return _c
}

func (_c *MockMetadataStore_Upsert_Call) Return(_a0 error) *MockMetadataStore_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetadataStore_Upsert_Call) RunAndReturn(run func(context.Context, *database.Metadata) error) *MockMetadataStore_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetadataStore creates a new instance of MockMetadataStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetadataStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetadataStore {
	mock := &MockMetadataStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

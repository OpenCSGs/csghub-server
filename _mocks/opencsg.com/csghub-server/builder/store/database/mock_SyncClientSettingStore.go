// Code generated by mockery v2.49.1. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockSyncClientSettingStore is an autogenerated mock type for the SyncClientSettingStore type
type MockSyncClientSettingStore struct {
	mock.Mock
}

type MockSyncClientSettingStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSyncClientSettingStore) EXPECT() *MockSyncClientSettingStore_Expecter {
	return &MockSyncClientSettingStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, setting
func (_m *MockSyncClientSettingStore) Create(ctx context.Context, setting *database.SyncClientSetting) (*database.SyncClientSetting, error) {
	ret := _m.Called(ctx, setting)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.SyncClientSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.SyncClientSetting) (*database.SyncClientSetting, error)); ok {
		return rf(ctx, setting)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *database.SyncClientSetting) *database.SyncClientSetting); ok {
		r0 = rf(ctx, setting)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SyncClientSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *database.SyncClientSetting) error); ok {
		r1 = rf(ctx, setting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncClientSettingStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSyncClientSettingStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - setting *database.SyncClientSetting
func (_e *MockSyncClientSettingStore_Expecter) Create(ctx interface{}, setting interface{}) *MockSyncClientSettingStore_Create_Call {
	return &MockSyncClientSettingStore_Create_Call{Call: _e.mock.On("Create", ctx, setting)}
}

func (_c *MockSyncClientSettingStore_Create_Call) Run(run func(ctx context.Context, setting *database.SyncClientSetting)) *MockSyncClientSettingStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.SyncClientSetting))
	})
	return _c
}

func (_c *MockSyncClientSettingStore_Create_Call) Return(_a0 *database.SyncClientSetting, _a1 error) *MockSyncClientSettingStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncClientSettingStore_Create_Call) RunAndReturn(run func(context.Context, *database.SyncClientSetting) (*database.SyncClientSetting, error)) *MockSyncClientSettingStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAll provides a mock function with given fields: ctx
func (_m *MockSyncClientSettingStore) DeleteAll(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyncClientSettingStore_DeleteAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAll'
type MockSyncClientSettingStore_DeleteAll_Call struct {
	*mock.Call
}

// DeleteAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSyncClientSettingStore_Expecter) DeleteAll(ctx interface{}) *MockSyncClientSettingStore_DeleteAll_Call {
	return &MockSyncClientSettingStore_DeleteAll_Call{Call: _e.mock.On("DeleteAll", ctx)}
}

func (_c *MockSyncClientSettingStore_DeleteAll_Call) Run(run func(ctx context.Context)) *MockSyncClientSettingStore_DeleteAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSyncClientSettingStore_DeleteAll_Call) Return(_a0 error) *MockSyncClientSettingStore_DeleteAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyncClientSettingStore_DeleteAll_Call) RunAndReturn(run func(context.Context) error) *MockSyncClientSettingStore_DeleteAll_Call {
	_c.Call.Return(run)
	return _c
}

// First provides a mock function with given fields: ctx
func (_m *MockSyncClientSettingStore) First(ctx context.Context) (*database.SyncClientSetting, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for First")
	}

	var r0 *database.SyncClientSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*database.SyncClientSetting, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *database.SyncClientSetting); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SyncClientSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncClientSettingStore_First_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'First'
type MockSyncClientSettingStore_First_Call struct {
	*mock.Call
}

// First is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSyncClientSettingStore_Expecter) First(ctx interface{}) *MockSyncClientSettingStore_First_Call {
	return &MockSyncClientSettingStore_First_Call{Call: _e.mock.On("First", ctx)}
}

func (_c *MockSyncClientSettingStore_First_Call) Run(run func(ctx context.Context)) *MockSyncClientSettingStore_First_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSyncClientSettingStore_First_Call) Return(_a0 *database.SyncClientSetting, _a1 error) *MockSyncClientSettingStore_First_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncClientSettingStore_First_Call) RunAndReturn(run func(context.Context) (*database.SyncClientSetting, error)) *MockSyncClientSettingStore_First_Call {
	_c.Call.Return(run)
	return _c
}

// SyncClientSettingExists provides a mock function with given fields: ctx
func (_m *MockSyncClientSettingStore) SyncClientSettingExists(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SyncClientSettingExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncClientSettingStore_SyncClientSettingExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncClientSettingExists'
type MockSyncClientSettingStore_SyncClientSettingExists_Call struct {
	*mock.Call
}

// SyncClientSettingExists is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSyncClientSettingStore_Expecter) SyncClientSettingExists(ctx interface{}) *MockSyncClientSettingStore_SyncClientSettingExists_Call {
	return &MockSyncClientSettingStore_SyncClientSettingExists_Call{Call: _e.mock.On("SyncClientSettingExists", ctx)}
}

func (_c *MockSyncClientSettingStore_SyncClientSettingExists_Call) Run(run func(ctx context.Context)) *MockSyncClientSettingStore_SyncClientSettingExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSyncClientSettingStore_SyncClientSettingExists_Call) Return(_a0 bool, _a1 error) *MockSyncClientSettingStore_SyncClientSettingExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncClientSettingStore_SyncClientSettingExists_Call) RunAndReturn(run func(context.Context) (bool, error)) *MockSyncClientSettingStore_SyncClientSettingExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSyncClientSettingStore creates a new instance of MockSyncClientSettingStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSyncClientSettingStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSyncClientSettingStore {
	mock := &MockSyncClientSettingStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

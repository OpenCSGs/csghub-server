// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockAccountMeteringStore is an autogenerated mock type for the AccountMeteringStore type
type MockAccountMeteringStore struct {
	mock.Mock
}

type MockAccountMeteringStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountMeteringStore) EXPECT() *MockAccountMeteringStore_Expecter {
	return &MockAccountMeteringStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, input
func (_m *MockAccountMeteringStore) Create(ctx context.Context, input database.AccountMetering) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.AccountMetering) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountMeteringStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountMeteringStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.AccountMetering
func (_e *MockAccountMeteringStore_Expecter) Create(ctx interface{}, input interface{}) *MockAccountMeteringStore_Create_Call {
	return &MockAccountMeteringStore_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *MockAccountMeteringStore_Create_Call) Run(run func(ctx context.Context, input database.AccountMetering)) *MockAccountMeteringStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.AccountMetering))
	})
	return _c
}

func (_c *MockAccountMeteringStore_Create_Call) Return(_a0 error) *MockAccountMeteringStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountMeteringStore_Create_Call) RunAndReturn(run func(context.Context, database.AccountMetering) error) *MockAccountMeteringStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetStatByDate provides a mock function with given fields: ctx, req
func (_m *MockAccountMeteringStore) GetStatByDate(ctx context.Context, req types.ACCT_STATEMENTS_REQ) ([]map[string]interface{}, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetStatByDate")
	}

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ACCT_STATEMENTS_REQ) ([]map[string]interface{}, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ACCT_STATEMENTS_REQ) []map[string]interface{}); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ACCT_STATEMENTS_REQ) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountMeteringStore_GetStatByDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatByDate'
type MockAccountMeteringStore_GetStatByDate_Call struct {
	*mock.Call
}

// GetStatByDate is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ACCT_STATEMENTS_REQ
func (_e *MockAccountMeteringStore_Expecter) GetStatByDate(ctx interface{}, req interface{}) *MockAccountMeteringStore_GetStatByDate_Call {
	return &MockAccountMeteringStore_GetStatByDate_Call{Call: _e.mock.On("GetStatByDate", ctx, req)}
}

func (_c *MockAccountMeteringStore_GetStatByDate_Call) Run(run func(ctx context.Context, req types.ACCT_STATEMENTS_REQ)) *MockAccountMeteringStore_GetStatByDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ACCT_STATEMENTS_REQ))
	})
	return _c
}

func (_c *MockAccountMeteringStore_GetStatByDate_Call) Return(_a0 []map[string]interface{}, _a1 error) *MockAccountMeteringStore_GetStatByDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountMeteringStore_GetStatByDate_Call) RunAndReturn(run func(context.Context, types.ACCT_STATEMENTS_REQ) ([]map[string]interface{}, error)) *MockAccountMeteringStore_GetStatByDate_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllByUserUUID provides a mock function with given fields: ctx, userUUID
func (_m *MockAccountMeteringStore) ListAllByUserUUID(ctx context.Context, userUUID string) ([]database.AccountMetering, error) {
	ret := _m.Called(ctx, userUUID)

	if len(ret) == 0 {
		panic("no return value specified for ListAllByUserUUID")
	}

	var r0 []database.AccountMetering
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]database.AccountMetering, error)); ok {
		return rf(ctx, userUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []database.AccountMetering); ok {
		r0 = rf(ctx, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.AccountMetering)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountMeteringStore_ListAllByUserUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllByUserUUID'
type MockAccountMeteringStore_ListAllByUserUUID_Call struct {
	*mock.Call
}

// ListAllByUserUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
func (_e *MockAccountMeteringStore_Expecter) ListAllByUserUUID(ctx interface{}, userUUID interface{}) *MockAccountMeteringStore_ListAllByUserUUID_Call {
	return &MockAccountMeteringStore_ListAllByUserUUID_Call{Call: _e.mock.On("ListAllByUserUUID", ctx, userUUID)}
}

func (_c *MockAccountMeteringStore_ListAllByUserUUID_Call) Run(run func(ctx context.Context, userUUID string)) *MockAccountMeteringStore_ListAllByUserUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountMeteringStore_ListAllByUserUUID_Call) Return(_a0 []database.AccountMetering, _a1 error) *MockAccountMeteringStore_ListAllByUserUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountMeteringStore_ListAllByUserUUID_Call) RunAndReturn(run func(context.Context, string) ([]database.AccountMetering, error)) *MockAccountMeteringStore_ListAllByUserUUID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUserIDAndTime provides a mock function with given fields: ctx, req
func (_m *MockAccountMeteringStore) ListByUserIDAndTime(ctx context.Context, req types.ACCT_STATEMENTS_REQ) ([]database.AccountMetering, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListByUserIDAndTime")
	}

	var r0 []database.AccountMetering
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ACCT_STATEMENTS_REQ) ([]database.AccountMetering, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ACCT_STATEMENTS_REQ) []database.AccountMetering); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.AccountMetering)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ACCT_STATEMENTS_REQ) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.ACCT_STATEMENTS_REQ) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAccountMeteringStore_ListByUserIDAndTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUserIDAndTime'
type MockAccountMeteringStore_ListByUserIDAndTime_Call struct {
	*mock.Call
}

// ListByUserIDAndTime is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ACCT_STATEMENTS_REQ
func (_e *MockAccountMeteringStore_Expecter) ListByUserIDAndTime(ctx interface{}, req interface{}) *MockAccountMeteringStore_ListByUserIDAndTime_Call {
	return &MockAccountMeteringStore_ListByUserIDAndTime_Call{Call: _e.mock.On("ListByUserIDAndTime", ctx, req)}
}

func (_c *MockAccountMeteringStore_ListByUserIDAndTime_Call) Run(run func(ctx context.Context, req types.ACCT_STATEMENTS_REQ)) *MockAccountMeteringStore_ListByUserIDAndTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ACCT_STATEMENTS_REQ))
	})
	return _c
}

func (_c *MockAccountMeteringStore_ListByUserIDAndTime_Call) Return(_a0 []database.AccountMetering, _a1 int, _a2 error) *MockAccountMeteringStore_ListByUserIDAndTime_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAccountMeteringStore_ListByUserIDAndTime_Call) RunAndReturn(run func(context.Context, types.ACCT_STATEMENTS_REQ) ([]database.AccountMetering, int, error)) *MockAccountMeteringStore_ListByUserIDAndTime_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountMeteringStore creates a new instance of MockAccountMeteringStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountMeteringStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountMeteringStore {
	mock := &MockAccountMeteringStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

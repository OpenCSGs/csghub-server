// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockLfsMetaObjectStore is an autogenerated mock type for the LfsMetaObjectStore type
type MockLfsMetaObjectStore struct {
	mock.Mock
}

type MockLfsMetaObjectStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLfsMetaObjectStore) EXPECT() *MockLfsMetaObjectStore_Expecter {
	return &MockLfsMetaObjectStore_Expecter{mock: &_m.Mock}
}

// BulkUpdateOrCreate provides a mock function with given fields: ctx, repoID, input
func (_m *MockLfsMetaObjectStore) BulkUpdateOrCreate(ctx context.Context, repoID int64, input []database.LfsMetaObject) error {
	ret := _m.Called(ctx, repoID, input)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpdateOrCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []database.LfsMetaObject) error); ok {
		r0 = rf(ctx, repoID, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLfsMetaObjectStore_BulkUpdateOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkUpdateOrCreate'
type MockLfsMetaObjectStore_BulkUpdateOrCreate_Call struct {
	*mock.Call
}

// BulkUpdateOrCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
//   - input []database.LfsMetaObject
func (_e *MockLfsMetaObjectStore_Expecter) BulkUpdateOrCreate(ctx interface{}, repoID interface{}, input interface{}) *MockLfsMetaObjectStore_BulkUpdateOrCreate_Call {
	return &MockLfsMetaObjectStore_BulkUpdateOrCreate_Call{Call: _e.mock.On("BulkUpdateOrCreate", ctx, repoID, input)}
}

func (_c *MockLfsMetaObjectStore_BulkUpdateOrCreate_Call) Run(run func(ctx context.Context, repoID int64, input []database.LfsMetaObject)) *MockLfsMetaObjectStore_BulkUpdateOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]database.LfsMetaObject))
	})
	return _c
}

func (_c *MockLfsMetaObjectStore_BulkUpdateOrCreate_Call) Return(_a0 error) *MockLfsMetaObjectStore_BulkUpdateOrCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLfsMetaObjectStore_BulkUpdateOrCreate_Call) RunAndReturn(run func(context.Context, int64, []database.LfsMetaObject) error) *MockLfsMetaObjectStore_BulkUpdateOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, lfsObj
func (_m *MockLfsMetaObjectStore) Create(ctx context.Context, lfsObj database.LfsMetaObject) (*database.LfsMetaObject, error) {
	ret := _m.Called(ctx, lfsObj)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.LfsMetaObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.LfsMetaObject) (*database.LfsMetaObject, error)); ok {
		return rf(ctx, lfsObj)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.LfsMetaObject) *database.LfsMetaObject); ok {
		r0 = rf(ctx, lfsObj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.LfsMetaObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.LfsMetaObject) error); ok {
		r1 = rf(ctx, lfsObj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLfsMetaObjectStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLfsMetaObjectStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - lfsObj database.LfsMetaObject
func (_e *MockLfsMetaObjectStore_Expecter) Create(ctx interface{}, lfsObj interface{}) *MockLfsMetaObjectStore_Create_Call {
	return &MockLfsMetaObjectStore_Create_Call{Call: _e.mock.On("Create", ctx, lfsObj)}
}

func (_c *MockLfsMetaObjectStore_Create_Call) Run(run func(ctx context.Context, lfsObj database.LfsMetaObject)) *MockLfsMetaObjectStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.LfsMetaObject))
	})
	return _c
}

func (_c *MockLfsMetaObjectStore_Create_Call) Return(_a0 *database.LfsMetaObject, _a1 error) *MockLfsMetaObjectStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLfsMetaObjectStore_Create_Call) RunAndReturn(run func(context.Context, database.LfsMetaObject) (*database.LfsMetaObject, error)) *MockLfsMetaObjectStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByOID provides a mock function with given fields: ctx, RepoId, Oid
func (_m *MockLfsMetaObjectStore) FindByOID(ctx context.Context, RepoId int64, Oid string) (*database.LfsMetaObject, error) {
	ret := _m.Called(ctx, RepoId, Oid)

	if len(ret) == 0 {
		panic("no return value specified for FindByOID")
	}

	var r0 *database.LfsMetaObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*database.LfsMetaObject, error)); ok {
		return rf(ctx, RepoId, Oid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *database.LfsMetaObject); ok {
		r0 = rf(ctx, RepoId, Oid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.LfsMetaObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, RepoId, Oid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLfsMetaObjectStore_FindByOID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByOID'
type MockLfsMetaObjectStore_FindByOID_Call struct {
	*mock.Call
}

// FindByOID is a helper method to define mock.On call
//   - ctx context.Context
//   - RepoId int64
//   - Oid string
func (_e *MockLfsMetaObjectStore_Expecter) FindByOID(ctx interface{}, RepoId interface{}, Oid interface{}) *MockLfsMetaObjectStore_FindByOID_Call {
	return &MockLfsMetaObjectStore_FindByOID_Call{Call: _e.mock.On("FindByOID", ctx, RepoId, Oid)}
}

func (_c *MockLfsMetaObjectStore_FindByOID_Call) Run(run func(ctx context.Context, RepoId int64, Oid string)) *MockLfsMetaObjectStore_FindByOID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockLfsMetaObjectStore_FindByOID_Call) Return(_a0 *database.LfsMetaObject, _a1 error) *MockLfsMetaObjectStore_FindByOID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLfsMetaObjectStore_FindByOID_Call) RunAndReturn(run func(context.Context, int64, string) (*database.LfsMetaObject, error)) *MockLfsMetaObjectStore_FindByOID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByRepoID provides a mock function with given fields: ctx, repoID
func (_m *MockLfsMetaObjectStore) FindByRepoID(ctx context.Context, repoID int64) ([]database.LfsMetaObject, error) {
	ret := _m.Called(ctx, repoID)

	if len(ret) == 0 {
		panic("no return value specified for FindByRepoID")
	}

	var r0 []database.LfsMetaObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]database.LfsMetaObject, error)); ok {
		return rf(ctx, repoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []database.LfsMetaObject); ok {
		r0 = rf(ctx, repoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.LfsMetaObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, repoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLfsMetaObjectStore_FindByRepoID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByRepoID'
type MockLfsMetaObjectStore_FindByRepoID_Call struct {
	*mock.Call
}

// FindByRepoID is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
func (_e *MockLfsMetaObjectStore_Expecter) FindByRepoID(ctx interface{}, repoID interface{}) *MockLfsMetaObjectStore_FindByRepoID_Call {
	return &MockLfsMetaObjectStore_FindByRepoID_Call{Call: _e.mock.On("FindByRepoID", ctx, repoID)}
}

func (_c *MockLfsMetaObjectStore_FindByRepoID_Call) Run(run func(ctx context.Context, repoID int64)) *MockLfsMetaObjectStore_FindByRepoID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockLfsMetaObjectStore_FindByRepoID_Call) Return(_a0 []database.LfsMetaObject, _a1 error) *MockLfsMetaObjectStore_FindByRepoID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLfsMetaObjectStore_FindByRepoID_Call) RunAndReturn(run func(context.Context, int64) ([]database.LfsMetaObject, error)) *MockLfsMetaObjectStore_FindByRepoID_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveByOid provides a mock function with given fields: ctx, oid, repoID
func (_m *MockLfsMetaObjectStore) RemoveByOid(ctx context.Context, oid string, repoID int64) error {
	ret := _m.Called(ctx, oid, repoID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveByOid")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, oid, repoID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLfsMetaObjectStore_RemoveByOid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveByOid'
type MockLfsMetaObjectStore_RemoveByOid_Call struct {
	*mock.Call
}

// RemoveByOid is a helper method to define mock.On call
//   - ctx context.Context
//   - oid string
//   - repoID int64
func (_e *MockLfsMetaObjectStore_Expecter) RemoveByOid(ctx interface{}, oid interface{}, repoID interface{}) *MockLfsMetaObjectStore_RemoveByOid_Call {
	return &MockLfsMetaObjectStore_RemoveByOid_Call{Call: _e.mock.On("RemoveByOid", ctx, oid, repoID)}
}

func (_c *MockLfsMetaObjectStore_RemoveByOid_Call) Run(run func(ctx context.Context, oid string, repoID int64)) *MockLfsMetaObjectStore_RemoveByOid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockLfsMetaObjectStore_RemoveByOid_Call) Return(_a0 error) *MockLfsMetaObjectStore_RemoveByOid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLfsMetaObjectStore_RemoveByOid_Call) RunAndReturn(run func(context.Context, string, int64) error) *MockLfsMetaObjectStore_RemoveByOid_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrCreate provides a mock function with given fields: ctx, input
func (_m *MockLfsMetaObjectStore) UpdateOrCreate(ctx context.Context, input database.LfsMetaObject) (*database.LfsMetaObject, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrCreate")
	}

	var r0 *database.LfsMetaObject
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.LfsMetaObject) (*database.LfsMetaObject, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.LfsMetaObject) *database.LfsMetaObject); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.LfsMetaObject)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.LfsMetaObject) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLfsMetaObjectStore_UpdateOrCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrCreate'
type MockLfsMetaObjectStore_UpdateOrCreate_Call struct {
	*mock.Call
}

// UpdateOrCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.LfsMetaObject
func (_e *MockLfsMetaObjectStore_Expecter) UpdateOrCreate(ctx interface{}, input interface{}) *MockLfsMetaObjectStore_UpdateOrCreate_Call {
	return &MockLfsMetaObjectStore_UpdateOrCreate_Call{Call: _e.mock.On("UpdateOrCreate", ctx, input)}
}

func (_c *MockLfsMetaObjectStore_UpdateOrCreate_Call) Run(run func(ctx context.Context, input database.LfsMetaObject)) *MockLfsMetaObjectStore_UpdateOrCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.LfsMetaObject))
	})
	return _c
}

func (_c *MockLfsMetaObjectStore_UpdateOrCreate_Call) Return(_a0 *database.LfsMetaObject, _a1 error) *MockLfsMetaObjectStore_UpdateOrCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLfsMetaObjectStore_UpdateOrCreate_Call) RunAndReturn(run func(context.Context, database.LfsMetaObject) (*database.LfsMetaObject, error)) *MockLfsMetaObjectStore_UpdateOrCreate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLfsMetaObjectStore creates a new instance of MockLfsMetaObjectStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLfsMetaObjectStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLfsMetaObjectStore {
	mock := &MockLfsMetaObjectStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockRuntimeArchitecturesStore is an autogenerated mock type for the RuntimeArchitecturesStore type
type MockRuntimeArchitecturesStore struct {
	mock.Mock
}

type MockRuntimeArchitecturesStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRuntimeArchitecturesStore) EXPECT() *MockRuntimeArchitecturesStore_Expecter {
	return &MockRuntimeArchitecturesStore_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, arch
func (_m *MockRuntimeArchitecturesStore) Add(ctx context.Context, arch database.RuntimeArchitecture) error {
	ret := _m.Called(ctx, arch)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.RuntimeArchitecture) error); ok {
		r0 = rf(ctx, arch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRuntimeArchitecturesStore_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockRuntimeArchitecturesStore_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - arch database.RuntimeArchitecture
func (_e *MockRuntimeArchitecturesStore_Expecter) Add(ctx interface{}, arch interface{}) *MockRuntimeArchitecturesStore_Add_Call {
	return &MockRuntimeArchitecturesStore_Add_Call{Call: _e.mock.On("Add", ctx, arch)}
}

func (_c *MockRuntimeArchitecturesStore_Add_Call) Run(run func(ctx context.Context, arch database.RuntimeArchitecture)) *MockRuntimeArchitecturesStore_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.RuntimeArchitecture))
	})
	return _c
}

func (_c *MockRuntimeArchitecturesStore_Add_Call) Return(_a0 error) *MockRuntimeArchitecturesStore_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuntimeArchitecturesStore_Add_Call) RunAndReturn(run func(context.Context, database.RuntimeArchitecture) error) *MockRuntimeArchitecturesStore_Add_Call {
	_c.Call.Return(run)
	return _c
}

// BatchAdd provides a mock function with given fields: ctx, archs
func (_m *MockRuntimeArchitecturesStore) BatchAdd(ctx context.Context, archs []database.RuntimeArchitecture) error {
	ret := _m.Called(ctx, archs)

	if len(ret) == 0 {
		panic("no return value specified for BatchAdd")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []database.RuntimeArchitecture) error); ok {
		r0 = rf(ctx, archs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRuntimeArchitecturesStore_BatchAdd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchAdd'
type MockRuntimeArchitecturesStore_BatchAdd_Call struct {
	*mock.Call
}

// BatchAdd is a helper method to define mock.On call
//   - ctx context.Context
//   - archs []database.RuntimeArchitecture
func (_e *MockRuntimeArchitecturesStore_Expecter) BatchAdd(ctx interface{}, archs interface{}) *MockRuntimeArchitecturesStore_BatchAdd_Call {
	return &MockRuntimeArchitecturesStore_BatchAdd_Call{Call: _e.mock.On("BatchAdd", ctx, archs)}
}

func (_c *MockRuntimeArchitecturesStore_BatchAdd_Call) Run(run func(ctx context.Context, archs []database.RuntimeArchitecture)) *MockRuntimeArchitecturesStore_BatchAdd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]database.RuntimeArchitecture))
	})
	return _c
}

func (_c *MockRuntimeArchitecturesStore_BatchAdd_Call) Return(_a0 error) *MockRuntimeArchitecturesStore_BatchAdd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuntimeArchitecturesStore_BatchAdd_Call) RunAndReturn(run func(context.Context, []database.RuntimeArchitecture) error) *MockRuntimeArchitecturesStore_BatchAdd_Call {
	_c.Call.Return(run)
	return _c
}

// CheckEngineByArchModelNameAndType provides a mock function with given fields: ctx, archs, modelName, format, deployType
func (_m *MockRuntimeArchitecturesStore) CheckEngineByArchModelNameAndType(ctx context.Context, archs []string, modelName string, format string, deployType int) (bool, error) {
	ret := _m.Called(ctx, archs, modelName, format, deployType)

	if len(ret) == 0 {
		panic("no return value specified for CheckEngineByArchModelNameAndType")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string, string, int) (bool, error)); ok {
		return rf(ctx, archs, modelName, format, deployType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, string, string, int) bool); ok {
		r0 = rf(ctx, archs, modelName, format, deployType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, string, string, int) error); ok {
		r1 = rf(ctx, archs, modelName, format, deployType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuntimeArchitecturesStore_CheckEngineByArchModelNameAndType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckEngineByArchModelNameAndType'
type MockRuntimeArchitecturesStore_CheckEngineByArchModelNameAndType_Call struct {
	*mock.Call
}

// CheckEngineByArchModelNameAndType is a helper method to define mock.On call
//   - ctx context.Context
//   - archs []string
//   - modelName string
//   - format string
//   - deployType int
func (_e *MockRuntimeArchitecturesStore_Expecter) CheckEngineByArchModelNameAndType(ctx interface{}, archs interface{}, modelName interface{}, format interface{}, deployType interface{}) *MockRuntimeArchitecturesStore_CheckEngineByArchModelNameAndType_Call {
	return &MockRuntimeArchitecturesStore_CheckEngineByArchModelNameAndType_Call{Call: _e.mock.On("CheckEngineByArchModelNameAndType", ctx, archs, modelName, format, deployType)}
}

func (_c *MockRuntimeArchitecturesStore_CheckEngineByArchModelNameAndType_Call) Run(run func(ctx context.Context, archs []string, modelName string, format string, deployType int)) *MockRuntimeArchitecturesStore_CheckEngineByArchModelNameAndType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(string), args[3].(string), args[4].(int))
	})
	return _c
}

func (_c *MockRuntimeArchitecturesStore_CheckEngineByArchModelNameAndType_Call) Return(_a0 bool, _a1 error) *MockRuntimeArchitecturesStore_CheckEngineByArchModelNameAndType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuntimeArchitecturesStore_CheckEngineByArchModelNameAndType_Call) RunAndReturn(run func(context.Context, []string, string, string, int) (bool, error)) *MockRuntimeArchitecturesStore_CheckEngineByArchModelNameAndType_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByRuntimeID provides a mock function with given fields: ctx, id
func (_m *MockRuntimeArchitecturesStore) DeleteByRuntimeID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByRuntimeID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRuntimeArchitecturesStore_DeleteByRuntimeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByRuntimeID'
type MockRuntimeArchitecturesStore_DeleteByRuntimeID_Call struct {
	*mock.Call
}

// DeleteByRuntimeID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockRuntimeArchitecturesStore_Expecter) DeleteByRuntimeID(ctx interface{}, id interface{}) *MockRuntimeArchitecturesStore_DeleteByRuntimeID_Call {
	return &MockRuntimeArchitecturesStore_DeleteByRuntimeID_Call{Call: _e.mock.On("DeleteByRuntimeID", ctx, id)}
}

func (_c *MockRuntimeArchitecturesStore_DeleteByRuntimeID_Call) Run(run func(ctx context.Context, id int64)) *MockRuntimeArchitecturesStore_DeleteByRuntimeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRuntimeArchitecturesStore_DeleteByRuntimeID_Call) Return(_a0 error) *MockRuntimeArchitecturesStore_DeleteByRuntimeID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuntimeArchitecturesStore_DeleteByRuntimeID_Call) RunAndReturn(run func(context.Context, int64) error) *MockRuntimeArchitecturesStore_DeleteByRuntimeID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByRuntimeIDAndArchName provides a mock function with given fields: ctx, id, archName
func (_m *MockRuntimeArchitecturesStore) DeleteByRuntimeIDAndArchName(ctx context.Context, id int64, archName string) error {
	ret := _m.Called(ctx, id, archName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByRuntimeIDAndArchName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, id, archName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRuntimeArchitecturesStore_DeleteByRuntimeIDAndArchName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByRuntimeIDAndArchName'
type MockRuntimeArchitecturesStore_DeleteByRuntimeIDAndArchName_Call struct {
	*mock.Call
}

// DeleteByRuntimeIDAndArchName is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - archName string
func (_e *MockRuntimeArchitecturesStore_Expecter) DeleteByRuntimeIDAndArchName(ctx interface{}, id interface{}, archName interface{}) *MockRuntimeArchitecturesStore_DeleteByRuntimeIDAndArchName_Call {
	return &MockRuntimeArchitecturesStore_DeleteByRuntimeIDAndArchName_Call{Call: _e.mock.On("DeleteByRuntimeIDAndArchName", ctx, id, archName)}
}

func (_c *MockRuntimeArchitecturesStore_DeleteByRuntimeIDAndArchName_Call) Run(run func(ctx context.Context, id int64, archName string)) *MockRuntimeArchitecturesStore_DeleteByRuntimeIDAndArchName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockRuntimeArchitecturesStore_DeleteByRuntimeIDAndArchName_Call) Return(_a0 error) *MockRuntimeArchitecturesStore_DeleteByRuntimeIDAndArchName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRuntimeArchitecturesStore_DeleteByRuntimeIDAndArchName_Call) RunAndReturn(run func(context.Context, int64, string) error) *MockRuntimeArchitecturesStore_DeleteByRuntimeIDAndArchName_Call {
	_c.Call.Return(run)
	return _c
}

// FindByRuntimeIDAndArchName provides a mock function with given fields: ctx, id, archName
func (_m *MockRuntimeArchitecturesStore) FindByRuntimeIDAndArchName(ctx context.Context, id int64, archName string) (*database.RuntimeArchitecture, error) {
	ret := _m.Called(ctx, id, archName)

	if len(ret) == 0 {
		panic("no return value specified for FindByRuntimeIDAndArchName")
	}

	var r0 *database.RuntimeArchitecture
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*database.RuntimeArchitecture, error)); ok {
		return rf(ctx, id, archName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *database.RuntimeArchitecture); ok {
		r0 = rf(ctx, id, archName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.RuntimeArchitecture)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, id, archName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuntimeArchitecturesStore_FindByRuntimeIDAndArchName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByRuntimeIDAndArchName'
type MockRuntimeArchitecturesStore_FindByRuntimeIDAndArchName_Call struct {
	*mock.Call
}

// FindByRuntimeIDAndArchName is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - archName string
func (_e *MockRuntimeArchitecturesStore_Expecter) FindByRuntimeIDAndArchName(ctx interface{}, id interface{}, archName interface{}) *MockRuntimeArchitecturesStore_FindByRuntimeIDAndArchName_Call {
	return &MockRuntimeArchitecturesStore_FindByRuntimeIDAndArchName_Call{Call: _e.mock.On("FindByRuntimeIDAndArchName", ctx, id, archName)}
}

func (_c *MockRuntimeArchitecturesStore_FindByRuntimeIDAndArchName_Call) Run(run func(ctx context.Context, id int64, archName string)) *MockRuntimeArchitecturesStore_FindByRuntimeIDAndArchName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockRuntimeArchitecturesStore_FindByRuntimeIDAndArchName_Call) Return(_a0 *database.RuntimeArchitecture, _a1 error) *MockRuntimeArchitecturesStore_FindByRuntimeIDAndArchName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuntimeArchitecturesStore_FindByRuntimeIDAndArchName_Call) RunAndReturn(run func(context.Context, int64, string) (*database.RuntimeArchitecture, error)) *MockRuntimeArchitecturesStore_FindByRuntimeIDAndArchName_Call {
	_c.Call.Return(run)
	return _c
}

// ListByArchNameAndModel provides a mock function with given fields: ctx, archs, modelName
func (_m *MockRuntimeArchitecturesStore) ListByArchNameAndModel(ctx context.Context, archs []string, modelName string) ([]database.RuntimeArchitecture, error) {
	ret := _m.Called(ctx, archs, modelName)

	if len(ret) == 0 {
		panic("no return value specified for ListByArchNameAndModel")
	}

	var r0 []database.RuntimeArchitecture
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) ([]database.RuntimeArchitecture, error)); ok {
		return rf(ctx, archs, modelName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) []database.RuntimeArchitecture); ok {
		r0 = rf(ctx, archs, modelName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.RuntimeArchitecture)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, string) error); ok {
		r1 = rf(ctx, archs, modelName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuntimeArchitecturesStore_ListByArchNameAndModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByArchNameAndModel'
type MockRuntimeArchitecturesStore_ListByArchNameAndModel_Call struct {
	*mock.Call
}

// ListByArchNameAndModel is a helper method to define mock.On call
//   - ctx context.Context
//   - archs []string
//   - modelName string
func (_e *MockRuntimeArchitecturesStore_Expecter) ListByArchNameAndModel(ctx interface{}, archs interface{}, modelName interface{}) *MockRuntimeArchitecturesStore_ListByArchNameAndModel_Call {
	return &MockRuntimeArchitecturesStore_ListByArchNameAndModel_Call{Call: _e.mock.On("ListByArchNameAndModel", ctx, archs, modelName)}
}

func (_c *MockRuntimeArchitecturesStore_ListByArchNameAndModel_Call) Run(run func(ctx context.Context, archs []string, modelName string)) *MockRuntimeArchitecturesStore_ListByArchNameAndModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(string))
	})
	return _c
}

func (_c *MockRuntimeArchitecturesStore_ListByArchNameAndModel_Call) Return(_a0 []database.RuntimeArchitecture, _a1 error) *MockRuntimeArchitecturesStore_ListByArchNameAndModel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuntimeArchitecturesStore_ListByArchNameAndModel_Call) RunAndReturn(run func(context.Context, []string, string) ([]database.RuntimeArchitecture, error)) *MockRuntimeArchitecturesStore_ListByArchNameAndModel_Call {
	_c.Call.Return(run)
	return _c
}

// ListByRArchName provides a mock function with given fields: ctx, archName
func (_m *MockRuntimeArchitecturesStore) ListByRArchName(ctx context.Context, archName string) ([]database.RuntimeArchitecture, error) {
	ret := _m.Called(ctx, archName)

	if len(ret) == 0 {
		panic("no return value specified for ListByRArchName")
	}

	var r0 []database.RuntimeArchitecture
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]database.RuntimeArchitecture, error)); ok {
		return rf(ctx, archName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []database.RuntimeArchitecture); ok {
		r0 = rf(ctx, archName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.RuntimeArchitecture)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, archName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuntimeArchitecturesStore_ListByRArchName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByRArchName'
type MockRuntimeArchitecturesStore_ListByRArchName_Call struct {
	*mock.Call
}

// ListByRArchName is a helper method to define mock.On call
//   - ctx context.Context
//   - archName string
func (_e *MockRuntimeArchitecturesStore_Expecter) ListByRArchName(ctx interface{}, archName interface{}) *MockRuntimeArchitecturesStore_ListByRArchName_Call {
	return &MockRuntimeArchitecturesStore_ListByRArchName_Call{Call: _e.mock.On("ListByRArchName", ctx, archName)}
}

func (_c *MockRuntimeArchitecturesStore_ListByRArchName_Call) Run(run func(ctx context.Context, archName string)) *MockRuntimeArchitecturesStore_ListByRArchName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRuntimeArchitecturesStore_ListByRArchName_Call) Return(_a0 []database.RuntimeArchitecture, _a1 error) *MockRuntimeArchitecturesStore_ListByRArchName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuntimeArchitecturesStore_ListByRArchName_Call) RunAndReturn(run func(context.Context, string) ([]database.RuntimeArchitecture, error)) *MockRuntimeArchitecturesStore_ListByRArchName_Call {
	_c.Call.Return(run)
	return _c
}

// ListByRuntimeFrameworkID provides a mock function with given fields: ctx, id
func (_m *MockRuntimeArchitecturesStore) ListByRuntimeFrameworkID(ctx context.Context, id int64) ([]database.RuntimeArchitecture, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ListByRuntimeFrameworkID")
	}

	var r0 []database.RuntimeArchitecture
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]database.RuntimeArchitecture, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []database.RuntimeArchitecture); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.RuntimeArchitecture)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRuntimeArchitecturesStore_ListByRuntimeFrameworkID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByRuntimeFrameworkID'
type MockRuntimeArchitecturesStore_ListByRuntimeFrameworkID_Call struct {
	*mock.Call
}

// ListByRuntimeFrameworkID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockRuntimeArchitecturesStore_Expecter) ListByRuntimeFrameworkID(ctx interface{}, id interface{}) *MockRuntimeArchitecturesStore_ListByRuntimeFrameworkID_Call {
	return &MockRuntimeArchitecturesStore_ListByRuntimeFrameworkID_Call{Call: _e.mock.On("ListByRuntimeFrameworkID", ctx, id)}
}

func (_c *MockRuntimeArchitecturesStore_ListByRuntimeFrameworkID_Call) Run(run func(ctx context.Context, id int64)) *MockRuntimeArchitecturesStore_ListByRuntimeFrameworkID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRuntimeArchitecturesStore_ListByRuntimeFrameworkID_Call) Return(_a0 []database.RuntimeArchitecture, _a1 error) *MockRuntimeArchitecturesStore_ListByRuntimeFrameworkID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRuntimeArchitecturesStore_ListByRuntimeFrameworkID_Call) RunAndReturn(run func(context.Context, int64) ([]database.RuntimeArchitecture, error)) *MockRuntimeArchitecturesStore_ListByRuntimeFrameworkID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRuntimeArchitecturesStore creates a new instance of MockRuntimeArchitecturesStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRuntimeArchitecturesStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRuntimeArchitecturesStore {
	mock := &MockRuntimeArchitecturesStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.49.1. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockSyncVersionStore is an autogenerated mock type for the SyncVersionStore type
type MockSyncVersionStore struct {
	mock.Mock
}

type MockSyncVersionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSyncVersionStore) EXPECT() *MockSyncVersionStore_Expecter {
	return &MockSyncVersionStore_Expecter{mock: &_m.Mock}
}

// BatchCreate provides a mock function with given fields: ctx, versions
func (_m *MockSyncVersionStore) BatchCreate(ctx context.Context, versions []database.SyncVersion) error {
	ret := _m.Called(ctx, versions)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []database.SyncVersion) error); ok {
		r0 = rf(ctx, versions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyncVersionStore_BatchCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchCreate'
type MockSyncVersionStore_BatchCreate_Call struct {
	*mock.Call
}

// BatchCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - versions []database.SyncVersion
func (_e *MockSyncVersionStore_Expecter) BatchCreate(ctx interface{}, versions interface{}) *MockSyncVersionStore_BatchCreate_Call {
	return &MockSyncVersionStore_BatchCreate_Call{Call: _e.mock.On("BatchCreate", ctx, versions)}
}

func (_c *MockSyncVersionStore_BatchCreate_Call) Run(run func(ctx context.Context, versions []database.SyncVersion)) *MockSyncVersionStore_BatchCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]database.SyncVersion))
	})
	return _c
}

func (_c *MockSyncVersionStore_BatchCreate_Call) Return(_a0 error) *MockSyncVersionStore_BatchCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyncVersionStore_BatchCreate_Call) RunAndReturn(run func(context.Context, []database.SyncVersion) error) *MockSyncVersionStore_BatchCreate_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, version
func (_m *MockSyncVersionStore) Create(ctx context.Context, version *database.SyncVersion) error {
	ret := _m.Called(ctx, version)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.SyncVersion) error); ok {
		r0 = rf(ctx, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSyncVersionStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSyncVersionStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - version *database.SyncVersion
func (_e *MockSyncVersionStore_Expecter) Create(ctx interface{}, version interface{}) *MockSyncVersionStore_Create_Call {
	return &MockSyncVersionStore_Create_Call{Call: _e.mock.On("Create", ctx, version)}
}

func (_c *MockSyncVersionStore_Create_Call) Run(run func(ctx context.Context, version *database.SyncVersion)) *MockSyncVersionStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.SyncVersion))
	})
	return _c
}

func (_c *MockSyncVersionStore_Create_Call) Return(err error) *MockSyncVersionStore_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSyncVersionStore_Create_Call) RunAndReturn(run func(context.Context, *database.SyncVersion) error) *MockSyncVersionStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindByPath provides a mock function with given fields: ctx, path
func (_m *MockSyncVersionStore) FindByPath(ctx context.Context, path string) (*database.SyncVersion, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for FindByPath")
	}

	var r0 *database.SyncVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.SyncVersion, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.SyncVersion); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SyncVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncVersionStore_FindByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByPath'
type MockSyncVersionStore_FindByPath_Call struct {
	*mock.Call
}

// FindByPath is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockSyncVersionStore_Expecter) FindByPath(ctx interface{}, path interface{}) *MockSyncVersionStore_FindByPath_Call {
	return &MockSyncVersionStore_FindByPath_Call{Call: _e.mock.On("FindByPath", ctx, path)}
}

func (_c *MockSyncVersionStore_FindByPath_Call) Run(run func(ctx context.Context, path string)) *MockSyncVersionStore_FindByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSyncVersionStore_FindByPath_Call) Return(_a0 *database.SyncVersion, _a1 error) *MockSyncVersionStore_FindByPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncVersionStore_FindByPath_Call) RunAndReturn(run func(context.Context, string) (*database.SyncVersion, error)) *MockSyncVersionStore_FindByPath_Call {
	_c.Call.Return(run)
	return _c
}

// FindByRepoTypeAndPath provides a mock function with given fields: ctx, path, repoType
func (_m *MockSyncVersionStore) FindByRepoTypeAndPath(ctx context.Context, path string, repoType types.RepositoryType) (*database.SyncVersion, error) {
	ret := _m.Called(ctx, path, repoType)

	if len(ret) == 0 {
		panic("no return value specified for FindByRepoTypeAndPath")
	}

	var r0 *database.SyncVersion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.RepositoryType) (*database.SyncVersion, error)); ok {
		return rf(ctx, path, repoType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.RepositoryType) *database.SyncVersion); ok {
		r0 = rf(ctx, path, repoType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SyncVersion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.RepositoryType) error); ok {
		r1 = rf(ctx, path, repoType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncVersionStore_FindByRepoTypeAndPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByRepoTypeAndPath'
type MockSyncVersionStore_FindByRepoTypeAndPath_Call struct {
	*mock.Call
}

// FindByRepoTypeAndPath is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - repoType types.RepositoryType
func (_e *MockSyncVersionStore_Expecter) FindByRepoTypeAndPath(ctx interface{}, path interface{}, repoType interface{}) *MockSyncVersionStore_FindByRepoTypeAndPath_Call {
	return &MockSyncVersionStore_FindByRepoTypeAndPath_Call{Call: _e.mock.On("FindByRepoTypeAndPath", ctx, path, repoType)}
}

func (_c *MockSyncVersionStore_FindByRepoTypeAndPath_Call) Run(run func(ctx context.Context, path string, repoType types.RepositoryType)) *MockSyncVersionStore_FindByRepoTypeAndPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.RepositoryType))
	})
	return _c
}

func (_c *MockSyncVersionStore_FindByRepoTypeAndPath_Call) Return(_a0 *database.SyncVersion, _a1 error) *MockSyncVersionStore_FindByRepoTypeAndPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncVersionStore_FindByRepoTypeAndPath_Call) RunAndReturn(run func(context.Context, string, types.RepositoryType) (*database.SyncVersion, error)) *MockSyncVersionStore_FindByRepoTypeAndPath_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSyncVersionStore creates a new instance of MockSyncVersionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSyncVersionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSyncVersionStore {
	mock := &MockSyncVersionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

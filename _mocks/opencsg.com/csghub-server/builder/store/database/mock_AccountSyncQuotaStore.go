// Code generated by mockery v2.49.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockAccountSyncQuotaStore is an autogenerated mock type for the AccountSyncQuotaStore type
type MockAccountSyncQuotaStore struct {
	mock.Mock
}

type MockAccountSyncQuotaStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountSyncQuotaStore) EXPECT() *MockAccountSyncQuotaStore_Expecter {
	return &MockAccountSyncQuotaStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, accountQuota
func (_m *MockAccountSyncQuotaStore) Create(ctx context.Context, accountQuota database.AccountSyncQuota) error {
	ret := _m.Called(ctx, accountQuota)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.AccountSyncQuota) error); ok {
		r0 = rf(ctx, accountQuota)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountSyncQuotaStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountSyncQuotaStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - accountQuota database.AccountSyncQuota
func (_e *MockAccountSyncQuotaStore_Expecter) Create(ctx interface{}, accountQuota interface{}) *MockAccountSyncQuotaStore_Create_Call {
	return &MockAccountSyncQuotaStore_Create_Call{Call: _e.mock.On("Create", ctx, accountQuota)}
}

func (_c *MockAccountSyncQuotaStore_Create_Call) Run(run func(ctx context.Context, accountQuota database.AccountSyncQuota)) *MockAccountSyncQuotaStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.AccountSyncQuota))
	})
	return _c
}

func (_c *MockAccountSyncQuotaStore_Create_Call) Return(_a0 error) *MockAccountSyncQuotaStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountSyncQuotaStore_Create_Call) RunAndReturn(run func(context.Context, database.AccountSyncQuota) error) *MockAccountSyncQuotaStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, accountQuota
func (_m *MockAccountSyncQuotaStore) Delete(ctx context.Context, accountQuota database.AccountSyncQuota) error {
	ret := _m.Called(ctx, accountQuota)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.AccountSyncQuota) error); ok {
		r0 = rf(ctx, accountQuota)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountSyncQuotaStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccountSyncQuotaStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - accountQuota database.AccountSyncQuota
func (_e *MockAccountSyncQuotaStore_Expecter) Delete(ctx interface{}, accountQuota interface{}) *MockAccountSyncQuotaStore_Delete_Call {
	return &MockAccountSyncQuotaStore_Delete_Call{Call: _e.mock.On("Delete", ctx, accountQuota)}
}

func (_c *MockAccountSyncQuotaStore_Delete_Call) Run(run func(ctx context.Context, accountQuota database.AccountSyncQuota)) *MockAccountSyncQuotaStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.AccountSyncQuota))
	})
	return _c
}

func (_c *MockAccountSyncQuotaStore_Delete_Call) Return(_a0 error) *MockAccountSyncQuotaStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountSyncQuotaStore_Delete_Call) RunAndReturn(run func(context.Context, database.AccountSyncQuota) error) *MockAccountSyncQuotaStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, userID
func (_m *MockAccountSyncQuotaStore) GetByID(ctx context.Context, userID int64) (*database.AccountSyncQuota, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *database.AccountSyncQuota
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.AccountSyncQuota, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.AccountSyncQuota); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountSyncQuota)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSyncQuotaStore_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockAccountSyncQuotaStore_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *MockAccountSyncQuotaStore_Expecter) GetByID(ctx interface{}, userID interface{}) *MockAccountSyncQuotaStore_GetByID_Call {
	return &MockAccountSyncQuotaStore_GetByID_Call{Call: _e.mock.On("GetByID", ctx, userID)}
}

func (_c *MockAccountSyncQuotaStore_GetByID_Call) Run(run func(ctx context.Context, userID int64)) *MockAccountSyncQuotaStore_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAccountSyncQuotaStore_GetByID_Call) Return(_a0 *database.AccountSyncQuota, _a1 error) *MockAccountSyncQuotaStore_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSyncQuotaStore_GetByID_Call) RunAndReturn(run func(context.Context, int64) (*database.AccountSyncQuota, error)) *MockAccountSyncQuotaStore_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllByUserID provides a mock function with given fields: ctx, userID
func (_m *MockAccountSyncQuotaStore) ListAllByUserID(ctx context.Context, userID int64) ([]database.AccountSyncQuota, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListAllByUserID")
	}

	var r0 []database.AccountSyncQuota
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]database.AccountSyncQuota, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []database.AccountSyncQuota); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.AccountSyncQuota)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSyncQuotaStore_ListAllByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllByUserID'
type MockAccountSyncQuotaStore_ListAllByUserID_Call struct {
	*mock.Call
}

// ListAllByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *MockAccountSyncQuotaStore_Expecter) ListAllByUserID(ctx interface{}, userID interface{}) *MockAccountSyncQuotaStore_ListAllByUserID_Call {
	return &MockAccountSyncQuotaStore_ListAllByUserID_Call{Call: _e.mock.On("ListAllByUserID", ctx, userID)}
}

func (_c *MockAccountSyncQuotaStore_ListAllByUserID_Call) Run(run func(ctx context.Context, userID int64)) *MockAccountSyncQuotaStore_ListAllByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAccountSyncQuotaStore_ListAllByUserID_Call) Return(_a0 []database.AccountSyncQuota, _a1 error) *MockAccountSyncQuotaStore_ListAllByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSyncQuotaStore_ListAllByUserID_Call) RunAndReturn(run func(context.Context, int64) ([]database.AccountSyncQuota, error)) *MockAccountSyncQuotaStore_ListAllByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, accountQuota
func (_m *MockAccountSyncQuotaStore) Update(ctx context.Context, accountQuota database.AccountSyncQuota) (*database.AccountSyncQuota, error) {
	ret := _m.Called(ctx, accountQuota)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *database.AccountSyncQuota
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.AccountSyncQuota) (*database.AccountSyncQuota, error)); ok {
		return rf(ctx, accountQuota)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.AccountSyncQuota) *database.AccountSyncQuota); ok {
		r0 = rf(ctx, accountQuota)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountSyncQuota)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.AccountSyncQuota) error); ok {
		r1 = rf(ctx, accountQuota)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSyncQuotaStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccountSyncQuotaStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - accountQuota database.AccountSyncQuota
func (_e *MockAccountSyncQuotaStore_Expecter) Update(ctx interface{}, accountQuota interface{}) *MockAccountSyncQuotaStore_Update_Call {
	return &MockAccountSyncQuotaStore_Update_Call{Call: _e.mock.On("Update", ctx, accountQuota)}
}

func (_c *MockAccountSyncQuotaStore_Update_Call) Run(run func(ctx context.Context, accountQuota database.AccountSyncQuota)) *MockAccountSyncQuotaStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.AccountSyncQuota))
	})
	return _c
}

func (_c *MockAccountSyncQuotaStore_Update_Call) Return(_a0 *database.AccountSyncQuota, _a1 error) *MockAccountSyncQuotaStore_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSyncQuotaStore_Update_Call) RunAndReturn(run func(context.Context, database.AccountSyncQuota) (*database.AccountSyncQuota, error)) *MockAccountSyncQuotaStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountSyncQuotaStore creates a new instance of MockAccountSyncQuotaStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountSyncQuotaStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountSyncQuotaStore {
	mock := &MockAccountSyncQuotaStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockDeployTaskStore is an autogenerated mock type for the DeployTaskStore type
type MockDeployTaskStore struct {
	mock.Mock
}

type MockDeployTaskStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeployTaskStore) EXPECT() *MockDeployTaskStore_Expecter {
	return &MockDeployTaskStore_Expecter{mock: &_m.Mock}
}

// CreateDeploy provides a mock function with given fields: ctx, deploy
func (_m *MockDeployTaskStore) CreateDeploy(ctx context.Context, deploy *database.Deploy) error {
	ret := _m.Called(ctx, deploy)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeploy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.Deploy) error); ok {
		r0 = rf(ctx, deploy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDeployTaskStore_CreateDeploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeploy'
type MockDeployTaskStore_CreateDeploy_Call struct {
	*mock.Call
}

// CreateDeploy is a helper method to define mock.On call
//   - ctx context.Context
//   - deploy *database.Deploy
func (_e *MockDeployTaskStore_Expecter) CreateDeploy(ctx interface{}, deploy interface{}) *MockDeployTaskStore_CreateDeploy_Call {
	return &MockDeployTaskStore_CreateDeploy_Call{Call: _e.mock.On("CreateDeploy", ctx, deploy)}
}

func (_c *MockDeployTaskStore_CreateDeploy_Call) Run(run func(ctx context.Context, deploy *database.Deploy)) *MockDeployTaskStore_CreateDeploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.Deploy))
	})
	return _c
}

func (_c *MockDeployTaskStore_CreateDeploy_Call) Return(_a0 error) *MockDeployTaskStore_CreateDeploy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeployTaskStore_CreateDeploy_Call) RunAndReturn(run func(context.Context, *database.Deploy) error) *MockDeployTaskStore_CreateDeploy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDeployTask provides a mock function with given fields: ctx, deployTask
func (_m *MockDeployTaskStore) CreateDeployTask(ctx context.Context, deployTask *database.DeployTask) error {
	ret := _m.Called(ctx, deployTask)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeployTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.DeployTask) error); ok {
		r0 = rf(ctx, deployTask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDeployTaskStore_CreateDeployTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeployTask'
type MockDeployTaskStore_CreateDeployTask_Call struct {
	*mock.Call
}

// CreateDeployTask is a helper method to define mock.On call
//   - ctx context.Context
//   - deployTask *database.DeployTask
func (_e *MockDeployTaskStore_Expecter) CreateDeployTask(ctx interface{}, deployTask interface{}) *MockDeployTaskStore_CreateDeployTask_Call {
	return &MockDeployTaskStore_CreateDeployTask_Call{Call: _e.mock.On("CreateDeployTask", ctx, deployTask)}
}

func (_c *MockDeployTaskStore_CreateDeployTask_Call) Run(run func(ctx context.Context, deployTask *database.DeployTask)) *MockDeployTaskStore_CreateDeployTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.DeployTask))
	})
	return _c
}

func (_c *MockDeployTaskStore_CreateDeployTask_Call) Return(_a0 error) *MockDeployTaskStore_CreateDeployTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeployTaskStore_CreateDeployTask_Call) RunAndReturn(run func(context.Context, *database.DeployTask) error) *MockDeployTaskStore_CreateDeployTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDeploy provides a mock function with given fields: ctx, repoType, repoID, userID, deployID
func (_m *MockDeployTaskStore) DeleteDeploy(ctx context.Context, repoType types.RepositoryType, repoID int64, userID int64, deployID int64) error {
	ret := _m.Called(ctx, repoType, repoID, userID, deployID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeploy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RepositoryType, int64, int64, int64) error); ok {
		r0 = rf(ctx, repoType, repoID, userID, deployID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDeployTaskStore_DeleteDeploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDeploy'
type MockDeployTaskStore_DeleteDeploy_Call struct {
	*mock.Call
}

// DeleteDeploy is a helper method to define mock.On call
//   - ctx context.Context
//   - repoType types.RepositoryType
//   - repoID int64
//   - userID int64
//   - deployID int64
func (_e *MockDeployTaskStore_Expecter) DeleteDeploy(ctx interface{}, repoType interface{}, repoID interface{}, userID interface{}, deployID interface{}) *MockDeployTaskStore_DeleteDeploy_Call {
	return &MockDeployTaskStore_DeleteDeploy_Call{Call: _e.mock.On("DeleteDeploy", ctx, repoType, repoID, userID, deployID)}
}

func (_c *MockDeployTaskStore_DeleteDeploy_Call) Run(run func(ctx context.Context, repoType types.RepositoryType, repoID int64, userID int64, deployID int64)) *MockDeployTaskStore_DeleteDeploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RepositoryType), args[2].(int64), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *MockDeployTaskStore_DeleteDeploy_Call) Return(_a0 error) *MockDeployTaskStore_DeleteDeploy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeployTaskStore_DeleteDeploy_Call) RunAndReturn(run func(context.Context, types.RepositoryType, int64, int64, int64) error) *MockDeployTaskStore_DeleteDeploy_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeployByID provides a mock function with given fields: ctx, deployID
func (_m *MockDeployTaskStore) GetDeployByID(ctx context.Context, deployID int64) (*database.Deploy, error) {
	ret := _m.Called(ctx, deployID)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployByID")
	}

	var r0 *database.Deploy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.Deploy, error)); ok {
		return rf(ctx, deployID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.Deploy); ok {
		r0 = rf(ctx, deployID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Deploy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, deployID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeployTaskStore_GetDeployByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeployByID'
type MockDeployTaskStore_GetDeployByID_Call struct {
	*mock.Call
}

// GetDeployByID is a helper method to define mock.On call
//   - ctx context.Context
//   - deployID int64
func (_e *MockDeployTaskStore_Expecter) GetDeployByID(ctx interface{}, deployID interface{}) *MockDeployTaskStore_GetDeployByID_Call {
	return &MockDeployTaskStore_GetDeployByID_Call{Call: _e.mock.On("GetDeployByID", ctx, deployID)}
}

func (_c *MockDeployTaskStore_GetDeployByID_Call) Run(run func(ctx context.Context, deployID int64)) *MockDeployTaskStore_GetDeployByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockDeployTaskStore_GetDeployByID_Call) Return(_a0 *database.Deploy, _a1 error) *MockDeployTaskStore_GetDeployByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeployTaskStore_GetDeployByID_Call) RunAndReturn(run func(context.Context, int64) (*database.Deploy, error)) *MockDeployTaskStore_GetDeployByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeployBySvcName provides a mock function with given fields: ctx, svcName
func (_m *MockDeployTaskStore) GetDeployBySvcName(ctx context.Context, svcName string) (*database.Deploy, error) {
	ret := _m.Called(ctx, svcName)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployBySvcName")
	}

	var r0 *database.Deploy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.Deploy, error)); ok {
		return rf(ctx, svcName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.Deploy); ok {
		r0 = rf(ctx, svcName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Deploy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, svcName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeployTaskStore_GetDeployBySvcName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeployBySvcName'
type MockDeployTaskStore_GetDeployBySvcName_Call struct {
	*mock.Call
}

// GetDeployBySvcName is a helper method to define mock.On call
//   - ctx context.Context
//   - svcName string
func (_e *MockDeployTaskStore_Expecter) GetDeployBySvcName(ctx interface{}, svcName interface{}) *MockDeployTaskStore_GetDeployBySvcName_Call {
	return &MockDeployTaskStore_GetDeployBySvcName_Call{Call: _e.mock.On("GetDeployBySvcName", ctx, svcName)}
}

func (_c *MockDeployTaskStore_GetDeployBySvcName_Call) Run(run func(ctx context.Context, svcName string)) *MockDeployTaskStore_GetDeployBySvcName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDeployTaskStore_GetDeployBySvcName_Call) Return(_a0 *database.Deploy, _a1 error) *MockDeployTaskStore_GetDeployBySvcName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeployTaskStore_GetDeployBySvcName_Call) RunAndReturn(run func(context.Context, string) (*database.Deploy, error)) *MockDeployTaskStore_GetDeployBySvcName_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeployTask provides a mock function with given fields: ctx, id
func (_m *MockDeployTaskStore) GetDeployTask(ctx context.Context, id int64) (*database.DeployTask, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployTask")
	}

	var r0 *database.DeployTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.DeployTask, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.DeployTask); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DeployTask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeployTaskStore_GetDeployTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeployTask'
type MockDeployTaskStore_GetDeployTask_Call struct {
	*mock.Call
}

// GetDeployTask is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockDeployTaskStore_Expecter) GetDeployTask(ctx interface{}, id interface{}) *MockDeployTaskStore_GetDeployTask_Call {
	return &MockDeployTaskStore_GetDeployTask_Call{Call: _e.mock.On("GetDeployTask", ctx, id)}
}

func (_c *MockDeployTaskStore_GetDeployTask_Call) Run(run func(ctx context.Context, id int64)) *MockDeployTaskStore_GetDeployTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockDeployTaskStore_GetDeployTask_Call) Return(_a0 *database.DeployTask, _a1 error) *MockDeployTaskStore_GetDeployTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeployTaskStore_GetDeployTask_Call) RunAndReturn(run func(context.Context, int64) (*database.DeployTask, error)) *MockDeployTaskStore_GetDeployTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeployTasksOfDeploy provides a mock function with given fields: ctx, deployID
func (_m *MockDeployTaskStore) GetDeployTasksOfDeploy(ctx context.Context, deployID int64) ([]*database.DeployTask, error) {
	ret := _m.Called(ctx, deployID)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployTasksOfDeploy")
	}

	var r0 []*database.DeployTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*database.DeployTask, error)); ok {
		return rf(ctx, deployID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*database.DeployTask); ok {
		r0 = rf(ctx, deployID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.DeployTask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, deployID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeployTaskStore_GetDeployTasksOfDeploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeployTasksOfDeploy'
type MockDeployTaskStore_GetDeployTasksOfDeploy_Call struct {
	*mock.Call
}

// GetDeployTasksOfDeploy is a helper method to define mock.On call
//   - ctx context.Context
//   - deployID int64
func (_e *MockDeployTaskStore_Expecter) GetDeployTasksOfDeploy(ctx interface{}, deployID interface{}) *MockDeployTaskStore_GetDeployTasksOfDeploy_Call {
	return &MockDeployTaskStore_GetDeployTasksOfDeploy_Call{Call: _e.mock.On("GetDeployTasksOfDeploy", ctx, deployID)}
}

func (_c *MockDeployTaskStore_GetDeployTasksOfDeploy_Call) Run(run func(ctx context.Context, deployID int64)) *MockDeployTaskStore_GetDeployTasksOfDeploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockDeployTaskStore_GetDeployTasksOfDeploy_Call) Return(_a0 []*database.DeployTask, _a1 error) *MockDeployTaskStore_GetDeployTasksOfDeploy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeployTaskStore_GetDeployTasksOfDeploy_Call) RunAndReturn(run func(context.Context, int64) ([]*database.DeployTask, error)) *MockDeployTaskStore_GetDeployTasksOfDeploy_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestDeployBySpaceID provides a mock function with given fields: ctx, spaceID
func (_m *MockDeployTaskStore) GetLatestDeployBySpaceID(ctx context.Context, spaceID int64) (*database.Deploy, error) {
	ret := _m.Called(ctx, spaceID)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestDeployBySpaceID")
	}

	var r0 *database.Deploy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.Deploy, error)); ok {
		return rf(ctx, spaceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.Deploy); ok {
		r0 = rf(ctx, spaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Deploy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, spaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeployTaskStore_GetLatestDeployBySpaceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestDeployBySpaceID'
type MockDeployTaskStore_GetLatestDeployBySpaceID_Call struct {
	*mock.Call
}

// GetLatestDeployBySpaceID is a helper method to define mock.On call
//   - ctx context.Context
//   - spaceID int64
func (_e *MockDeployTaskStore_Expecter) GetLatestDeployBySpaceID(ctx interface{}, spaceID interface{}) *MockDeployTaskStore_GetLatestDeployBySpaceID_Call {
	return &MockDeployTaskStore_GetLatestDeployBySpaceID_Call{Call: _e.mock.On("GetLatestDeployBySpaceID", ctx, spaceID)}
}

func (_c *MockDeployTaskStore_GetLatestDeployBySpaceID_Call) Run(run func(ctx context.Context, spaceID int64)) *MockDeployTaskStore_GetLatestDeployBySpaceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockDeployTaskStore_GetLatestDeployBySpaceID_Call) Return(_a0 *database.Deploy, _a1 error) *MockDeployTaskStore_GetLatestDeployBySpaceID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeployTaskStore_GetLatestDeployBySpaceID_Call) RunAndReturn(run func(context.Context, int64) (*database.Deploy, error)) *MockDeployTaskStore_GetLatestDeployBySpaceID_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewTaskAfter provides a mock function with given fields: ctx, currentDeployTaskID
func (_m *MockDeployTaskStore) GetNewTaskAfter(ctx context.Context, currentDeployTaskID int64) (*database.DeployTask, error) {
	ret := _m.Called(ctx, currentDeployTaskID)

	if len(ret) == 0 {
		panic("no return value specified for GetNewTaskAfter")
	}

	var r0 *database.DeployTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.DeployTask, error)); ok {
		return rf(ctx, currentDeployTaskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.DeployTask); ok {
		r0 = rf(ctx, currentDeployTaskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DeployTask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, currentDeployTaskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeployTaskStore_GetNewTaskAfter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewTaskAfter'
type MockDeployTaskStore_GetNewTaskAfter_Call struct {
	*mock.Call
}

// GetNewTaskAfter is a helper method to define mock.On call
//   - ctx context.Context
//   - currentDeployTaskID int64
func (_e *MockDeployTaskStore_Expecter) GetNewTaskAfter(ctx interface{}, currentDeployTaskID interface{}) *MockDeployTaskStore_GetNewTaskAfter_Call {
	return &MockDeployTaskStore_GetNewTaskAfter_Call{Call: _e.mock.On("GetNewTaskAfter", ctx, currentDeployTaskID)}
}

func (_c *MockDeployTaskStore_GetNewTaskAfter_Call) Run(run func(ctx context.Context, currentDeployTaskID int64)) *MockDeployTaskStore_GetNewTaskAfter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockDeployTaskStore_GetNewTaskAfter_Call) Return(_a0 *database.DeployTask, _a1 error) *MockDeployTaskStore_GetNewTaskAfter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeployTaskStore_GetNewTaskAfter_Call) RunAndReturn(run func(context.Context, int64) (*database.DeployTask, error)) *MockDeployTaskStore_GetNewTaskAfter_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewTaskFirst provides a mock function with given fields: ctx
func (_m *MockDeployTaskStore) GetNewTaskFirst(ctx context.Context) (*database.DeployTask, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNewTaskFirst")
	}

	var r0 *database.DeployTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*database.DeployTask, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *database.DeployTask); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DeployTask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeployTaskStore_GetNewTaskFirst_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewTaskFirst'
type MockDeployTaskStore_GetNewTaskFirst_Call struct {
	*mock.Call
}

// GetNewTaskFirst is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDeployTaskStore_Expecter) GetNewTaskFirst(ctx interface{}) *MockDeployTaskStore_GetNewTaskFirst_Call {
	return &MockDeployTaskStore_GetNewTaskFirst_Call{Call: _e.mock.On("GetNewTaskFirst", ctx)}
}

func (_c *MockDeployTaskStore_GetNewTaskFirst_Call) Run(run func(ctx context.Context)) *MockDeployTaskStore_GetNewTaskFirst_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDeployTaskStore_GetNewTaskFirst_Call) Return(_a0 *database.DeployTask, _a1 error) *MockDeployTaskStore_GetNewTaskFirst_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeployTaskStore_GetNewTaskFirst_Call) RunAndReturn(run func(context.Context) (*database.DeployTask, error)) *MockDeployTaskStore_GetNewTaskFirst_Call {
	_c.Call.Return(run)
	return _c
}

// GetRunningInferenceAndFinetuneByUserID provides a mock function with given fields: ctx, userID
func (_m *MockDeployTaskStore) GetRunningInferenceAndFinetuneByUserID(ctx context.Context, userID int64) ([]database.Deploy, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetRunningInferenceAndFinetuneByUserID")
	}

	var r0 []database.Deploy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]database.Deploy, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []database.Deploy); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Deploy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeployTaskStore_GetRunningInferenceAndFinetuneByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRunningInferenceAndFinetuneByUserID'
type MockDeployTaskStore_GetRunningInferenceAndFinetuneByUserID_Call struct {
	*mock.Call
}

// GetRunningInferenceAndFinetuneByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *MockDeployTaskStore_Expecter) GetRunningInferenceAndFinetuneByUserID(ctx interface{}, userID interface{}) *MockDeployTaskStore_GetRunningInferenceAndFinetuneByUserID_Call {
	return &MockDeployTaskStore_GetRunningInferenceAndFinetuneByUserID_Call{Call: _e.mock.On("GetRunningInferenceAndFinetuneByUserID", ctx, userID)}
}

func (_c *MockDeployTaskStore_GetRunningInferenceAndFinetuneByUserID_Call) Run(run func(ctx context.Context, userID int64)) *MockDeployTaskStore_GetRunningInferenceAndFinetuneByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockDeployTaskStore_GetRunningInferenceAndFinetuneByUserID_Call) Return(_a0 []database.Deploy, _a1 error) *MockDeployTaskStore_GetRunningInferenceAndFinetuneByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeployTaskStore_GetRunningInferenceAndFinetuneByUserID_Call) RunAndReturn(run func(context.Context, int64) ([]database.Deploy, error)) *MockDeployTaskStore_GetRunningInferenceAndFinetuneByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetServerlessDeployByRepID provides a mock function with given fields: ctx, repoID
func (_m *MockDeployTaskStore) GetServerlessDeployByRepID(ctx context.Context, repoID int64) (*database.Deploy, error) {
	ret := _m.Called(ctx, repoID)

	if len(ret) == 0 {
		panic("no return value specified for GetServerlessDeployByRepID")
	}

	var r0 *database.Deploy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.Deploy, error)); ok {
		return rf(ctx, repoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.Deploy); ok {
		r0 = rf(ctx, repoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Deploy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, repoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeployTaskStore_GetServerlessDeployByRepID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServerlessDeployByRepID'
type MockDeployTaskStore_GetServerlessDeployByRepID_Call struct {
	*mock.Call
}

// GetServerlessDeployByRepID is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
func (_e *MockDeployTaskStore_Expecter) GetServerlessDeployByRepID(ctx interface{}, repoID interface{}) *MockDeployTaskStore_GetServerlessDeployByRepID_Call {
	return &MockDeployTaskStore_GetServerlessDeployByRepID_Call{Call: _e.mock.On("GetServerlessDeployByRepID", ctx, repoID)}
}

func (_c *MockDeployTaskStore_GetServerlessDeployByRepID_Call) Run(run func(ctx context.Context, repoID int64)) *MockDeployTaskStore_GetServerlessDeployByRepID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockDeployTaskStore_GetServerlessDeployByRepID_Call) Return(_a0 *database.Deploy, _a1 error) *MockDeployTaskStore_GetServerlessDeployByRepID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeployTaskStore_GetServerlessDeployByRepID_Call) RunAndReturn(run func(context.Context, int64) (*database.Deploy, error)) *MockDeployTaskStore_GetServerlessDeployByRepID_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllDeployByUID provides a mock function with given fields: ctx, userID
func (_m *MockDeployTaskStore) ListAllDeployByUID(ctx context.Context, userID int64) ([]database.Deploy, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListAllDeployByUID")
	}

	var r0 []database.Deploy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]database.Deploy, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []database.Deploy); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Deploy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeployTaskStore_ListAllDeployByUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllDeployByUID'
type MockDeployTaskStore_ListAllDeployByUID_Call struct {
	*mock.Call
}

// ListAllDeployByUID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *MockDeployTaskStore_Expecter) ListAllDeployByUID(ctx interface{}, userID interface{}) *MockDeployTaskStore_ListAllDeployByUID_Call {
	return &MockDeployTaskStore_ListAllDeployByUID_Call{Call: _e.mock.On("ListAllDeployByUID", ctx, userID)}
}

func (_c *MockDeployTaskStore_ListAllDeployByUID_Call) Run(run func(ctx context.Context, userID int64)) *MockDeployTaskStore_ListAllDeployByUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockDeployTaskStore_ListAllDeployByUID_Call) Return(_a0 []database.Deploy, _a1 error) *MockDeployTaskStore_ListAllDeployByUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeployTaskStore_ListAllDeployByUID_Call) RunAndReturn(run func(context.Context, int64) ([]database.Deploy, error)) *MockDeployTaskStore_ListAllDeployByUID_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllDeploys provides a mock function with given fields: ctx, req, isActive
func (_m *MockDeployTaskStore) ListAllDeploys(ctx context.Context, req types.DeployReq, isActive bool) ([]database.Deploy, int, error) {
	ret := _m.Called(ctx, req, isActive)

	if len(ret) == 0 {
		panic("no return value specified for ListAllDeploys")
	}

	var r0 []database.Deploy
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.DeployReq, bool) ([]database.Deploy, int, error)); ok {
		return rf(ctx, req, isActive)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.DeployReq, bool) []database.Deploy); ok {
		r0 = rf(ctx, req, isActive)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Deploy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.DeployReq, bool) int); ok {
		r1 = rf(ctx, req, isActive)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.DeployReq, bool) error); ok {
		r2 = rf(ctx, req, isActive)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDeployTaskStore_ListAllDeploys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllDeploys'
type MockDeployTaskStore_ListAllDeploys_Call struct {
	*mock.Call
}

// ListAllDeploys is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.DeployReq
//   - isActive bool
func (_e *MockDeployTaskStore_Expecter) ListAllDeploys(ctx interface{}, req interface{}, isActive interface{}) *MockDeployTaskStore_ListAllDeploys_Call {
	return &MockDeployTaskStore_ListAllDeploys_Call{Call: _e.mock.On("ListAllDeploys", ctx, req, isActive)}
}

func (_c *MockDeployTaskStore_ListAllDeploys_Call) Run(run func(ctx context.Context, req types.DeployReq, isActive bool)) *MockDeployTaskStore_ListAllDeploys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.DeployReq), args[2].(bool))
	})
	return _c
}

func (_c *MockDeployTaskStore_ListAllDeploys_Call) Return(_a0 []database.Deploy, _a1 int, _a2 error) *MockDeployTaskStore_ListAllDeploys_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDeployTaskStore_ListAllDeploys_Call) RunAndReturn(run func(context.Context, types.DeployReq, bool) ([]database.Deploy, int, error)) *MockDeployTaskStore_ListAllDeploys_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeploy provides a mock function with given fields: ctx, repoType, repoID, userID
func (_m *MockDeployTaskStore) ListDeploy(ctx context.Context, repoType types.RepositoryType, repoID int64, userID int64) ([]database.Deploy, error) {
	ret := _m.Called(ctx, repoType, repoID, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListDeploy")
	}

	var r0 []database.Deploy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RepositoryType, int64, int64) ([]database.Deploy, error)); ok {
		return rf(ctx, repoType, repoID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.RepositoryType, int64, int64) []database.Deploy); ok {
		r0 = rf(ctx, repoType, repoID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Deploy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.RepositoryType, int64, int64) error); ok {
		r1 = rf(ctx, repoType, repoID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeployTaskStore_ListDeploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeploy'
type MockDeployTaskStore_ListDeploy_Call struct {
	*mock.Call
}

// ListDeploy is a helper method to define mock.On call
//   - ctx context.Context
//   - repoType types.RepositoryType
//   - repoID int64
//   - userID int64
func (_e *MockDeployTaskStore_Expecter) ListDeploy(ctx interface{}, repoType interface{}, repoID interface{}, userID interface{}) *MockDeployTaskStore_ListDeploy_Call {
	return &MockDeployTaskStore_ListDeploy_Call{Call: _e.mock.On("ListDeploy", ctx, repoType, repoID, userID)}
}

func (_c *MockDeployTaskStore_ListDeploy_Call) Run(run func(ctx context.Context, repoType types.RepositoryType, repoID int64, userID int64)) *MockDeployTaskStore_ListDeploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RepositoryType), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockDeployTaskStore_ListDeploy_Call) Return(_a0 []database.Deploy, _a1 error) *MockDeployTaskStore_ListDeploy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeployTaskStore_ListDeploy_Call) RunAndReturn(run func(context.Context, types.RepositoryType, int64, int64) ([]database.Deploy, error)) *MockDeployTaskStore_ListDeploy_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeployByUserID provides a mock function with given fields: ctx, userID, req
func (_m *MockDeployTaskStore) ListDeployByUserID(ctx context.Context, userID int64, req *types.DeployReq) ([]database.Deploy, int, error) {
	ret := _m.Called(ctx, userID, req)

	if len(ret) == 0 {
		panic("no return value specified for ListDeployByUserID")
	}

	var r0 []database.Deploy
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *types.DeployReq) ([]database.Deploy, int, error)); ok {
		return rf(ctx, userID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, *types.DeployReq) []database.Deploy); ok {
		r0 = rf(ctx, userID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Deploy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, *types.DeployReq) int); ok {
		r1 = rf(ctx, userID, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, *types.DeployReq) error); ok {
		r2 = rf(ctx, userID, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDeployTaskStore_ListDeployByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeployByUserID'
type MockDeployTaskStore_ListDeployByUserID_Call struct {
	*mock.Call
}

// ListDeployByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - req *types.DeployReq
func (_e *MockDeployTaskStore_Expecter) ListDeployByUserID(ctx interface{}, userID interface{}, req interface{}) *MockDeployTaskStore_ListDeployByUserID_Call {
	return &MockDeployTaskStore_ListDeployByUserID_Call{Call: _e.mock.On("ListDeployByUserID", ctx, userID, req)}
}

func (_c *MockDeployTaskStore_ListDeployByUserID_Call) Run(run func(ctx context.Context, userID int64, req *types.DeployReq)) *MockDeployTaskStore_ListDeployByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*types.DeployReq))
	})
	return _c
}

func (_c *MockDeployTaskStore_ListDeployByUserID_Call) Return(_a0 []database.Deploy, _a1 int, _a2 error) *MockDeployTaskStore_ListDeployByUserID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDeployTaskStore_ListDeployByUserID_Call) RunAndReturn(run func(context.Context, int64, *types.DeployReq) ([]database.Deploy, int, error)) *MockDeployTaskStore_ListDeployByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// ListInstancesByUserID provides a mock function with given fields: ctx, userID, per, page
func (_m *MockDeployTaskStore) ListInstancesByUserID(ctx context.Context, userID int64, per int, page int) ([]database.Deploy, int, error) {
	ret := _m.Called(ctx, userID, per, page)

	if len(ret) == 0 {
		panic("no return value specified for ListInstancesByUserID")
	}

	var r0 []database.Deploy
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int) ([]database.Deploy, int, error)); ok {
		return rf(ctx, userID, per, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int, int) []database.Deploy); ok {
		r0 = rf(ctx, userID, per, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Deploy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int, int) int); ok {
		r1 = rf(ctx, userID, per, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, int, int) error); ok {
		r2 = rf(ctx, userID, per, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDeployTaskStore_ListInstancesByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInstancesByUserID'
type MockDeployTaskStore_ListInstancesByUserID_Call struct {
	*mock.Call
}

// ListInstancesByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
//   - per int
//   - page int
func (_e *MockDeployTaskStore_Expecter) ListInstancesByUserID(ctx interface{}, userID interface{}, per interface{}, page interface{}) *MockDeployTaskStore_ListInstancesByUserID_Call {
	return &MockDeployTaskStore_ListInstancesByUserID_Call{Call: _e.mock.On("ListInstancesByUserID", ctx, userID, per, page)}
}

func (_c *MockDeployTaskStore_ListInstancesByUserID_Call) Run(run func(ctx context.Context, userID int64, per int, page int)) *MockDeployTaskStore_ListInstancesByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockDeployTaskStore_ListInstancesByUserID_Call) Return(_a0 []database.Deploy, _a1 int, _a2 error) *MockDeployTaskStore_ListInstancesByUserID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDeployTaskStore_ListInstancesByUserID_Call) RunAndReturn(run func(context.Context, int64, int, int) ([]database.Deploy, int, error)) *MockDeployTaskStore_ListInstancesByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// ListServerless provides a mock function with given fields: ctx, req
func (_m *MockDeployTaskStore) ListServerless(ctx context.Context, req types.DeployReq) ([]database.Deploy, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListServerless")
	}

	var r0 []database.Deploy
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.DeployReq) ([]database.Deploy, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.DeployReq) []database.Deploy); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Deploy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.DeployReq) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.DeployReq) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDeployTaskStore_ListServerless_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServerless'
type MockDeployTaskStore_ListServerless_Call struct {
	*mock.Call
}

// ListServerless is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.DeployReq
func (_e *MockDeployTaskStore_Expecter) ListServerless(ctx interface{}, req interface{}) *MockDeployTaskStore_ListServerless_Call {
	return &MockDeployTaskStore_ListServerless_Call{Call: _e.mock.On("ListServerless", ctx, req)}
}

func (_c *MockDeployTaskStore_ListServerless_Call) Run(run func(ctx context.Context, req types.DeployReq)) *MockDeployTaskStore_ListServerless_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.DeployReq))
	})
	return _c
}

func (_c *MockDeployTaskStore_ListServerless_Call) Return(_a0 []database.Deploy, _a1 int, _a2 error) *MockDeployTaskStore_ListServerless_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDeployTaskStore_ListServerless_Call) RunAndReturn(run func(context.Context, types.DeployReq) ([]database.Deploy, int, error)) *MockDeployTaskStore_ListServerless_Call {
	_c.Call.Return(run)
	return _c
}

// RunningVisibleToUser provides a mock function with given fields: ctx, userID
func (_m *MockDeployTaskStore) RunningVisibleToUser(ctx context.Context, userID int64) ([]database.Deploy, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for RunningVisibleToUser")
	}

	var r0 []database.Deploy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]database.Deploy, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []database.Deploy); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Deploy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeployTaskStore_RunningVisibleToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunningVisibleToUser'
type MockDeployTaskStore_RunningVisibleToUser_Call struct {
	*mock.Call
}

// RunningVisibleToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *MockDeployTaskStore_Expecter) RunningVisibleToUser(ctx interface{}, userID interface{}) *MockDeployTaskStore_RunningVisibleToUser_Call {
	return &MockDeployTaskStore_RunningVisibleToUser_Call{Call: _e.mock.On("RunningVisibleToUser", ctx, userID)}
}

func (_c *MockDeployTaskStore_RunningVisibleToUser_Call) Run(run func(ctx context.Context, userID int64)) *MockDeployTaskStore_RunningVisibleToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockDeployTaskStore_RunningVisibleToUser_Call) Return(_a0 []database.Deploy, _a1 error) *MockDeployTaskStore_RunningVisibleToUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeployTaskStore_RunningVisibleToUser_Call) RunAndReturn(run func(context.Context, int64) ([]database.Deploy, error)) *MockDeployTaskStore_RunningVisibleToUser_Call {
	_c.Call.Return(run)
	return _c
}

// StopDeploy provides a mock function with given fields: ctx, repoType, repoID, userID, deployID
func (_m *MockDeployTaskStore) StopDeploy(ctx context.Context, repoType types.RepositoryType, repoID int64, userID int64, deployID int64) error {
	ret := _m.Called(ctx, repoType, repoID, userID, deployID)

	if len(ret) == 0 {
		panic("no return value specified for StopDeploy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RepositoryType, int64, int64, int64) error); ok {
		r0 = rf(ctx, repoType, repoID, userID, deployID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDeployTaskStore_StopDeploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopDeploy'
type MockDeployTaskStore_StopDeploy_Call struct {
	*mock.Call
}

// StopDeploy is a helper method to define mock.On call
//   - ctx context.Context
//   - repoType types.RepositoryType
//   - repoID int64
//   - userID int64
//   - deployID int64
func (_e *MockDeployTaskStore_Expecter) StopDeploy(ctx interface{}, repoType interface{}, repoID interface{}, userID interface{}, deployID interface{}) *MockDeployTaskStore_StopDeploy_Call {
	return &MockDeployTaskStore_StopDeploy_Call{Call: _e.mock.On("StopDeploy", ctx, repoType, repoID, userID, deployID)}
}

func (_c *MockDeployTaskStore_StopDeploy_Call) Run(run func(ctx context.Context, repoType types.RepositoryType, repoID int64, userID int64, deployID int64)) *MockDeployTaskStore_StopDeploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RepositoryType), args[2].(int64), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *MockDeployTaskStore_StopDeploy_Call) Return(_a0 error) *MockDeployTaskStore_StopDeploy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeployTaskStore_StopDeploy_Call) RunAndReturn(run func(context.Context, types.RepositoryType, int64, int64, int64) error) *MockDeployTaskStore_StopDeploy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDeploy provides a mock function with given fields: ctx, deploy
func (_m *MockDeployTaskStore) UpdateDeploy(ctx context.Context, deploy *database.Deploy) error {
	ret := _m.Called(ctx, deploy)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeploy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.Deploy) error); ok {
		r0 = rf(ctx, deploy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDeployTaskStore_UpdateDeploy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDeploy'
type MockDeployTaskStore_UpdateDeploy_Call struct {
	*mock.Call
}

// UpdateDeploy is a helper method to define mock.On call
//   - ctx context.Context
//   - deploy *database.Deploy
func (_e *MockDeployTaskStore_Expecter) UpdateDeploy(ctx interface{}, deploy interface{}) *MockDeployTaskStore_UpdateDeploy_Call {
	return &MockDeployTaskStore_UpdateDeploy_Call{Call: _e.mock.On("UpdateDeploy", ctx, deploy)}
}

func (_c *MockDeployTaskStore_UpdateDeploy_Call) Run(run func(ctx context.Context, deploy *database.Deploy)) *MockDeployTaskStore_UpdateDeploy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.Deploy))
	})
	return _c
}

func (_c *MockDeployTaskStore_UpdateDeploy_Call) Return(_a0 error) *MockDeployTaskStore_UpdateDeploy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeployTaskStore_UpdateDeploy_Call) RunAndReturn(run func(context.Context, *database.Deploy) error) *MockDeployTaskStore_UpdateDeploy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDeployTask provides a mock function with given fields: ctx, deployTask
func (_m *MockDeployTaskStore) UpdateDeployTask(ctx context.Context, deployTask *database.DeployTask) error {
	ret := _m.Called(ctx, deployTask)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeployTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.DeployTask) error); ok {
		r0 = rf(ctx, deployTask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDeployTaskStore_UpdateDeployTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDeployTask'
type MockDeployTaskStore_UpdateDeployTask_Call struct {
	*mock.Call
}

// UpdateDeployTask is a helper method to define mock.On call
//   - ctx context.Context
//   - deployTask *database.DeployTask
func (_e *MockDeployTaskStore_Expecter) UpdateDeployTask(ctx interface{}, deployTask interface{}) *MockDeployTaskStore_UpdateDeployTask_Call {
	return &MockDeployTaskStore_UpdateDeployTask_Call{Call: _e.mock.On("UpdateDeployTask", ctx, deployTask)}
}

func (_c *MockDeployTaskStore_UpdateDeployTask_Call) Run(run func(ctx context.Context, deployTask *database.DeployTask)) *MockDeployTaskStore_UpdateDeployTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.DeployTask))
	})
	return _c
}

func (_c *MockDeployTaskStore_UpdateDeployTask_Call) Return(_a0 error) *MockDeployTaskStore_UpdateDeployTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeployTaskStore_UpdateDeployTask_Call) RunAndReturn(run func(context.Context, *database.DeployTask) error) *MockDeployTaskStore_UpdateDeployTask_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInTx provides a mock function with given fields: ctx, deployColumns, deployTaskColumns, deploy, deployTasks
func (_m *MockDeployTaskStore) UpdateInTx(ctx context.Context, deployColumns []string, deployTaskColumns []string, deploy *database.Deploy, deployTasks ...*database.DeployTask) error {
	_va := make([]interface{}, len(deployTasks))
	for _i := range deployTasks {
		_va[_i] = deployTasks[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, deployColumns, deployTaskColumns, deploy)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, []string, *database.Deploy, ...*database.DeployTask) error); ok {
		r0 = rf(ctx, deployColumns, deployTaskColumns, deploy, deployTasks...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDeployTaskStore_UpdateInTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInTx'
type MockDeployTaskStore_UpdateInTx_Call struct {
	*mock.Call
}

// UpdateInTx is a helper method to define mock.On call
//   - ctx context.Context
//   - deployColumns []string
//   - deployTaskColumns []string
//   - deploy *database.Deploy
//   - deployTasks ...*database.DeployTask
func (_e *MockDeployTaskStore_Expecter) UpdateInTx(ctx interface{}, deployColumns interface{}, deployTaskColumns interface{}, deploy interface{}, deployTasks ...interface{}) *MockDeployTaskStore_UpdateInTx_Call {
	return &MockDeployTaskStore_UpdateInTx_Call{Call: _e.mock.On("UpdateInTx",
		append([]interface{}{ctx, deployColumns, deployTaskColumns, deploy}, deployTasks...)...)}
}

func (_c *MockDeployTaskStore_UpdateInTx_Call) Run(run func(ctx context.Context, deployColumns []string, deployTaskColumns []string, deploy *database.Deploy, deployTasks ...*database.DeployTask)) *MockDeployTaskStore_UpdateInTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*database.DeployTask, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(*database.DeployTask)
			}
		}
		run(args[0].(context.Context), args[1].([]string), args[2].([]string), args[3].(*database.Deploy), variadicArgs...)
	})
	return _c
}

func (_c *MockDeployTaskStore_UpdateInTx_Call) Return(_a0 error) *MockDeployTaskStore_UpdateInTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDeployTaskStore_UpdateInTx_Call) RunAndReturn(run func(context.Context, []string, []string, *database.Deploy, ...*database.DeployTask) error) *MockDeployTaskStore_UpdateInTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeployTaskStore creates a new instance of MockDeployTaskStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeployTaskStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeployTaskStore {
	mock := &MockDeployTaskStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

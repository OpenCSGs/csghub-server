// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"

	uuid "github.com/google/uuid"
)

// MockAccountSubscriptionStore is an autogenerated mock type for the AccountSubscriptionStore type
type MockAccountSubscriptionStore struct {
	mock.Mock
}

type MockAccountSubscriptionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountSubscriptionStore) EXPECT() *MockAccountSubscriptionStore_Expecter {
	return &MockAccountSubscriptionStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *MockAccountSubscriptionStore) Create(ctx context.Context, req *types.SubscriptionCreateReq) (*database.AccountSubscription, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.AccountSubscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionCreateReq) (*database.AccountSubscription, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionCreateReq) *database.AccountSubscription); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.SubscriptionCreateReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSubscriptionStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountSubscriptionStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.SubscriptionCreateReq
func (_e *MockAccountSubscriptionStore_Expecter) Create(ctx interface{}, req interface{}) *MockAccountSubscriptionStore_Create_Call {
	return &MockAccountSubscriptionStore_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockAccountSubscriptionStore_Create_Call) Run(run func(ctx context.Context, req *types.SubscriptionCreateReq)) *MockAccountSubscriptionStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.SubscriptionCreateReq))
	})
	return _c
}

func (_c *MockAccountSubscriptionStore_Create_Call) Return(_a0 *database.AccountSubscription, _a1 error) *MockAccountSubscriptionStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSubscriptionStore_Create_Call) RunAndReturn(run func(context.Context, *types.SubscriptionCreateReq) (*database.AccountSubscription, error)) *MockAccountSubscriptionStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockAccountSubscriptionStore) GetByID(ctx context.Context, id int64) (*database.AccountSubscription, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *database.AccountSubscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.AccountSubscription, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.AccountSubscription); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSubscriptionStore_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockAccountSubscriptionStore_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockAccountSubscriptionStore_Expecter) GetByID(ctx interface{}, id interface{}) *MockAccountSubscriptionStore_GetByID_Call {
	return &MockAccountSubscriptionStore_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockAccountSubscriptionStore_GetByID_Call) Run(run func(ctx context.Context, id int64)) *MockAccountSubscriptionStore_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAccountSubscriptionStore_GetByID_Call) Return(_a0 *database.AccountSubscription, _a1 error) *MockAccountSubscriptionStore_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSubscriptionStore_GetByID_Call) RunAndReturn(run func(context.Context, int64) (*database.AccountSubscription, error)) *MockAccountSubscriptionStore_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, req
func (_m *MockAccountSubscriptionStore) List(ctx context.Context, req *types.SubscriptionListReq) (*database.SubscriptionListResult, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *database.SubscriptionListResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionListReq) (*database.SubscriptionListResult, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionListReq) *database.SubscriptionListResult); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.SubscriptionListResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.SubscriptionListReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSubscriptionStore_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAccountSubscriptionStore_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.SubscriptionListReq
func (_e *MockAccountSubscriptionStore_Expecter) List(ctx interface{}, req interface{}) *MockAccountSubscriptionStore_List_Call {
	return &MockAccountSubscriptionStore_List_Call{Call: _e.mock.On("List", ctx, req)}
}

func (_c *MockAccountSubscriptionStore_List_Call) Run(run func(ctx context.Context, req *types.SubscriptionListReq)) *MockAccountSubscriptionStore_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.SubscriptionListReq))
	})
	return _c
}

func (_c *MockAccountSubscriptionStore_List_Call) Return(_a0 *database.SubscriptionListResult, _a1 error) *MockAccountSubscriptionStore_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSubscriptionStore_List_Call) RunAndReturn(run func(context.Context, *types.SubscriptionListReq) (*database.SubscriptionListResult, error)) *MockAccountSubscriptionStore_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListRenews provides a mock function with given fields: ctx
func (_m *MockAccountSubscriptionStore) ListRenews(ctx context.Context) ([]database.AccountSubscription, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRenews")
	}

	var r0 []database.AccountSubscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.AccountSubscription, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.AccountSubscription); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.AccountSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSubscriptionStore_ListRenews_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRenews'
type MockAccountSubscriptionStore_ListRenews_Call struct {
	*mock.Call
}

// ListRenews is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAccountSubscriptionStore_Expecter) ListRenews(ctx interface{}) *MockAccountSubscriptionStore_ListRenews_Call {
	return &MockAccountSubscriptionStore_ListRenews_Call{Call: _e.mock.On("ListRenews", ctx)}
}

func (_c *MockAccountSubscriptionStore_ListRenews_Call) Run(run func(ctx context.Context)) *MockAccountSubscriptionStore_ListRenews_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAccountSubscriptionStore_ListRenews_Call) Return(_a0 []database.AccountSubscription, _a1 error) *MockAccountSubscriptionStore_ListRenews_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSubscriptionStore_ListRenews_Call) RunAndReturn(run func(context.Context) ([]database.AccountSubscription, error)) *MockAccountSubscriptionStore_ListRenews_Call {
	_c.Call.Return(run)
	return _c
}

// Renew provides a mock function with given fields: ctx, sub, eventUUID
func (_m *MockAccountSubscriptionStore) Renew(ctx context.Context, sub *database.AccountSubscription, eventUUID uuid.UUID) error {
	ret := _m.Called(ctx, sub, eventUUID)

	if len(ret) == 0 {
		panic("no return value specified for Renew")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.AccountSubscription, uuid.UUID) error); ok {
		r0 = rf(ctx, sub, eventUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountSubscriptionStore_Renew_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Renew'
type MockAccountSubscriptionStore_Renew_Call struct {
	*mock.Call
}

// Renew is a helper method to define mock.On call
//   - ctx context.Context
//   - sub *database.AccountSubscription
//   - eventUUID uuid.UUID
func (_e *MockAccountSubscriptionStore_Expecter) Renew(ctx interface{}, sub interface{}, eventUUID interface{}) *MockAccountSubscriptionStore_Renew_Call {
	return &MockAccountSubscriptionStore_Renew_Call{Call: _e.mock.On("Renew", ctx, sub, eventUUID)}
}

func (_c *MockAccountSubscriptionStore_Renew_Call) Run(run func(ctx context.Context, sub *database.AccountSubscription, eventUUID uuid.UUID)) *MockAccountSubscriptionStore_Renew_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.AccountSubscription), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockAccountSubscriptionStore_Renew_Call) Return(_a0 error) *MockAccountSubscriptionStore_Renew_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountSubscriptionStore_Renew_Call) RunAndReturn(run func(context.Context, *database.AccountSubscription, uuid.UUID) error) *MockAccountSubscriptionStore_Renew_Call {
	_c.Call.Return(run)
	return _c
}

// StatusByUserUUID provides a mock function with given fields: ctx, userUUID, skuType
func (_m *MockAccountSubscriptionStore) StatusByUserUUID(ctx context.Context, userUUID string, skuType types.SKUType) (*database.AccountSubscription, error) {
	ret := _m.Called(ctx, userUUID, skuType)

	if len(ret) == 0 {
		panic("no return value specified for StatusByUserUUID")
	}

	var r0 *database.AccountSubscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.SKUType) (*database.AccountSubscription, error)); ok {
		return rf(ctx, userUUID, skuType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.SKUType) *database.AccountSubscription); ok {
		r0 = rf(ctx, userUUID, skuType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.SKUType) error); ok {
		r1 = rf(ctx, userUUID, skuType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSubscriptionStore_StatusByUserUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatusByUserUUID'
type MockAccountSubscriptionStore_StatusByUserUUID_Call struct {
	*mock.Call
}

// StatusByUserUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
//   - skuType types.SKUType
func (_e *MockAccountSubscriptionStore_Expecter) StatusByUserUUID(ctx interface{}, userUUID interface{}, skuType interface{}) *MockAccountSubscriptionStore_StatusByUserUUID_Call {
	return &MockAccountSubscriptionStore_StatusByUserUUID_Call{Call: _e.mock.On("StatusByUserUUID", ctx, userUUID, skuType)}
}

func (_c *MockAccountSubscriptionStore_StatusByUserUUID_Call) Run(run func(ctx context.Context, userUUID string, skuType types.SKUType)) *MockAccountSubscriptionStore_StatusByUserUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.SKUType))
	})
	return _c
}

func (_c *MockAccountSubscriptionStore_StatusByUserUUID_Call) Return(_a0 *database.AccountSubscription, _a1 error) *MockAccountSubscriptionStore_StatusByUserUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSubscriptionStore_StatusByUserUUID_Call) RunAndReturn(run func(context.Context, string, types.SKUType) (*database.AccountSubscription, error)) *MockAccountSubscriptionStore_StatusByUserUUID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, sub
func (_m *MockAccountSubscriptionStore) Update(ctx context.Context, sub database.AccountSubscription) (*database.AccountSubscription, error) {
	ret := _m.Called(ctx, sub)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *database.AccountSubscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.AccountSubscription) (*database.AccountSubscription, error)); ok {
		return rf(ctx, sub)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.AccountSubscription) *database.AccountSubscription); ok {
		r0 = rf(ctx, sub)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.AccountSubscription) error); ok {
		r1 = rf(ctx, sub)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountSubscriptionStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccountSubscriptionStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - sub database.AccountSubscription
func (_e *MockAccountSubscriptionStore_Expecter) Update(ctx interface{}, sub interface{}) *MockAccountSubscriptionStore_Update_Call {
	return &MockAccountSubscriptionStore_Update_Call{Call: _e.mock.On("Update", ctx, sub)}
}

func (_c *MockAccountSubscriptionStore_Update_Call) Run(run func(ctx context.Context, sub database.AccountSubscription)) *MockAccountSubscriptionStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.AccountSubscription))
	})
	return _c
}

func (_c *MockAccountSubscriptionStore_Update_Call) Return(_a0 *database.AccountSubscription, _a1 error) *MockAccountSubscriptionStore_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountSubscriptionStore_Update_Call) RunAndReturn(run func(context.Context, database.AccountSubscription) (*database.AccountSubscription, error)) *MockAccountSubscriptionStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateResource provides a mock function with given fields: ctx, req, sub
func (_m *MockAccountSubscriptionStore) UpdateResource(ctx context.Context, req *types.SubscriptionUpdateReq, sub *database.AccountSubscription) (*database.AccountSubscription, string, error) {
	ret := _m.Called(ctx, req, sub)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResource")
	}

	var r0 *database.AccountSubscription
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionUpdateReq, *database.AccountSubscription) (*database.AccountSubscription, string, error)); ok {
		return rf(ctx, req, sub)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionUpdateReq, *database.AccountSubscription) *database.AccountSubscription); ok {
		r0 = rf(ctx, req, sub)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.SubscriptionUpdateReq, *database.AccountSubscription) string); ok {
		r1 = rf(ctx, req, sub)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *types.SubscriptionUpdateReq, *database.AccountSubscription) error); ok {
		r2 = rf(ctx, req, sub)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAccountSubscriptionStore_UpdateResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateResource'
type MockAccountSubscriptionStore_UpdateResource_Call struct {
	*mock.Call
}

// UpdateResource is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.SubscriptionUpdateReq
//   - sub *database.AccountSubscription
func (_e *MockAccountSubscriptionStore_Expecter) UpdateResource(ctx interface{}, req interface{}, sub interface{}) *MockAccountSubscriptionStore_UpdateResource_Call {
	return &MockAccountSubscriptionStore_UpdateResource_Call{Call: _e.mock.On("UpdateResource", ctx, req, sub)}
}

func (_c *MockAccountSubscriptionStore_UpdateResource_Call) Run(run func(ctx context.Context, req *types.SubscriptionUpdateReq, sub *database.AccountSubscription)) *MockAccountSubscriptionStore_UpdateResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.SubscriptionUpdateReq), args[2].(*database.AccountSubscription))
	})
	return _c
}

func (_c *MockAccountSubscriptionStore_UpdateResource_Call) Return(_a0 *database.AccountSubscription, _a1 string, _a2 error) *MockAccountSubscriptionStore_UpdateResource_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAccountSubscriptionStore_UpdateResource_Call) RunAndReturn(run func(context.Context, *types.SubscriptionUpdateReq, *database.AccountSubscription) (*database.AccountSubscription, string, error)) *MockAccountSubscriptionStore_UpdateResource_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountSubscriptionStore creates a new instance of MockAccountSubscriptionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountSubscriptionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountSubscriptionStore {
	mock := &MockAccountSubscriptionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

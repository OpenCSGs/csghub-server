// Code generated by mockery v2.48.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUserLikesStore is an autogenerated mock type for the UserLikesStore type
type MockUserLikesStore struct {
	mock.Mock
}

type MockUserLikesStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserLikesStore) EXPECT() *MockUserLikesStore_Expecter {
	return &MockUserLikesStore_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, userId, repoId
func (_m *MockUserLikesStore) Add(ctx context.Context, userId int64, repoId int64) error {
	ret := _m.Called(ctx, userId, repoId)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userId, repoId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserLikesStore_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockUserLikesStore_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - repoId int64
func (_e *MockUserLikesStore_Expecter) Add(ctx interface{}, userId interface{}, repoId interface{}) *MockUserLikesStore_Add_Call {
	return &MockUserLikesStore_Add_Call{Call: _e.mock.On("Add", ctx, userId, repoId)}
}

func (_c *MockUserLikesStore_Add_Call) Run(run func(ctx context.Context, userId int64, repoId int64)) *MockUserLikesStore_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockUserLikesStore_Add_Call) Return(_a0 error) *MockUserLikesStore_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserLikesStore_Add_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockUserLikesStore_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, userId, repoId
func (_m *MockUserLikesStore) Delete(ctx context.Context, userId int64, repoId int64) error {
	ret := _m.Called(ctx, userId, repoId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userId, repoId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserLikesStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserLikesStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - repoId int64
func (_e *MockUserLikesStore_Expecter) Delete(ctx interface{}, userId interface{}, repoId interface{}) *MockUserLikesStore_Delete_Call {
	return &MockUserLikesStore_Delete_Call{Call: _e.mock.On("Delete", ctx, userId, repoId)}
}

func (_c *MockUserLikesStore_Delete_Call) Run(run func(ctx context.Context, userId int64, repoId int64)) *MockUserLikesStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockUserLikesStore_Delete_Call) Return(_a0 error) *MockUserLikesStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserLikesStore_Delete_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockUserLikesStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// IsExist provides a mock function with given fields: ctx, username, repoId
func (_m *MockUserLikesStore) IsExist(ctx context.Context, username string, repoId int64) (bool, error) {
	ret := _m.Called(ctx, username, repoId)

	if len(ret) == 0 {
		panic("no return value specified for IsExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (bool, error)); ok {
		return rf(ctx, username, repoId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) bool); ok {
		r0 = rf(ctx, username, repoId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, username, repoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserLikesStore_IsExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExist'
type MockUserLikesStore_IsExist_Call struct {
	*mock.Call
}

// IsExist is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - repoId int64
func (_e *MockUserLikesStore_Expecter) IsExist(ctx interface{}, username interface{}, repoId interface{}) *MockUserLikesStore_IsExist_Call {
	return &MockUserLikesStore_IsExist_Call{Call: _e.mock.On("IsExist", ctx, username, repoId)}
}

func (_c *MockUserLikesStore_IsExist_Call) Run(run func(ctx context.Context, username string, repoId int64)) *MockUserLikesStore_IsExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockUserLikesStore_IsExist_Call) Return(exists bool, err error) *MockUserLikesStore_IsExist_Call {
	_c.Call.Return(exists, err)
	return _c
}

func (_c *MockUserLikesStore_IsExist_Call) RunAndReturn(run func(context.Context, string, int64) (bool, error)) *MockUserLikesStore_IsExist_Call {
	_c.Call.Return(run)
	return _c
}

// IsExistCollection provides a mock function with given fields: ctx, username, collectionId
func (_m *MockUserLikesStore) IsExistCollection(ctx context.Context, username string, collectionId int64) (bool, error) {
	ret := _m.Called(ctx, username, collectionId)

	if len(ret) == 0 {
		panic("no return value specified for IsExistCollection")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (bool, error)); ok {
		return rf(ctx, username, collectionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) bool); ok {
		r0 = rf(ctx, username, collectionId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, username, collectionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserLikesStore_IsExistCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExistCollection'
type MockUserLikesStore_IsExistCollection_Call struct {
	*mock.Call
}

// IsExistCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - collectionId int64
func (_e *MockUserLikesStore_Expecter) IsExistCollection(ctx interface{}, username interface{}, collectionId interface{}) *MockUserLikesStore_IsExistCollection_Call {
	return &MockUserLikesStore_IsExistCollection_Call{Call: _e.mock.On("IsExistCollection", ctx, username, collectionId)}
}

func (_c *MockUserLikesStore_IsExistCollection_Call) Run(run func(ctx context.Context, username string, collectionId int64)) *MockUserLikesStore_IsExistCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockUserLikesStore_IsExistCollection_Call) Return(exists bool, err error) *MockUserLikesStore_IsExistCollection_Call {
	_c.Call.Return(exists, err)
	return _c
}

func (_c *MockUserLikesStore_IsExistCollection_Call) RunAndReturn(run func(context.Context, string, int64) (bool, error)) *MockUserLikesStore_IsExistCollection_Call {
	_c.Call.Return(run)
	return _c
}

// LikeCollection provides a mock function with given fields: ctx, userId, collectionId
func (_m *MockUserLikesStore) LikeCollection(ctx context.Context, userId int64, collectionId int64) error {
	ret := _m.Called(ctx, userId, collectionId)

	if len(ret) == 0 {
		panic("no return value specified for LikeCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userId, collectionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserLikesStore_LikeCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LikeCollection'
type MockUserLikesStore_LikeCollection_Call struct {
	*mock.Call
}

// LikeCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - collectionId int64
func (_e *MockUserLikesStore_Expecter) LikeCollection(ctx interface{}, userId interface{}, collectionId interface{}) *MockUserLikesStore_LikeCollection_Call {
	return &MockUserLikesStore_LikeCollection_Call{Call: _e.mock.On("LikeCollection", ctx, userId, collectionId)}
}

func (_c *MockUserLikesStore_LikeCollection_Call) Run(run func(ctx context.Context, userId int64, collectionId int64)) *MockUserLikesStore_LikeCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockUserLikesStore_LikeCollection_Call) Return(_a0 error) *MockUserLikesStore_LikeCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserLikesStore_LikeCollection_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockUserLikesStore_LikeCollection_Call {
	_c.Call.Return(run)
	return _c
}

// UnLikeCollection provides a mock function with given fields: ctx, userId, collectionId
func (_m *MockUserLikesStore) UnLikeCollection(ctx context.Context, userId int64, collectionId int64) error {
	ret := _m.Called(ctx, userId, collectionId)

	if len(ret) == 0 {
		panic("no return value specified for UnLikeCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, userId, collectionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserLikesStore_UnLikeCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnLikeCollection'
type MockUserLikesStore_UnLikeCollection_Call struct {
	*mock.Call
}

// UnLikeCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - collectionId int64
func (_e *MockUserLikesStore_Expecter) UnLikeCollection(ctx interface{}, userId interface{}, collectionId interface{}) *MockUserLikesStore_UnLikeCollection_Call {
	return &MockUserLikesStore_UnLikeCollection_Call{Call: _e.mock.On("UnLikeCollection", ctx, userId, collectionId)}
}

func (_c *MockUserLikesStore_UnLikeCollection_Call) Run(run func(ctx context.Context, userId int64, collectionId int64)) *MockUserLikesStore_UnLikeCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockUserLikesStore_UnLikeCollection_Call) Return(_a0 error) *MockUserLikesStore_UnLikeCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserLikesStore_UnLikeCollection_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockUserLikesStore_UnLikeCollection_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserLikesStore creates a new instance of MockUserLikesStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserLikesStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserLikesStore {
	mock := &MockUserLikesStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.49.1. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockFileStore is an autogenerated mock type for the FileStore type
type MockFileStore struct {
	mock.Mock
}

type MockFileStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileStore) EXPECT() *MockFileStore_Expecter {
	return &MockFileStore_Expecter{mock: &_m.Mock}
}

// BatchCreate provides a mock function with given fields: ctx, files
func (_m *MockFileStore) BatchCreate(ctx context.Context, files []database.File) error {
	ret := _m.Called(ctx, files)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []database.File) error); ok {
		r0 = rf(ctx, files)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFileStore_BatchCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchCreate'
type MockFileStore_BatchCreate_Call struct {
	*mock.Call
}

// BatchCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - files []database.File
func (_e *MockFileStore_Expecter) BatchCreate(ctx interface{}, files interface{}) *MockFileStore_BatchCreate_Call {
	return &MockFileStore_BatchCreate_Call{Call: _e.mock.On("BatchCreate", ctx, files)}
}

func (_c *MockFileStore_BatchCreate_Call) Run(run func(ctx context.Context, files []database.File)) *MockFileStore_BatchCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]database.File))
	})
	return _c
}

func (_c *MockFileStore_BatchCreate_Call) Return(_a0 error) *MockFileStore_BatchCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileStore_BatchCreate_Call) RunAndReturn(run func(context.Context, []database.File) error) *MockFileStore_BatchCreate_Call {
	_c.Call.Return(run)
	return _c
}

// FindByParentPath provides a mock function with given fields: ctx, repoID, path, pagination
func (_m *MockFileStore) FindByParentPath(ctx context.Context, repoID int64, path string, pagination *types.OffsetPagination) ([]database.File, error) {
	ret := _m.Called(ctx, repoID, path, pagination)

	if len(ret) == 0 {
		panic("no return value specified for FindByParentPath")
	}

	var r0 []database.File
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, *types.OffsetPagination) ([]database.File, error)); ok {
		return rf(ctx, repoID, path, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, *types.OffsetPagination) []database.File); ok {
		r0 = rf(ctx, repoID, path, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.File)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, *types.OffsetPagination) error); ok {
		r1 = rf(ctx, repoID, path, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileStore_FindByParentPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByParentPath'
type MockFileStore_FindByParentPath_Call struct {
	*mock.Call
}

// FindByParentPath is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
//   - path string
//   - pagination *types.OffsetPagination
func (_e *MockFileStore_Expecter) FindByParentPath(ctx interface{}, repoID interface{}, path interface{}, pagination interface{}) *MockFileStore_FindByParentPath_Call {
	return &MockFileStore_FindByParentPath_Call{Call: _e.mock.On("FindByParentPath", ctx, repoID, path, pagination)}
}

func (_c *MockFileStore_FindByParentPath_Call) Run(run func(ctx context.Context, repoID int64, path string, pagination *types.OffsetPagination)) *MockFileStore_FindByParentPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(*types.OffsetPagination))
	})
	return _c
}

func (_c *MockFileStore_FindByParentPath_Call) Return(_a0 []database.File, _a1 error) *MockFileStore_FindByParentPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileStore_FindByParentPath_Call) RunAndReturn(run func(context.Context, int64, string, *types.OffsetPagination) ([]database.File, error)) *MockFileStore_FindByParentPath_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileStore creates a new instance of MockFileStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileStore {
	mock := &MockFileStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

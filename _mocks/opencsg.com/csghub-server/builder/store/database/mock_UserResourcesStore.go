// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockUserResourcesStore is an autogenerated mock type for the UserResourcesStore type
type MockUserResourcesStore struct {
	mock.Mock
}

type MockUserResourcesStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserResourcesStore) EXPECT() *MockUserResourcesStore_Expecter {
	return &MockUserResourcesStore_Expecter{mock: &_m.Mock}
}

// AddUserResources provides a mock function with given fields: ctx, userResources
func (_m *MockUserResourcesStore) AddUserResources(ctx context.Context, userResources *database.UserResources) error {
	ret := _m.Called(ctx, userResources)

	if len(ret) == 0 {
		panic("no return value specified for AddUserResources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.UserResources) error); ok {
		r0 = rf(ctx, userResources)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserResourcesStore_AddUserResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserResources'
type MockUserResourcesStore_AddUserResources_Call struct {
	*mock.Call
}

// AddUserResources is a helper method to define mock.On call
//   - ctx context.Context
//   - userResources *database.UserResources
func (_e *MockUserResourcesStore_Expecter) AddUserResources(ctx interface{}, userResources interface{}) *MockUserResourcesStore_AddUserResources_Call {
	return &MockUserResourcesStore_AddUserResources_Call{Call: _e.mock.On("AddUserResources", ctx, userResources)}
}

func (_c *MockUserResourcesStore_AddUserResources_Call) Run(run func(ctx context.Context, userResources *database.UserResources)) *MockUserResourcesStore_AddUserResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.UserResources))
	})
	return _c
}

func (_c *MockUserResourcesStore_AddUserResources_Call) Return(_a0 error) *MockUserResourcesStore_AddUserResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserResourcesStore_AddUserResources_Call) RunAndReturn(run func(context.Context, *database.UserResources) error) *MockUserResourcesStore_AddUserResources_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserResourcesByOrderDetailId provides a mock function with given fields: ctx, userUid, orderDetailId
func (_m *MockUserResourcesStore) DeleteUserResourcesByOrderDetailId(ctx context.Context, userUid string, orderDetailId int64) error {
	ret := _m.Called(ctx, userUid, orderDetailId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserResourcesByOrderDetailId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, userUid, orderDetailId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserResourcesStore_DeleteUserResourcesByOrderDetailId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserResourcesByOrderDetailId'
type MockUserResourcesStore_DeleteUserResourcesByOrderDetailId_Call struct {
	*mock.Call
}

// DeleteUserResourcesByOrderDetailId is a helper method to define mock.On call
//   - ctx context.Context
//   - userUid string
//   - orderDetailId int64
func (_e *MockUserResourcesStore_Expecter) DeleteUserResourcesByOrderDetailId(ctx interface{}, userUid interface{}, orderDetailId interface{}) *MockUserResourcesStore_DeleteUserResourcesByOrderDetailId_Call {
	return &MockUserResourcesStore_DeleteUserResourcesByOrderDetailId_Call{Call: _e.mock.On("DeleteUserResourcesByOrderDetailId", ctx, userUid, orderDetailId)}
}

func (_c *MockUserResourcesStore_DeleteUserResourcesByOrderDetailId_Call) Run(run func(ctx context.Context, userUid string, orderDetailId int64)) *MockUserResourcesStore_DeleteUserResourcesByOrderDetailId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockUserResourcesStore_DeleteUserResourcesByOrderDetailId_Call) Return(_a0 error) *MockUserResourcesStore_DeleteUserResourcesByOrderDetailId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserResourcesStore_DeleteUserResourcesByOrderDetailId_Call) RunAndReturn(run func(context.Context, string, int64) error) *MockUserResourcesStore_DeleteUserResourcesByOrderDetailId_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserResourcesByOrderDetailId provides a mock function with given fields: ctx, userUId, orderDetailId
func (_m *MockUserResourcesStore) FindUserResourcesByOrderDetailId(ctx context.Context, userUId string, orderDetailId int64) (*database.UserResources, error) {
	ret := _m.Called(ctx, userUId, orderDetailId)

	if len(ret) == 0 {
		panic("no return value specified for FindUserResourcesByOrderDetailId")
	}

	var r0 *database.UserResources
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (*database.UserResources, error)); ok {
		return rf(ctx, userUId, orderDetailId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *database.UserResources); ok {
		r0 = rf(ctx, userUId, orderDetailId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.UserResources)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, userUId, orderDetailId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserResourcesStore_FindUserResourcesByOrderDetailId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserResourcesByOrderDetailId'
type MockUserResourcesStore_FindUserResourcesByOrderDetailId_Call struct {
	*mock.Call
}

// FindUserResourcesByOrderDetailId is a helper method to define mock.On call
//   - ctx context.Context
//   - userUId string
//   - orderDetailId int64
func (_e *MockUserResourcesStore_Expecter) FindUserResourcesByOrderDetailId(ctx interface{}, userUId interface{}, orderDetailId interface{}) *MockUserResourcesStore_FindUserResourcesByOrderDetailId_Call {
	return &MockUserResourcesStore_FindUserResourcesByOrderDetailId_Call{Call: _e.mock.On("FindUserResourcesByOrderDetailId", ctx, userUId, orderDetailId)}
}

func (_c *MockUserResourcesStore_FindUserResourcesByOrderDetailId_Call) Run(run func(ctx context.Context, userUId string, orderDetailId int64)) *MockUserResourcesStore_FindUserResourcesByOrderDetailId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockUserResourcesStore_FindUserResourcesByOrderDetailId_Call) Return(_a0 *database.UserResources, _a1 error) *MockUserResourcesStore_FindUserResourcesByOrderDetailId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserResourcesStore_FindUserResourcesByOrderDetailId_Call) RunAndReturn(run func(context.Context, string, int64) (*database.UserResources, error)) *MockUserResourcesStore_FindUserResourcesByOrderDetailId_Call {
	_c.Call.Return(run)
	return _c
}

// GetReservedUserResources provides a mock function with given fields: ctx, userId, clusterId
func (_m *MockUserResourcesStore) GetReservedUserResources(ctx context.Context, userId string, clusterId string) ([]database.UserResources, error) {
	ret := _m.Called(ctx, userId, clusterId)

	if len(ret) == 0 {
		panic("no return value specified for GetReservedUserResources")
	}

	var r0 []database.UserResources
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]database.UserResources, error)); ok {
		return rf(ctx, userId, clusterId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []database.UserResources); ok {
		r0 = rf(ctx, userId, clusterId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.UserResources)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userId, clusterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserResourcesStore_GetReservedUserResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReservedUserResources'
type MockUserResourcesStore_GetReservedUserResources_Call struct {
	*mock.Call
}

// GetReservedUserResources is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - clusterId string
func (_e *MockUserResourcesStore_Expecter) GetReservedUserResources(ctx interface{}, userId interface{}, clusterId interface{}) *MockUserResourcesStore_GetReservedUserResources_Call {
	return &MockUserResourcesStore_GetReservedUserResources_Call{Call: _e.mock.On("GetReservedUserResources", ctx, userId, clusterId)}
}

func (_c *MockUserResourcesStore_GetReservedUserResources_Call) Run(run func(ctx context.Context, userId string, clusterId string)) *MockUserResourcesStore_GetReservedUserResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserResourcesStore_GetReservedUserResources_Call) Return(_a0 []database.UserResources, _a1 error) *MockUserResourcesStore_GetReservedUserResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserResourcesStore_GetReservedUserResources_Call) RunAndReturn(run func(context.Context, string, string) ([]database.UserResources, error)) *MockUserResourcesStore_GetReservedUserResources_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserResourcesByUserUID provides a mock function with given fields: ctx, per, page, userId
func (_m *MockUserResourcesStore) GetUserResourcesByUserUID(ctx context.Context, per int, page int, userId string) ([]database.UserResources, int, error) {
	ret := _m.Called(ctx, per, page, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserResourcesByUserUID")
	}

	var r0 []database.UserResources
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) ([]database.UserResources, int, error)); ok {
		return rf(ctx, per, page, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) []database.UserResources); ok {
		r0 = rf(ctx, per, page, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.UserResources)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, string) int); ok {
		r1 = rf(ctx, per, page, userId)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, string) error); ok {
		r2 = rf(ctx, per, page, userId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserResourcesStore_GetUserResourcesByUserUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserResourcesByUserUID'
type MockUserResourcesStore_GetUserResourcesByUserUID_Call struct {
	*mock.Call
}

// GetUserResourcesByUserUID is a helper method to define mock.On call
//   - ctx context.Context
//   - per int
//   - page int
//   - userId string
func (_e *MockUserResourcesStore_Expecter) GetUserResourcesByUserUID(ctx interface{}, per interface{}, page interface{}, userId interface{}) *MockUserResourcesStore_GetUserResourcesByUserUID_Call {
	return &MockUserResourcesStore_GetUserResourcesByUserUID_Call{Call: _e.mock.On("GetUserResourcesByUserUID", ctx, per, page, userId)}
}

func (_c *MockUserResourcesStore_GetUserResourcesByUserUID_Call) Run(run func(ctx context.Context, per int, page int, userId string)) *MockUserResourcesStore_GetUserResourcesByUserUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(string))
	})
	return _c
}

func (_c *MockUserResourcesStore_GetUserResourcesByUserUID_Call) Return(userResources []database.UserResources, total int, err error) *MockUserResourcesStore_GetUserResourcesByUserUID_Call {
	_c.Call.Return(userResources, total, err)
	return _c
}

func (_c *MockUserResourcesStore_GetUserResourcesByUserUID_Call) RunAndReturn(run func(context.Context, int, int, string) ([]database.UserResources, int, error)) *MockUserResourcesStore_GetUserResourcesByUserUID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDeployId provides a mock function with given fields: ctx, userResources
func (_m *MockUserResourcesStore) UpdateDeployId(ctx context.Context, userResources *database.UserResources) error {
	ret := _m.Called(ctx, userResources)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeployId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.UserResources) error); ok {
		r0 = rf(ctx, userResources)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserResourcesStore_UpdateDeployId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDeployId'
type MockUserResourcesStore_UpdateDeployId_Call struct {
	*mock.Call
}

// UpdateDeployId is a helper method to define mock.On call
//   - ctx context.Context
//   - userResources *database.UserResources
func (_e *MockUserResourcesStore_Expecter) UpdateDeployId(ctx interface{}, userResources interface{}) *MockUserResourcesStore_UpdateDeployId_Call {
	return &MockUserResourcesStore_UpdateDeployId_Call{Call: _e.mock.On("UpdateDeployId", ctx, userResources)}
}

func (_c *MockUserResourcesStore_UpdateDeployId_Call) Run(run func(ctx context.Context, userResources *database.UserResources)) *MockUserResourcesStore_UpdateDeployId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.UserResources))
	})
	return _c
}

func (_c *MockUserResourcesStore_UpdateDeployId_Call) Return(_a0 error) *MockUserResourcesStore_UpdateDeployId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserResourcesStore_UpdateDeployId_Call) RunAndReturn(run func(context.Context, *database.UserResources) error) *MockUserResourcesStore_UpdateDeployId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserResourcesStore creates a new instance of MockUserResourcesStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserResourcesStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserResourcesStore {
	mock := &MockUserResourcesStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

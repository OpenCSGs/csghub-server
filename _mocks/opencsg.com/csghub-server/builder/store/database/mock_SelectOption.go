// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	bun "github.com/uptrace/bun"

	mock "github.com/stretchr/testify/mock"
)

// MockSelectOption is an autogenerated mock type for the SelectOption type
type MockSelectOption struct {
	mock.Mock
}

type MockSelectOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSelectOption) EXPECT() *MockSelectOption_Expecter {
	return &MockSelectOption_Expecter{mock: &_m.Mock}
}

// Appply provides a mock function with given fields: query
func (_m *MockSelectOption) Appply(query *bun.SelectQuery) {
	_m.Called(query)
}

// MockSelectOption_Appply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Appply'
type MockSelectOption_Appply_Call struct {
	*mock.Call
}

// Appply is a helper method to define mock.On call
//   - query *bun.SelectQuery
func (_e *MockSelectOption_Expecter) Appply(query interface{}) *MockSelectOption_Appply_Call {
	return &MockSelectOption_Appply_Call{Call: _e.mock.On("Appply", query)}
}

func (_c *MockSelectOption_Appply_Call) Run(run func(query *bun.SelectQuery)) *MockSelectOption_Appply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bun.SelectQuery))
	})
	return _c
}

func (_c *MockSelectOption_Appply_Call) Return() *MockSelectOption_Appply_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSelectOption_Appply_Call) RunAndReturn(run func(*bun.SelectQuery)) *MockSelectOption_Appply_Call {
	_c.Run(run)
	return _c
}

// NewMockSelectOption creates a new instance of MockSelectOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSelectOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSelectOption {
	mock := &MockSelectOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

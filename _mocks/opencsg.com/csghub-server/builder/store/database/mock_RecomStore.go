// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockRecomStore is an autogenerated mock type for the RecomStore type
type MockRecomStore struct {
	mock.Mock
}

type MockRecomStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRecomStore) EXPECT() *MockRecomStore_Expecter {
	return &MockRecomStore_Expecter{mock: &_m.Mock}
}

// FindScoreByRepoIDs provides a mock function with given fields: ctx, repoIDs
func (_m *MockRecomStore) FindScoreByRepoIDs(ctx context.Context, repoIDs []int64) ([]*database.RecomRepoScore, error) {
	ret := _m.Called(ctx, repoIDs)

	if len(ret) == 0 {
		panic("no return value specified for FindScoreByRepoIDs")
	}

	var r0 []*database.RecomRepoScore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]*database.RecomRepoScore, error)); ok {
		return rf(ctx, repoIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []*database.RecomRepoScore); ok {
		r0 = rf(ctx, repoIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.RecomRepoScore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, repoIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecomStore_FindScoreByRepoIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindScoreByRepoIDs'
type MockRecomStore_FindScoreByRepoIDs_Call struct {
	*mock.Call
}

// FindScoreByRepoIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - repoIDs []int64
func (_e *MockRecomStore_Expecter) FindScoreByRepoIDs(ctx interface{}, repoIDs interface{}) *MockRecomStore_FindScoreByRepoIDs_Call {
	return &MockRecomStore_FindScoreByRepoIDs_Call{Call: _e.mock.On("FindScoreByRepoIDs", ctx, repoIDs)}
}

func (_c *MockRecomStore_FindScoreByRepoIDs_Call) Run(run func(ctx context.Context, repoIDs []int64)) *MockRecomStore_FindScoreByRepoIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *MockRecomStore_FindScoreByRepoIDs_Call) Return(_a0 []*database.RecomRepoScore, _a1 error) *MockRecomStore_FindScoreByRepoIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecomStore_FindScoreByRepoIDs_Call) RunAndReturn(run func(context.Context, []int64) ([]*database.RecomRepoScore, error)) *MockRecomStore_FindScoreByRepoIDs_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx, page, pageSize
func (_m *MockRecomStore) Index(ctx context.Context, page int, pageSize int) ([]*database.RecomRepoScore, error) {
	ret := _m.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []*database.RecomRepoScore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*database.RecomRepoScore, error)); ok {
		return rf(ctx, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*database.RecomRepoScore); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.RecomRepoScore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecomStore_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockRecomStore_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
//   - page int
//   - pageSize int
func (_e *MockRecomStore_Expecter) Index(ctx interface{}, page interface{}, pageSize interface{}) *MockRecomStore_Index_Call {
	return &MockRecomStore_Index_Call{Call: _e.mock.On("Index", ctx, page, pageSize)}
}

func (_c *MockRecomStore_Index_Call) Run(run func(ctx context.Context, page int, pageSize int)) *MockRecomStore_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockRecomStore_Index_Call) Return(_a0 []*database.RecomRepoScore, _a1 error) *MockRecomStore_Index_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecomStore_Index_Call) RunAndReturn(run func(context.Context, int, int) ([]*database.RecomRepoScore, error)) *MockRecomStore_Index_Call {
	_c.Call.Return(run)
	return _c
}

// LoadRepoOpWeights provides a mock function with given fields: ctx, repoIDs
func (_m *MockRecomStore) LoadRepoOpWeights(ctx context.Context, repoIDs []int64) (map[int64]int, error) {
	ret := _m.Called(ctx, repoIDs)

	if len(ret) == 0 {
		panic("no return value specified for LoadRepoOpWeights")
	}

	var r0 map[int64]int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) (map[int64]int, error)); ok {
		return rf(ctx, repoIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) map[int64]int); ok {
		r0 = rf(ctx, repoIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int64]int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, repoIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecomStore_LoadRepoOpWeights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadRepoOpWeights'
type MockRecomStore_LoadRepoOpWeights_Call struct {
	*mock.Call
}

// LoadRepoOpWeights is a helper method to define mock.On call
//   - ctx context.Context
//   - repoIDs []int64
func (_e *MockRecomStore_Expecter) LoadRepoOpWeights(ctx interface{}, repoIDs interface{}) *MockRecomStore_LoadRepoOpWeights_Call {
	return &MockRecomStore_LoadRepoOpWeights_Call{Call: _e.mock.On("LoadRepoOpWeights", ctx, repoIDs)}
}

func (_c *MockRecomStore_LoadRepoOpWeights_Call) Run(run func(ctx context.Context, repoIDs []int64)) *MockRecomStore_LoadRepoOpWeights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *MockRecomStore_LoadRepoOpWeights_Call) Return(_a0 map[int64]int, _a1 error) *MockRecomStore_LoadRepoOpWeights_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecomStore_LoadRepoOpWeights_Call) RunAndReturn(run func(context.Context, []int64) (map[int64]int, error)) *MockRecomStore_LoadRepoOpWeights_Call {
	_c.Call.Return(run)
	return _c
}

// LoadWeights provides a mock function with given fields: ctx
func (_m *MockRecomStore) LoadWeights(ctx context.Context) ([]*database.RecomWeight, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LoadWeights")
	}

	var r0 []*database.RecomWeight
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*database.RecomWeight, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*database.RecomWeight); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.RecomWeight)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRecomStore_LoadWeights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadWeights'
type MockRecomStore_LoadWeights_Call struct {
	*mock.Call
}

// LoadWeights is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRecomStore_Expecter) LoadWeights(ctx interface{}) *MockRecomStore_LoadWeights_Call {
	return &MockRecomStore_LoadWeights_Call{Call: _e.mock.On("LoadWeights", ctx)}
}

func (_c *MockRecomStore_LoadWeights_Call) Run(run func(ctx context.Context)) *MockRecomStore_LoadWeights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRecomStore_LoadWeights_Call) Return(_a0 []*database.RecomWeight, _a1 error) *MockRecomStore_LoadWeights_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRecomStore_LoadWeights_Call) RunAndReturn(run func(context.Context) ([]*database.RecomWeight, error)) *MockRecomStore_LoadWeights_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertScore provides a mock function with given fields: ctx, scores
func (_m *MockRecomStore) UpsertScore(ctx context.Context, scores []*database.RecomRepoScore) error {
	ret := _m.Called(ctx, scores)

	if len(ret) == 0 {
		panic("no return value specified for UpsertScore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*database.RecomRepoScore) error); ok {
		r0 = rf(ctx, scores)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRecomStore_UpsertScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertScore'
type MockRecomStore_UpsertScore_Call struct {
	*mock.Call
}

// UpsertScore is a helper method to define mock.On call
//   - ctx context.Context
//   - scores []*database.RecomRepoScore
func (_e *MockRecomStore_Expecter) UpsertScore(ctx interface{}, scores interface{}) *MockRecomStore_UpsertScore_Call {
	return &MockRecomStore_UpsertScore_Call{Call: _e.mock.On("UpsertScore", ctx, scores)}
}

func (_c *MockRecomStore_UpsertScore_Call) Run(run func(ctx context.Context, scores []*database.RecomRepoScore)) *MockRecomStore_UpsertScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*database.RecomRepoScore))
	})
	return _c
}

func (_c *MockRecomStore_UpsertScore_Call) Return(_a0 error) *MockRecomStore_UpsertScore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecomStore_UpsertScore_Call) RunAndReturn(run func(context.Context, []*database.RecomRepoScore) error) *MockRecomStore_UpsertScore_Call {
	_c.Call.Return(run)
	return _c
}

// UpsetOpWeights provides a mock function with given fields: ctx, repoID, weight
func (_m *MockRecomStore) UpsetOpWeights(ctx context.Context, repoID int64, weight int64) error {
	ret := _m.Called(ctx, repoID, weight)

	if len(ret) == 0 {
		panic("no return value specified for UpsetOpWeights")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, repoID, weight)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRecomStore_UpsetOpWeights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsetOpWeights'
type MockRecomStore_UpsetOpWeights_Call struct {
	*mock.Call
}

// UpsetOpWeights is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
//   - weight int64
func (_e *MockRecomStore_Expecter) UpsetOpWeights(ctx interface{}, repoID interface{}, weight interface{}) *MockRecomStore_UpsetOpWeights_Call {
	return &MockRecomStore_UpsetOpWeights_Call{Call: _e.mock.On("UpsetOpWeights", ctx, repoID, weight)}
}

func (_c *MockRecomStore_UpsetOpWeights_Call) Run(run func(ctx context.Context, repoID int64, weight int64)) *MockRecomStore_UpsetOpWeights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockRecomStore_UpsetOpWeights_Call) Return(_a0 error) *MockRecomStore_UpsetOpWeights_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRecomStore_UpsetOpWeights_Call) RunAndReturn(run func(context.Context, int64, int64) error) *MockRecomStore_UpsetOpWeights_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRecomStore creates a new instance of MockRecomStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecomStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecomStore {
	mock := &MockRecomStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

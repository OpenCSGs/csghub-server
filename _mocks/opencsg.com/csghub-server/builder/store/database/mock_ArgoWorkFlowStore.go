// Code generated by mockery v2.49.1. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockArgoWorkFlowStore is an autogenerated mock type for the ArgoWorkFlowStore type
type MockArgoWorkFlowStore struct {
	mock.Mock
}

type MockArgoWorkFlowStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArgoWorkFlowStore) EXPECT() *MockArgoWorkFlowStore_Expecter {
	return &MockArgoWorkFlowStore_Expecter{mock: &_m.Mock}
}

// CreateWorkFlow provides a mock function with given fields: ctx, workFlow
func (_m *MockArgoWorkFlowStore) CreateWorkFlow(ctx context.Context, workFlow database.ArgoWorkflow) (*database.ArgoWorkflow, error) {
	ret := _m.Called(ctx, workFlow)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkFlow")
	}

	var r0 *database.ArgoWorkflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.ArgoWorkflow) (*database.ArgoWorkflow, error)); ok {
		return rf(ctx, workFlow)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.ArgoWorkflow) *database.ArgoWorkflow); ok {
		r0 = rf(ctx, workFlow)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.ArgoWorkflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.ArgoWorkflow) error); ok {
		r1 = rf(ctx, workFlow)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArgoWorkFlowStore_CreateWorkFlow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkFlow'
type MockArgoWorkFlowStore_CreateWorkFlow_Call struct {
	*mock.Call
}

// CreateWorkFlow is a helper method to define mock.On call
//   - ctx context.Context
//   - workFlow database.ArgoWorkflow
func (_e *MockArgoWorkFlowStore_Expecter) CreateWorkFlow(ctx interface{}, workFlow interface{}) *MockArgoWorkFlowStore_CreateWorkFlow_Call {
	return &MockArgoWorkFlowStore_CreateWorkFlow_Call{Call: _e.mock.On("CreateWorkFlow", ctx, workFlow)}
}

func (_c *MockArgoWorkFlowStore_CreateWorkFlow_Call) Run(run func(ctx context.Context, workFlow database.ArgoWorkflow)) *MockArgoWorkFlowStore_CreateWorkFlow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.ArgoWorkflow))
	})
	return _c
}

func (_c *MockArgoWorkFlowStore_CreateWorkFlow_Call) Return(_a0 *database.ArgoWorkflow, _a1 error) *MockArgoWorkFlowStore_CreateWorkFlow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArgoWorkFlowStore_CreateWorkFlow_Call) RunAndReturn(run func(context.Context, database.ArgoWorkflow) (*database.ArgoWorkflow, error)) *MockArgoWorkFlowStore_CreateWorkFlow_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkFlow provides a mock function with given fields: ctx, id
func (_m *MockArgoWorkFlowStore) DeleteWorkFlow(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkFlow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockArgoWorkFlowStore_DeleteWorkFlow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkFlow'
type MockArgoWorkFlowStore_DeleteWorkFlow_Call struct {
	*mock.Call
}

// DeleteWorkFlow is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockArgoWorkFlowStore_Expecter) DeleteWorkFlow(ctx interface{}, id interface{}) *MockArgoWorkFlowStore_DeleteWorkFlow_Call {
	return &MockArgoWorkFlowStore_DeleteWorkFlow_Call{Call: _e.mock.On("DeleteWorkFlow", ctx, id)}
}

func (_c *MockArgoWorkFlowStore_DeleteWorkFlow_Call) Run(run func(ctx context.Context, id int64)) *MockArgoWorkFlowStore_DeleteWorkFlow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockArgoWorkFlowStore_DeleteWorkFlow_Call) Return(_a0 error) *MockArgoWorkFlowStore_DeleteWorkFlow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockArgoWorkFlowStore_DeleteWorkFlow_Call) RunAndReturn(run func(context.Context, int64) error) *MockArgoWorkFlowStore_DeleteWorkFlow_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *MockArgoWorkFlowStore) FindByID(ctx context.Context, id int64) (database.ArgoWorkflow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 database.ArgoWorkflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (database.ArgoWorkflow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) database.ArgoWorkflow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(database.ArgoWorkflow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArgoWorkFlowStore_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockArgoWorkFlowStore_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockArgoWorkFlowStore_Expecter) FindByID(ctx interface{}, id interface{}) *MockArgoWorkFlowStore_FindByID_Call {
	return &MockArgoWorkFlowStore_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockArgoWorkFlowStore_FindByID_Call) Run(run func(ctx context.Context, id int64)) *MockArgoWorkFlowStore_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockArgoWorkFlowStore_FindByID_Call) Return(WorkFlow database.ArgoWorkflow, err error) *MockArgoWorkFlowStore_FindByID_Call {
	_c.Call.Return(WorkFlow, err)
	return _c
}

func (_c *MockArgoWorkFlowStore_FindByID_Call) RunAndReturn(run func(context.Context, int64) (database.ArgoWorkflow, error)) *MockArgoWorkFlowStore_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByTaskID provides a mock function with given fields: ctx, id
func (_m *MockArgoWorkFlowStore) FindByTaskID(ctx context.Context, id string) (database.ArgoWorkflow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByTaskID")
	}

	var r0 database.ArgoWorkflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (database.ArgoWorkflow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) database.ArgoWorkflow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(database.ArgoWorkflow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArgoWorkFlowStore_FindByTaskID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByTaskID'
type MockArgoWorkFlowStore_FindByTaskID_Call struct {
	*mock.Call
}

// FindByTaskID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockArgoWorkFlowStore_Expecter) FindByTaskID(ctx interface{}, id interface{}) *MockArgoWorkFlowStore_FindByTaskID_Call {
	return &MockArgoWorkFlowStore_FindByTaskID_Call{Call: _e.mock.On("FindByTaskID", ctx, id)}
}

func (_c *MockArgoWorkFlowStore_FindByTaskID_Call) Run(run func(ctx context.Context, id string)) *MockArgoWorkFlowStore_FindByTaskID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockArgoWorkFlowStore_FindByTaskID_Call) Return(WorkFlow database.ArgoWorkflow, err error) *MockArgoWorkFlowStore_FindByTaskID_Call {
	_c.Call.Return(WorkFlow, err)
	return _c
}

func (_c *MockArgoWorkFlowStore_FindByTaskID_Call) RunAndReturn(run func(context.Context, string) (database.ArgoWorkflow, error)) *MockArgoWorkFlowStore_FindByTaskID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUsername provides a mock function with given fields: ctx, username, per, page
func (_m *MockArgoWorkFlowStore) FindByUsername(ctx context.Context, username string, per int, page int) ([]database.ArgoWorkflow, int, error) {
	ret := _m.Called(ctx, username, per, page)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsername")
	}

	var r0 []database.ArgoWorkflow
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]database.ArgoWorkflow, int, error)); ok {
		return rf(ctx, username, per, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []database.ArgoWorkflow); ok {
		r0 = rf(ctx, username, per, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.ArgoWorkflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = rf(ctx, username, per, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, username, per, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockArgoWorkFlowStore_FindByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUsername'
type MockArgoWorkFlowStore_FindByUsername_Call struct {
	*mock.Call
}

// FindByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - per int
//   - page int
func (_e *MockArgoWorkFlowStore_Expecter) FindByUsername(ctx interface{}, username interface{}, per interface{}, page interface{}) *MockArgoWorkFlowStore_FindByUsername_Call {
	return &MockArgoWorkFlowStore_FindByUsername_Call{Call: _e.mock.On("FindByUsername", ctx, username, per, page)}
}

func (_c *MockArgoWorkFlowStore_FindByUsername_Call) Run(run func(ctx context.Context, username string, per int, page int)) *MockArgoWorkFlowStore_FindByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockArgoWorkFlowStore_FindByUsername_Call) Return(WorkFlows []database.ArgoWorkflow, total int, err error) *MockArgoWorkFlowStore_FindByUsername_Call {
	_c.Call.Return(WorkFlows, total, err)
	return _c
}

func (_c *MockArgoWorkFlowStore_FindByUsername_Call) RunAndReturn(run func(context.Context, string, int, int) ([]database.ArgoWorkflow, int, error)) *MockArgoWorkFlowStore_FindByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkFlow provides a mock function with given fields: ctx, workFlow
func (_m *MockArgoWorkFlowStore) UpdateWorkFlow(ctx context.Context, workFlow database.ArgoWorkflow) (*database.ArgoWorkflow, error) {
	ret := _m.Called(ctx, workFlow)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkFlow")
	}

	var r0 *database.ArgoWorkflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.ArgoWorkflow) (*database.ArgoWorkflow, error)); ok {
		return rf(ctx, workFlow)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.ArgoWorkflow) *database.ArgoWorkflow); ok {
		r0 = rf(ctx, workFlow)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.ArgoWorkflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.ArgoWorkflow) error); ok {
		r1 = rf(ctx, workFlow)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArgoWorkFlowStore_UpdateWorkFlow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkFlow'
type MockArgoWorkFlowStore_UpdateWorkFlow_Call struct {
	*mock.Call
}

// UpdateWorkFlow is a helper method to define mock.On call
//   - ctx context.Context
//   - workFlow database.ArgoWorkflow
func (_e *MockArgoWorkFlowStore_Expecter) UpdateWorkFlow(ctx interface{}, workFlow interface{}) *MockArgoWorkFlowStore_UpdateWorkFlow_Call {
	return &MockArgoWorkFlowStore_UpdateWorkFlow_Call{Call: _e.mock.On("UpdateWorkFlow", ctx, workFlow)}
}

func (_c *MockArgoWorkFlowStore_UpdateWorkFlow_Call) Run(run func(ctx context.Context, workFlow database.ArgoWorkflow)) *MockArgoWorkFlowStore_UpdateWorkFlow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.ArgoWorkflow))
	})
	return _c
}

func (_c *MockArgoWorkFlowStore_UpdateWorkFlow_Call) Return(_a0 *database.ArgoWorkflow, _a1 error) *MockArgoWorkFlowStore_UpdateWorkFlow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArgoWorkFlowStore_UpdateWorkFlow_Call) RunAndReturn(run func(context.Context, database.ArgoWorkflow) (*database.ArgoWorkflow, error)) *MockArgoWorkFlowStore_UpdateWorkFlow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockArgoWorkFlowStore creates a new instance of MockArgoWorkFlowStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArgoWorkFlowStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArgoWorkFlowStore {
	mock := &MockArgoWorkFlowStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

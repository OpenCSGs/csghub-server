// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockDeployLogStore is an autogenerated mock type for the DeployLogStore type
type MockDeployLogStore struct {
	mock.Mock
}

type MockDeployLogStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDeployLogStore) EXPECT() *MockDeployLogStore_Expecter {
	return &MockDeployLogStore_Expecter{mock: &_m.Mock}
}

// GetDeployLogs provides a mock function with given fields: ctx, log
func (_m *MockDeployLogStore) GetDeployLogs(ctx context.Context, log database.DeployLog) (*database.DeployLog, error) {
	ret := _m.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployLogs")
	}

	var r0 *database.DeployLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DeployLog) (*database.DeployLog, error)); ok {
		return rf(ctx, log)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.DeployLog) *database.DeployLog); ok {
		r0 = rf(ctx, log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DeployLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.DeployLog) error); ok {
		r1 = rf(ctx, log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeployLogStore_GetDeployLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeployLogs'
type MockDeployLogStore_GetDeployLogs_Call struct {
	*mock.Call
}

// GetDeployLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - log database.DeployLog
func (_e *MockDeployLogStore_Expecter) GetDeployLogs(ctx interface{}, log interface{}) *MockDeployLogStore_GetDeployLogs_Call {
	return &MockDeployLogStore_GetDeployLogs_Call{Call: _e.mock.On("GetDeployLogs", ctx, log)}
}

func (_c *MockDeployLogStore_GetDeployLogs_Call) Run(run func(ctx context.Context, log database.DeployLog)) *MockDeployLogStore_GetDeployLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DeployLog))
	})
	return _c
}

func (_c *MockDeployLogStore_GetDeployLogs_Call) Return(_a0 *database.DeployLog, _a1 error) *MockDeployLogStore_GetDeployLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeployLogStore_GetDeployLogs_Call) RunAndReturn(run func(context.Context, database.DeployLog) (*database.DeployLog, error)) *MockDeployLogStore_GetDeployLogs_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDeployLogs provides a mock function with given fields: ctx, log
func (_m *MockDeployLogStore) UpdateDeployLogs(ctx context.Context, log database.DeployLog) (*database.DeployLog, error) {
	ret := _m.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeployLogs")
	}

	var r0 *database.DeployLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.DeployLog) (*database.DeployLog, error)); ok {
		return rf(ctx, log)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.DeployLog) *database.DeployLog); ok {
		r0 = rf(ctx, log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.DeployLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.DeployLog) error); ok {
		r1 = rf(ctx, log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDeployLogStore_UpdateDeployLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDeployLogs'
type MockDeployLogStore_UpdateDeployLogs_Call struct {
	*mock.Call
}

// UpdateDeployLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - log database.DeployLog
func (_e *MockDeployLogStore_Expecter) UpdateDeployLogs(ctx interface{}, log interface{}) *MockDeployLogStore_UpdateDeployLogs_Call {
	return &MockDeployLogStore_UpdateDeployLogs_Call{Call: _e.mock.On("UpdateDeployLogs", ctx, log)}
}

func (_c *MockDeployLogStore_UpdateDeployLogs_Call) Run(run func(ctx context.Context, log database.DeployLog)) *MockDeployLogStore_UpdateDeployLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.DeployLog))
	})
	return _c
}

func (_c *MockDeployLogStore_UpdateDeployLogs_Call) Return(_a0 *database.DeployLog, _a1 error) *MockDeployLogStore_UpdateDeployLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDeployLogStore_UpdateDeployLogs_Call) RunAndReturn(run func(context.Context, database.DeployLog) (*database.DeployLog, error)) *MockDeployLogStore_UpdateDeployLogs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDeployLogStore creates a new instance of MockDeployLogStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDeployLogStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDeployLogStore {
	mock := &MockDeployLogStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

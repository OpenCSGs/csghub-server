// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockUserStore is an autogenerated mock type for the UserStore type
type MockUserStore struct {
	mock.Mock
}

type MockUserStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserStore) EXPECT() *MockUserStore_Expecter {
	return &MockUserStore_Expecter{mock: &_m.Mock}
}

// ChangeUserName provides a mock function with given fields: ctx, username, newUsername
func (_m *MockUserStore) ChangeUserName(ctx context.Context, username string, newUsername string) error {
	ret := _m.Called(ctx, username, newUsername)

	if len(ret) == 0 {
		panic("no return value specified for ChangeUserName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, username, newUsername)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserStore_ChangeUserName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeUserName'
type MockUserStore_ChangeUserName_Call struct {
	*mock.Call
}

// ChangeUserName is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - newUsername string
func (_e *MockUserStore_Expecter) ChangeUserName(ctx interface{}, username interface{}, newUsername interface{}) *MockUserStore_ChangeUserName_Call {
	return &MockUserStore_ChangeUserName_Call{Call: _e.mock.On("ChangeUserName", ctx, username, newUsername)}
}

func (_c *MockUserStore_ChangeUserName_Call) Run(run func(ctx context.Context, username string, newUsername string)) *MockUserStore_ChangeUserName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserStore_ChangeUserName_Call) Return(_a0 error) *MockUserStore_ChangeUserName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserStore_ChangeUserName_Call) RunAndReturn(run func(context.Context, string, string) error) *MockUserStore_ChangeUserName_Call {
	_c.Call.Return(run)
	return _c
}

// CountUsers provides a mock function with given fields: ctx
func (_m *MockUserStore) CountUsers(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountUsers")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_CountUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountUsers'
type MockUserStore_CountUsers_Call struct {
	*mock.Call
}

// CountUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserStore_Expecter) CountUsers(ctx interface{}) *MockUserStore_CountUsers_Call {
	return &MockUserStore_CountUsers_Call{Call: _e.mock.On("CountUsers", ctx)}
}

func (_c *MockUserStore_CountUsers_Call) Run(run func(ctx context.Context)) *MockUserStore_CountUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserStore_CountUsers_Call) Return(_a0 int, _a1 error) *MockUserStore_CountUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserStore_CountUsers_Call) RunAndReturn(run func(context.Context) (int, error)) *MockUserStore_CountUsers_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, user, namespace
func (_m *MockUserStore) Create(ctx context.Context, user *database.User, namespace *database.Namespace) error {
	ret := _m.Called(ctx, user, namespace)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.User, *database.Namespace) error); ok {
		r0 = rf(ctx, user, namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user *database.User
//   - namespace *database.Namespace
func (_e *MockUserStore_Expecter) Create(ctx interface{}, user interface{}, namespace interface{}) *MockUserStore_Create_Call {
	return &MockUserStore_Create_Call{Call: _e.mock.On("Create", ctx, user, namespace)}
}

func (_c *MockUserStore_Create_Call) Run(run func(ctx context.Context, user *database.User, namespace *database.Namespace)) *MockUserStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.User), args[2].(*database.Namespace))
	})
	return _c
}

func (_c *MockUserStore_Create_Call) Return(_a0 error) *MockUserStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserStore_Create_Call) RunAndReturn(run func(context.Context, *database.User, *database.Namespace) error) *MockUserStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserAndRelations provides a mock function with given fields: ctx, input, req
func (_m *MockUserStore) DeleteUserAndRelations(ctx context.Context, input database.User, req types.CloseAccountReq) error {
	ret := _m.Called(ctx, input, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserAndRelations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.User, types.CloseAccountReq) error); ok {
		r0 = rf(ctx, input, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserStore_DeleteUserAndRelations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserAndRelations'
type MockUserStore_DeleteUserAndRelations_Call struct {
	*mock.Call
}

// DeleteUserAndRelations is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.User
//   - req types.CloseAccountReq
func (_e *MockUserStore_Expecter) DeleteUserAndRelations(ctx interface{}, input interface{}, req interface{}) *MockUserStore_DeleteUserAndRelations_Call {
	return &MockUserStore_DeleteUserAndRelations_Call{Call: _e.mock.On("DeleteUserAndRelations", ctx, input, req)}
}

func (_c *MockUserStore_DeleteUserAndRelations_Call) Run(run func(ctx context.Context, input database.User, req types.CloseAccountReq)) *MockUserStore_DeleteUserAndRelations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.User), args[2].(types.CloseAccountReq))
	})
	return _c
}

func (_c *MockUserStore_DeleteUserAndRelations_Call) Return(_a0 error) *MockUserStore_DeleteUserAndRelations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserStore_DeleteUserAndRelations_Call) RunAndReturn(run func(context.Context, database.User, types.CloseAccountReq) error) *MockUserStore_DeleteUserAndRelations_Call {
	_c.Call.Return(run)
	return _c
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserStore) FindByEmail(ctx context.Context, email string) (database.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (database.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) database.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_FindByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByEmail'
type MockUserStore_FindByEmail_Call struct {
	*mock.Call
}

// FindByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserStore_Expecter) FindByEmail(ctx interface{}, email interface{}) *MockUserStore_FindByEmail_Call {
	return &MockUserStore_FindByEmail_Call{Call: _e.mock.On("FindByEmail", ctx, email)}
}

func (_c *MockUserStore_FindByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserStore_FindByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserStore_FindByEmail_Call) Return(_a0 database.User, _a1 error) *MockUserStore_FindByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserStore_FindByEmail_Call) RunAndReturn(run func(context.Context, string) (database.User, error)) *MockUserStore_FindByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindByGitAccessToken provides a mock function with given fields: ctx, token
func (_m *MockUserStore) FindByGitAccessToken(ctx context.Context, token string) (*database.User, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for FindByGitAccessToken")
	}

	var r0 *database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.User, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.User); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_FindByGitAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByGitAccessToken'
type MockUserStore_FindByGitAccessToken_Call struct {
	*mock.Call
}

// FindByGitAccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockUserStore_Expecter) FindByGitAccessToken(ctx interface{}, token interface{}) *MockUserStore_FindByGitAccessToken_Call {
	return &MockUserStore_FindByGitAccessToken_Call{Call: _e.mock.On("FindByGitAccessToken", ctx, token)}
}

func (_c *MockUserStore_FindByGitAccessToken_Call) Run(run func(ctx context.Context, token string)) *MockUserStore_FindByGitAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserStore_FindByGitAccessToken_Call) Return(_a0 *database.User, _a1 error) *MockUserStore_FindByGitAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserStore_FindByGitAccessToken_Call) RunAndReturn(run func(context.Context, string) (*database.User, error)) *MockUserStore_FindByGitAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUUID provides a mock function with given fields: ctx, uuid
func (_m *MockUserStore) FindByUUID(ctx context.Context, uuid string) (*database.User, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for FindByUUID")
	}

	var r0 *database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.User, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.User); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_FindByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUUID'
type MockUserStore_FindByUUID_Call struct {
	*mock.Call
}

// FindByUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockUserStore_Expecter) FindByUUID(ctx interface{}, uuid interface{}) *MockUserStore_FindByUUID_Call {
	return &MockUserStore_FindByUUID_Call{Call: _e.mock.On("FindByUUID", ctx, uuid)}
}

func (_c *MockUserStore_FindByUUID_Call) Run(run func(ctx context.Context, uuid string)) *MockUserStore_FindByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserStore_FindByUUID_Call) Return(_a0 *database.User, _a1 error) *MockUserStore_FindByUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserStore_FindByUUID_Call) RunAndReturn(run func(context.Context, string) (*database.User, error)) *MockUserStore_FindByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUUIDs provides a mock function with given fields: ctx, uuids
func (_m *MockUserStore) FindByUUIDs(ctx context.Context, uuids []string) ([]*database.User, error) {
	ret := _m.Called(ctx, uuids)

	if len(ret) == 0 {
		panic("no return value specified for FindByUUIDs")
	}

	var r0 []*database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*database.User, error)); ok {
		return rf(ctx, uuids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*database.User); ok {
		r0 = rf(ctx, uuids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, uuids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_FindByUUIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUUIDs'
type MockUserStore_FindByUUIDs_Call struct {
	*mock.Call
}

// FindByUUIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - uuids []string
func (_e *MockUserStore_Expecter) FindByUUIDs(ctx interface{}, uuids interface{}) *MockUserStore_FindByUUIDs_Call {
	return &MockUserStore_FindByUUIDs_Call{Call: _e.mock.On("FindByUUIDs", ctx, uuids)}
}

func (_c *MockUserStore_FindByUUIDs_Call) Run(run func(ctx context.Context, uuids []string)) *MockUserStore_FindByUUIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockUserStore_FindByUUIDs_Call) Return(_a0 []*database.User, _a1 error) *MockUserStore_FindByUUIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserStore_FindByUUIDs_Call) RunAndReturn(run func(context.Context, []string) ([]*database.User, error)) *MockUserStore_FindByUUIDs_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUsername provides a mock function with given fields: ctx, username
func (_m *MockUserStore) FindByUsername(ctx context.Context, username string) (database.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsername")
	}

	var r0 database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (database.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) database.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_FindByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUsername'
type MockUserStore_FindByUsername_Call struct {
	*mock.Call
}

// FindByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserStore_Expecter) FindByUsername(ctx interface{}, username interface{}) *MockUserStore_FindByUsername_Call {
	return &MockUserStore_FindByUsername_Call{Call: _e.mock.On("FindByUsername", ctx, username)}
}

func (_c *MockUserStore_FindByUsername_Call) Run(run func(ctx context.Context, username string)) *MockUserStore_FindByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserStore_FindByUsername_Call) Return(_a0 database.User, _a1 error) *MockUserStore_FindByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserStore_FindByUsername_Call) RunAndReturn(run func(context.Context, string) (database.User, error)) *MockUserStore_FindByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUsernameWithDeleted provides a mock function with given fields: ctx, username
func (_m *MockUserStore) FindByUsernameWithDeleted(ctx context.Context, username string) (database.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsernameWithDeleted")
	}

	var r0 database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (database.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) database.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_FindByUsernameWithDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUsernameWithDeleted'
type MockUserStore_FindByUsernameWithDeleted_Call struct {
	*mock.Call
}

// FindByUsernameWithDeleted is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserStore_Expecter) FindByUsernameWithDeleted(ctx interface{}, username interface{}) *MockUserStore_FindByUsernameWithDeleted_Call {
	return &MockUserStore_FindByUsernameWithDeleted_Call{Call: _e.mock.On("FindByUsernameWithDeleted", ctx, username)}
}

func (_c *MockUserStore_FindByUsernameWithDeleted_Call) Run(run func(ctx context.Context, username string)) *MockUserStore_FindByUsernameWithDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserStore_FindByUsernameWithDeleted_Call) Return(_a0 database.User, _a1 error) *MockUserStore_FindByUsernameWithDeleted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserStore_FindByUsernameWithDeleted_Call) RunAndReturn(run func(context.Context, string) (database.User, error)) *MockUserStore_FindByUsernameWithDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// GetEmails provides a mock function with given fields: ctx, per, page
func (_m *MockUserStore) GetEmails(ctx context.Context, per int, page int) ([]string, int, error) {
	ret := _m.Called(ctx, per, page)

	if len(ret) == 0 {
		panic("no return value specified for GetEmails")
	}

	var r0 []string
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]string, int, error)); ok {
		return rf(ctx, per, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []string); ok {
		r0 = rf(ctx, per, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, per, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, per, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserStore_GetEmails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmails'
type MockUserStore_GetEmails_Call struct {
	*mock.Call
}

// GetEmails is a helper method to define mock.On call
//   - ctx context.Context
//   - per int
//   - page int
func (_e *MockUserStore_Expecter) GetEmails(ctx interface{}, per interface{}, page interface{}) *MockUserStore_GetEmails_Call {
	return &MockUserStore_GetEmails_Call{Call: _e.mock.On("GetEmails", ctx, per, page)}
}

func (_c *MockUserStore_GetEmails_Call) Run(run func(ctx context.Context, per int, page int)) *MockUserStore_GetEmails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockUserStore_GetEmails_Call) Return(_a0 []string, _a1 int, _a2 error) *MockUserStore_GetEmails_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserStore_GetEmails_Call) RunAndReturn(run func(context.Context, int, int) ([]string, int, error)) *MockUserStore_GetEmails_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserUUIDs provides a mock function with given fields: ctx, per, page
func (_m *MockUserStore) GetUserUUIDs(ctx context.Context, per int, page int) ([]string, int, error) {
	ret := _m.Called(ctx, per, page)

	if len(ret) == 0 {
		panic("no return value specified for GetUserUUIDs")
	}

	var r0 []string
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]string, int, error)); ok {
		return rf(ctx, per, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []string); ok {
		r0 = rf(ctx, per, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, per, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, per, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserStore_GetUserUUIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserUUIDs'
type MockUserStore_GetUserUUIDs_Call struct {
	*mock.Call
}

// GetUserUUIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - per int
//   - page int
func (_e *MockUserStore_Expecter) GetUserUUIDs(ctx interface{}, per interface{}, page interface{}) *MockUserStore_GetUserUUIDs_Call {
	return &MockUserStore_GetUserUUIDs_Call{Call: _e.mock.On("GetUserUUIDs", ctx, per, page)}
}

func (_c *MockUserStore_GetUserUUIDs_Call) Run(run func(ctx context.Context, per int, page int)) *MockUserStore_GetUserUUIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockUserStore_GetUserUUIDs_Call) Return(_a0 []string, _a1 int, _a2 error) *MockUserStore_GetUserUUIDs_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserStore_GetUserUUIDs_Call) RunAndReturn(run func(context.Context, int, int) ([]string, int, error)) *MockUserStore_GetUserUUIDs_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx
func (_m *MockUserStore) Index(ctx context.Context) ([]database.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockUserStore_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserStore_Expecter) Index(ctx interface{}) *MockUserStore_Index_Call {
	return &MockUserStore_Index_Call{Call: _e.mock.On("Index", ctx)}
}

func (_c *MockUserStore_Index_Call) Run(run func(ctx context.Context)) *MockUserStore_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserStore_Index_Call) Return(_a0 []database.User, _a1 error) *MockUserStore_Index_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserStore_Index_Call) RunAndReturn(run func(context.Context) ([]database.User, error)) *MockUserStore_Index_Call {
	_c.Call.Return(run)
	return _c
}

// IndexWithDeleted provides a mock function with given fields: ctx
func (_m *MockUserStore) IndexWithDeleted(ctx context.Context) ([]database.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IndexWithDeleted")
	}

	var r0 []database.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_IndexWithDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexWithDeleted'
type MockUserStore_IndexWithDeleted_Call struct {
	*mock.Call
}

// IndexWithDeleted is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserStore_Expecter) IndexWithDeleted(ctx interface{}) *MockUserStore_IndexWithDeleted_Call {
	return &MockUserStore_IndexWithDeleted_Call{Call: _e.mock.On("IndexWithDeleted", ctx)}
}

func (_c *MockUserStore_IndexWithDeleted_Call) Run(run func(ctx context.Context)) *MockUserStore_IndexWithDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserStore_IndexWithDeleted_Call) Return(users []database.User, err error) *MockUserStore_IndexWithDeleted_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockUserStore_IndexWithDeleted_Call) RunAndReturn(run func(context.Context) ([]database.User, error)) *MockUserStore_IndexWithDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// IndexWithSearch provides a mock function with given fields: ctx, search, verifyStatus, labels, per, page
func (_m *MockUserStore) IndexWithSearch(ctx context.Context, search string, verifyStatus string, labels []string, per int, page int) ([]database.User, int, error) {
	ret := _m.Called(ctx, search, verifyStatus, labels, per, page)

	if len(ret) == 0 {
		panic("no return value specified for IndexWithSearch")
	}

	var r0 []database.User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string, int, int) ([]database.User, int, error)); ok {
		return rf(ctx, search, verifyStatus, labels, per, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string, int, int) []database.User); ok {
		r0 = rf(ctx, search, verifyStatus, labels, per, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string, int, int) int); ok {
		r1 = rf(ctx, search, verifyStatus, labels, per, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, []string, int, int) error); ok {
		r2 = rf(ctx, search, verifyStatus, labels, per, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserStore_IndexWithSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexWithSearch'
type MockUserStore_IndexWithSearch_Call struct {
	*mock.Call
}

// IndexWithSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - search string
//   - verifyStatus string
//   - labels []string
//   - per int
//   - page int
func (_e *MockUserStore_Expecter) IndexWithSearch(ctx interface{}, search interface{}, verifyStatus interface{}, labels interface{}, per interface{}, page interface{}) *MockUserStore_IndexWithSearch_Call {
	return &MockUserStore_IndexWithSearch_Call{Call: _e.mock.On("IndexWithSearch", ctx, search, verifyStatus, labels, per, page)}
}

func (_c *MockUserStore_IndexWithSearch_Call) Run(run func(ctx context.Context, search string, verifyStatus string, labels []string, per int, page int)) *MockUserStore_IndexWithSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]string), args[4].(int), args[5].(int))
	})
	return _c
}

func (_c *MockUserStore_IndexWithSearch_Call) Return(_a0 []database.User, _a1 int, _a2 error) *MockUserStore_IndexWithSearch_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserStore_IndexWithSearch_Call) RunAndReturn(run func(context.Context, string, string, []string, int, int) ([]database.User, int, error)) *MockUserStore_IndexWithSearch_Call {
	_c.Call.Return(run)
	return _c
}

// IsExist provides a mock function with given fields: ctx, username
func (_m *MockUserStore) IsExist(ctx context.Context, username string) (bool, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for IsExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_IsExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExist'
type MockUserStore_IsExist_Call struct {
	*mock.Call
}

// IsExist is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserStore_Expecter) IsExist(ctx interface{}, username interface{}) *MockUserStore_IsExist_Call {
	return &MockUserStore_IsExist_Call{Call: _e.mock.On("IsExist", ctx, username)}
}

func (_c *MockUserStore_IsExist_Call) Run(run func(ctx context.Context, username string)) *MockUserStore_IsExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserStore_IsExist_Call) Return(_a0 bool, _a1 error) *MockUserStore_IsExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserStore_IsExist_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockUserStore_IsExist_Call {
	_c.Call.Return(run)
	return _c
}

// IsExistByUUID provides a mock function with given fields: ctx, uuid
func (_m *MockUserStore) IsExistByUUID(ctx context.Context, uuid string) (bool, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for IsExistByUUID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_IsExistByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExistByUUID'
type MockUserStore_IsExistByUUID_Call struct {
	*mock.Call
}

// IsExistByUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockUserStore_Expecter) IsExistByUUID(ctx interface{}, uuid interface{}) *MockUserStore_IsExistByUUID_Call {
	return &MockUserStore_IsExistByUUID_Call{Call: _e.mock.On("IsExistByUUID", ctx, uuid)}
}

func (_c *MockUserStore_IsExistByUUID_Call) Run(run func(ctx context.Context, uuid string)) *MockUserStore_IsExistByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserStore_IsExistByUUID_Call) Return(_a0 bool, _a1 error) *MockUserStore_IsExistByUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserStore_IsExistByUUID_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockUserStore_IsExistByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// IsExistWithDeleted provides a mock function with given fields: ctx, username
func (_m *MockUserStore) IsExistWithDeleted(ctx context.Context, username string) (bool, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for IsExistWithDeleted")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserStore_IsExistWithDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExistWithDeleted'
type MockUserStore_IsExistWithDeleted_Call struct {
	*mock.Call
}

// IsExistWithDeleted is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserStore_Expecter) IsExistWithDeleted(ctx interface{}, username interface{}) *MockUserStore_IsExistWithDeleted_Call {
	return &MockUserStore_IsExistWithDeleted_Call{Call: _e.mock.On("IsExistWithDeleted", ctx, username)}
}

func (_c *MockUserStore_IsExistWithDeleted_Call) Run(run func(ctx context.Context, username string)) *MockUserStore_IsExistWithDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserStore_IsExistWithDeleted_Call) Return(_a0 bool, _a1 error) *MockUserStore_IsExistWithDeleted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserStore_IsExistWithDeleted_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MockUserStore_IsExistWithDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDeleteUserAndRelations provides a mock function with given fields: ctx, input, req
func (_m *MockUserStore) SoftDeleteUserAndRelations(ctx context.Context, input database.User, req types.CloseAccountReq) error {
	ret := _m.Called(ctx, input, req)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteUserAndRelations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.User, types.CloseAccountReq) error); ok {
		r0 = rf(ctx, input, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserStore_SoftDeleteUserAndRelations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDeleteUserAndRelations'
type MockUserStore_SoftDeleteUserAndRelations_Call struct {
	*mock.Call
}

// SoftDeleteUserAndRelations is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.User
//   - req types.CloseAccountReq
func (_e *MockUserStore_Expecter) SoftDeleteUserAndRelations(ctx interface{}, input interface{}, req interface{}) *MockUserStore_SoftDeleteUserAndRelations_Call {
	return &MockUserStore_SoftDeleteUserAndRelations_Call{Call: _e.mock.On("SoftDeleteUserAndRelations", ctx, input, req)}
}

func (_c *MockUserStore_SoftDeleteUserAndRelations_Call) Run(run func(ctx context.Context, input database.User, req types.CloseAccountReq)) *MockUserStore_SoftDeleteUserAndRelations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.User), args[2].(types.CloseAccountReq))
	})
	return _c
}

func (_c *MockUserStore_SoftDeleteUserAndRelations_Call) Return(err error) *MockUserStore_SoftDeleteUserAndRelations_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserStore_SoftDeleteUserAndRelations_Call) RunAndReturn(run func(context.Context, database.User, types.CloseAccountReq) error) *MockUserStore_SoftDeleteUserAndRelations_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, user, oldUserName
func (_m *MockUserStore) Update(ctx context.Context, user *database.User, oldUserName string) error {
	ret := _m.Called(ctx, user, oldUserName)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.User, string) error); ok {
		r0 = rf(ctx, user, oldUserName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - user *database.User
//   - oldUserName string
func (_e *MockUserStore_Expecter) Update(ctx interface{}, user interface{}, oldUserName interface{}) *MockUserStore_Update_Call {
	return &MockUserStore_Update_Call{Call: _e.mock.On("Update", ctx, user, oldUserName)}
}

func (_c *MockUserStore_Update_Call) Run(run func(ctx context.Context, user *database.User, oldUserName string)) *MockUserStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.User), args[2].(string))
	})
	return _c
}

func (_c *MockUserStore_Update_Call) Return(_a0 error) *MockUserStore_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserStore_Update_Call) RunAndReturn(run func(context.Context, *database.User, string) error) *MockUserStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLabels provides a mock function with given fields: ctx, uuid, labels
func (_m *MockUserStore) UpdateLabels(ctx context.Context, uuid string, labels []string) error {
	ret := _m.Called(ctx, uuid, labels)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLabels")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, uuid, labels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserStore_UpdateLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLabels'
type MockUserStore_UpdateLabels_Call struct {
	*mock.Call
}

// UpdateLabels is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - labels []string
func (_e *MockUserStore_Expecter) UpdateLabels(ctx interface{}, uuid interface{}, labels interface{}) *MockUserStore_UpdateLabels_Call {
	return &MockUserStore_UpdateLabels_Call{Call: _e.mock.On("UpdateLabels", ctx, uuid, labels)}
}

func (_c *MockUserStore_UpdateLabels_Call) Run(run func(ctx context.Context, uuid string, labels []string)) *MockUserStore_UpdateLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockUserStore_UpdateLabels_Call) Return(_a0 error) *MockUserStore_UpdateLabels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserStore_UpdateLabels_Call) RunAndReturn(run func(context.Context, string, []string) error) *MockUserStore_UpdateLabels_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVerifyStatus provides a mock function with given fields: ctx, uuid, status
func (_m *MockUserStore) UpdateVerifyStatus(ctx context.Context, uuid string, status types.VerifyStatus) error {
	ret := _m.Called(ctx, uuid, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVerifyStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.VerifyStatus) error); ok {
		r0 = rf(ctx, uuid, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserStore_UpdateVerifyStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVerifyStatus'
type MockUserStore_UpdateVerifyStatus_Call struct {
	*mock.Call
}

// UpdateVerifyStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - status types.VerifyStatus
func (_e *MockUserStore_Expecter) UpdateVerifyStatus(ctx interface{}, uuid interface{}, status interface{}) *MockUserStore_UpdateVerifyStatus_Call {
	return &MockUserStore_UpdateVerifyStatus_Call{Call: _e.mock.On("UpdateVerifyStatus", ctx, uuid, status)}
}

func (_c *MockUserStore_UpdateVerifyStatus_Call) Run(run func(ctx context.Context, uuid string, status types.VerifyStatus)) *MockUserStore_UpdateVerifyStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.VerifyStatus))
	})
	return _c
}

func (_c *MockUserStore_UpdateVerifyStatus_Call) Return(_a0 error) *MockUserStore_UpdateVerifyStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserStore_UpdateVerifyStatus_Call) RunAndReturn(run func(context.Context, string, types.VerifyStatus) error) *MockUserStore_UpdateVerifyStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserStore creates a new instance of MockUserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserStore {
	mock := &MockUserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.49.1. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockRepoFileStore is an autogenerated mock type for the RepoFileStore type
type MockRepoFileStore struct {
	mock.Mock
}

type MockRepoFileStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepoFileStore) EXPECT() *MockRepoFileStore_Expecter {
	return &MockRepoFileStore_Expecter{mock: &_m.Mock}
}

// BatchGet provides a mock function with given fields: ctx, repoID, lastRepoFileID, batch
func (_m *MockRepoFileStore) BatchGet(ctx context.Context, repoID int64, lastRepoFileID int64, batch int64) ([]*database.RepositoryFile, error) {
	ret := _m.Called(ctx, repoID, lastRepoFileID, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchGet")
	}

	var r0 []*database.RepositoryFile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) ([]*database.RepositoryFile, error)); ok {
		return rf(ctx, repoID, lastRepoFileID, batch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) []*database.RepositoryFile); ok {
		r0 = rf(ctx, repoID, lastRepoFileID, batch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.RepositoryFile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64) error); ok {
		r1 = rf(ctx, repoID, lastRepoFileID, batch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepoFileStore_BatchGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchGet'
type MockRepoFileStore_BatchGet_Call struct {
	*mock.Call
}

// BatchGet is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
//   - lastRepoFileID int64
//   - batch int64
func (_e *MockRepoFileStore_Expecter) BatchGet(ctx interface{}, repoID interface{}, lastRepoFileID interface{}, batch interface{}) *MockRepoFileStore_BatchGet_Call {
	return &MockRepoFileStore_BatchGet_Call{Call: _e.mock.On("BatchGet", ctx, repoID, lastRepoFileID, batch)}
}

func (_c *MockRepoFileStore_BatchGet_Call) Run(run func(ctx context.Context, repoID int64, lastRepoFileID int64, batch int64)) *MockRepoFileStore_BatchGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockRepoFileStore_BatchGet_Call) Return(_a0 []*database.RepositoryFile, _a1 error) *MockRepoFileStore_BatchGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepoFileStore_BatchGet_Call) RunAndReturn(run func(context.Context, int64, int64, int64) ([]*database.RepositoryFile, error)) *MockRepoFileStore_BatchGet_Call {
	_c.Call.Return(run)
	return _c
}

// BatchGetUnchcked provides a mock function with given fields: ctx, repoID, lastRepoFileID, batch
func (_m *MockRepoFileStore) BatchGetUnchcked(ctx context.Context, repoID int64, lastRepoFileID int64, batch int64) ([]*database.RepositoryFile, error) {
	ret := _m.Called(ctx, repoID, lastRepoFileID, batch)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetUnchcked")
	}

	var r0 []*database.RepositoryFile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) ([]*database.RepositoryFile, error)); ok {
		return rf(ctx, repoID, lastRepoFileID, batch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) []*database.RepositoryFile); ok {
		r0 = rf(ctx, repoID, lastRepoFileID, batch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*database.RepositoryFile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64) error); ok {
		r1 = rf(ctx, repoID, lastRepoFileID, batch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepoFileStore_BatchGetUnchcked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchGetUnchcked'
type MockRepoFileStore_BatchGetUnchcked_Call struct {
	*mock.Call
}

// BatchGetUnchcked is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
//   - lastRepoFileID int64
//   - batch int64
func (_e *MockRepoFileStore_Expecter) BatchGetUnchcked(ctx interface{}, repoID interface{}, lastRepoFileID interface{}, batch interface{}) *MockRepoFileStore_BatchGetUnchcked_Call {
	return &MockRepoFileStore_BatchGetUnchcked_Call{Call: _e.mock.On("BatchGetUnchcked", ctx, repoID, lastRepoFileID, batch)}
}

func (_c *MockRepoFileStore_BatchGetUnchcked_Call) Run(run func(ctx context.Context, repoID int64, lastRepoFileID int64, batch int64)) *MockRepoFileStore_BatchGetUnchcked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockRepoFileStore_BatchGetUnchcked_Call) Return(_a0 []*database.RepositoryFile, _a1 error) *MockRepoFileStore_BatchGetUnchcked_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepoFileStore_BatchGetUnchcked_Call) RunAndReturn(run func(context.Context, int64, int64, int64) ([]*database.RepositoryFile, error)) *MockRepoFileStore_BatchGetUnchcked_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, file
func (_m *MockRepoFileStore) Create(ctx context.Context, file *database.RepositoryFile) error {
	ret := _m.Called(ctx, file)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.RepositoryFile) error); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepoFileStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepoFileStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - file *database.RepositoryFile
func (_e *MockRepoFileStore_Expecter) Create(ctx interface{}, file interface{}) *MockRepoFileStore_Create_Call {
	return &MockRepoFileStore_Create_Call{Call: _e.mock.On("Create", ctx, file)}
}

func (_c *MockRepoFileStore_Create_Call) Run(run func(ctx context.Context, file *database.RepositoryFile)) *MockRepoFileStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.RepositoryFile))
	})
	return _c
}

func (_c *MockRepoFileStore_Create_Call) Return(_a0 error) *MockRepoFileStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepoFileStore_Create_Call) RunAndReturn(run func(context.Context, *database.RepositoryFile) error) *MockRepoFileStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, file
func (_m *MockRepoFileStore) Exists(ctx context.Context, file database.RepositoryFile) (bool, error) {
	ret := _m.Called(ctx, file)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.RepositoryFile) (bool, error)); ok {
		return rf(ctx, file)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.RepositoryFile) bool); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.RepositoryFile) error); ok {
		r1 = rf(ctx, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepoFileStore_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockRepoFileStore_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - file database.RepositoryFile
func (_e *MockRepoFileStore_Expecter) Exists(ctx interface{}, file interface{}) *MockRepoFileStore_Exists_Call {
	return &MockRepoFileStore_Exists_Call{Call: _e.mock.On("Exists", ctx, file)}
}

func (_c *MockRepoFileStore_Exists_Call) Run(run func(ctx context.Context, file database.RepositoryFile)) *MockRepoFileStore_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.RepositoryFile))
	})
	return _c
}

func (_c *MockRepoFileStore_Exists_Call) Return(_a0 bool, _a1 error) *MockRepoFileStore_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepoFileStore_Exists_Call) RunAndReturn(run func(context.Context, database.RepositoryFile) (bool, error)) *MockRepoFileStore_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// ExistsSensitiveCheckRecord provides a mock function with given fields: ctx, repoID, branch, status
func (_m *MockRepoFileStore) ExistsSensitiveCheckRecord(ctx context.Context, repoID int64, branch string, status types.SensitiveCheckStatus) (bool, error) {
	ret := _m.Called(ctx, repoID, branch, status)

	if len(ret) == 0 {
		panic("no return value specified for ExistsSensitiveCheckRecord")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, types.SensitiveCheckStatus) (bool, error)); ok {
		return rf(ctx, repoID, branch, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, types.SensitiveCheckStatus) bool); ok {
		r0 = rf(ctx, repoID, branch, status)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, types.SensitiveCheckStatus) error); ok {
		r1 = rf(ctx, repoID, branch, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepoFileStore_ExistsSensitiveCheckRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsSensitiveCheckRecord'
type MockRepoFileStore_ExistsSensitiveCheckRecord_Call struct {
	*mock.Call
}

// ExistsSensitiveCheckRecord is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
//   - branch string
//   - status types.SensitiveCheckStatus
func (_e *MockRepoFileStore_Expecter) ExistsSensitiveCheckRecord(ctx interface{}, repoID interface{}, branch interface{}, status interface{}) *MockRepoFileStore_ExistsSensitiveCheckRecord_Call {
	return &MockRepoFileStore_ExistsSensitiveCheckRecord_Call{Call: _e.mock.On("ExistsSensitiveCheckRecord", ctx, repoID, branch, status)}
}

func (_c *MockRepoFileStore_ExistsSensitiveCheckRecord_Call) Run(run func(ctx context.Context, repoID int64, branch string, status types.SensitiveCheckStatus)) *MockRepoFileStore_ExistsSensitiveCheckRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(types.SensitiveCheckStatus))
	})
	return _c
}

func (_c *MockRepoFileStore_ExistsSensitiveCheckRecord_Call) Return(_a0 bool, _a1 error) *MockRepoFileStore_ExistsSensitiveCheckRecord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepoFileStore_ExistsSensitiveCheckRecord_Call) RunAndReturn(run func(context.Context, int64, string, types.SensitiveCheckStatus) (bool, error)) *MockRepoFileStore_ExistsSensitiveCheckRecord_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepoFileStore creates a new instance of MockRepoFileStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepoFileStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepoFileStore {
	mock := &MockRepoFileStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

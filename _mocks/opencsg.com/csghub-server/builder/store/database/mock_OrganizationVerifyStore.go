// Code generated by mockery v2.53.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockOrganizationVerifyStore is an autogenerated mock type for the OrganizationVerifyStore type
type MockOrganizationVerifyStore struct {
	mock.Mock
}

type MockOrganizationVerifyStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrganizationVerifyStore) EXPECT() *MockOrganizationVerifyStore_Expecter {
	return &MockOrganizationVerifyStore_Expecter{mock: &_m.Mock}
}

// CreateOrganizationVerify provides a mock function with given fields: ctx, orgVerify
func (_m *MockOrganizationVerifyStore) CreateOrganizationVerify(ctx context.Context, orgVerify *database.OrganizationVerify) (*database.OrganizationVerify, error) {
	ret := _m.Called(ctx, orgVerify)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationVerify")
	}

	var r0 *database.OrganizationVerify
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.OrganizationVerify) (*database.OrganizationVerify, error)); ok {
		return rf(ctx, orgVerify)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *database.OrganizationVerify) *database.OrganizationVerify); ok {
		r0 = rf(ctx, orgVerify)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.OrganizationVerify)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *database.OrganizationVerify) error); ok {
		r1 = rf(ctx, orgVerify)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrganizationVerifyStore_CreateOrganizationVerify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationVerify'
type MockOrganizationVerifyStore_CreateOrganizationVerify_Call struct {
	*mock.Call
}

// CreateOrganizationVerify is a helper method to define mock.On call
//   - ctx context.Context
//   - orgVerify *database.OrganizationVerify
func (_e *MockOrganizationVerifyStore_Expecter) CreateOrganizationVerify(ctx interface{}, orgVerify interface{}) *MockOrganizationVerifyStore_CreateOrganizationVerify_Call {
	return &MockOrganizationVerifyStore_CreateOrganizationVerify_Call{Call: _e.mock.On("CreateOrganizationVerify", ctx, orgVerify)}
}

func (_c *MockOrganizationVerifyStore_CreateOrganizationVerify_Call) Run(run func(ctx context.Context, orgVerify *database.OrganizationVerify)) *MockOrganizationVerifyStore_CreateOrganizationVerify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.OrganizationVerify))
	})
	return _c
}

func (_c *MockOrganizationVerifyStore_CreateOrganizationVerify_Call) Return(_a0 *database.OrganizationVerify, _a1 error) *MockOrganizationVerifyStore_CreateOrganizationVerify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrganizationVerifyStore_CreateOrganizationVerify_Call) RunAndReturn(run func(context.Context, *database.OrganizationVerify) (*database.OrganizationVerify, error)) *MockOrganizationVerifyStore_CreateOrganizationVerify_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationVerify provides a mock function with given fields: ctx, path
func (_m *MockOrganizationVerifyStore) GetOrganizationVerify(ctx context.Context, path string) (*database.OrganizationVerify, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationVerify")
	}

	var r0 *database.OrganizationVerify
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.OrganizationVerify, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.OrganizationVerify); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.OrganizationVerify)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrganizationVerifyStore_GetOrganizationVerify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationVerify'
type MockOrganizationVerifyStore_GetOrganizationVerify_Call struct {
	*mock.Call
}

// GetOrganizationVerify is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockOrganizationVerifyStore_Expecter) GetOrganizationVerify(ctx interface{}, path interface{}) *MockOrganizationVerifyStore_GetOrganizationVerify_Call {
	return &MockOrganizationVerifyStore_GetOrganizationVerify_Call{Call: _e.mock.On("GetOrganizationVerify", ctx, path)}
}

func (_c *MockOrganizationVerifyStore_GetOrganizationVerify_Call) Run(run func(ctx context.Context, path string)) *MockOrganizationVerifyStore_GetOrganizationVerify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOrganizationVerifyStore_GetOrganizationVerify_Call) Return(_a0 *database.OrganizationVerify, _a1 error) *MockOrganizationVerifyStore_GetOrganizationVerify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrganizationVerifyStore_GetOrganizationVerify_Call) RunAndReturn(run func(context.Context, string) (*database.OrganizationVerify, error)) *MockOrganizationVerifyStore_GetOrganizationVerify_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationVerify provides a mock function with given fields: ctx, id, status, reason
func (_m *MockOrganizationVerifyStore) UpdateOrganizationVerify(ctx context.Context, id int64, status types.VerifyStatus, reason string) (*database.OrganizationVerify, error) {
	ret := _m.Called(ctx, id, status, reason)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationVerify")
	}

	var r0 *database.OrganizationVerify
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, types.VerifyStatus, string) (*database.OrganizationVerify, error)); ok {
		return rf(ctx, id, status, reason)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, types.VerifyStatus, string) *database.OrganizationVerify); ok {
		r0 = rf(ctx, id, status, reason)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.OrganizationVerify)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, types.VerifyStatus, string) error); ok {
		r1 = rf(ctx, id, status, reason)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrganizationVerifyStore_UpdateOrganizationVerify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationVerify'
type MockOrganizationVerifyStore_UpdateOrganizationVerify_Call struct {
	*mock.Call
}

// UpdateOrganizationVerify is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - status types.VerifyStatus
//   - reason string
func (_e *MockOrganizationVerifyStore_Expecter) UpdateOrganizationVerify(ctx interface{}, id interface{}, status interface{}, reason interface{}) *MockOrganizationVerifyStore_UpdateOrganizationVerify_Call {
	return &MockOrganizationVerifyStore_UpdateOrganizationVerify_Call{Call: _e.mock.On("UpdateOrganizationVerify", ctx, id, status, reason)}
}

func (_c *MockOrganizationVerifyStore_UpdateOrganizationVerify_Call) Run(run func(ctx context.Context, id int64, status types.VerifyStatus, reason string)) *MockOrganizationVerifyStore_UpdateOrganizationVerify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(types.VerifyStatus), args[3].(string))
	})
	return _c
}

func (_c *MockOrganizationVerifyStore_UpdateOrganizationVerify_Call) Return(_a0 *database.OrganizationVerify, _a1 error) *MockOrganizationVerifyStore_UpdateOrganizationVerify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrganizationVerifyStore_UpdateOrganizationVerify_Call) RunAndReturn(run func(context.Context, int64, types.VerifyStatus, string) (*database.OrganizationVerify, error)) *MockOrganizationVerifyStore_UpdateOrganizationVerify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrganizationVerifyStore creates a new instance of MockOrganizationVerifyStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrganizationVerifyStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrganizationVerifyStore {
	mock := &MockOrganizationVerifyStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

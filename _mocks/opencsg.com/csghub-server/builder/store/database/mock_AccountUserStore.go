// Code generated by mockery v2.49.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockAccountUserStore is an autogenerated mock type for the AccountUserStore type
type MockAccountUserStore struct {
	mock.Mock
}

type MockAccountUserStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountUserStore) EXPECT() *MockAccountUserStore_Expecter {
	return &MockAccountUserStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, input
func (_m *MockAccountUserStore) Create(ctx context.Context, input database.AccountUser) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.AccountUser) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountUserStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountUserStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.AccountUser
func (_e *MockAccountUserStore_Expecter) Create(ctx interface{}, input interface{}) *MockAccountUserStore_Create_Call {
	return &MockAccountUserStore_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *MockAccountUserStore_Create_Call) Run(run func(ctx context.Context, input database.AccountUser)) *MockAccountUserStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.AccountUser))
	})
	return _c
}

func (_c *MockAccountUserStore_Create_Call) Return(_a0 error) *MockAccountUserStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountUserStore_Create_Call) RunAndReturn(run func(context.Context, database.AccountUser) error) *MockAccountUserStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByID provides a mock function with given fields: ctx, userID
func (_m *MockAccountUserStore) FindUserByID(ctx context.Context, userID string) (*database.AccountUser, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 *database.AccountUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.AccountUser, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.AccountUser); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountUserStore_FindUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByID'
type MockAccountUserStore_FindUserByID_Call struct {
	*mock.Call
}

// FindUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockAccountUserStore_Expecter) FindUserByID(ctx interface{}, userID interface{}) *MockAccountUserStore_FindUserByID_Call {
	return &MockAccountUserStore_FindUserByID_Call{Call: _e.mock.On("FindUserByID", ctx, userID)}
}

func (_c *MockAccountUserStore_FindUserByID_Call) Run(run func(ctx context.Context, userID string)) *MockAccountUserStore_FindUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountUserStore_FindUserByID_Call) Return(_a0 *database.AccountUser, _a1 error) *MockAccountUserStore_FindUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountUserStore_FindUserByID_Call) RunAndReturn(run func(context.Context, string) (*database.AccountUser, error)) *MockAccountUserStore_FindUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, per, page
func (_m *MockAccountUserStore) List(ctx context.Context, per int, page int) ([]database.AccountUser, int, error) {
	ret := _m.Called(ctx, per, page)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []database.AccountUser
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]database.AccountUser, int, error)); ok {
		return rf(ctx, per, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []database.AccountUser); ok {
		r0 = rf(ctx, per, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.AccountUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, per, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, per, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAccountUserStore_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAccountUserStore_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - per int
//   - page int
func (_e *MockAccountUserStore_Expecter) List(ctx interface{}, per interface{}, page interface{}) *MockAccountUserStore_List_Call {
	return &MockAccountUserStore_List_Call{Call: _e.mock.On("List", ctx, per, page)}
}

func (_c *MockAccountUserStore_List_Call) Run(run func(ctx context.Context, per int, page int)) *MockAccountUserStore_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockAccountUserStore_List_Call) Return(_a0 []database.AccountUser, _a1 int, _a2 error) *MockAccountUserStore_List_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAccountUserStore_List_Call) RunAndReturn(run func(context.Context, int, int) ([]database.AccountUser, int, error)) *MockAccountUserStore_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllByUserUUID provides a mock function with given fields: ctx, userUUID
func (_m *MockAccountUserStore) ListAllByUserUUID(ctx context.Context, userUUID string) ([]database.AccountUser, error) {
	ret := _m.Called(ctx, userUUID)

	if len(ret) == 0 {
		panic("no return value specified for ListAllByUserUUID")
	}

	var r0 []database.AccountUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]database.AccountUser, error)); ok {
		return rf(ctx, userUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []database.AccountUser); ok {
		r0 = rf(ctx, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.AccountUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountUserStore_ListAllByUserUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllByUserUUID'
type MockAccountUserStore_ListAllByUserUUID_Call struct {
	*mock.Call
}

// ListAllByUserUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
func (_e *MockAccountUserStore_Expecter) ListAllByUserUUID(ctx interface{}, userUUID interface{}) *MockAccountUserStore_ListAllByUserUUID_Call {
	return &MockAccountUserStore_ListAllByUserUUID_Call{Call: _e.mock.On("ListAllByUserUUID", ctx, userUUID)}
}

func (_c *MockAccountUserStore_ListAllByUserUUID_Call) Run(run func(ctx context.Context, userUUID string)) *MockAccountUserStore_ListAllByUserUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountUserStore_ListAllByUserUUID_Call) Return(_a0 []database.AccountUser, _a1 error) *MockAccountUserStore_ListAllByUserUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountUserStore_ListAllByUserUUID_Call) RunAndReturn(run func(context.Context, string) ([]database.AccountUser, error)) *MockAccountUserStore_ListAllByUserUUID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountUserStore creates a new instance of MockAccountUserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountUserStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountUserStore {
	mock := &MockAccountUserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

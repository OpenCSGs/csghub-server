// Code generated by mockery v2.49.0. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockAccountPriceStore is an autogenerated mock type for the AccountPriceStore type
type MockAccountPriceStore struct {
	mock.Mock
}

type MockAccountPriceStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountPriceStore) EXPECT() *MockAccountPriceStore_Expecter {
	return &MockAccountPriceStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, input
func (_m *MockAccountPriceStore) Create(ctx context.Context, input database.AccountPrice) (*database.AccountPrice, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.AccountPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.AccountPrice) (*database.AccountPrice, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.AccountPrice) *database.AccountPrice); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountPrice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.AccountPrice) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountPriceStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountPriceStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.AccountPrice
func (_e *MockAccountPriceStore_Expecter) Create(ctx interface{}, input interface{}) *MockAccountPriceStore_Create_Call {
	return &MockAccountPriceStore_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *MockAccountPriceStore_Create_Call) Run(run func(ctx context.Context, input database.AccountPrice)) *MockAccountPriceStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.AccountPrice))
	})
	return _c
}

func (_c *MockAccountPriceStore_Create_Call) Return(_a0 *database.AccountPrice, _a1 error) *MockAccountPriceStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountPriceStore_Create_Call) RunAndReturn(run func(context.Context, database.AccountPrice) (*database.AccountPrice, error)) *MockAccountPriceStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, input
func (_m *MockAccountPriceStore) Delete(ctx context.Context, input database.AccountPrice) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.AccountPrice) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountPriceStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccountPriceStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.AccountPrice
func (_e *MockAccountPriceStore_Expecter) Delete(ctx interface{}, input interface{}) *MockAccountPriceStore_Delete_Call {
	return &MockAccountPriceStore_Delete_Call{Call: _e.mock.On("Delete", ctx, input)}
}

func (_c *MockAccountPriceStore_Delete_Call) Run(run func(ctx context.Context, input database.AccountPrice)) *MockAccountPriceStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.AccountPrice))
	})
	return _c
}

func (_c *MockAccountPriceStore_Delete_Call) Return(_a0 error) *MockAccountPriceStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountPriceStore_Delete_Call) RunAndReturn(run func(context.Context, database.AccountPrice) error) *MockAccountPriceStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockAccountPriceStore) GetByID(ctx context.Context, id int64) (*database.AccountPrice, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *database.AccountPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.AccountPrice, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.AccountPrice); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountPrice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountPriceStore_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockAccountPriceStore_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockAccountPriceStore_Expecter) GetByID(ctx interface{}, id interface{}) *MockAccountPriceStore_GetByID_Call {
	return &MockAccountPriceStore_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockAccountPriceStore_GetByID_Call) Run(run func(ctx context.Context, id int64)) *MockAccountPriceStore_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAccountPriceStore_GetByID_Call) Return(_a0 *database.AccountPrice, _a1 error) *MockAccountPriceStore_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountPriceStore_GetByID_Call) RunAndReturn(run func(context.Context, int64) (*database.AccountPrice, error)) *MockAccountPriceStore_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestByTime provides a mock function with given fields: ctx, req
func (_m *MockAccountPriceStore) GetLatestByTime(ctx context.Context, req types.AcctPriceQueryReq) (*database.AccountPrice, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestByTime")
	}

	var r0 *database.AccountPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctPriceQueryReq) (*database.AccountPrice, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctPriceQueryReq) *database.AccountPrice); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountPrice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AcctPriceQueryReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountPriceStore_GetLatestByTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestByTime'
type MockAccountPriceStore_GetLatestByTime_Call struct {
	*mock.Call
}

// GetLatestByTime is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.AcctPriceQueryReq
func (_e *MockAccountPriceStore_Expecter) GetLatestByTime(ctx interface{}, req interface{}) *MockAccountPriceStore_GetLatestByTime_Call {
	return &MockAccountPriceStore_GetLatestByTime_Call{Call: _e.mock.On("GetLatestByTime", ctx, req)}
}

func (_c *MockAccountPriceStore_GetLatestByTime_Call) Run(run func(ctx context.Context, req types.AcctPriceQueryReq)) *MockAccountPriceStore_GetLatestByTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AcctPriceQueryReq))
	})
	return _c
}

func (_c *MockAccountPriceStore_GetLatestByTime_Call) Return(_a0 *database.AccountPrice, _a1 error) *MockAccountPriceStore_GetLatestByTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountPriceStore_GetLatestByTime_Call) RunAndReturn(run func(context.Context, types.AcctPriceQueryReq) (*database.AccountPrice, error)) *MockAccountPriceStore_GetLatestByTime_Call {
	_c.Call.Return(run)
	return _c
}

// ListBySkuType provides a mock function with given fields: ctx, req
func (_m *MockAccountPriceStore) ListBySkuType(ctx context.Context, req types.AcctPriceListReq) ([]database.AccountPrice, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListBySkuType")
	}

	var r0 []database.AccountPrice
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctPriceListReq) ([]database.AccountPrice, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctPriceListReq) []database.AccountPrice); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.AccountPrice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AcctPriceListReq) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.AcctPriceListReq) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAccountPriceStore_ListBySkuType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBySkuType'
type MockAccountPriceStore_ListBySkuType_Call struct {
	*mock.Call
}

// ListBySkuType is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.AcctPriceListReq
func (_e *MockAccountPriceStore_Expecter) ListBySkuType(ctx interface{}, req interface{}) *MockAccountPriceStore_ListBySkuType_Call {
	return &MockAccountPriceStore_ListBySkuType_Call{Call: _e.mock.On("ListBySkuType", ctx, req)}
}

func (_c *MockAccountPriceStore_ListBySkuType_Call) Run(run func(ctx context.Context, req types.AcctPriceListReq)) *MockAccountPriceStore_ListBySkuType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AcctPriceListReq))
	})
	return _c
}

func (_c *MockAccountPriceStore_ListBySkuType_Call) Return(_a0 []database.AccountPrice, _a1 int, _a2 error) *MockAccountPriceStore_ListBySkuType_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAccountPriceStore_ListBySkuType_Call) RunAndReturn(run func(context.Context, types.AcctPriceListReq) ([]database.AccountPrice, int, error)) *MockAccountPriceStore_ListBySkuType_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, input
func (_m *MockAccountPriceStore) Update(ctx context.Context, input database.AccountPrice) (*database.AccountPrice, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *database.AccountPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.AccountPrice) (*database.AccountPrice, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.AccountPrice) *database.AccountPrice); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountPrice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.AccountPrice) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountPriceStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccountPriceStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - input database.AccountPrice
func (_e *MockAccountPriceStore_Expecter) Update(ctx interface{}, input interface{}) *MockAccountPriceStore_Update_Call {
	return &MockAccountPriceStore_Update_Call{Call: _e.mock.On("Update", ctx, input)}
}

func (_c *MockAccountPriceStore_Update_Call) Run(run func(ctx context.Context, input database.AccountPrice)) *MockAccountPriceStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.AccountPrice))
	})
	return _c
}

func (_c *MockAccountPriceStore_Update_Call) Return(_a0 *database.AccountPrice, _a1 error) *MockAccountPriceStore_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountPriceStore_Update_Call) RunAndReturn(run func(context.Context, database.AccountPrice) (*database.AccountPrice, error)) *MockAccountPriceStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountPriceStore creates a new instance of MockAccountPriceStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountPriceStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountPriceStore {
	mock := &MockAccountPriceStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

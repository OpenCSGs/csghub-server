// Code generated by mockery v2.49.1. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockMirrorStore is an autogenerated mock type for the MirrorStore type
type MockMirrorStore struct {
	mock.Mock
}

type MockMirrorStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMirrorStore) EXPECT() *MockMirrorStore_Expecter {
	return &MockMirrorStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, mirror
func (_m *MockMirrorStore) Create(ctx context.Context, mirror *database.Mirror) (*database.Mirror, error) {
	ret := _m.Called(ctx, mirror)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.Mirror
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.Mirror) (*database.Mirror, error)); ok {
		return rf(ctx, mirror)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *database.Mirror) *database.Mirror); ok {
		r0 = rf(ctx, mirror)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Mirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *database.Mirror) error); ok {
		r1 = rf(ctx, mirror)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMirrorStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - mirror *database.Mirror
func (_e *MockMirrorStore_Expecter) Create(ctx interface{}, mirror interface{}) *MockMirrorStore_Create_Call {
	return &MockMirrorStore_Create_Call{Call: _e.mock.On("Create", ctx, mirror)}
}

func (_c *MockMirrorStore_Create_Call) Run(run func(ctx context.Context, mirror *database.Mirror)) *MockMirrorStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.Mirror))
	})
	return _c
}

func (_c *MockMirrorStore_Create_Call) Return(_a0 *database.Mirror, _a1 error) *MockMirrorStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorStore_Create_Call) RunAndReturn(run func(context.Context, *database.Mirror) (*database.Mirror, error)) *MockMirrorStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, mirror
func (_m *MockMirrorStore) Delete(ctx context.Context, mirror *database.Mirror) error {
	ret := _m.Called(ctx, mirror)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.Mirror) error); ok {
		r0 = rf(ctx, mirror)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMirrorStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMirrorStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - mirror *database.Mirror
func (_e *MockMirrorStore_Expecter) Delete(ctx interface{}, mirror interface{}) *MockMirrorStore_Delete_Call {
	return &MockMirrorStore_Delete_Call{Call: _e.mock.On("Delete", ctx, mirror)}
}

func (_c *MockMirrorStore_Delete_Call) Run(run func(ctx context.Context, mirror *database.Mirror)) *MockMirrorStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.Mirror))
	})
	return _c
}

func (_c *MockMirrorStore_Delete_Call) Return(err error) *MockMirrorStore_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMirrorStore_Delete_Call) RunAndReturn(run func(context.Context, *database.Mirror) error) *MockMirrorStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *MockMirrorStore) FindByID(ctx context.Context, ID int64) (*database.Mirror, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *database.Mirror
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.Mirror, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.Mirror); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Mirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorStore_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockMirrorStore_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID int64
func (_e *MockMirrorStore_Expecter) FindByID(ctx interface{}, ID interface{}) *MockMirrorStore_FindByID_Call {
	return &MockMirrorStore_FindByID_Call{Call: _e.mock.On("FindByID", ctx, ID)}
}

func (_c *MockMirrorStore_FindByID_Call) Run(run func(ctx context.Context, ID int64)) *MockMirrorStore_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockMirrorStore_FindByID_Call) Return(_a0 *database.Mirror, _a1 error) *MockMirrorStore_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorStore_FindByID_Call) RunAndReturn(run func(context.Context, int64) (*database.Mirror, error)) *MockMirrorStore_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByRepoID provides a mock function with given fields: ctx, repoID
func (_m *MockMirrorStore) FindByRepoID(ctx context.Context, repoID int64) (*database.Mirror, error) {
	ret := _m.Called(ctx, repoID)

	if len(ret) == 0 {
		panic("no return value specified for FindByRepoID")
	}

	var r0 *database.Mirror
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.Mirror, error)); ok {
		return rf(ctx, repoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.Mirror); ok {
		r0 = rf(ctx, repoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Mirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, repoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorStore_FindByRepoID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByRepoID'
type MockMirrorStore_FindByRepoID_Call struct {
	*mock.Call
}

// FindByRepoID is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
func (_e *MockMirrorStore_Expecter) FindByRepoID(ctx interface{}, repoID interface{}) *MockMirrorStore_FindByRepoID_Call {
	return &MockMirrorStore_FindByRepoID_Call{Call: _e.mock.On("FindByRepoID", ctx, repoID)}
}

func (_c *MockMirrorStore_FindByRepoID_Call) Run(run func(ctx context.Context, repoID int64)) *MockMirrorStore_FindByRepoID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockMirrorStore_FindByRepoID_Call) Return(_a0 *database.Mirror, _a1 error) *MockMirrorStore_FindByRepoID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorStore_FindByRepoID_Call) RunAndReturn(run func(context.Context, int64) (*database.Mirror, error)) *MockMirrorStore_FindByRepoID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByRepoPath provides a mock function with given fields: ctx, repoType, namespace, name
func (_m *MockMirrorStore) FindByRepoPath(ctx context.Context, repoType types.RepositoryType, namespace string, name string) (*database.Mirror, error) {
	ret := _m.Called(ctx, repoType, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for FindByRepoPath")
	}

	var r0 *database.Mirror
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RepositoryType, string, string) (*database.Mirror, error)); ok {
		return rf(ctx, repoType, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.RepositoryType, string, string) *database.Mirror); ok {
		r0 = rf(ctx, repoType, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Mirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.RepositoryType, string, string) error); ok {
		r1 = rf(ctx, repoType, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorStore_FindByRepoPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByRepoPath'
type MockMirrorStore_FindByRepoPath_Call struct {
	*mock.Call
}

// FindByRepoPath is a helper method to define mock.On call
//   - ctx context.Context
//   - repoType types.RepositoryType
//   - namespace string
//   - name string
func (_e *MockMirrorStore_Expecter) FindByRepoPath(ctx interface{}, repoType interface{}, namespace interface{}, name interface{}) *MockMirrorStore_FindByRepoPath_Call {
	return &MockMirrorStore_FindByRepoPath_Call{Call: _e.mock.On("FindByRepoPath", ctx, repoType, namespace, name)}
}

func (_c *MockMirrorStore_FindByRepoPath_Call) Run(run func(ctx context.Context, repoType types.RepositoryType, namespace string, name string)) *MockMirrorStore_FindByRepoPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RepositoryType), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockMirrorStore_FindByRepoPath_Call) Return(_a0 *database.Mirror, _a1 error) *MockMirrorStore_FindByRepoPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorStore_FindByRepoPath_Call) RunAndReturn(run func(context.Context, types.RepositoryType, string, string) (*database.Mirror, error)) *MockMirrorStore_FindByRepoPath_Call {
	_c.Call.Return(run)
	return _c
}

// FindWithMapping provides a mock function with given fields: ctx, repoType, namespace, name, mapping
func (_m *MockMirrorStore) FindWithMapping(ctx context.Context, repoType types.RepositoryType, namespace string, name string, mapping types.Mapping) (*database.Mirror, error) {
	ret := _m.Called(ctx, repoType, namespace, name, mapping)

	if len(ret) == 0 {
		panic("no return value specified for FindWithMapping")
	}

	var r0 *database.Mirror
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RepositoryType, string, string, types.Mapping) (*database.Mirror, error)); ok {
		return rf(ctx, repoType, namespace, name, mapping)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.RepositoryType, string, string, types.Mapping) *database.Mirror); ok {
		r0 = rf(ctx, repoType, namespace, name, mapping)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Mirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.RepositoryType, string, string, types.Mapping) error); ok {
		r1 = rf(ctx, repoType, namespace, name, mapping)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorStore_FindWithMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindWithMapping'
type MockMirrorStore_FindWithMapping_Call struct {
	*mock.Call
}

// FindWithMapping is a helper method to define mock.On call
//   - ctx context.Context
//   - repoType types.RepositoryType
//   - namespace string
//   - name string
//   - mapping types.Mapping
func (_e *MockMirrorStore_Expecter) FindWithMapping(ctx interface{}, repoType interface{}, namespace interface{}, name interface{}, mapping interface{}) *MockMirrorStore_FindWithMapping_Call {
	return &MockMirrorStore_FindWithMapping_Call{Call: _e.mock.On("FindWithMapping", ctx, repoType, namespace, name, mapping)}
}

func (_c *MockMirrorStore_FindWithMapping_Call) Run(run func(ctx context.Context, repoType types.RepositoryType, namespace string, name string, mapping types.Mapping)) *MockMirrorStore_FindWithMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RepositoryType), args[2].(string), args[3].(string), args[4].(types.Mapping))
	})
	return _c
}

func (_c *MockMirrorStore_FindWithMapping_Call) Return(_a0 *database.Mirror, _a1 error) *MockMirrorStore_FindWithMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorStore_FindWithMapping_Call) RunAndReturn(run func(context.Context, types.RepositoryType, string, string, types.Mapping) (*database.Mirror, error)) *MockMirrorStore_FindWithMapping_Call {
	_c.Call.Return(run)
	return _c
}

// Finished provides a mock function with given fields: ctx
func (_m *MockMirrorStore) Finished(ctx context.Context) ([]database.Mirror, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Finished")
	}

	var r0 []database.Mirror
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.Mirror, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.Mirror); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Mirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorStore_Finished_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finished'
type MockMirrorStore_Finished_Call struct {
	*mock.Call
}

// Finished is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMirrorStore_Expecter) Finished(ctx interface{}) *MockMirrorStore_Finished_Call {
	return &MockMirrorStore_Finished_Call{Call: _e.mock.On("Finished", ctx)}
}

func (_c *MockMirrorStore_Finished_Call) Run(run func(ctx context.Context)) *MockMirrorStore_Finished_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMirrorStore_Finished_Call) Return(_a0 []database.Mirror, _a1 error) *MockMirrorStore_Finished_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorStore_Finished_Call) RunAndReturn(run func(context.Context) ([]database.Mirror, error)) *MockMirrorStore_Finished_Call {
	_c.Call.Return(run)
	return _c
}

// IndexWithPagination provides a mock function with given fields: ctx, per, page, search
func (_m *MockMirrorStore) IndexWithPagination(ctx context.Context, per int, page int, search string) ([]database.Mirror, int, error) {
	ret := _m.Called(ctx, per, page, search)

	if len(ret) == 0 {
		panic("no return value specified for IndexWithPagination")
	}

	var r0 []database.Mirror
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) ([]database.Mirror, int, error)); ok {
		return rf(ctx, per, page, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) []database.Mirror); ok {
		r0 = rf(ctx, per, page, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Mirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, string) int); ok {
		r1 = rf(ctx, per, page, search)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, string) error); ok {
		r2 = rf(ctx, per, page, search)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMirrorStore_IndexWithPagination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexWithPagination'
type MockMirrorStore_IndexWithPagination_Call struct {
	*mock.Call
}

// IndexWithPagination is a helper method to define mock.On call
//   - ctx context.Context
//   - per int
//   - page int
//   - search string
func (_e *MockMirrorStore_Expecter) IndexWithPagination(ctx interface{}, per interface{}, page interface{}, search interface{}) *MockMirrorStore_IndexWithPagination_Call {
	return &MockMirrorStore_IndexWithPagination_Call{Call: _e.mock.On("IndexWithPagination", ctx, per, page, search)}
}

func (_c *MockMirrorStore_IndexWithPagination_Call) Run(run func(ctx context.Context, per int, page int, search string)) *MockMirrorStore_IndexWithPagination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(string))
	})
	return _c
}

func (_c *MockMirrorStore_IndexWithPagination_Call) Return(mirrors []database.Mirror, count int, err error) *MockMirrorStore_IndexWithPagination_Call {
	_c.Call.Return(mirrors, count, err)
	return _c
}

func (_c *MockMirrorStore_IndexWithPagination_Call) RunAndReturn(run func(context.Context, int, int, string) ([]database.Mirror, int, error)) *MockMirrorStore_IndexWithPagination_Call {
	_c.Call.Return(run)
	return _c
}

// IsExist provides a mock function with given fields: ctx, repoID
func (_m *MockMirrorStore) IsExist(ctx context.Context, repoID int64) (bool, error) {
	ret := _m.Called(ctx, repoID)

	if len(ret) == 0 {
		panic("no return value specified for IsExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, error)); ok {
		return rf(ctx, repoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, repoID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, repoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorStore_IsExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExist'
type MockMirrorStore_IsExist_Call struct {
	*mock.Call
}

// IsExist is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
func (_e *MockMirrorStore_Expecter) IsExist(ctx interface{}, repoID interface{}) *MockMirrorStore_IsExist_Call {
	return &MockMirrorStore_IsExist_Call{Call: _e.mock.On("IsExist", ctx, repoID)}
}

func (_c *MockMirrorStore_IsExist_Call) Run(run func(ctx context.Context, repoID int64)) *MockMirrorStore_IsExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockMirrorStore_IsExist_Call) Return(exists bool, err error) *MockMirrorStore_IsExist_Call {
	_c.Call.Return(exists, err)
	return _c
}

func (_c *MockMirrorStore_IsExist_Call) RunAndReturn(run func(context.Context, int64) (bool, error)) *MockMirrorStore_IsExist_Call {
	_c.Call.Return(run)
	return _c
}

// IsRepoExist provides a mock function with given fields: ctx, repoType, namespace, name
func (_m *MockMirrorStore) IsRepoExist(ctx context.Context, repoType types.RepositoryType, namespace string, name string) (bool, error) {
	ret := _m.Called(ctx, repoType, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for IsRepoExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RepositoryType, string, string) (bool, error)); ok {
		return rf(ctx, repoType, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.RepositoryType, string, string) bool); ok {
		r0 = rf(ctx, repoType, namespace, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.RepositoryType, string, string) error); ok {
		r1 = rf(ctx, repoType, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorStore_IsRepoExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRepoExist'
type MockMirrorStore_IsRepoExist_Call struct {
	*mock.Call
}

// IsRepoExist is a helper method to define mock.On call
//   - ctx context.Context
//   - repoType types.RepositoryType
//   - namespace string
//   - name string
func (_e *MockMirrorStore_Expecter) IsRepoExist(ctx interface{}, repoType interface{}, namespace interface{}, name interface{}) *MockMirrorStore_IsRepoExist_Call {
	return &MockMirrorStore_IsRepoExist_Call{Call: _e.mock.On("IsRepoExist", ctx, repoType, namespace, name)}
}

func (_c *MockMirrorStore_IsRepoExist_Call) Run(run func(ctx context.Context, repoType types.RepositoryType, namespace string, name string)) *MockMirrorStore_IsRepoExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RepositoryType), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockMirrorStore_IsRepoExist_Call) Return(exists bool, err error) *MockMirrorStore_IsRepoExist_Call {
	_c.Call.Return(exists, err)
	return _c
}

func (_c *MockMirrorStore_IsRepoExist_Call) RunAndReturn(run func(context.Context, types.RepositoryType, string, string) (bool, error)) *MockMirrorStore_IsRepoExist_Call {
	_c.Call.Return(run)
	return _c
}

// NoPushMirror provides a mock function with given fields: ctx
func (_m *MockMirrorStore) NoPushMirror(ctx context.Context) ([]database.Mirror, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for NoPushMirror")
	}

	var r0 []database.Mirror
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.Mirror, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.Mirror); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Mirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorStore_NoPushMirror_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NoPushMirror'
type MockMirrorStore_NoPushMirror_Call struct {
	*mock.Call
}

// NoPushMirror is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMirrorStore_Expecter) NoPushMirror(ctx interface{}) *MockMirrorStore_NoPushMirror_Call {
	return &MockMirrorStore_NoPushMirror_Call{Call: _e.mock.On("NoPushMirror", ctx)}
}

func (_c *MockMirrorStore_NoPushMirror_Call) Run(run func(ctx context.Context)) *MockMirrorStore_NoPushMirror_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMirrorStore_NoPushMirror_Call) Return(_a0 []database.Mirror, _a1 error) *MockMirrorStore_NoPushMirror_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorStore_NoPushMirror_Call) RunAndReturn(run func(context.Context) ([]database.Mirror, error)) *MockMirrorStore_NoPushMirror_Call {
	_c.Call.Return(run)
	return _c
}

// PushedMirror provides a mock function with given fields: ctx
func (_m *MockMirrorStore) PushedMirror(ctx context.Context) ([]database.Mirror, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PushedMirror")
	}

	var r0 []database.Mirror
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.Mirror, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.Mirror); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Mirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorStore_PushedMirror_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushedMirror'
type MockMirrorStore_PushedMirror_Call struct {
	*mock.Call
}

// PushedMirror is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMirrorStore_Expecter) PushedMirror(ctx interface{}) *MockMirrorStore_PushedMirror_Call {
	return &MockMirrorStore_PushedMirror_Call{Call: _e.mock.On("PushedMirror", ctx)}
}

func (_c *MockMirrorStore_PushedMirror_Call) Run(run func(ctx context.Context)) *MockMirrorStore_PushedMirror_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMirrorStore_PushedMirror_Call) Return(_a0 []database.Mirror, _a1 error) *MockMirrorStore_PushedMirror_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorStore_PushedMirror_Call) RunAndReturn(run func(context.Context) ([]database.Mirror, error)) *MockMirrorStore_PushedMirror_Call {
	_c.Call.Return(run)
	return _c
}

// StatusCount provides a mock function with given fields: ctx
func (_m *MockMirrorStore) StatusCount(ctx context.Context) ([]database.MirrorStatusCount, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StatusCount")
	}

	var r0 []database.MirrorStatusCount
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.MirrorStatusCount, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.MirrorStatusCount); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.MirrorStatusCount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorStore_StatusCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatusCount'
type MockMirrorStore_StatusCount_Call struct {
	*mock.Call
}

// StatusCount is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMirrorStore_Expecter) StatusCount(ctx interface{}) *MockMirrorStore_StatusCount_Call {
	return &MockMirrorStore_StatusCount_Call{Call: _e.mock.On("StatusCount", ctx)}
}

func (_c *MockMirrorStore_StatusCount_Call) Run(run func(ctx context.Context)) *MockMirrorStore_StatusCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMirrorStore_StatusCount_Call) Return(_a0 []database.MirrorStatusCount, _a1 error) *MockMirrorStore_StatusCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorStore_StatusCount_Call) RunAndReturn(run func(context.Context) ([]database.MirrorStatusCount, error)) *MockMirrorStore_StatusCount_Call {
	_c.Call.Return(run)
	return _c
}

// ToSyncLfs provides a mock function with given fields: ctx
func (_m *MockMirrorStore) ToSyncLfs(ctx context.Context) ([]database.Mirror, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ToSyncLfs")
	}

	var r0 []database.Mirror
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.Mirror, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.Mirror); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Mirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorStore_ToSyncLfs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToSyncLfs'
type MockMirrorStore_ToSyncLfs_Call struct {
	*mock.Call
}

// ToSyncLfs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMirrorStore_Expecter) ToSyncLfs(ctx interface{}) *MockMirrorStore_ToSyncLfs_Call {
	return &MockMirrorStore_ToSyncLfs_Call{Call: _e.mock.On("ToSyncLfs", ctx)}
}

func (_c *MockMirrorStore_ToSyncLfs_Call) Run(run func(ctx context.Context)) *MockMirrorStore_ToSyncLfs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMirrorStore_ToSyncLfs_Call) Return(_a0 []database.Mirror, _a1 error) *MockMirrorStore_ToSyncLfs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorStore_ToSyncLfs_Call) RunAndReturn(run func(context.Context) ([]database.Mirror, error)) *MockMirrorStore_ToSyncLfs_Call {
	_c.Call.Return(run)
	return _c
}

// ToSyncRepo provides a mock function with given fields: ctx
func (_m *MockMirrorStore) ToSyncRepo(ctx context.Context) ([]database.Mirror, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ToSyncRepo")
	}

	var r0 []database.Mirror
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.Mirror, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.Mirror); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Mirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorStore_ToSyncRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToSyncRepo'
type MockMirrorStore_ToSyncRepo_Call struct {
	*mock.Call
}

// ToSyncRepo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMirrorStore_Expecter) ToSyncRepo(ctx interface{}) *MockMirrorStore_ToSyncRepo_Call {
	return &MockMirrorStore_ToSyncRepo_Call{Call: _e.mock.On("ToSyncRepo", ctx)}
}

func (_c *MockMirrorStore_ToSyncRepo_Call) Run(run func(ctx context.Context)) *MockMirrorStore_ToSyncRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMirrorStore_ToSyncRepo_Call) Return(_a0 []database.Mirror, _a1 error) *MockMirrorStore_ToSyncRepo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorStore_ToSyncRepo_Call) RunAndReturn(run func(context.Context) ([]database.Mirror, error)) *MockMirrorStore_ToSyncRepo_Call {
	_c.Call.Return(run)
	return _c
}

// Unfinished provides a mock function with given fields: ctx
func (_m *MockMirrorStore) Unfinished(ctx context.Context) ([]database.Mirror, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Unfinished")
	}

	var r0 []database.Mirror
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.Mirror, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.Mirror); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Mirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorStore_Unfinished_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unfinished'
type MockMirrorStore_Unfinished_Call struct {
	*mock.Call
}

// Unfinished is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMirrorStore_Expecter) Unfinished(ctx interface{}) *MockMirrorStore_Unfinished_Call {
	return &MockMirrorStore_Unfinished_Call{Call: _e.mock.On("Unfinished", ctx)}
}

func (_c *MockMirrorStore_Unfinished_Call) Run(run func(ctx context.Context)) *MockMirrorStore_Unfinished_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMirrorStore_Unfinished_Call) Return(_a0 []database.Mirror, _a1 error) *MockMirrorStore_Unfinished_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorStore_Unfinished_Call) RunAndReturn(run func(context.Context) ([]database.Mirror, error)) *MockMirrorStore_Unfinished_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, mirror
func (_m *MockMirrorStore) Update(ctx context.Context, mirror *database.Mirror) error {
	ret := _m.Called(ctx, mirror)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.Mirror) error); ok {
		r0 = rf(ctx, mirror)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMirrorStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockMirrorStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - mirror *database.Mirror
func (_e *MockMirrorStore_Expecter) Update(ctx interface{}, mirror interface{}) *MockMirrorStore_Update_Call {
	return &MockMirrorStore_Update_Call{Call: _e.mock.On("Update", ctx, mirror)}
}

func (_c *MockMirrorStore_Update_Call) Run(run func(ctx context.Context, mirror *database.Mirror)) *MockMirrorStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.Mirror))
	})
	return _c
}

func (_c *MockMirrorStore_Update_Call) Return(err error) *MockMirrorStore_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMirrorStore_Update_Call) RunAndReturn(run func(context.Context, *database.Mirror) error) *MockMirrorStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMirrorAndRepository provides a mock function with given fields: ctx, mirror, repo
func (_m *MockMirrorStore) UpdateMirrorAndRepository(ctx context.Context, mirror *database.Mirror, repo *database.Repository) error {
	ret := _m.Called(ctx, mirror, repo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMirrorAndRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.Mirror, *database.Repository) error); ok {
		r0 = rf(ctx, mirror, repo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMirrorStore_UpdateMirrorAndRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMirrorAndRepository'
type MockMirrorStore_UpdateMirrorAndRepository_Call struct {
	*mock.Call
}

// UpdateMirrorAndRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - mirror *database.Mirror
//   - repo *database.Repository
func (_e *MockMirrorStore_Expecter) UpdateMirrorAndRepository(ctx interface{}, mirror interface{}, repo interface{}) *MockMirrorStore_UpdateMirrorAndRepository_Call {
	return &MockMirrorStore_UpdateMirrorAndRepository_Call{Call: _e.mock.On("UpdateMirrorAndRepository", ctx, mirror, repo)}
}

func (_c *MockMirrorStore_UpdateMirrorAndRepository_Call) Run(run func(ctx context.Context, mirror *database.Mirror, repo *database.Repository)) *MockMirrorStore_UpdateMirrorAndRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*database.Mirror), args[2].(*database.Repository))
	})
	return _c
}

func (_c *MockMirrorStore_UpdateMirrorAndRepository_Call) Return(_a0 error) *MockMirrorStore_UpdateMirrorAndRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMirrorStore_UpdateMirrorAndRepository_Call) RunAndReturn(run func(context.Context, *database.Mirror, *database.Repository) error) *MockMirrorStore_UpdateMirrorAndRepository_Call {
	_c.Call.Return(run)
	return _c
}

// WithPagination provides a mock function with given fields: ctx
func (_m *MockMirrorStore) WithPagination(ctx context.Context) ([]database.Mirror, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithPagination")
	}

	var r0 []database.Mirror
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.Mirror, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.Mirror); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Mirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorStore_WithPagination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithPagination'
type MockMirrorStore_WithPagination_Call struct {
	*mock.Call
}

// WithPagination is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMirrorStore_Expecter) WithPagination(ctx interface{}) *MockMirrorStore_WithPagination_Call {
	return &MockMirrorStore_WithPagination_Call{Call: _e.mock.On("WithPagination", ctx)}
}

func (_c *MockMirrorStore_WithPagination_Call) Run(run func(ctx context.Context)) *MockMirrorStore_WithPagination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMirrorStore_WithPagination_Call) Return(_a0 []database.Mirror, _a1 error) *MockMirrorStore_WithPagination_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorStore_WithPagination_Call) RunAndReturn(run func(context.Context) ([]database.Mirror, error)) *MockMirrorStore_WithPagination_Call {
	_c.Call.Return(run)
	return _c
}

// WithPaginationWithRepository provides a mock function with given fields: ctx
func (_m *MockMirrorStore) WithPaginationWithRepository(ctx context.Context) ([]database.Mirror, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithPaginationWithRepository")
	}

	var r0 []database.Mirror
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]database.Mirror, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []database.Mirror); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Mirror)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorStore_WithPaginationWithRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithPaginationWithRepository'
type MockMirrorStore_WithPaginationWithRepository_Call struct {
	*mock.Call
}

// WithPaginationWithRepository is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMirrorStore_Expecter) WithPaginationWithRepository(ctx interface{}) *MockMirrorStore_WithPaginationWithRepository_Call {
	return &MockMirrorStore_WithPaginationWithRepository_Call{Call: _e.mock.On("WithPaginationWithRepository", ctx)}
}

func (_c *MockMirrorStore_WithPaginationWithRepository_Call) Run(run func(ctx context.Context)) *MockMirrorStore_WithPaginationWithRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMirrorStore_WithPaginationWithRepository_Call) Return(_a0 []database.Mirror, _a1 error) *MockMirrorStore_WithPaginationWithRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorStore_WithPaginationWithRepository_Call) RunAndReturn(run func(context.Context) ([]database.Mirror, error)) *MockMirrorStore_WithPaginationWithRepository_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMirrorStore creates a new instance of MockMirrorStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMirrorStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMirrorStore {
	mock := &MockMirrorStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.49.1. DO NOT EDIT.

package database

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"
)

// MockDiscussionStore is an autogenerated mock type for the DiscussionStore type
type MockDiscussionStore struct {
	mock.Mock
}

type MockDiscussionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDiscussionStore) EXPECT() *MockDiscussionStore_Expecter {
	return &MockDiscussionStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, discussion
func (_m *MockDiscussionStore) Create(ctx context.Context, discussion database.Discussion) (*database.Discussion, error) {
	ret := _m.Called(ctx, discussion)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.Discussion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Discussion) (*database.Discussion, error)); ok {
		return rf(ctx, discussion)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Discussion) *database.Discussion); ok {
		r0 = rf(ctx, discussion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Discussion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Discussion) error); ok {
		r1 = rf(ctx, discussion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscussionStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockDiscussionStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - discussion database.Discussion
func (_e *MockDiscussionStore_Expecter) Create(ctx interface{}, discussion interface{}) *MockDiscussionStore_Create_Call {
	return &MockDiscussionStore_Create_Call{Call: _e.mock.On("Create", ctx, discussion)}
}

func (_c *MockDiscussionStore_Create_Call) Run(run func(ctx context.Context, discussion database.Discussion)) *MockDiscussionStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Discussion))
	})
	return _c
}

func (_c *MockDiscussionStore_Create_Call) Return(_a0 *database.Discussion, _a1 error) *MockDiscussionStore_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscussionStore_Create_Call) RunAndReturn(run func(context.Context, database.Discussion) (*database.Discussion, error)) *MockDiscussionStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateComment provides a mock function with given fields: ctx, comment
func (_m *MockDiscussionStore) CreateComment(ctx context.Context, comment database.Comment) (*database.Comment, error) {
	ret := _m.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 *database.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Comment) (*database.Comment, error)); ok {
		return rf(ctx, comment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Comment) *database.Comment); ok {
		r0 = rf(ctx, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Comment) error); ok {
		r1 = rf(ctx, comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscussionStore_CreateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComment'
type MockDiscussionStore_CreateComment_Call struct {
	*mock.Call
}

// CreateComment is a helper method to define mock.On call
//   - ctx context.Context
//   - comment database.Comment
func (_e *MockDiscussionStore_Expecter) CreateComment(ctx interface{}, comment interface{}) *MockDiscussionStore_CreateComment_Call {
	return &MockDiscussionStore_CreateComment_Call{Call: _e.mock.On("CreateComment", ctx, comment)}
}

func (_c *MockDiscussionStore_CreateComment_Call) Run(run func(ctx context.Context, comment database.Comment)) *MockDiscussionStore_CreateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Comment))
	})
	return _c
}

func (_c *MockDiscussionStore_CreateComment_Call) Return(_a0 *database.Comment, _a1 error) *MockDiscussionStore_CreateComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscussionStore_CreateComment_Call) RunAndReturn(run func(context.Context, database.Comment) (*database.Comment, error)) *MockDiscussionStore_CreateComment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *MockDiscussionStore) DeleteByID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscussionStore_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type MockDiscussionStore_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockDiscussionStore_Expecter) DeleteByID(ctx interface{}, id interface{}) *MockDiscussionStore_DeleteByID_Call {
	return &MockDiscussionStore_DeleteByID_Call{Call: _e.mock.On("DeleteByID", ctx, id)}
}

func (_c *MockDiscussionStore_DeleteByID_Call) Run(run func(ctx context.Context, id int64)) *MockDiscussionStore_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockDiscussionStore_DeleteByID_Call) Return(_a0 error) *MockDiscussionStore_DeleteByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscussionStore_DeleteByID_Call) RunAndReturn(run func(context.Context, int64) error) *MockDiscussionStore_DeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComment provides a mock function with given fields: ctx, id
func (_m *MockDiscussionStore) DeleteComment(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscussionStore_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type MockDiscussionStore_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockDiscussionStore_Expecter) DeleteComment(ctx interface{}, id interface{}) *MockDiscussionStore_DeleteComment_Call {
	return &MockDiscussionStore_DeleteComment_Call{Call: _e.mock.On("DeleteComment", ctx, id)}
}

func (_c *MockDiscussionStore_DeleteComment_Call) Run(run func(ctx context.Context, id int64)) *MockDiscussionStore_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockDiscussionStore_DeleteComment_Call) Return(_a0 error) *MockDiscussionStore_DeleteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscussionStore_DeleteComment_Call) RunAndReturn(run func(context.Context, int64) error) *MockDiscussionStore_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// FindByDiscussionableID provides a mock function with given fields: ctx, discussionableType, discussionableID
func (_m *MockDiscussionStore) FindByDiscussionableID(ctx context.Context, discussionableType string, discussionableID int64) ([]database.Discussion, error) {
	ret := _m.Called(ctx, discussionableType, discussionableID)

	if len(ret) == 0 {
		panic("no return value specified for FindByDiscussionableID")
	}

	var r0 []database.Discussion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) ([]database.Discussion, error)); ok {
		return rf(ctx, discussionableType, discussionableID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) []database.Discussion); ok {
		r0 = rf(ctx, discussionableType, discussionableID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Discussion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, discussionableType, discussionableID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscussionStore_FindByDiscussionableID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByDiscussionableID'
type MockDiscussionStore_FindByDiscussionableID_Call struct {
	*mock.Call
}

// FindByDiscussionableID is a helper method to define mock.On call
//   - ctx context.Context
//   - discussionableType string
//   - discussionableID int64
func (_e *MockDiscussionStore_Expecter) FindByDiscussionableID(ctx interface{}, discussionableType interface{}, discussionableID interface{}) *MockDiscussionStore_FindByDiscussionableID_Call {
	return &MockDiscussionStore_FindByDiscussionableID_Call{Call: _e.mock.On("FindByDiscussionableID", ctx, discussionableType, discussionableID)}
}

func (_c *MockDiscussionStore_FindByDiscussionableID_Call) Run(run func(ctx context.Context, discussionableType string, discussionableID int64)) *MockDiscussionStore_FindByDiscussionableID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockDiscussionStore_FindByDiscussionableID_Call) Return(_a0 []database.Discussion, _a1 error) *MockDiscussionStore_FindByDiscussionableID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscussionStore_FindByDiscussionableID_Call) RunAndReturn(run func(context.Context, string, int64) ([]database.Discussion, error)) *MockDiscussionStore_FindByDiscussionableID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *MockDiscussionStore) FindByID(ctx context.Context, id int64) (*database.Discussion, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *database.Discussion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.Discussion, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.Discussion); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Discussion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscussionStore_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockDiscussionStore_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockDiscussionStore_Expecter) FindByID(ctx interface{}, id interface{}) *MockDiscussionStore_FindByID_Call {
	return &MockDiscussionStore_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockDiscussionStore_FindByID_Call) Run(run func(ctx context.Context, id int64)) *MockDiscussionStore_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockDiscussionStore_FindByID_Call) Return(_a0 *database.Discussion, _a1 error) *MockDiscussionStore_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscussionStore_FindByID_Call) RunAndReturn(run func(context.Context, int64) (*database.Discussion, error)) *MockDiscussionStore_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindCommentByID provides a mock function with given fields: ctx, id
func (_m *MockDiscussionStore) FindCommentByID(ctx context.Context, id int64) (*database.Comment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindCommentByID")
	}

	var r0 *database.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.Comment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.Comment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscussionStore_FindCommentByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindCommentByID'
type MockDiscussionStore_FindCommentByID_Call struct {
	*mock.Call
}

// FindCommentByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockDiscussionStore_Expecter) FindCommentByID(ctx interface{}, id interface{}) *MockDiscussionStore_FindCommentByID_Call {
	return &MockDiscussionStore_FindCommentByID_Call{Call: _e.mock.On("FindCommentByID", ctx, id)}
}

func (_c *MockDiscussionStore_FindCommentByID_Call) Run(run func(ctx context.Context, id int64)) *MockDiscussionStore_FindCommentByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockDiscussionStore_FindCommentByID_Call) Return(_a0 *database.Comment, _a1 error) *MockDiscussionStore_FindCommentByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscussionStore_FindCommentByID_Call) RunAndReturn(run func(context.Context, int64) (*database.Comment, error)) *MockDiscussionStore_FindCommentByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindDiscussionComments provides a mock function with given fields: ctx, discussionID
func (_m *MockDiscussionStore) FindDiscussionComments(ctx context.Context, discussionID int64) ([]database.Comment, error) {
	ret := _m.Called(ctx, discussionID)

	if len(ret) == 0 {
		panic("no return value specified for FindDiscussionComments")
	}

	var r0 []database.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]database.Comment, error)); ok {
		return rf(ctx, discussionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []database.Comment); ok {
		r0 = rf(ctx, discussionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, discussionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscussionStore_FindDiscussionComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindDiscussionComments'
type MockDiscussionStore_FindDiscussionComments_Call struct {
	*mock.Call
}

// FindDiscussionComments is a helper method to define mock.On call
//   - ctx context.Context
//   - discussionID int64
func (_e *MockDiscussionStore_Expecter) FindDiscussionComments(ctx interface{}, discussionID interface{}) *MockDiscussionStore_FindDiscussionComments_Call {
	return &MockDiscussionStore_FindDiscussionComments_Call{Call: _e.mock.On("FindDiscussionComments", ctx, discussionID)}
}

func (_c *MockDiscussionStore_FindDiscussionComments_Call) Run(run func(ctx context.Context, discussionID int64)) *MockDiscussionStore_FindDiscussionComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockDiscussionStore_FindDiscussionComments_Call) Return(_a0 []database.Comment, _a1 error) *MockDiscussionStore_FindDiscussionComments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscussionStore_FindDiscussionComments_Call) RunAndReturn(run func(context.Context, int64) ([]database.Comment, error)) *MockDiscussionStore_FindDiscussionComments_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByID provides a mock function with given fields: ctx, id, title
func (_m *MockDiscussionStore) UpdateByID(ctx context.Context, id int64, title string) error {
	ret := _m.Called(ctx, id, title)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, id, title)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscussionStore_UpdateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByID'
type MockDiscussionStore_UpdateByID_Call struct {
	*mock.Call
}

// UpdateByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - title string
func (_e *MockDiscussionStore_Expecter) UpdateByID(ctx interface{}, id interface{}, title interface{}) *MockDiscussionStore_UpdateByID_Call {
	return &MockDiscussionStore_UpdateByID_Call{Call: _e.mock.On("UpdateByID", ctx, id, title)}
}

func (_c *MockDiscussionStore_UpdateByID_Call) Run(run func(ctx context.Context, id int64, title string)) *MockDiscussionStore_UpdateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockDiscussionStore_UpdateByID_Call) Return(_a0 error) *MockDiscussionStore_UpdateByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscussionStore_UpdateByID_Call) RunAndReturn(run func(context.Context, int64, string) error) *MockDiscussionStore_UpdateByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComment provides a mock function with given fields: ctx, id, content
func (_m *MockDiscussionStore) UpdateComment(ctx context.Context, id int64, content string) error {
	ret := _m.Called(ctx, id, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, id, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDiscussionStore_UpdateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComment'
type MockDiscussionStore_UpdateComment_Call struct {
	*mock.Call
}

// UpdateComment is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - content string
func (_e *MockDiscussionStore_Expecter) UpdateComment(ctx interface{}, id interface{}, content interface{}) *MockDiscussionStore_UpdateComment_Call {
	return &MockDiscussionStore_UpdateComment_Call{Call: _e.mock.On("UpdateComment", ctx, id, content)}
}

func (_c *MockDiscussionStore_UpdateComment_Call) Run(run func(ctx context.Context, id int64, content string)) *MockDiscussionStore_UpdateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockDiscussionStore_UpdateComment_Call) Return(_a0 error) *MockDiscussionStore_UpdateComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscussionStore_UpdateComment_Call) RunAndReturn(run func(context.Context, int64, string) error) *MockDiscussionStore_UpdateComment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDiscussionStore creates a new instance of MockDiscussionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDiscussionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDiscussionStore {
	mock := &MockDiscussionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package mq

import (
	mock "github.com/stretchr/testify/mock"
	mq "opencsg.com/csghub-server/builder/mq"
)

// MockMessageQueue is an autogenerated mock type for the MessageQueue type
type MockMessageQueue struct {
	mock.Mock
}

type MockMessageQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageQueue) EXPECT() *MockMessageQueue_Expecter {
	return &MockMessageQueue_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: topic, raw
func (_m *MockMessageQueue) Publish(topic string, raw []byte) error {
	ret := _m.Called(topic, raw)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(topic, raw)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageQueue_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockMessageQueue_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - topic string
//   - raw []byte
func (_e *MockMessageQueue_Expecter) Publish(topic interface{}, raw interface{}) *MockMessageQueue_Publish_Call {
	return &MockMessageQueue_Publish_Call{Call: _e.mock.On("Publish", topic, raw)}
}

func (_c *MockMessageQueue_Publish_Call) Run(run func(topic string, raw []byte)) *MockMessageQueue_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockMessageQueue_Publish_Call) Return(_a0 error) *MockMessageQueue_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageQueue_Publish_Call) RunAndReturn(run func(string, []byte) error) *MockMessageQueue_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: params
func (_m *MockMessageQueue) Subscribe(params mq.SubscribeParams) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(mq.SubscribeParams) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageQueue_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockMessageQueue_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - params mq.SubscribeParams
func (_e *MockMessageQueue_Expecter) Subscribe(params interface{}) *MockMessageQueue_Subscribe_Call {
	return &MockMessageQueue_Subscribe_Call{Call: _e.mock.On("Subscribe", params)}
}

func (_c *MockMessageQueue_Subscribe_Call) Run(run func(params mq.SubscribeParams)) *MockMessageQueue_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(mq.SubscribeParams))
	})
	return _c
}

func (_c *MockMessageQueue_Subscribe_Call) Return(_a0 error) *MockMessageQueue_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageQueue_Subscribe_Call) RunAndReturn(run func(mq.SubscribeParams) error) *MockMessageQueue_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageQueue creates a new instance of MockMessageQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageQueue {
	mock := &MockMessageQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

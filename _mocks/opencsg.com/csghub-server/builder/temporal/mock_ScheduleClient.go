// Code generated by mockery v2.49.1. DO NOT EDIT.

package temporal

import (
	context "context"

	client "go.temporal.io/sdk/client"

	mock "github.com/stretchr/testify/mock"
)

// MockScheduleClient is an autogenerated mock type for the ScheduleClient type
type MockScheduleClient struct {
	mock.Mock
}

type MockScheduleClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScheduleClient) EXPECT() *MockScheduleClient_Expecter {
	return &MockScheduleClient_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, options
func (_m *MockScheduleClient) Create(ctx context.Context, options client.ScheduleOptions) (client.ScheduleHandle, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 client.ScheduleHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.ScheduleOptions) (client.ScheduleHandle, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.ScheduleOptions) client.ScheduleHandle); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.ScheduleHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.ScheduleOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockScheduleClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockScheduleClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - options client.ScheduleOptions
func (_e *MockScheduleClient_Expecter) Create(ctx interface{}, options interface{}) *MockScheduleClient_Create_Call {
	return &MockScheduleClient_Create_Call{Call: _e.mock.On("Create", ctx, options)}
}

func (_c *MockScheduleClient_Create_Call) Run(run func(ctx context.Context, options client.ScheduleOptions)) *MockScheduleClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.ScheduleOptions))
	})
	return _c
}

func (_c *MockScheduleClient_Create_Call) Return(_a0 client.ScheduleHandle, _a1 error) *MockScheduleClient_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockScheduleClient_Create_Call) RunAndReturn(run func(context.Context, client.ScheduleOptions) (client.ScheduleHandle, error)) *MockScheduleClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScheduleClient creates a new instance of MockScheduleClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScheduleClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScheduleClient {
	mock := &MockScheduleClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

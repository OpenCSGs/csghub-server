// Code generated by mockery v2.53.0. DO NOT EDIT.

package llm

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockLLMSvcClient is an autogenerated mock type for the LLMSvcClient type
type MockLLMSvcClient struct {
	mock.Mock
}

type MockLLMSvcClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLLMSvcClient) EXPECT() *MockLLMSvcClient_Expecter {
	return &MockLLMSvcClient_Expecter{mock: &_m.Mock}
}

// Tokenize provides a mock function with given fields: ctx, endpoint, req
func (_m *MockLLMSvcClient) Tokenize(ctx context.Context, endpoint string, req interface{}) ([]byte, error) {
	ret := _m.Called(ctx, endpoint, req)

	if len(ret) == 0 {
		panic("no return value specified for Tokenize")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) ([]byte, error)); ok {
		return rf(ctx, endpoint, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) []byte); ok {
		r0 = rf(ctx, endpoint, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, endpoint, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLLMSvcClient_Tokenize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tokenize'
type MockLLMSvcClient_Tokenize_Call struct {
	*mock.Call
}

// Tokenize is a helper method to define mock.On call
//   - ctx context.Context
//   - endpoint string
//   - req interface{}
func (_e *MockLLMSvcClient_Expecter) Tokenize(ctx interface{}, endpoint interface{}, req interface{}) *MockLLMSvcClient_Tokenize_Call {
	return &MockLLMSvcClient_Tokenize_Call{Call: _e.mock.On("Tokenize", ctx, endpoint, req)}
}

func (_c *MockLLMSvcClient_Tokenize_Call) Run(run func(ctx context.Context, endpoint string, req interface{})) *MockLLMSvcClient_Tokenize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockLLMSvcClient_Tokenize_Call) Return(_a0 []byte, _a1 error) *MockLLMSvcClient_Tokenize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLLMSvcClient_Tokenize_Call) RunAndReturn(run func(context.Context, string, interface{}) ([]byte, error)) *MockLLMSvcClient_Tokenize_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLLMSvcClient creates a new instance of MockLLMSvcClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLLMSvcClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLLMSvcClient {
	mock := &MockLLMSvcClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

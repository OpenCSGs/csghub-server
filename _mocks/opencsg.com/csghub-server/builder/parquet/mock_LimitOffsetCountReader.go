// Code generated by mockery v2.49.1. DO NOT EDIT.

package parquet

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockLimitOffsetCountReader is an autogenerated mock type for the LimitOffsetCountReader type
type MockLimitOffsetCountReader struct {
	mock.Mock
}

type MockLimitOffsetCountReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLimitOffsetCountReader) EXPECT() *MockLimitOffsetCountReader_Expecter {
	return &MockLimitOffsetCountReader_Expecter{mock: &_m.Mock}
}

// RowsWithCount provides a mock function with given fields: ctx, paths, limit, offset
func (_m *MockLimitOffsetCountReader) RowsWithCount(ctx context.Context, paths []string, limit int64, offset int64) ([]string, []string, [][]any, int64, error) {
	ret := _m.Called(ctx, paths, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for RowsWithCount")
	}

	var r0 []string
	var r1 []string
	var r2 [][]any
	var r3 int64
	var r4 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, int64, int64) ([]string, []string, [][]any, int64, error)); ok {
		return rf(ctx, paths, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, int64, int64) []string); ok {
		r0 = rf(ctx, paths, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, int64, int64) []string); ok {
		r1 = rf(ctx, paths, limit, offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []string, int64, int64) [][]any); ok {
		r2 = rf(ctx, paths, limit, offset)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([][]any)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, []string, int64, int64) int64); ok {
		r3 = rf(ctx, paths, limit, offset)
	} else {
		r3 = ret.Get(3).(int64)
	}

	if rf, ok := ret.Get(4).(func(context.Context, []string, int64, int64) error); ok {
		r4 = rf(ctx, paths, limit, offset)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// MockLimitOffsetCountReader_RowsWithCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RowsWithCount'
type MockLimitOffsetCountReader_RowsWithCount_Call struct {
	*mock.Call
}

// RowsWithCount is a helper method to define mock.On call
//   - ctx context.Context
//   - paths []string
//   - limit int64
//   - offset int64
func (_e *MockLimitOffsetCountReader_Expecter) RowsWithCount(ctx interface{}, paths interface{}, limit interface{}, offset interface{}) *MockLimitOffsetCountReader_RowsWithCount_Call {
	return &MockLimitOffsetCountReader_RowsWithCount_Call{Call: _e.mock.On("RowsWithCount", ctx, paths, limit, offset)}
}

func (_c *MockLimitOffsetCountReader_RowsWithCount_Call) Run(run func(ctx context.Context, paths []string, limit int64, offset int64)) *MockLimitOffsetCountReader_RowsWithCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockLimitOffsetCountReader_RowsWithCount_Call) Return(columns []string, columnsType []string, rows [][]any, total int64, err error) *MockLimitOffsetCountReader_RowsWithCount_Call {
	_c.Call.Return(columns, columnsType, rows, total, err)
	return _c
}

func (_c *MockLimitOffsetCountReader_RowsWithCount_Call) RunAndReturn(run func(context.Context, []string, int64, int64) ([]string, []string, [][]any, int64, error)) *MockLimitOffsetCountReader_RowsWithCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLimitOffsetCountReader creates a new instance of MockLimitOffsetCountReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLimitOffsetCountReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLimitOffsetCountReader {
	mock := &MockLimitOffsetCountReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

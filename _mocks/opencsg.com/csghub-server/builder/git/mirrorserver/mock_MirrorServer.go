// Code generated by mockery v2.49.1. DO NOT EDIT.

package mirrorserver

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mirrorserver "opencsg.com/csghub-server/builder/git/mirrorserver"
)

// MockMirrorServer is an autogenerated mock type for the MirrorServer type
type MockMirrorServer struct {
	mock.Mock
}

type MockMirrorServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMirrorServer) EXPECT() *MockMirrorServer_Expecter {
	return &MockMirrorServer_Expecter{mock: &_m.Mock}
}

// CreateMirrorRepo provides a mock function with given fields: ctx, req
func (_m *MockMirrorServer) CreateMirrorRepo(ctx context.Context, req mirrorserver.CreateMirrorRepoReq) (int64, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateMirrorRepo")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, mirrorserver.CreateMirrorRepoReq) (int64, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, mirrorserver.CreateMirrorRepoReq) int64); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, mirrorserver.CreateMirrorRepoReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorServer_CreateMirrorRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMirrorRepo'
type MockMirrorServer_CreateMirrorRepo_Call struct {
	*mock.Call
}

// CreateMirrorRepo is a helper method to define mock.On call
//   - ctx context.Context
//   - req mirrorserver.CreateMirrorRepoReq
func (_e *MockMirrorServer_Expecter) CreateMirrorRepo(ctx interface{}, req interface{}) *MockMirrorServer_CreateMirrorRepo_Call {
	return &MockMirrorServer_CreateMirrorRepo_Call{Call: _e.mock.On("CreateMirrorRepo", ctx, req)}
}

func (_c *MockMirrorServer_CreateMirrorRepo_Call) Run(run func(ctx context.Context, req mirrorserver.CreateMirrorRepoReq)) *MockMirrorServer_CreateMirrorRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(mirrorserver.CreateMirrorRepoReq))
	})
	return _c
}

func (_c *MockMirrorServer_CreateMirrorRepo_Call) Return(_a0 int64, _a1 error) *MockMirrorServer_CreateMirrorRepo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorServer_CreateMirrorRepo_Call) RunAndReturn(run func(context.Context, mirrorserver.CreateMirrorRepoReq) (int64, error)) *MockMirrorServer_CreateMirrorRepo_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePushMirror provides a mock function with given fields: ctx, req
func (_m *MockMirrorServer) CreatePushMirror(ctx context.Context, req mirrorserver.CreatePushMirrorReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreatePushMirror")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, mirrorserver.CreatePushMirrorReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMirrorServer_CreatePushMirror_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePushMirror'
type MockMirrorServer_CreatePushMirror_Call struct {
	*mock.Call
}

// CreatePushMirror is a helper method to define mock.On call
//   - ctx context.Context
//   - req mirrorserver.CreatePushMirrorReq
func (_e *MockMirrorServer_Expecter) CreatePushMirror(ctx interface{}, req interface{}) *MockMirrorServer_CreatePushMirror_Call {
	return &MockMirrorServer_CreatePushMirror_Call{Call: _e.mock.On("CreatePushMirror", ctx, req)}
}

func (_c *MockMirrorServer_CreatePushMirror_Call) Run(run func(ctx context.Context, req mirrorserver.CreatePushMirrorReq)) *MockMirrorServer_CreatePushMirror_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(mirrorserver.CreatePushMirrorReq))
	})
	return _c
}

func (_c *MockMirrorServer_CreatePushMirror_Call) Return(_a0 error) *MockMirrorServer_CreatePushMirror_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMirrorServer_CreatePushMirror_Call) RunAndReturn(run func(context.Context, mirrorserver.CreatePushMirrorReq) error) *MockMirrorServer_CreatePushMirror_Call {
	_c.Call.Return(run)
	return _c
}

// GetMirrorTaskInfo provides a mock function with given fields: ctx, taskId
func (_m *MockMirrorServer) GetMirrorTaskInfo(ctx context.Context, taskId int64) (*mirrorserver.MirrorTaskInfo, error) {
	ret := _m.Called(ctx, taskId)

	if len(ret) == 0 {
		panic("no return value specified for GetMirrorTaskInfo")
	}

	var r0 *mirrorserver.MirrorTaskInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*mirrorserver.MirrorTaskInfo, error)); ok {
		return rf(ctx, taskId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *mirrorserver.MirrorTaskInfo); ok {
		r0 = rf(ctx, taskId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mirrorserver.MirrorTaskInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, taskId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMirrorServer_GetMirrorTaskInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMirrorTaskInfo'
type MockMirrorServer_GetMirrorTaskInfo_Call struct {
	*mock.Call
}

// GetMirrorTaskInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - taskId int64
func (_e *MockMirrorServer_Expecter) GetMirrorTaskInfo(ctx interface{}, taskId interface{}) *MockMirrorServer_GetMirrorTaskInfo_Call {
	return &MockMirrorServer_GetMirrorTaskInfo_Call{Call: _e.mock.On("GetMirrorTaskInfo", ctx, taskId)}
}

func (_c *MockMirrorServer_GetMirrorTaskInfo_Call) Run(run func(ctx context.Context, taskId int64)) *MockMirrorServer_GetMirrorTaskInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockMirrorServer_GetMirrorTaskInfo_Call) Return(_a0 *mirrorserver.MirrorTaskInfo, _a1 error) *MockMirrorServer_GetMirrorTaskInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMirrorServer_GetMirrorTaskInfo_Call) RunAndReturn(run func(context.Context, int64) (*mirrorserver.MirrorTaskInfo, error)) *MockMirrorServer_GetMirrorTaskInfo_Call {
	_c.Call.Return(run)
	return _c
}

// MirrorSync provides a mock function with given fields: ctx, req
func (_m *MockMirrorServer) MirrorSync(ctx context.Context, req mirrorserver.MirrorSyncReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for MirrorSync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, mirrorserver.MirrorSyncReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMirrorServer_MirrorSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MirrorSync'
type MockMirrorServer_MirrorSync_Call struct {
	*mock.Call
}

// MirrorSync is a helper method to define mock.On call
//   - ctx context.Context
//   - req mirrorserver.MirrorSyncReq
func (_e *MockMirrorServer_Expecter) MirrorSync(ctx interface{}, req interface{}) *MockMirrorServer_MirrorSync_Call {
	return &MockMirrorServer_MirrorSync_Call{Call: _e.mock.On("MirrorSync", ctx, req)}
}

func (_c *MockMirrorServer_MirrorSync_Call) Run(run func(ctx context.Context, req mirrorserver.MirrorSyncReq)) *MockMirrorServer_MirrorSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(mirrorserver.MirrorSyncReq))
	})
	return _c
}

func (_c *MockMirrorServer_MirrorSync_Call) Return(_a0 error) *MockMirrorServer_MirrorSync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMirrorServer_MirrorSync_Call) RunAndReturn(run func(context.Context, mirrorserver.MirrorSyncReq) error) *MockMirrorServer_MirrorSync_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMirrorServer creates a new instance of MockMirrorServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMirrorServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMirrorServer {
	mock := &MockMirrorServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

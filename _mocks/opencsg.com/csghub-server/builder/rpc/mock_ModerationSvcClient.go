// Code generated by mockery v2.49.1. DO NOT EDIT.

package rpc

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	rpc "opencsg.com/csghub-server/builder/rpc"

	types "opencsg.com/csghub-server/common/types"
)

// MockModerationSvcClient is an autogenerated mock type for the ModerationSvcClient type
type MockModerationSvcClient struct {
	mock.Mock
}

type MockModerationSvcClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModerationSvcClient) EXPECT() *MockModerationSvcClient_Expecter {
	return &MockModerationSvcClient_Expecter{mock: &_m.Mock}
}

// PassImageCheck provides a mock function with given fields: ctx, scenario, ossBucketName, ossObjectName
func (_m *MockModerationSvcClient) PassImageCheck(ctx context.Context, scenario string, ossBucketName string, ossObjectName string) (*rpc.CheckResult, error) {
	ret := _m.Called(ctx, scenario, ossBucketName, ossObjectName)

	if len(ret) == 0 {
		panic("no return value specified for PassImageCheck")
	}

	var r0 *rpc.CheckResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*rpc.CheckResult, error)); ok {
		return rf(ctx, scenario, ossBucketName, ossObjectName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *rpc.CheckResult); ok {
		r0 = rf(ctx, scenario, ossBucketName, ossObjectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.CheckResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, scenario, ossBucketName, ossObjectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModerationSvcClient_PassImageCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PassImageCheck'
type MockModerationSvcClient_PassImageCheck_Call struct {
	*mock.Call
}

// PassImageCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - scenario string
//   - ossBucketName string
//   - ossObjectName string
func (_e *MockModerationSvcClient_Expecter) PassImageCheck(ctx interface{}, scenario interface{}, ossBucketName interface{}, ossObjectName interface{}) *MockModerationSvcClient_PassImageCheck_Call {
	return &MockModerationSvcClient_PassImageCheck_Call{Call: _e.mock.On("PassImageCheck", ctx, scenario, ossBucketName, ossObjectName)}
}

func (_c *MockModerationSvcClient_PassImageCheck_Call) Run(run func(ctx context.Context, scenario string, ossBucketName string, ossObjectName string)) *MockModerationSvcClient_PassImageCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockModerationSvcClient_PassImageCheck_Call) Return(_a0 *rpc.CheckResult, _a1 error) *MockModerationSvcClient_PassImageCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModerationSvcClient_PassImageCheck_Call) RunAndReturn(run func(context.Context, string, string, string) (*rpc.CheckResult, error)) *MockModerationSvcClient_PassImageCheck_Call {
	_c.Call.Return(run)
	return _c
}

// PassTextCheck provides a mock function with given fields: ctx, scenario, text
func (_m *MockModerationSvcClient) PassTextCheck(ctx context.Context, scenario string, text string) (*rpc.CheckResult, error) {
	ret := _m.Called(ctx, scenario, text)

	if len(ret) == 0 {
		panic("no return value specified for PassTextCheck")
	}

	var r0 *rpc.CheckResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*rpc.CheckResult, error)); ok {
		return rf(ctx, scenario, text)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *rpc.CheckResult); ok {
		r0 = rf(ctx, scenario, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rpc.CheckResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, scenario, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModerationSvcClient_PassTextCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PassTextCheck'
type MockModerationSvcClient_PassTextCheck_Call struct {
	*mock.Call
}

// PassTextCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - scenario string
//   - text string
func (_e *MockModerationSvcClient_Expecter) PassTextCheck(ctx interface{}, scenario interface{}, text interface{}) *MockModerationSvcClient_PassTextCheck_Call {
	return &MockModerationSvcClient_PassTextCheck_Call{Call: _e.mock.On("PassTextCheck", ctx, scenario, text)}
}

func (_c *MockModerationSvcClient_PassTextCheck_Call) Run(run func(ctx context.Context, scenario string, text string)) *MockModerationSvcClient_PassTextCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockModerationSvcClient_PassTextCheck_Call) Return(_a0 *rpc.CheckResult, _a1 error) *MockModerationSvcClient_PassTextCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModerationSvcClient_PassTextCheck_Call) RunAndReturn(run func(context.Context, string, string) (*rpc.CheckResult, error)) *MockModerationSvcClient_PassTextCheck_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitRepoCheck provides a mock function with given fields: ctx, repoType, namespace, name
func (_m *MockModerationSvcClient) SubmitRepoCheck(ctx context.Context, repoType types.RepositoryType, namespace string, name string) error {
	ret := _m.Called(ctx, repoType, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for SubmitRepoCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RepositoryType, string, string) error); ok {
		r0 = rf(ctx, repoType, namespace, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModerationSvcClient_SubmitRepoCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitRepoCheck'
type MockModerationSvcClient_SubmitRepoCheck_Call struct {
	*mock.Call
}

// SubmitRepoCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - repoType types.RepositoryType
//   - namespace string
//   - name string
func (_e *MockModerationSvcClient_Expecter) SubmitRepoCheck(ctx interface{}, repoType interface{}, namespace interface{}, name interface{}) *MockModerationSvcClient_SubmitRepoCheck_Call {
	return &MockModerationSvcClient_SubmitRepoCheck_Call{Call: _e.mock.On("SubmitRepoCheck", ctx, repoType, namespace, name)}
}

func (_c *MockModerationSvcClient_SubmitRepoCheck_Call) Run(run func(ctx context.Context, repoType types.RepositoryType, namespace string, name string)) *MockModerationSvcClient_SubmitRepoCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RepositoryType), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockModerationSvcClient_SubmitRepoCheck_Call) Return(_a0 error) *MockModerationSvcClient_SubmitRepoCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModerationSvcClient_SubmitRepoCheck_Call) RunAndReturn(run func(context.Context, types.RepositoryType, string, string) error) *MockModerationSvcClient_SubmitRepoCheck_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModerationSvcClient creates a new instance of MockModerationSvcClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModerationSvcClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModerationSvcClient {
	mock := &MockModerationSvcClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

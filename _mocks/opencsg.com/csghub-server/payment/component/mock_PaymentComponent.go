// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	consts "opencsg.com/csghub-server/common/utils/payment/consts"

	database "opencsg.com/csghub-server/builder/store/database"

	gateway "opencsg.com/csghub-server/payment/gateway"

	mock "github.com/stretchr/testify/mock"

	money "opencsg.com/csghub-server/common/utils/money"

	time "time"
)

// MockPaymentComponent is an autogenerated mock type for the PaymentComponent type
type MockPaymentComponent struct {
	mock.Mock
}

type MockPaymentComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymentComponent) EXPECT() *MockPaymentComponent_Expecter {
	return &MockPaymentComponent_Expecter{mock: &_m.Mock}
}

// CreateSimplePayment provides a mock function with given fields: ctx, orderNo, subject, body, amount, extra, channel
func (_m *MockPaymentComponent) CreateSimplePayment(ctx context.Context, orderNo string, subject string, body string, amount *money.Money, extra string, channel consts.PaymentChannel) (*database.Payment, error) {
	ret := _m.Called(ctx, orderNo, subject, body, amount, extra, channel)

	if len(ret) == 0 {
		panic("no return value specified for CreateSimplePayment")
	}

	var r0 *database.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *money.Money, string, consts.PaymentChannel) (*database.Payment, error)); ok {
		return rf(ctx, orderNo, subject, body, amount, extra, channel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *money.Money, string, consts.PaymentChannel) *database.Payment); ok {
		r0 = rf(ctx, orderNo, subject, body, amount, extra, channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *money.Money, string, consts.PaymentChannel) error); ok {
		r1 = rf(ctx, orderNo, subject, body, amount, extra, channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentComponent_CreateSimplePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSimplePayment'
type MockPaymentComponent_CreateSimplePayment_Call struct {
	*mock.Call
}

// CreateSimplePayment is a helper method to define mock.On call
//   - ctx context.Context
//   - orderNo string
//   - subject string
//   - body string
//   - amount *money.Money
//   - extra string
//   - channel consts.PaymentChannel
func (_e *MockPaymentComponent_Expecter) CreateSimplePayment(ctx interface{}, orderNo interface{}, subject interface{}, body interface{}, amount interface{}, extra interface{}, channel interface{}) *MockPaymentComponent_CreateSimplePayment_Call {
	return &MockPaymentComponent_CreateSimplePayment_Call{Call: _e.mock.On("CreateSimplePayment", ctx, orderNo, subject, body, amount, extra, channel)}
}

func (_c *MockPaymentComponent_CreateSimplePayment_Call) Run(run func(ctx context.Context, orderNo string, subject string, body string, amount *money.Money, extra string, channel consts.PaymentChannel)) *MockPaymentComponent_CreateSimplePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*money.Money), args[5].(string), args[6].(consts.PaymentChannel))
	})
	return _c
}

func (_c *MockPaymentComponent_CreateSimplePayment_Call) Return(_a0 *database.Payment, _a1 error) *MockPaymentComponent_CreateSimplePayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentComponent_CreateSimplePayment_Call) RunAndReturn(run func(context.Context, string, string, string, *money.Money, string, consts.PaymentChannel) (*database.Payment, error)) *MockPaymentComponent_CreateSimplePayment_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadTradeBill provides a mock function with given fields: ctx, billDate, channel
func (_m *MockPaymentComponent) DownloadTradeBill(ctx context.Context, billDate time.Time, channel consts.PaymentChannel) (*gateway.BillSummary, error) {
	ret := _m.Called(ctx, billDate, channel)

	if len(ret) == 0 {
		panic("no return value specified for DownloadTradeBill")
	}

	var r0 *gateway.BillSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, consts.PaymentChannel) (*gateway.BillSummary, error)); ok {
		return rf(ctx, billDate, channel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, consts.PaymentChannel) *gateway.BillSummary); ok {
		r0 = rf(ctx, billDate, channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gateway.BillSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, consts.PaymentChannel) error); ok {
		r1 = rf(ctx, billDate, channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPaymentComponent_DownloadTradeBill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadTradeBill'
type MockPaymentComponent_DownloadTradeBill_Call struct {
	*mock.Call
}

// DownloadTradeBill is a helper method to define mock.On call
//   - ctx context.Context
//   - billDate time.Time
//   - channel consts.PaymentChannel
func (_e *MockPaymentComponent_Expecter) DownloadTradeBill(ctx interface{}, billDate interface{}, channel interface{}) *MockPaymentComponent_DownloadTradeBill_Call {
	return &MockPaymentComponent_DownloadTradeBill_Call{Call: _e.mock.On("DownloadTradeBill", ctx, billDate, channel)}
}

func (_c *MockPaymentComponent_DownloadTradeBill_Call) Run(run func(ctx context.Context, billDate time.Time, channel consts.PaymentChannel)) *MockPaymentComponent_DownloadTradeBill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(consts.PaymentChannel))
	})
	return _c
}

func (_c *MockPaymentComponent_DownloadTradeBill_Call) Return(_a0 *gateway.BillSummary, _a1 error) *MockPaymentComponent_DownloadTradeBill_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentComponent_DownloadTradeBill_Call) RunAndReturn(run func(context.Context, time.Time, consts.PaymentChannel) (*gateway.BillSummary, error)) *MockPaymentComponent_DownloadTradeBill_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPaymentComponent creates a new instance of MockPaymentComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentComponent {
	mock := &MockPaymentComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package workflows

import (
	context "context"

	common "opencsg.com/csghub-server/dataviewer/common"

	mock "github.com/stretchr/testify/mock"

	types "opencsg.com/csghub-server/common/types"
)

// MockDataViewerActivity is an autogenerated mock type for the DataViewerActivity type
type MockDataViewerActivity struct {
	mock.Mock
}

type MockDataViewerActivity_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataViewerActivity) EXPECT() *MockDataViewerActivity_Expecter {
	return &MockDataViewerActivity_Expecter{mock: &_m.Mock}
}

// BeginViewerJob provides a mock function with given fields: ctx
func (_m *MockDataViewerActivity) BeginViewerJob(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginViewerJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataViewerActivity_BeginViewerJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginViewerJob'
type MockDataViewerActivity_BeginViewerJob_Call struct {
	*mock.Call
}

// BeginViewerJob is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDataViewerActivity_Expecter) BeginViewerJob(ctx interface{}) *MockDataViewerActivity_BeginViewerJob_Call {
	return &MockDataViewerActivity_BeginViewerJob_Call{Call: _e.mock.On("BeginViewerJob", ctx)}
}

func (_c *MockDataViewerActivity_BeginViewerJob_Call) Run(run func(ctx context.Context)) *MockDataViewerActivity_BeginViewerJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDataViewerActivity_BeginViewerJob_Call) Return(_a0 error) *MockDataViewerActivity_BeginViewerJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataViewerActivity_BeginViewerJob_Call) RunAndReturn(run func(context.Context) error) *MockDataViewerActivity_BeginViewerJob_Call {
	_c.Call.Return(run)
	return _c
}

// CheckIfNeedRebuild provides a mock function with given fields: ctx, checkParam
func (_m *MockDataViewerActivity) CheckIfNeedRebuild(ctx context.Context, checkParam common.CheckBuildReq) (bool, error) {
	ret := _m.Called(ctx, checkParam)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfNeedRebuild")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.CheckBuildReq) (bool, error)); ok {
		return rf(ctx, checkParam)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.CheckBuildReq) bool); ok {
		r0 = rf(ctx, checkParam)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.CheckBuildReq) error); ok {
		r1 = rf(ctx, checkParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataViewerActivity_CheckIfNeedRebuild_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckIfNeedRebuild'
type MockDataViewerActivity_CheckIfNeedRebuild_Call struct {
	*mock.Call
}

// CheckIfNeedRebuild is a helper method to define mock.On call
//   - ctx context.Context
//   - checkParam common.CheckBuildReq
func (_e *MockDataViewerActivity_Expecter) CheckIfNeedRebuild(ctx interface{}, checkParam interface{}) *MockDataViewerActivity_CheckIfNeedRebuild_Call {
	return &MockDataViewerActivity_CheckIfNeedRebuild_Call{Call: _e.mock.On("CheckIfNeedRebuild", ctx, checkParam)}
}

func (_c *MockDataViewerActivity_CheckIfNeedRebuild_Call) Run(run func(ctx context.Context, checkParam common.CheckBuildReq)) *MockDataViewerActivity_CheckIfNeedRebuild_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.CheckBuildReq))
	})
	return _c
}

func (_c *MockDataViewerActivity_CheckIfNeedRebuild_Call) Return(_a0 bool, _a1 error) *MockDataViewerActivity_CheckIfNeedRebuild_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataViewerActivity_CheckIfNeedRebuild_Call) RunAndReturn(run func(context.Context, common.CheckBuildReq) (bool, error)) *MockDataViewerActivity_CheckIfNeedRebuild_Call {
	_c.Call.Return(run)
	return _c
}

// CleanUp provides a mock function with given fields: ctx, req
func (_m *MockDataViewerActivity) CleanUp(ctx context.Context, req types.UpdateViewerReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CleanUp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.UpdateViewerReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataViewerActivity_CleanUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanUp'
type MockDataViewerActivity_CleanUp_Call struct {
	*mock.Call
}

// CleanUp is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.UpdateViewerReq
func (_e *MockDataViewerActivity_Expecter) CleanUp(ctx interface{}, req interface{}) *MockDataViewerActivity_CleanUp_Call {
	return &MockDataViewerActivity_CleanUp_Call{Call: _e.mock.On("CleanUp", ctx, req)}
}

func (_c *MockDataViewerActivity_CleanUp_Call) Run(run func(ctx context.Context, req types.UpdateViewerReq)) *MockDataViewerActivity_CleanUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.UpdateViewerReq))
	})
	return _c
}

func (_c *MockDataViewerActivity_CleanUp_Call) Return(_a0 error) *MockDataViewerActivity_CleanUp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataViewerActivity_CleanUp_Call) RunAndReturn(run func(context.Context, types.UpdateViewerReq) error) *MockDataViewerActivity_CleanUp_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertToParquetFiles provides a mock function with given fields: ctx, convertReq
func (_m *MockDataViewerActivity) ConvertToParquetFiles(ctx context.Context, convertReq common.ConvertReq) error {
	ret := _m.Called(ctx, convertReq)

	if len(ret) == 0 {
		panic("no return value specified for ConvertToParquetFiles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.ConvertReq) error); ok {
		r0 = rf(ctx, convertReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataViewerActivity_ConvertToParquetFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertToParquetFiles'
type MockDataViewerActivity_ConvertToParquetFiles_Call struct {
	*mock.Call
}

// ConvertToParquetFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - convertReq common.ConvertReq
func (_e *MockDataViewerActivity_Expecter) ConvertToParquetFiles(ctx interface{}, convertReq interface{}) *MockDataViewerActivity_ConvertToParquetFiles_Call {
	return &MockDataViewerActivity_ConvertToParquetFiles_Call{Call: _e.mock.On("ConvertToParquetFiles", ctx, convertReq)}
}

func (_c *MockDataViewerActivity_ConvertToParquetFiles_Call) Run(run func(ctx context.Context, convertReq common.ConvertReq)) *MockDataViewerActivity_ConvertToParquetFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.ConvertReq))
	})
	return _c
}

func (_c *MockDataViewerActivity_ConvertToParquetFiles_Call) Return(_a0 error) *MockDataViewerActivity_ConvertToParquetFiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataViewerActivity_ConvertToParquetFiles_Call) RunAndReturn(run func(context.Context, common.ConvertReq) error) *MockDataViewerActivity_ConvertToParquetFiles_Call {
	_c.Call.Return(run)
	return _c
}

// CopyParquetFiles provides a mock function with given fields: ctx, copyReq
func (_m *MockDataViewerActivity) CopyParquetFiles(ctx context.Context, copyReq common.CopyParquetReq) (*common.CardData, error) {
	ret := _m.Called(ctx, copyReq)

	if len(ret) == 0 {
		panic("no return value specified for CopyParquetFiles")
	}

	var r0 *common.CardData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.CopyParquetReq) (*common.CardData, error)); ok {
		return rf(ctx, copyReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.CopyParquetReq) *common.CardData); ok {
		r0 = rf(ctx, copyReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.CardData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.CopyParquetReq) error); ok {
		r1 = rf(ctx, copyReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataViewerActivity_CopyParquetFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyParquetFiles'
type MockDataViewerActivity_CopyParquetFiles_Call struct {
	*mock.Call
}

// CopyParquetFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - copyReq common.CopyParquetReq
func (_e *MockDataViewerActivity_Expecter) CopyParquetFiles(ctx interface{}, copyReq interface{}) *MockDataViewerActivity_CopyParquetFiles_Call {
	return &MockDataViewerActivity_CopyParquetFiles_Call{Call: _e.mock.On("CopyParquetFiles", ctx, copyReq)}
}

func (_c *MockDataViewerActivity_CopyParquetFiles_Call) Run(run func(ctx context.Context, copyReq common.CopyParquetReq)) *MockDataViewerActivity_CopyParquetFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.CopyParquetReq))
	})
	return _c
}

func (_c *MockDataViewerActivity_CopyParquetFiles_Call) Return(_a0 *common.CardData, _a1 error) *MockDataViewerActivity_CopyParquetFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataViewerActivity_CopyParquetFiles_Call) RunAndReturn(run func(context.Context, common.CopyParquetReq) (*common.CardData, error)) *MockDataViewerActivity_CopyParquetFiles_Call {
	_c.Call.Return(run)
	return _c
}

// CreateParquetBranch provides a mock function with given fields: ctx, req
func (_m *MockDataViewerActivity) CreateParquetBranch(ctx context.Context, req types.UpdateViewerReq) (string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateParquetBranch")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.UpdateViewerReq) (string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.UpdateViewerReq) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.UpdateViewerReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataViewerActivity_CreateParquetBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateParquetBranch'
type MockDataViewerActivity_CreateParquetBranch_Call struct {
	*mock.Call
}

// CreateParquetBranch is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.UpdateViewerReq
func (_e *MockDataViewerActivity_Expecter) CreateParquetBranch(ctx interface{}, req interface{}) *MockDataViewerActivity_CreateParquetBranch_Call {
	return &MockDataViewerActivity_CreateParquetBranch_Call{Call: _e.mock.On("CreateParquetBranch", ctx, req)}
}

func (_c *MockDataViewerActivity_CreateParquetBranch_Call) Run(run func(ctx context.Context, req types.UpdateViewerReq)) *MockDataViewerActivity_CreateParquetBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.UpdateViewerReq))
	})
	return _c
}

func (_c *MockDataViewerActivity_CreateParquetBranch_Call) Return(_a0 string, _a1 error) *MockDataViewerActivity_CreateParquetBranch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataViewerActivity_CreateParquetBranch_Call) RunAndReturn(run func(context.Context, types.UpdateViewerReq) (string, error)) *MockDataViewerActivity_CreateParquetBranch_Call {
	_c.Call.Return(run)
	return _c
}

// DetermineCardData provides a mock function with given fields: ctx, determineParam
func (_m *MockDataViewerActivity) DetermineCardData(ctx context.Context, determineParam common.DetermineCardReq) (*common.CardData, error) {
	ret := _m.Called(ctx, determineParam)

	if len(ret) == 0 {
		panic("no return value specified for DetermineCardData")
	}

	var r0 *common.CardData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.DetermineCardReq) (*common.CardData, error)); ok {
		return rf(ctx, determineParam)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.DetermineCardReq) *common.CardData); ok {
		r0 = rf(ctx, determineParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.CardData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.DetermineCardReq) error); ok {
		r1 = rf(ctx, determineParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataViewerActivity_DetermineCardData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DetermineCardData'
type MockDataViewerActivity_DetermineCardData_Call struct {
	*mock.Call
}

// DetermineCardData is a helper method to define mock.On call
//   - ctx context.Context
//   - determineParam common.DetermineCardReq
func (_e *MockDataViewerActivity_Expecter) DetermineCardData(ctx interface{}, determineParam interface{}) *MockDataViewerActivity_DetermineCardData_Call {
	return &MockDataViewerActivity_DetermineCardData_Call{Call: _e.mock.On("DetermineCardData", ctx, determineParam)}
}

func (_c *MockDataViewerActivity_DetermineCardData_Call) Run(run func(ctx context.Context, determineParam common.DetermineCardReq)) *MockDataViewerActivity_DetermineCardData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.DetermineCardReq))
	})
	return _c
}

func (_c *MockDataViewerActivity_DetermineCardData_Call) Return(_a0 *common.CardData, _a1 error) *MockDataViewerActivity_DetermineCardData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataViewerActivity_DetermineCardData_Call) RunAndReturn(run func(context.Context, common.DetermineCardReq) (*common.CardData, error)) *MockDataViewerActivity_DetermineCardData_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadSplitFiles provides a mock function with given fields: ctx, downloadReq
func (_m *MockDataViewerActivity) DownloadSplitFiles(ctx context.Context, downloadReq common.DownloadFileReq) (*common.DownloadCard, error) {
	ret := _m.Called(ctx, downloadReq)

	if len(ret) == 0 {
		panic("no return value specified for DownloadSplitFiles")
	}

	var r0 *common.DownloadCard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.DownloadFileReq) (*common.DownloadCard, error)); ok {
		return rf(ctx, downloadReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.DownloadFileReq) *common.DownloadCard); ok {
		r0 = rf(ctx, downloadReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.DownloadCard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.DownloadFileReq) error); ok {
		r1 = rf(ctx, downloadReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataViewerActivity_DownloadSplitFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadSplitFiles'
type MockDataViewerActivity_DownloadSplitFiles_Call struct {
	*mock.Call
}

// DownloadSplitFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - downloadReq common.DownloadFileReq
func (_e *MockDataViewerActivity_Expecter) DownloadSplitFiles(ctx interface{}, downloadReq interface{}) *MockDataViewerActivity_DownloadSplitFiles_Call {
	return &MockDataViewerActivity_DownloadSplitFiles_Call{Call: _e.mock.On("DownloadSplitFiles", ctx, downloadReq)}
}

func (_c *MockDataViewerActivity_DownloadSplitFiles_Call) Run(run func(ctx context.Context, downloadReq common.DownloadFileReq)) *MockDataViewerActivity_DownloadSplitFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.DownloadFileReq))
	})
	return _c
}

func (_c *MockDataViewerActivity_DownloadSplitFiles_Call) Return(_a0 *common.DownloadCard, _a1 error) *MockDataViewerActivity_DownloadSplitFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataViewerActivity_DownloadSplitFiles_Call) RunAndReturn(run func(context.Context, common.DownloadFileReq) (*common.DownloadCard, error)) *MockDataViewerActivity_DownloadSplitFiles_Call {
	_c.Call.Return(run)
	return _c
}

// GetCardFromReadme provides a mock function with given fields: ctx, req
func (_m *MockDataViewerActivity) GetCardFromReadme(ctx context.Context, req types.UpdateViewerReq) (*common.CardData, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetCardFromReadme")
	}

	var r0 *common.CardData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.UpdateViewerReq) (*common.CardData, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.UpdateViewerReq) *common.CardData); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.CardData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.UpdateViewerReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataViewerActivity_GetCardFromReadme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCardFromReadme'
type MockDataViewerActivity_GetCardFromReadme_Call struct {
	*mock.Call
}

// GetCardFromReadme is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.UpdateViewerReq
func (_e *MockDataViewerActivity_Expecter) GetCardFromReadme(ctx interface{}, req interface{}) *MockDataViewerActivity_GetCardFromReadme_Call {
	return &MockDataViewerActivity_GetCardFromReadme_Call{Call: _e.mock.On("GetCardFromReadme", ctx, req)}
}

func (_c *MockDataViewerActivity_GetCardFromReadme_Call) Run(run func(ctx context.Context, req types.UpdateViewerReq)) *MockDataViewerActivity_GetCardFromReadme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.UpdateViewerReq))
	})
	return _c
}

func (_c *MockDataViewerActivity_GetCardFromReadme_Call) Return(_a0 *common.CardData, _a1 error) *MockDataViewerActivity_GetCardFromReadme_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataViewerActivity_GetCardFromReadme_Call) RunAndReturn(run func(context.Context, types.UpdateViewerReq) (*common.CardData, error)) *MockDataViewerActivity_GetCardFromReadme_Call {
	_c.Call.Return(run)
	return _c
}

// ScanRepoFiles provides a mock function with given fields: ctx, scanParam
func (_m *MockDataViewerActivity) ScanRepoFiles(ctx context.Context, scanParam common.ScanRepoFileReq) (*common.RepoFilesClass, error) {
	ret := _m.Called(ctx, scanParam)

	if len(ret) == 0 {
		panic("no return value specified for ScanRepoFiles")
	}

	var r0 *common.RepoFilesClass
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.ScanRepoFileReq) (*common.RepoFilesClass, error)); ok {
		return rf(ctx, scanParam)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.ScanRepoFileReq) *common.RepoFilesClass); ok {
		r0 = rf(ctx, scanParam)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.RepoFilesClass)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.ScanRepoFileReq) error); ok {
		r1 = rf(ctx, scanParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataViewerActivity_ScanRepoFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanRepoFiles'
type MockDataViewerActivity_ScanRepoFiles_Call struct {
	*mock.Call
}

// ScanRepoFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - scanParam common.ScanRepoFileReq
func (_e *MockDataViewerActivity_Expecter) ScanRepoFiles(ctx interface{}, scanParam interface{}) *MockDataViewerActivity_ScanRepoFiles_Call {
	return &MockDataViewerActivity_ScanRepoFiles_Call{Call: _e.mock.On("ScanRepoFiles", ctx, scanParam)}
}

func (_c *MockDataViewerActivity_ScanRepoFiles_Call) Run(run func(ctx context.Context, scanParam common.ScanRepoFileReq)) *MockDataViewerActivity_ScanRepoFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.ScanRepoFileReq))
	})
	return _c
}

func (_c *MockDataViewerActivity_ScanRepoFiles_Call) Return(_a0 *common.RepoFilesClass, _a1 error) *MockDataViewerActivity_ScanRepoFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataViewerActivity_ScanRepoFiles_Call) RunAndReturn(run func(context.Context, common.ScanRepoFileReq) (*common.RepoFilesClass, error)) *MockDataViewerActivity_ScanRepoFiles_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCardData provides a mock function with given fields: ctx, cardReq
func (_m *MockDataViewerActivity) UpdateCardData(ctx context.Context, cardReq common.UpdateCardReq) error {
	ret := _m.Called(ctx, cardReq)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCardData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.UpdateCardReq) error); ok {
		r0 = rf(ctx, cardReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataViewerActivity_UpdateCardData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCardData'
type MockDataViewerActivity_UpdateCardData_Call struct {
	*mock.Call
}

// UpdateCardData is a helper method to define mock.On call
//   - ctx context.Context
//   - cardReq common.UpdateCardReq
func (_e *MockDataViewerActivity_Expecter) UpdateCardData(ctx interface{}, cardReq interface{}) *MockDataViewerActivity_UpdateCardData_Call {
	return &MockDataViewerActivity_UpdateCardData_Call{Call: _e.mock.On("UpdateCardData", ctx, cardReq)}
}

func (_c *MockDataViewerActivity_UpdateCardData_Call) Run(run func(ctx context.Context, cardReq common.UpdateCardReq)) *MockDataViewerActivity_UpdateCardData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.UpdateCardReq))
	})
	return _c
}

func (_c *MockDataViewerActivity_UpdateCardData_Call) Return(_a0 error) *MockDataViewerActivity_UpdateCardData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataViewerActivity_UpdateCardData_Call) RunAndReturn(run func(context.Context, common.UpdateCardReq) error) *MockDataViewerActivity_UpdateCardData_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkflowStatus provides a mock function with given fields: ctx, status
func (_m *MockDataViewerActivity) UpdateWorkflowStatus(ctx context.Context, status common.UpdateWorkflowStatusReq) error {
	ret := _m.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkflowStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.UpdateWorkflowStatusReq) error); ok {
		r0 = rf(ctx, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataViewerActivity_UpdateWorkflowStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkflowStatus'
type MockDataViewerActivity_UpdateWorkflowStatus_Call struct {
	*mock.Call
}

// UpdateWorkflowStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - status common.UpdateWorkflowStatusReq
func (_e *MockDataViewerActivity_Expecter) UpdateWorkflowStatus(ctx interface{}, status interface{}) *MockDataViewerActivity_UpdateWorkflowStatus_Call {
	return &MockDataViewerActivity_UpdateWorkflowStatus_Call{Call: _e.mock.On("UpdateWorkflowStatus", ctx, status)}
}

func (_c *MockDataViewerActivity_UpdateWorkflowStatus_Call) Run(run func(ctx context.Context, status common.UpdateWorkflowStatusReq)) *MockDataViewerActivity_UpdateWorkflowStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.UpdateWorkflowStatusReq))
	})
	return _c
}

func (_c *MockDataViewerActivity_UpdateWorkflowStatus_Call) Return(_a0 error) *MockDataViewerActivity_UpdateWorkflowStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataViewerActivity_UpdateWorkflowStatus_Call) RunAndReturn(run func(context.Context, common.UpdateWorkflowStatusReq) error) *MockDataViewerActivity_UpdateWorkflowStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UploadParquetFiles provides a mock function with given fields: ctx, uploadReq
func (_m *MockDataViewerActivity) UploadParquetFiles(ctx context.Context, uploadReq common.UploadParquetReq) (*common.CardData, error) {
	ret := _m.Called(ctx, uploadReq)

	if len(ret) == 0 {
		panic("no return value specified for UploadParquetFiles")
	}

	var r0 *common.CardData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.UploadParquetReq) (*common.CardData, error)); ok {
		return rf(ctx, uploadReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.UploadParquetReq) *common.CardData); ok {
		r0 = rf(ctx, uploadReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.CardData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.UploadParquetReq) error); ok {
		r1 = rf(ctx, uploadReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDataViewerActivity_UploadParquetFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadParquetFiles'
type MockDataViewerActivity_UploadParquetFiles_Call struct {
	*mock.Call
}

// UploadParquetFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - uploadReq common.UploadParquetReq
func (_e *MockDataViewerActivity_Expecter) UploadParquetFiles(ctx interface{}, uploadReq interface{}) *MockDataViewerActivity_UploadParquetFiles_Call {
	return &MockDataViewerActivity_UploadParquetFiles_Call{Call: _e.mock.On("UploadParquetFiles", ctx, uploadReq)}
}

func (_c *MockDataViewerActivity_UploadParquetFiles_Call) Run(run func(ctx context.Context, uploadReq common.UploadParquetReq)) *MockDataViewerActivity_UploadParquetFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.UploadParquetReq))
	})
	return _c
}

func (_c *MockDataViewerActivity_UploadParquetFiles_Call) Return(_a0 *common.CardData, _a1 error) *MockDataViewerActivity_UploadParquetFiles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDataViewerActivity_UploadParquetFiles_Call) RunAndReturn(run func(context.Context, common.UploadParquetReq) (*common.CardData, error)) *MockDataViewerActivity_UploadParquetFiles_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataViewerActivity creates a new instance of MockDataViewerActivity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataViewerActivity(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataViewerActivity {
	mock := &MockDataViewerActivity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

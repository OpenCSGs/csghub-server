// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	types "opencsg.com/csghub-server/common/types"
)

// MockNotificationComponent is an autogenerated mock type for the NotificationComponent type
type MockNotificationComponent struct {
	mock.Mock
}

type MockNotificationComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationComponent) EXPECT() *MockNotificationComponent_Expecter {
	return &MockNotificationComponent_Expecter{mock: &_m.Mock}
}

// GetNotificationSetting provides a mock function with given fields: ctx, uid, location
func (_m *MockNotificationComponent) GetNotificationSetting(ctx context.Context, uid string, location *time.Location) (*types.NotificationSetting, error) {
	ret := _m.Called(ctx, uid, location)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationSetting")
	}

	var r0 *types.NotificationSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *time.Location) (*types.NotificationSetting, error)); ok {
		return rf(ctx, uid, location)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *time.Location) *types.NotificationSetting); ok {
		r0 = rf(ctx, uid, location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NotificationSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *time.Location) error); ok {
		r1 = rf(ctx, uid, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationComponent_GetNotificationSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationSetting'
type MockNotificationComponent_GetNotificationSetting_Call struct {
	*mock.Call
}

// GetNotificationSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - location *time.Location
func (_e *MockNotificationComponent_Expecter) GetNotificationSetting(ctx interface{}, uid interface{}, location interface{}) *MockNotificationComponent_GetNotificationSetting_Call {
	return &MockNotificationComponent_GetNotificationSetting_Call{Call: _e.mock.On("GetNotificationSetting", ctx, uid, location)}
}

func (_c *MockNotificationComponent_GetNotificationSetting_Call) Run(run func(ctx context.Context, uid string, location *time.Location)) *MockNotificationComponent_GetNotificationSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*time.Location))
	})
	return _c
}

func (_c *MockNotificationComponent_GetNotificationSetting_Call) Return(_a0 *types.NotificationSetting, _a1 error) *MockNotificationComponent_GetNotificationSetting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationComponent_GetNotificationSetting_Call) RunAndReturn(run func(context.Context, string, *time.Location) (*types.NotificationSetting, error)) *MockNotificationComponent_GetNotificationSetting_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnreadCount provides a mock function with given fields: ctx, userUUID
func (_m *MockNotificationComponent) GetUnreadCount(ctx context.Context, userUUID string) (int64, error) {
	ret := _m.Called(ctx, userUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetUnreadCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, userUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, userUUID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationComponent_GetUnreadCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnreadCount'
type MockNotificationComponent_GetUnreadCount_Call struct {
	*mock.Call
}

// GetUnreadCount is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
func (_e *MockNotificationComponent_Expecter) GetUnreadCount(ctx interface{}, userUUID interface{}) *MockNotificationComponent_GetUnreadCount_Call {
	return &MockNotificationComponent_GetUnreadCount_Call{Call: _e.mock.On("GetUnreadCount", ctx, userUUID)}
}

func (_c *MockNotificationComponent_GetUnreadCount_Call) Run(run func(ctx context.Context, userUUID string)) *MockNotificationComponent_GetUnreadCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNotificationComponent_GetUnreadCount_Call) Return(_a0 int64, _a1 error) *MockNotificationComponent_GetUnreadCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationComponent_GetUnreadCount_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *MockNotificationComponent_GetUnreadCount_Call {
	_c.Call.Return(run)
	return _c
}

// ListNotifications provides a mock function with given fields: ctx, uid, req
func (_m *MockNotificationComponent) ListNotifications(ctx context.Context, uid string, req types.NotificationsRequest) ([]types.Notifications, int, error) {
	ret := _m.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for ListNotifications")
	}

	var r0 []types.Notifications
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.NotificationsRequest) ([]types.Notifications, int, error)); ok {
		return rf(ctx, uid, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.NotificationsRequest) []types.Notifications); ok {
		r0 = rf(ctx, uid, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Notifications)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.NotificationsRequest) int); ok {
		r1 = rf(ctx, uid, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, types.NotificationsRequest) error); ok {
		r2 = rf(ctx, uid, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNotificationComponent_ListNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNotifications'
type MockNotificationComponent_ListNotifications_Call struct {
	*mock.Call
}

// ListNotifications is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req types.NotificationsRequest
func (_e *MockNotificationComponent_Expecter) ListNotifications(ctx interface{}, uid interface{}, req interface{}) *MockNotificationComponent_ListNotifications_Call {
	return &MockNotificationComponent_ListNotifications_Call{Call: _e.mock.On("ListNotifications", ctx, uid, req)}
}

func (_c *MockNotificationComponent_ListNotifications_Call) Run(run func(ctx context.Context, uid string, req types.NotificationsRequest)) *MockNotificationComponent_ListNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.NotificationsRequest))
	})
	return _c
}

func (_c *MockNotificationComponent_ListNotifications_Call) Return(_a0 []types.Notifications, _a1 int, _a2 error) *MockNotificationComponent_ListNotifications_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNotificationComponent_ListNotifications_Call) RunAndReturn(run func(context.Context, string, types.NotificationsRequest) ([]types.Notifications, int, error)) *MockNotificationComponent_ListNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// MarkAsRead provides a mock function with given fields: ctx, uid, req
func (_m *MockNotificationComponent) MarkAsRead(ctx context.Context, uid string, req types.MarkNotificationsAsReadReq) error {
	ret := _m.Called(ctx, uid, req)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsRead")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.MarkNotificationsAsReadReq) error); ok {
		r0 = rf(ctx, uid, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationComponent_MarkAsRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkAsRead'
type MockNotificationComponent_MarkAsRead_Call struct {
	*mock.Call
}

// MarkAsRead is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req types.MarkNotificationsAsReadReq
func (_e *MockNotificationComponent_Expecter) MarkAsRead(ctx interface{}, uid interface{}, req interface{}) *MockNotificationComponent_MarkAsRead_Call {
	return &MockNotificationComponent_MarkAsRead_Call{Call: _e.mock.On("MarkAsRead", ctx, uid, req)}
}

func (_c *MockNotificationComponent_MarkAsRead_Call) Run(run func(ctx context.Context, uid string, req types.MarkNotificationsAsReadReq)) *MockNotificationComponent_MarkAsRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.MarkNotificationsAsReadReq))
	})
	return _c
}

func (_c *MockNotificationComponent_MarkAsRead_Call) Return(_a0 error) *MockNotificationComponent_MarkAsRead_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationComponent_MarkAsRead_Call) RunAndReturn(run func(context.Context, string, types.MarkNotificationsAsReadReq) error) *MockNotificationComponent_MarkAsRead_Call {
	_c.Call.Return(run)
	return _c
}

// NotificationsSetting provides a mock function with given fields: ctx, uid, req, location
func (_m *MockNotificationComponent) NotificationsSetting(ctx context.Context, uid string, req types.UpdateNotificationReq, location *time.Location) error {
	ret := _m.Called(ctx, uid, req, location)

	if len(ret) == 0 {
		panic("no return value specified for NotificationsSetting")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.UpdateNotificationReq, *time.Location) error); ok {
		r0 = rf(ctx, uid, req, location)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationComponent_NotificationsSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotificationsSetting'
type MockNotificationComponent_NotificationsSetting_Call struct {
	*mock.Call
}

// NotificationsSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - req types.UpdateNotificationReq
//   - location *time.Location
func (_e *MockNotificationComponent_Expecter) NotificationsSetting(ctx interface{}, uid interface{}, req interface{}, location interface{}) *MockNotificationComponent_NotificationsSetting_Call {
	return &MockNotificationComponent_NotificationsSetting_Call{Call: _e.mock.On("NotificationsSetting", ctx, uid, req, location)}
}

func (_c *MockNotificationComponent_NotificationsSetting_Call) Run(run func(ctx context.Context, uid string, req types.UpdateNotificationReq, location *time.Location)) *MockNotificationComponent_NotificationsSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.UpdateNotificationReq), args[3].(*time.Location))
	})
	return _c
}

func (_c *MockNotificationComponent_NotificationsSetting_Call) Return(_a0 error) *MockNotificationComponent_NotificationsSetting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationComponent_NotificationsSetting_Call) RunAndReturn(run func(context.Context, string, types.UpdateNotificationReq, *time.Location) error) *MockNotificationComponent_NotificationsSetting_Call {
	_c.Call.Return(run)
	return _c
}

// PollNewNotifications provides a mock function with given fields: ctx, userUUID, limit, location
func (_m *MockNotificationComponent) PollNewNotifications(ctx context.Context, userUUID string, limit int, location *time.Location) (*types.NewNotifications, error) {
	ret := _m.Called(ctx, userUUID, limit, location)

	if len(ret) == 0 {
		panic("no return value specified for PollNewNotifications")
	}

	var r0 *types.NewNotifications
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, *time.Location) (*types.NewNotifications, error)); ok {
		return rf(ctx, userUUID, limit, location)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, *time.Location) *types.NewNotifications); ok {
		r0 = rf(ctx, userUUID, limit, location)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.NewNotifications)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, *time.Location) error); ok {
		r1 = rf(ctx, userUUID, limit, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationComponent_PollNewNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PollNewNotifications'
type MockNotificationComponent_PollNewNotifications_Call struct {
	*mock.Call
}

// PollNewNotifications is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
//   - limit int
//   - location *time.Location
func (_e *MockNotificationComponent_Expecter) PollNewNotifications(ctx interface{}, userUUID interface{}, limit interface{}, location interface{}) *MockNotificationComponent_PollNewNotifications_Call {
	return &MockNotificationComponent_PollNewNotifications_Call{Call: _e.mock.On("PollNewNotifications", ctx, userUUID, limit, location)}
}

func (_c *MockNotificationComponent_PollNewNotifications_Call) Run(run func(ctx context.Context, userUUID string, limit int, location *time.Location)) *MockNotificationComponent_PollNewNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(*time.Location))
	})
	return _c
}

func (_c *MockNotificationComponent_PollNewNotifications_Call) Return(_a0 *types.NewNotifications, _a1 error) *MockNotificationComponent_PollNewNotifications_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationComponent_PollNewNotifications_Call) RunAndReturn(run func(context.Context, string, int, *time.Location) (*types.NewNotifications, error)) *MockNotificationComponent_PollNewNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// PublishMessage provides a mock function with given fields: ctx, message
func (_m *MockNotificationComponent) PublishMessage(ctx context.Context, message types.ScenarioMessage) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for PublishMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ScenarioMessage) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationComponent_PublishMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishMessage'
type MockNotificationComponent_PublishMessage_Call struct {
	*mock.Call
}

// PublishMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message types.ScenarioMessage
func (_e *MockNotificationComponent_Expecter) PublishMessage(ctx interface{}, message interface{}) *MockNotificationComponent_PublishMessage_Call {
	return &MockNotificationComponent_PublishMessage_Call{Call: _e.mock.On("PublishMessage", ctx, message)}
}

func (_c *MockNotificationComponent_PublishMessage_Call) Run(run func(ctx context.Context, message types.ScenarioMessage)) *MockNotificationComponent_PublishMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ScenarioMessage))
	})
	return _c
}

func (_c *MockNotificationComponent_PublishMessage_Call) Return(_a0 error) *MockNotificationComponent_PublishMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationComponent_PublishMessage_Call) RunAndReturn(run func(context.Context, types.ScenarioMessage) error) *MockNotificationComponent_PublishMessage_Call {
	_c.Call.Return(run)
	return _c
}

// PublishNotificationMessage provides a mock function with given fields: ctx, message
func (_m *MockNotificationComponent) PublishNotificationMessage(ctx context.Context, message types.NotificationMessage) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for PublishNotificationMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.NotificationMessage) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNotificationComponent_PublishNotificationMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishNotificationMessage'
type MockNotificationComponent_PublishNotificationMessage_Call struct {
	*mock.Call
}

// PublishNotificationMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message types.NotificationMessage
func (_e *MockNotificationComponent_Expecter) PublishNotificationMessage(ctx interface{}, message interface{}) *MockNotificationComponent_PublishNotificationMessage_Call {
	return &MockNotificationComponent_PublishNotificationMessage_Call{Call: _e.mock.On("PublishNotificationMessage", ctx, message)}
}

func (_c *MockNotificationComponent_PublishNotificationMessage_Call) Run(run func(ctx context.Context, message types.NotificationMessage)) *MockNotificationComponent_PublishNotificationMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.NotificationMessage))
	})
	return _c
}

func (_c *MockNotificationComponent_PublishNotificationMessage_Call) Return(_a0 error) *MockNotificationComponent_PublishNotificationMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationComponent_PublishNotificationMessage_Call) RunAndReturn(run func(context.Context, types.NotificationMessage) error) *MockNotificationComponent_PublishNotificationMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationComponent creates a new instance of MockNotificationComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationComponent {
	mock := &MockNotificationComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockAccountingPresentComponent is an autogenerated mock type for the AccountingPresentComponent type
type MockAccountingPresentComponent struct {
	mock.Mock
}

type MockAccountingPresentComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountingPresentComponent) EXPECT() *MockAccountingPresentComponent_Expecter {
	return &MockAccountingPresentComponent_Expecter{mock: &_m.Mock}
}

// PresentAccountingUser provides a mock function with given fields: ctx, userUUID, req
func (_m *MockAccountingPresentComponent) PresentAccountingUser(ctx context.Context, userUUID string, req types.ACTIVITY_REQ) error {
	ret := _m.Called(ctx, userUUID, req)

	if len(ret) == 0 {
		panic("no return value specified for PresentAccountingUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.ACTIVITY_REQ) error); ok {
		r0 = rf(ctx, userUUID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountingPresentComponent_PresentAccountingUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PresentAccountingUser'
type MockAccountingPresentComponent_PresentAccountingUser_Call struct {
	*mock.Call
}

// PresentAccountingUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
//   - req types.ACTIVITY_REQ
func (_e *MockAccountingPresentComponent_Expecter) PresentAccountingUser(ctx interface{}, userUUID interface{}, req interface{}) *MockAccountingPresentComponent_PresentAccountingUser_Call {
	return &MockAccountingPresentComponent_PresentAccountingUser_Call{Call: _e.mock.On("PresentAccountingUser", ctx, userUUID, req)}
}

func (_c *MockAccountingPresentComponent_PresentAccountingUser_Call) Run(run func(ctx context.Context, userUUID string, req types.ACTIVITY_REQ)) *MockAccountingPresentComponent_PresentAccountingUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.ACTIVITY_REQ))
	})
	return _c
}

func (_c *MockAccountingPresentComponent_PresentAccountingUser_Call) Return(_a0 error) *MockAccountingPresentComponent_PresentAccountingUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountingPresentComponent_PresentAccountingUser_Call) RunAndReturn(run func(context.Context, string, types.ACTIVITY_REQ) error) *MockAccountingPresentComponent_PresentAccountingUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountingPresentComponent creates a new instance of MockAccountingPresentComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountingPresentComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountingPresentComponent {
	mock := &MockAccountingPresentComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

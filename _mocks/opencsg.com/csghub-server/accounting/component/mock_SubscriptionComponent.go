// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockSubscriptionComponent is an autogenerated mock type for the SubscriptionComponent type
type MockSubscriptionComponent struct {
	mock.Mock
}

type MockSubscriptionComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriptionComponent) EXPECT() *MockSubscriptionComponent_Expecter {
	return &MockSubscriptionComponent_Expecter{mock: &_m.Mock}
}

// BatchStatus provides a mock function with given fields: ctx, req
func (_m *MockSubscriptionComponent) BatchStatus(ctx context.Context, req *types.SubscriptionBatchStatusReq) ([]types.SubscriptionStatusResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for BatchStatus")
	}

	var r0 []types.SubscriptionStatusResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionBatchStatusReq) ([]types.SubscriptionStatusResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionBatchStatusReq) []types.SubscriptionStatusResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.SubscriptionStatusResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.SubscriptionBatchStatusReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubscriptionComponent_BatchStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchStatus'
type MockSubscriptionComponent_BatchStatus_Call struct {
	*mock.Call
}

// BatchStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.SubscriptionBatchStatusReq
func (_e *MockSubscriptionComponent_Expecter) BatchStatus(ctx interface{}, req interface{}) *MockSubscriptionComponent_BatchStatus_Call {
	return &MockSubscriptionComponent_BatchStatus_Call{Call: _e.mock.On("BatchStatus", ctx, req)}
}

func (_c *MockSubscriptionComponent_BatchStatus_Call) Run(run func(ctx context.Context, req *types.SubscriptionBatchStatusReq)) *MockSubscriptionComponent_BatchStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.SubscriptionBatchStatusReq))
	})
	return _c
}

func (_c *MockSubscriptionComponent_BatchStatus_Call) Return(_a0 []types.SubscriptionStatusResp, _a1 error) *MockSubscriptionComponent_BatchStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubscriptionComponent_BatchStatus_Call) RunAndReturn(run func(context.Context, *types.SubscriptionBatchStatusReq) ([]types.SubscriptionStatusResp, error)) *MockSubscriptionComponent_BatchStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CloseSub provides a mock function with given fields: ctx, req
func (_m *MockSubscriptionComponent) CloseSub(ctx context.Context, req *types.SubscriptionGetReq) (*types.SubscriptionResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CloseSub")
	}

	var r0 *types.SubscriptionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionGetReq) (*types.SubscriptionResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionGetReq) *types.SubscriptionResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SubscriptionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.SubscriptionGetReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubscriptionComponent_CloseSub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseSub'
type MockSubscriptionComponent_CloseSub_Call struct {
	*mock.Call
}

// CloseSub is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.SubscriptionGetReq
func (_e *MockSubscriptionComponent_Expecter) CloseSub(ctx interface{}, req interface{}) *MockSubscriptionComponent_CloseSub_Call {
	return &MockSubscriptionComponent_CloseSub_Call{Call: _e.mock.On("CloseSub", ctx, req)}
}

func (_c *MockSubscriptionComponent_CloseSub_Call) Run(run func(ctx context.Context, req *types.SubscriptionGetReq)) *MockSubscriptionComponent_CloseSub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.SubscriptionGetReq))
	})
	return _c
}

func (_c *MockSubscriptionComponent_CloseSub_Call) Return(_a0 *types.SubscriptionResp, _a1 error) *MockSubscriptionComponent_CloseSub_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubscriptionComponent_CloseSub_Call) RunAndReturn(run func(context.Context, *types.SubscriptionGetReq) (*types.SubscriptionResp, error)) *MockSubscriptionComponent_CloseSub_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSub provides a mock function with given fields: ctx, req
func (_m *MockSubscriptionComponent) CreateSub(ctx context.Context, req *types.SubscriptionCreateReq) (*types.SubscriptionResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateSub")
	}

	var r0 *types.SubscriptionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionCreateReq) (*types.SubscriptionResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionCreateReq) *types.SubscriptionResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SubscriptionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.SubscriptionCreateReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubscriptionComponent_CreateSub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSub'
type MockSubscriptionComponent_CreateSub_Call struct {
	*mock.Call
}

// CreateSub is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.SubscriptionCreateReq
func (_e *MockSubscriptionComponent_Expecter) CreateSub(ctx interface{}, req interface{}) *MockSubscriptionComponent_CreateSub_Call {
	return &MockSubscriptionComponent_CreateSub_Call{Call: _e.mock.On("CreateSub", ctx, req)}
}

func (_c *MockSubscriptionComponent_CreateSub_Call) Run(run func(ctx context.Context, req *types.SubscriptionCreateReq)) *MockSubscriptionComponent_CreateSub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.SubscriptionCreateReq))
	})
	return _c
}

func (_c *MockSubscriptionComponent_CreateSub_Call) Return(_a0 *types.SubscriptionResp, _a1 error) *MockSubscriptionComponent_CreateSub_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubscriptionComponent_CreateSub_Call) RunAndReturn(run func(context.Context, *types.SubscriptionCreateReq) (*types.SubscriptionResp, error)) *MockSubscriptionComponent_CreateSub_Call {
	_c.Call.Return(run)
	return _c
}

// GetSub provides a mock function with given fields: ctx, req
func (_m *MockSubscriptionComponent) GetSub(ctx context.Context, req *types.SubscriptionGetReq) (*types.SubscriptionResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetSub")
	}

	var r0 *types.SubscriptionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionGetReq) (*types.SubscriptionResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionGetReq) *types.SubscriptionResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SubscriptionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.SubscriptionGetReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubscriptionComponent_GetSub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSub'
type MockSubscriptionComponent_GetSub_Call struct {
	*mock.Call
}

// GetSub is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.SubscriptionGetReq
func (_e *MockSubscriptionComponent_Expecter) GetSub(ctx interface{}, req interface{}) *MockSubscriptionComponent_GetSub_Call {
	return &MockSubscriptionComponent_GetSub_Call{Call: _e.mock.On("GetSub", ctx, req)}
}

func (_c *MockSubscriptionComponent_GetSub_Call) Run(run func(ctx context.Context, req *types.SubscriptionGetReq)) *MockSubscriptionComponent_GetSub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.SubscriptionGetReq))
	})
	return _c
}

func (_c *MockSubscriptionComponent_GetSub_Call) Return(_a0 *types.SubscriptionResp, _a1 error) *MockSubscriptionComponent_GetSub_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubscriptionComponent_GetSub_Call) RunAndReturn(run func(context.Context, *types.SubscriptionGetReq) (*types.SubscriptionResp, error)) *MockSubscriptionComponent_GetSub_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserStatus provides a mock function with given fields: ctx, req
func (_m *MockSubscriptionComponent) GetUserStatus(ctx context.Context, req *types.SubscriptionGetReq) (*types.SubscriptionStatusResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetUserStatus")
	}

	var r0 *types.SubscriptionStatusResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionGetReq) (*types.SubscriptionStatusResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionGetReq) *types.SubscriptionStatusResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SubscriptionStatusResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.SubscriptionGetReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubscriptionComponent_GetUserStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserStatus'
type MockSubscriptionComponent_GetUserStatus_Call struct {
	*mock.Call
}

// GetUserStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.SubscriptionGetReq
func (_e *MockSubscriptionComponent_Expecter) GetUserStatus(ctx interface{}, req interface{}) *MockSubscriptionComponent_GetUserStatus_Call {
	return &MockSubscriptionComponent_GetUserStatus_Call{Call: _e.mock.On("GetUserStatus", ctx, req)}
}

func (_c *MockSubscriptionComponent_GetUserStatus_Call) Run(run func(ctx context.Context, req *types.SubscriptionGetReq)) *MockSubscriptionComponent_GetUserStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.SubscriptionGetReq))
	})
	return _c
}

func (_c *MockSubscriptionComponent_GetUserStatus_Call) Return(_a0 *types.SubscriptionStatusResp, _a1 error) *MockSubscriptionComponent_GetUserStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubscriptionComponent_GetUserStatus_Call) RunAndReturn(run func(context.Context, *types.SubscriptionGetReq) (*types.SubscriptionStatusResp, error)) *MockSubscriptionComponent_GetUserStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ListBills provides a mock function with given fields: ctx, req
func (_m *MockSubscriptionComponent) ListBills(ctx context.Context, req *types.SubscriptionBillListReq) (*types.SubscriptionBillAllRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListBills")
	}

	var r0 *types.SubscriptionBillAllRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionBillListReq) (*types.SubscriptionBillAllRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionBillListReq) *types.SubscriptionBillAllRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SubscriptionBillAllRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.SubscriptionBillListReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubscriptionComponent_ListBills_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBills'
type MockSubscriptionComponent_ListBills_Call struct {
	*mock.Call
}

// ListBills is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.SubscriptionBillListReq
func (_e *MockSubscriptionComponent_Expecter) ListBills(ctx interface{}, req interface{}) *MockSubscriptionComponent_ListBills_Call {
	return &MockSubscriptionComponent_ListBills_Call{Call: _e.mock.On("ListBills", ctx, req)}
}

func (_c *MockSubscriptionComponent_ListBills_Call) Run(run func(ctx context.Context, req *types.SubscriptionBillListReq)) *MockSubscriptionComponent_ListBills_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.SubscriptionBillListReq))
	})
	return _c
}

func (_c *MockSubscriptionComponent_ListBills_Call) Return(_a0 *types.SubscriptionBillAllRes, _a1 error) *MockSubscriptionComponent_ListBills_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubscriptionComponent_ListBills_Call) RunAndReturn(run func(context.Context, *types.SubscriptionBillListReq) (*types.SubscriptionBillAllRes, error)) *MockSubscriptionComponent_ListBills_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubs provides a mock function with given fields: ctx, req
func (_m *MockSubscriptionComponent) ListSubs(ctx context.Context, req *types.SubscriptionListReq) (*types.SubscriptionAllRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListSubs")
	}

	var r0 *types.SubscriptionAllRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionListReq) (*types.SubscriptionAllRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionListReq) *types.SubscriptionAllRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SubscriptionAllRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.SubscriptionListReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubscriptionComponent_ListSubs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubs'
type MockSubscriptionComponent_ListSubs_Call struct {
	*mock.Call
}

// ListSubs is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.SubscriptionListReq
func (_e *MockSubscriptionComponent_Expecter) ListSubs(ctx interface{}, req interface{}) *MockSubscriptionComponent_ListSubs_Call {
	return &MockSubscriptionComponent_ListSubs_Call{Call: _e.mock.On("ListSubs", ctx, req)}
}

func (_c *MockSubscriptionComponent_ListSubs_Call) Run(run func(ctx context.Context, req *types.SubscriptionListReq)) *MockSubscriptionComponent_ListSubs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.SubscriptionListReq))
	})
	return _c
}

func (_c *MockSubscriptionComponent_ListSubs_Call) Return(_a0 *types.SubscriptionAllRes, _a1 error) *MockSubscriptionComponent_ListSubs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubscriptionComponent_ListSubs_Call) RunAndReturn(run func(context.Context, *types.SubscriptionListReq) (*types.SubscriptionAllRes, error)) *MockSubscriptionComponent_ListSubs_Call {
	_c.Call.Return(run)
	return _c
}

// ScanAndConfirmSubscriptions provides a mock function with given fields: ctx
func (_m *MockSubscriptionComponent) ScanAndConfirmSubscriptions(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ScanAndConfirmSubscriptions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSubscriptionComponent_ScanAndConfirmSubscriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanAndConfirmSubscriptions'
type MockSubscriptionComponent_ScanAndConfirmSubscriptions_Call struct {
	*mock.Call
}

// ScanAndConfirmSubscriptions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSubscriptionComponent_Expecter) ScanAndConfirmSubscriptions(ctx interface{}) *MockSubscriptionComponent_ScanAndConfirmSubscriptions_Call {
	return &MockSubscriptionComponent_ScanAndConfirmSubscriptions_Call{Call: _e.mock.On("ScanAndConfirmSubscriptions", ctx)}
}

func (_c *MockSubscriptionComponent_ScanAndConfirmSubscriptions_Call) Run(run func(ctx context.Context)) *MockSubscriptionComponent_ScanAndConfirmSubscriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSubscriptionComponent_ScanAndConfirmSubscriptions_Call) Return(_a0 error) *MockSubscriptionComponent_ScanAndConfirmSubscriptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSubscriptionComponent_ScanAndConfirmSubscriptions_Call) RunAndReturn(run func(context.Context) error) *MockSubscriptionComponent_ScanAndConfirmSubscriptions_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSub provides a mock function with given fields: ctx, req
func (_m *MockSubscriptionComponent) UpdateSub(ctx context.Context, req *types.SubscriptionUpdateReq) (*types.SubscriptionResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSub")
	}

	var r0 *types.SubscriptionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionUpdateReq) (*types.SubscriptionResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.SubscriptionUpdateReq) *types.SubscriptionResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SubscriptionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.SubscriptionUpdateReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSubscriptionComponent_UpdateSub_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSub'
type MockSubscriptionComponent_UpdateSub_Call struct {
	*mock.Call
}

// UpdateSub is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.SubscriptionUpdateReq
func (_e *MockSubscriptionComponent_Expecter) UpdateSub(ctx interface{}, req interface{}) *MockSubscriptionComponent_UpdateSub_Call {
	return &MockSubscriptionComponent_UpdateSub_Call{Call: _e.mock.On("UpdateSub", ctx, req)}
}

func (_c *MockSubscriptionComponent_UpdateSub_Call) Run(run func(ctx context.Context, req *types.SubscriptionUpdateReq)) *MockSubscriptionComponent_UpdateSub_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.SubscriptionUpdateReq))
	})
	return _c
}

func (_c *MockSubscriptionComponent_UpdateSub_Call) Return(_a0 *types.SubscriptionResp, _a1 error) *MockSubscriptionComponent_UpdateSub_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSubscriptionComponent_UpdateSub_Call) RunAndReturn(run func(context.Context, *types.SubscriptionUpdateReq) (*types.SubscriptionResp, error)) *MockSubscriptionComponent_UpdateSub_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubscriptionComponent creates a new instance of MockSubscriptionComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriptionComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriptionComponent {
	mock := &MockSubscriptionComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

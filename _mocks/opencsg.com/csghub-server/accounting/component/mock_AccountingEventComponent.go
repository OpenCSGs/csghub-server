// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockAccountingEventComponent is an autogenerated mock type for the AccountingEventComponent type
type MockAccountingEventComponent struct {
	mock.Mock
}

type MockAccountingEventComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountingEventComponent) EXPECT() *MockAccountingEventComponent_Expecter {
	return &MockAccountingEventComponent_Expecter{mock: &_m.Mock}
}

// AddNewAccountingEvent provides a mock function with given fields: ctx, event, isDuplicated
func (_m *MockAccountingEventComponent) AddNewAccountingEvent(ctx context.Context, event *types.MeteringEvent, isDuplicated bool) error {
	ret := _m.Called(ctx, event, isDuplicated)

	if len(ret) == 0 {
		panic("no return value specified for AddNewAccountingEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MeteringEvent, bool) error); ok {
		r0 = rf(ctx, event, isDuplicated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountingEventComponent_AddNewAccountingEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNewAccountingEvent'
type MockAccountingEventComponent_AddNewAccountingEvent_Call struct {
	*mock.Call
}

// AddNewAccountingEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - event *types.MeteringEvent
//   - isDuplicated bool
func (_e *MockAccountingEventComponent_Expecter) AddNewAccountingEvent(ctx interface{}, event interface{}, isDuplicated interface{}) *MockAccountingEventComponent_AddNewAccountingEvent_Call {
	return &MockAccountingEventComponent_AddNewAccountingEvent_Call{Call: _e.mock.On("AddNewAccountingEvent", ctx, event, isDuplicated)}
}

func (_c *MockAccountingEventComponent_AddNewAccountingEvent_Call) Run(run func(ctx context.Context, event *types.MeteringEvent, isDuplicated bool)) *MockAccountingEventComponent_AddNewAccountingEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.MeteringEvent), args[2].(bool))
	})
	return _c
}

func (_c *MockAccountingEventComponent_AddNewAccountingEvent_Call) Return(_a0 error) *MockAccountingEventComponent_AddNewAccountingEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountingEventComponent_AddNewAccountingEvent_Call) RunAndReturn(run func(context.Context, *types.MeteringEvent, bool) error) *MockAccountingEventComponent_AddNewAccountingEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountingEventComponent creates a new instance of MockAccountingEventComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountingEventComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountingEventComponent {
	mock := &MockAccountingEventComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

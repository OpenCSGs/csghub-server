// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockAccountingInvoiceComponent is an autogenerated mock type for the AccountingInvoiceComponent type
type MockAccountingInvoiceComponent struct {
	mock.Mock
}

type MockAccountingInvoiceComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountingInvoiceComponent) EXPECT() *MockAccountingInvoiceComponent_Expecter {
	return &MockAccountingInvoiceComponent_Expecter{mock: &_m.Mock}
}

// CreateInvoice provides a mock function with given fields: ctx, req
func (_m *MockAccountingInvoiceComponent) CreateInvoice(ctx context.Context, req types.AccInvoiceCreateReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AccInvoiceCreateReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountingInvoiceComponent_CreateInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInvoice'
type MockAccountingInvoiceComponent_CreateInvoice_Call struct {
	*mock.Call
}

// CreateInvoice is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.AccInvoiceCreateReq
func (_e *MockAccountingInvoiceComponent_Expecter) CreateInvoice(ctx interface{}, req interface{}) *MockAccountingInvoiceComponent_CreateInvoice_Call {
	return &MockAccountingInvoiceComponent_CreateInvoice_Call{Call: _e.mock.On("CreateInvoice", ctx, req)}
}

func (_c *MockAccountingInvoiceComponent_CreateInvoice_Call) Run(run func(ctx context.Context, req types.AccInvoiceCreateReq)) *MockAccountingInvoiceComponent_CreateInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AccInvoiceCreateReq))
	})
	return _c
}

func (_c *MockAccountingInvoiceComponent_CreateInvoice_Call) Return(_a0 error) *MockAccountingInvoiceComponent_CreateInvoice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountingInvoiceComponent_CreateInvoice_Call) RunAndReturn(run func(context.Context, types.AccInvoiceCreateReq) error) *MockAccountingInvoiceComponent_CreateInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// CreateInvoiceTitle provides a mock function with given fields: ctx, req
func (_m *MockAccountingInvoiceComponent) CreateInvoiceTitle(ctx context.Context, req types.AccInvoiceTitleReq) (*types.AccInvoiceTitleResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvoiceTitle")
	}

	var r0 *types.AccInvoiceTitleResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AccInvoiceTitleReq) (*types.AccInvoiceTitleResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AccInvoiceTitleReq) *types.AccInvoiceTitleResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AccInvoiceTitleResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AccInvoiceTitleReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingInvoiceComponent_CreateInvoiceTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInvoiceTitle'
type MockAccountingInvoiceComponent_CreateInvoiceTitle_Call struct {
	*mock.Call
}

// CreateInvoiceTitle is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.AccInvoiceTitleReq
func (_e *MockAccountingInvoiceComponent_Expecter) CreateInvoiceTitle(ctx interface{}, req interface{}) *MockAccountingInvoiceComponent_CreateInvoiceTitle_Call {
	return &MockAccountingInvoiceComponent_CreateInvoiceTitle_Call{Call: _e.mock.On("CreateInvoiceTitle", ctx, req)}
}

func (_c *MockAccountingInvoiceComponent_CreateInvoiceTitle_Call) Run(run func(ctx context.Context, req types.AccInvoiceTitleReq)) *MockAccountingInvoiceComponent_CreateInvoiceTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AccInvoiceTitleReq))
	})
	return _c
}

func (_c *MockAccountingInvoiceComponent_CreateInvoiceTitle_Call) Return(_a0 *types.AccInvoiceTitleResp, _a1 error) *MockAccountingInvoiceComponent_CreateInvoiceTitle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingInvoiceComponent_CreateInvoiceTitle_Call) RunAndReturn(run func(context.Context, types.AccInvoiceTitleReq) (*types.AccInvoiceTitleResp, error)) *MockAccountingInvoiceComponent_CreateInvoiceTitle_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInvoice provides a mock function with given fields: ctx, id
func (_m *MockAccountingInvoiceComponent) DeleteInvoice(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountingInvoiceComponent_DeleteInvoice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInvoice'
type MockAccountingInvoiceComponent_DeleteInvoice_Call struct {
	*mock.Call
}

// DeleteInvoice is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockAccountingInvoiceComponent_Expecter) DeleteInvoice(ctx interface{}, id interface{}) *MockAccountingInvoiceComponent_DeleteInvoice_Call {
	return &MockAccountingInvoiceComponent_DeleteInvoice_Call{Call: _e.mock.On("DeleteInvoice", ctx, id)}
}

func (_c *MockAccountingInvoiceComponent_DeleteInvoice_Call) Run(run func(ctx context.Context, id int64)) *MockAccountingInvoiceComponent_DeleteInvoice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAccountingInvoiceComponent_DeleteInvoice_Call) Return(_a0 error) *MockAccountingInvoiceComponent_DeleteInvoice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountingInvoiceComponent_DeleteInvoice_Call) RunAndReturn(run func(context.Context, int64) error) *MockAccountingInvoiceComponent_DeleteInvoice_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInvoiceTitle provides a mock function with given fields: ctx, uid, id
func (_m *MockAccountingInvoiceComponent) DeleteInvoiceTitle(ctx context.Context, uid string, id int64) error {
	ret := _m.Called(ctx, uid, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvoiceTitle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, uid, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountingInvoiceComponent_DeleteInvoiceTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInvoiceTitle'
type MockAccountingInvoiceComponent_DeleteInvoiceTitle_Call struct {
	*mock.Call
}

// DeleteInvoiceTitle is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - id int64
func (_e *MockAccountingInvoiceComponent_Expecter) DeleteInvoiceTitle(ctx interface{}, uid interface{}, id interface{}) *MockAccountingInvoiceComponent_DeleteInvoiceTitle_Call {
	return &MockAccountingInvoiceComponent_DeleteInvoiceTitle_Call{Call: _e.mock.On("DeleteInvoiceTitle", ctx, uid, id)}
}

func (_c *MockAccountingInvoiceComponent_DeleteInvoiceTitle_Call) Run(run func(ctx context.Context, uid string, id int64)) *MockAccountingInvoiceComponent_DeleteInvoiceTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MockAccountingInvoiceComponent_DeleteInvoiceTitle_Call) Return(_a0 error) *MockAccountingInvoiceComponent_DeleteInvoiceTitle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountingInvoiceComponent_DeleteInvoiceTitle_Call) RunAndReturn(run func(context.Context, string, int64) error) *MockAccountingInvoiceComponent_DeleteInvoiceTitle_Call {
	_c.Call.Return(run)
	return _c
}

// GetBillAmount provides a mock function with given fields: ctx, uid, billMonth
func (_m *MockAccountingInvoiceComponent) GetBillAmount(ctx context.Context, uid string, billMonth string) (float64, error) {
	ret := _m.Called(ctx, uid, billMonth)

	if len(ret) == 0 {
		panic("no return value specified for GetBillAmount")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (float64, error)); ok {
		return rf(ctx, uid, billMonth)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) float64); ok {
		r0 = rf(ctx, uid, billMonth)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, uid, billMonth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingInvoiceComponent_GetBillAmount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBillAmount'
type MockAccountingInvoiceComponent_GetBillAmount_Call struct {
	*mock.Call
}

// GetBillAmount is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
//   - billMonth string
func (_e *MockAccountingInvoiceComponent_Expecter) GetBillAmount(ctx interface{}, uid interface{}, billMonth interface{}) *MockAccountingInvoiceComponent_GetBillAmount_Call {
	return &MockAccountingInvoiceComponent_GetBillAmount_Call{Call: _e.mock.On("GetBillAmount", ctx, uid, billMonth)}
}

func (_c *MockAccountingInvoiceComponent_GetBillAmount_Call) Run(run func(ctx context.Context, uid string, billMonth string)) *MockAccountingInvoiceComponent_GetBillAmount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAccountingInvoiceComponent_GetBillAmount_Call) Return(_a0 float64, _a1 error) *MockAccountingInvoiceComponent_GetBillAmount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingInvoiceComponent_GetBillAmount_Call) RunAndReturn(run func(context.Context, string, string) (float64, error)) *MockAccountingInvoiceComponent_GetBillAmount_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvoicableList provides a mock function with given fields: ctx, req
func (_m *MockAccountingInvoiceComponent) GetInvoicableList(ctx context.Context, req types.AccInvoicableReq) (*types.AccInvoicableResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoicableList")
	}

	var r0 *types.AccInvoicableResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AccInvoicableReq) (*types.AccInvoicableResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AccInvoicableReq) *types.AccInvoicableResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AccInvoicableResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AccInvoicableReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingInvoiceComponent_GetInvoicableList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvoicableList'
type MockAccountingInvoiceComponent_GetInvoicableList_Call struct {
	*mock.Call
}

// GetInvoicableList is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.AccInvoicableReq
func (_e *MockAccountingInvoiceComponent_Expecter) GetInvoicableList(ctx interface{}, req interface{}) *MockAccountingInvoiceComponent_GetInvoicableList_Call {
	return &MockAccountingInvoiceComponent_GetInvoicableList_Call{Call: _e.mock.On("GetInvoicableList", ctx, req)}
}

func (_c *MockAccountingInvoiceComponent_GetInvoicableList_Call) Run(run func(ctx context.Context, req types.AccInvoicableReq)) *MockAccountingInvoiceComponent_GetInvoicableList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AccInvoicableReq))
	})
	return _c
}

func (_c *MockAccountingInvoiceComponent_GetInvoicableList_Call) Return(_a0 *types.AccInvoicableResp, _a1 error) *MockAccountingInvoiceComponent_GetInvoicableList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingInvoiceComponent_GetInvoicableList_Call) RunAndReturn(run func(context.Context, types.AccInvoicableReq) (*types.AccInvoicableResp, error)) *MockAccountingInvoiceComponent_GetInvoicableList_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvoiceByID provides a mock function with given fields: ctx, id
func (_m *MockAccountingInvoiceComponent) GetInvoiceByID(ctx context.Context, id int64) (*types.AccInvoiceResp, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoiceByID")
	}

	var r0 *types.AccInvoiceResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*types.AccInvoiceResp, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *types.AccInvoiceResp); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AccInvoiceResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingInvoiceComponent_GetInvoiceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvoiceByID'
type MockAccountingInvoiceComponent_GetInvoiceByID_Call struct {
	*mock.Call
}

// GetInvoiceByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockAccountingInvoiceComponent_Expecter) GetInvoiceByID(ctx interface{}, id interface{}) *MockAccountingInvoiceComponent_GetInvoiceByID_Call {
	return &MockAccountingInvoiceComponent_GetInvoiceByID_Call{Call: _e.mock.On("GetInvoiceByID", ctx, id)}
}

func (_c *MockAccountingInvoiceComponent_GetInvoiceByID_Call) Run(run func(ctx context.Context, id int64)) *MockAccountingInvoiceComponent_GetInvoiceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAccountingInvoiceComponent_GetInvoiceByID_Call) Return(_a0 *types.AccInvoiceResp, _a1 error) *MockAccountingInvoiceComponent_GetInvoiceByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingInvoiceComponent_GetInvoiceByID_Call) RunAndReturn(run func(context.Context, int64) (*types.AccInvoiceResp, error)) *MockAccountingInvoiceComponent_GetInvoiceByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvoiceByUser provides a mock function with given fields: ctx, id, uid
func (_m *MockAccountingInvoiceComponent) GetInvoiceByUser(ctx context.Context, id int64, uid string) (*types.AccInvoiceResp, error) {
	ret := _m.Called(ctx, id, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoiceByUser")
	}

	var r0 *types.AccInvoiceResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*types.AccInvoiceResp, error)); ok {
		return rf(ctx, id, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *types.AccInvoiceResp); ok {
		r0 = rf(ctx, id, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AccInvoiceResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, id, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingInvoiceComponent_GetInvoiceByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvoiceByUser'
type MockAccountingInvoiceComponent_GetInvoiceByUser_Call struct {
	*mock.Call
}

// GetInvoiceByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - uid string
func (_e *MockAccountingInvoiceComponent_Expecter) GetInvoiceByUser(ctx interface{}, id interface{}, uid interface{}) *MockAccountingInvoiceComponent_GetInvoiceByUser_Call {
	return &MockAccountingInvoiceComponent_GetInvoiceByUser_Call{Call: _e.mock.On("GetInvoiceByUser", ctx, id, uid)}
}

func (_c *MockAccountingInvoiceComponent_GetInvoiceByUser_Call) Run(run func(ctx context.Context, id int64, uid string)) *MockAccountingInvoiceComponent_GetInvoiceByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *MockAccountingInvoiceComponent_GetInvoiceByUser_Call) Return(_a0 *types.AccInvoiceResp, _a1 error) *MockAccountingInvoiceComponent_GetInvoiceByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingInvoiceComponent_GetInvoiceByUser_Call) RunAndReturn(run func(context.Context, int64, string) (*types.AccInvoiceResp, error)) *MockAccountingInvoiceComponent_GetInvoiceByUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvoiceDashboard provides a mock function with given fields: ctx, req
func (_m *MockAccountingInvoiceComponent) GetInvoiceDashboard(ctx context.Context, req types.AccInvoiceDashboardReq) (*types.AccInvoiceDashboardResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoiceDashboard")
	}

	var r0 *types.AccInvoiceDashboardResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AccInvoiceDashboardReq) (*types.AccInvoiceDashboardResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AccInvoiceDashboardReq) *types.AccInvoiceDashboardResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AccInvoiceDashboardResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AccInvoiceDashboardReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingInvoiceComponent_GetInvoiceDashboard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvoiceDashboard'
type MockAccountingInvoiceComponent_GetInvoiceDashboard_Call struct {
	*mock.Call
}

// GetInvoiceDashboard is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.AccInvoiceDashboardReq
func (_e *MockAccountingInvoiceComponent_Expecter) GetInvoiceDashboard(ctx interface{}, req interface{}) *MockAccountingInvoiceComponent_GetInvoiceDashboard_Call {
	return &MockAccountingInvoiceComponent_GetInvoiceDashboard_Call{Call: _e.mock.On("GetInvoiceDashboard", ctx, req)}
}

func (_c *MockAccountingInvoiceComponent_GetInvoiceDashboard_Call) Run(run func(ctx context.Context, req types.AccInvoiceDashboardReq)) *MockAccountingInvoiceComponent_GetInvoiceDashboard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AccInvoiceDashboardReq))
	})
	return _c
}

func (_c *MockAccountingInvoiceComponent_GetInvoiceDashboard_Call) Return(_a0 *types.AccInvoiceDashboardResp, _a1 error) *MockAccountingInvoiceComponent_GetInvoiceDashboard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingInvoiceComponent_GetInvoiceDashboard_Call) RunAndReturn(run func(context.Context, types.AccInvoiceDashboardReq) (*types.AccInvoiceDashboardResp, error)) *MockAccountingInvoiceComponent_GetInvoiceDashboard_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvoiceTitleTypes provides a mock function with given fields: ctx
func (_m *MockAccountingInvoiceComponent) GetInvoiceTitleTypes(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoiceTitleTypes")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingInvoiceComponent_GetInvoiceTitleTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvoiceTitleTypes'
type MockAccountingInvoiceComponent_GetInvoiceTitleTypes_Call struct {
	*mock.Call
}

// GetInvoiceTitleTypes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAccountingInvoiceComponent_Expecter) GetInvoiceTitleTypes(ctx interface{}) *MockAccountingInvoiceComponent_GetInvoiceTitleTypes_Call {
	return &MockAccountingInvoiceComponent_GetInvoiceTitleTypes_Call{Call: _e.mock.On("GetInvoiceTitleTypes", ctx)}
}

func (_c *MockAccountingInvoiceComponent_GetInvoiceTitleTypes_Call) Run(run func(ctx context.Context)) *MockAccountingInvoiceComponent_GetInvoiceTitleTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAccountingInvoiceComponent_GetInvoiceTitleTypes_Call) Return(_a0 []string, _a1 error) *MockAccountingInvoiceComponent_GetInvoiceTitleTypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingInvoiceComponent_GetInvoiceTitleTypes_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockAccountingInvoiceComponent_GetInvoiceTitleTypes_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvoiceTypes provides a mock function with given fields: ctx
func (_m *MockAccountingInvoiceComponent) GetInvoiceTypes(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoiceTypes")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingInvoiceComponent_GetInvoiceTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvoiceTypes'
type MockAccountingInvoiceComponent_GetInvoiceTypes_Call struct {
	*mock.Call
}

// GetInvoiceTypes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAccountingInvoiceComponent_Expecter) GetInvoiceTypes(ctx interface{}) *MockAccountingInvoiceComponent_GetInvoiceTypes_Call {
	return &MockAccountingInvoiceComponent_GetInvoiceTypes_Call{Call: _e.mock.On("GetInvoiceTypes", ctx)}
}

func (_c *MockAccountingInvoiceComponent_GetInvoiceTypes_Call) Run(run func(ctx context.Context)) *MockAccountingInvoiceComponent_GetInvoiceTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAccountingInvoiceComponent_GetInvoiceTypes_Call) Return(_a0 []string, _a1 error) *MockAccountingInvoiceComponent_GetInvoiceTypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingInvoiceComponent_GetInvoiceTypes_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockAccountingInvoiceComponent_GetInvoiceTypes_Call {
	_c.Call.Return(run)
	return _c
}

// ListInvoiceTitles provides a mock function with given fields: ctx, req
func (_m *MockAccountingInvoiceComponent) ListInvoiceTitles(ctx context.Context, req types.AccInvoiceTitleListReq) (*types.AccInvoiceTitleListResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListInvoiceTitles")
	}

	var r0 *types.AccInvoiceTitleListResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AccInvoiceTitleListReq) (*types.AccInvoiceTitleListResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AccInvoiceTitleListReq) *types.AccInvoiceTitleListResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AccInvoiceTitleListResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AccInvoiceTitleListReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingInvoiceComponent_ListInvoiceTitles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInvoiceTitles'
type MockAccountingInvoiceComponent_ListInvoiceTitles_Call struct {
	*mock.Call
}

// ListInvoiceTitles is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.AccInvoiceTitleListReq
func (_e *MockAccountingInvoiceComponent_Expecter) ListInvoiceTitles(ctx interface{}, req interface{}) *MockAccountingInvoiceComponent_ListInvoiceTitles_Call {
	return &MockAccountingInvoiceComponent_ListInvoiceTitles_Call{Call: _e.mock.On("ListInvoiceTitles", ctx, req)}
}

func (_c *MockAccountingInvoiceComponent_ListInvoiceTitles_Call) Run(run func(ctx context.Context, req types.AccInvoiceTitleListReq)) *MockAccountingInvoiceComponent_ListInvoiceTitles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AccInvoiceTitleListReq))
	})
	return _c
}

func (_c *MockAccountingInvoiceComponent_ListInvoiceTitles_Call) Return(_a0 *types.AccInvoiceTitleListResp, _a1 error) *MockAccountingInvoiceComponent_ListInvoiceTitles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingInvoiceComponent_ListInvoiceTitles_Call) RunAndReturn(run func(context.Context, types.AccInvoiceTitleListReq) (*types.AccInvoiceTitleListResp, error)) *MockAccountingInvoiceComponent_ListInvoiceTitles_Call {
	_c.Call.Return(run)
	return _c
}

// ListInvoices provides a mock function with given fields: ctx, req
func (_m *MockAccountingInvoiceComponent) ListInvoices(ctx context.Context, req types.AccInvoiceListReq) (*types.AccInvoiceListResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListInvoices")
	}

	var r0 *types.AccInvoiceListResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AccInvoiceListReq) (*types.AccInvoiceListResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AccInvoiceListReq) *types.AccInvoiceListResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AccInvoiceListResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AccInvoiceListReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingInvoiceComponent_ListInvoices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInvoices'
type MockAccountingInvoiceComponent_ListInvoices_Call struct {
	*mock.Call
}

// ListInvoices is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.AccInvoiceListReq
func (_e *MockAccountingInvoiceComponent_Expecter) ListInvoices(ctx interface{}, req interface{}) *MockAccountingInvoiceComponent_ListInvoices_Call {
	return &MockAccountingInvoiceComponent_ListInvoices_Call{Call: _e.mock.On("ListInvoices", ctx, req)}
}

func (_c *MockAccountingInvoiceComponent_ListInvoices_Call) Run(run func(ctx context.Context, req types.AccInvoiceListReq)) *MockAccountingInvoiceComponent_ListInvoices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AccInvoiceListReq))
	})
	return _c
}

func (_c *MockAccountingInvoiceComponent_ListInvoices_Call) Return(_a0 *types.AccInvoiceListResp, _a1 error) *MockAccountingInvoiceComponent_ListInvoices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingInvoiceComponent_ListInvoices_Call) RunAndReturn(run func(context.Context, types.AccInvoiceListReq) (*types.AccInvoiceListResp, error)) *MockAccountingInvoiceComponent_ListInvoices_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInvoiceStatus provides a mock function with given fields: ctx, req
func (_m *MockAccountingInvoiceComponent) UpdateInvoiceStatus(ctx context.Context, req types.AdminUpdateInvoiceReq) (*types.AccInvoiceResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvoiceStatus")
	}

	var r0 *types.AccInvoiceResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AdminUpdateInvoiceReq) (*types.AccInvoiceResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AdminUpdateInvoiceReq) *types.AccInvoiceResp); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AccInvoiceResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AdminUpdateInvoiceReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingInvoiceComponent_UpdateInvoiceStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInvoiceStatus'
type MockAccountingInvoiceComponent_UpdateInvoiceStatus_Call struct {
	*mock.Call
}

// UpdateInvoiceStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.AdminUpdateInvoiceReq
func (_e *MockAccountingInvoiceComponent_Expecter) UpdateInvoiceStatus(ctx interface{}, req interface{}) *MockAccountingInvoiceComponent_UpdateInvoiceStatus_Call {
	return &MockAccountingInvoiceComponent_UpdateInvoiceStatus_Call{Call: _e.mock.On("UpdateInvoiceStatus", ctx, req)}
}

func (_c *MockAccountingInvoiceComponent_UpdateInvoiceStatus_Call) Run(run func(ctx context.Context, req types.AdminUpdateInvoiceReq)) *MockAccountingInvoiceComponent_UpdateInvoiceStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AdminUpdateInvoiceReq))
	})
	return _c
}

func (_c *MockAccountingInvoiceComponent_UpdateInvoiceStatus_Call) Return(_a0 *types.AccInvoiceResp, _a1 error) *MockAccountingInvoiceComponent_UpdateInvoiceStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingInvoiceComponent_UpdateInvoiceStatus_Call) RunAndReturn(run func(context.Context, types.AdminUpdateInvoiceReq) (*types.AccInvoiceResp, error)) *MockAccountingInvoiceComponent_UpdateInvoiceStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInvoiceTitle provides a mock function with given fields: ctx, id, req
func (_m *MockAccountingInvoiceComponent) UpdateInvoiceTitle(ctx context.Context, id int64, req types.AccInvoiceTitleReq) error {
	ret := _m.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvoiceTitle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, types.AccInvoiceTitleReq) error); ok {
		r0 = rf(ctx, id, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountingInvoiceComponent_UpdateInvoiceTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInvoiceTitle'
type MockAccountingInvoiceComponent_UpdateInvoiceTitle_Call struct {
	*mock.Call
}

// UpdateInvoiceTitle is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
//   - req types.AccInvoiceTitleReq
func (_e *MockAccountingInvoiceComponent_Expecter) UpdateInvoiceTitle(ctx interface{}, id interface{}, req interface{}) *MockAccountingInvoiceComponent_UpdateInvoiceTitle_Call {
	return &MockAccountingInvoiceComponent_UpdateInvoiceTitle_Call{Call: _e.mock.On("UpdateInvoiceTitle", ctx, id, req)}
}

func (_c *MockAccountingInvoiceComponent_UpdateInvoiceTitle_Call) Run(run func(ctx context.Context, id int64, req types.AccInvoiceTitleReq)) *MockAccountingInvoiceComponent_UpdateInvoiceTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(types.AccInvoiceTitleReq))
	})
	return _c
}

func (_c *MockAccountingInvoiceComponent_UpdateInvoiceTitle_Call) Return(_a0 error) *MockAccountingInvoiceComponent_UpdateInvoiceTitle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountingInvoiceComponent_UpdateInvoiceTitle_Call) RunAndReturn(run func(context.Context, int64, types.AccInvoiceTitleReq) error) *MockAccountingInvoiceComponent_UpdateInvoiceTitle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountingInvoiceComponent creates a new instance of MockAccountingInvoiceComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountingInvoiceComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountingInvoiceComponent {
	mock := &MockAccountingInvoiceComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockAccountingBillComponent is an autogenerated mock type for the AccountingBillComponent type
type MockAccountingBillComponent struct {
	mock.Mock
}

type MockAccountingBillComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountingBillComponent) EXPECT() *MockAccountingBillComponent_Expecter {
	return &MockAccountingBillComponent_Expecter{mock: &_m.Mock}
}

// ListBillsByUserIDAndDate provides a mock function with given fields: ctx, req
func (_m *MockAccountingBillComponent) ListBillsByUserIDAndDate(ctx context.Context, req types.AcctBillsReq) (database.AccountBillRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListBillsByUserIDAndDate")
	}

	var r0 database.AccountBillRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctBillsReq) (database.AccountBillRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctBillsReq) database.AccountBillRes); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(database.AccountBillRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AcctBillsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingBillComponent_ListBillsByUserIDAndDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBillsByUserIDAndDate'
type MockAccountingBillComponent_ListBillsByUserIDAndDate_Call struct {
	*mock.Call
}

// ListBillsByUserIDAndDate is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.AcctBillsReq
func (_e *MockAccountingBillComponent_Expecter) ListBillsByUserIDAndDate(ctx interface{}, req interface{}) *MockAccountingBillComponent_ListBillsByUserIDAndDate_Call {
	return &MockAccountingBillComponent_ListBillsByUserIDAndDate_Call{Call: _e.mock.On("ListBillsByUserIDAndDate", ctx, req)}
}

func (_c *MockAccountingBillComponent_ListBillsByUserIDAndDate_Call) Run(run func(ctx context.Context, req types.AcctBillsReq)) *MockAccountingBillComponent_ListBillsByUserIDAndDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AcctBillsReq))
	})
	return _c
}

func (_c *MockAccountingBillComponent_ListBillsByUserIDAndDate_Call) Return(_a0 database.AccountBillRes, _a1 error) *MockAccountingBillComponent_ListBillsByUserIDAndDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingBillComponent_ListBillsByUserIDAndDate_Call) RunAndReturn(run func(context.Context, types.AcctBillsReq) (database.AccountBillRes, error)) *MockAccountingBillComponent_ListBillsByUserIDAndDate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountingBillComponent creates a new instance of MockAccountingBillComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountingBillComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountingBillComponent {
	mock := &MockAccountingBillComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

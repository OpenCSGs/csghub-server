// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	time "time"

	types "opencsg.com/csghub-server/common/types"
)

// MockAccountingOrderComponent is an autogenerated mock type for the AccountingOrderComponent type
type MockAccountingOrderComponent struct {
	mock.Mock
}

type MockAccountingOrderComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountingOrderComponent) EXPECT() *MockAccountingOrderComponent_Expecter {
	return &MockAccountingOrderComponent_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req, nowTime
func (_m *MockAccountingOrderComponent) Create(ctx context.Context, req types.AcctOrderCreateReq, nowTime time.Time) (*database.AccountOrder, error) {
	ret := _m.Called(ctx, req, nowTime)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.AccountOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctOrderCreateReq, time.Time) (*database.AccountOrder, error)); ok {
		return rf(ctx, req, nowTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctOrderCreateReq, time.Time) *database.AccountOrder); ok {
		r0 = rf(ctx, req, nowTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AcctOrderCreateReq, time.Time) error); ok {
		r1 = rf(ctx, req, nowTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingOrderComponent_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountingOrderComponent_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.AcctOrderCreateReq
//   - nowTime time.Time
func (_e *MockAccountingOrderComponent_Expecter) Create(ctx interface{}, req interface{}, nowTime interface{}) *MockAccountingOrderComponent_Create_Call {
	return &MockAccountingOrderComponent_Create_Call{Call: _e.mock.On("Create", ctx, req, nowTime)}
}

func (_c *MockAccountingOrderComponent_Create_Call) Run(run func(ctx context.Context, req types.AcctOrderCreateReq, nowTime time.Time)) *MockAccountingOrderComponent_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AcctOrderCreateReq), args[2].(time.Time))
	})
	return _c
}

func (_c *MockAccountingOrderComponent_Create_Call) Return(_a0 *database.AccountOrder, _a1 error) *MockAccountingOrderComponent_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingOrderComponent_Create_Call) RunAndReturn(run func(context.Context, types.AcctOrderCreateReq, time.Time) (*database.AccountOrder, error)) *MockAccountingOrderComponent_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, orderUUID
func (_m *MockAccountingOrderComponent) GetByID(ctx context.Context, orderUUID string) (*database.AccountOrder, error) {
	ret := _m.Called(ctx, orderUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *database.AccountOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*database.AccountOrder, error)); ok {
		return rf(ctx, orderUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *database.AccountOrder); ok {
		r0 = rf(ctx, orderUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingOrderComponent_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockAccountingOrderComponent_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - orderUUID string
func (_e *MockAccountingOrderComponent_Expecter) GetByID(ctx interface{}, orderUUID interface{}) *MockAccountingOrderComponent_GetByID_Call {
	return &MockAccountingOrderComponent_GetByID_Call{Call: _e.mock.On("GetByID", ctx, orderUUID)}
}

func (_c *MockAccountingOrderComponent_GetByID_Call) Run(run func(ctx context.Context, orderUUID string)) *MockAccountingOrderComponent_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountingOrderComponent_GetByID_Call) Return(_a0 *database.AccountOrder, _a1 error) *MockAccountingOrderComponent_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingOrderComponent_GetByID_Call) RunAndReturn(run func(context.Context, string) (*database.AccountOrder, error)) *MockAccountingOrderComponent_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDetailByID provides a mock function with given fields: ctx, id
func (_m *MockAccountingOrderComponent) GetDetailByID(ctx context.Context, id int64) (*database.AccountOrderDetail, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDetailByID")
	}

	var r0 *database.AccountOrderDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.AccountOrderDetail, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.AccountOrderDetail); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountOrderDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingOrderComponent_GetDetailByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDetailByID'
type MockAccountingOrderComponent_GetDetailByID_Call struct {
	*mock.Call
}

// GetDetailByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockAccountingOrderComponent_Expecter) GetDetailByID(ctx interface{}, id interface{}) *MockAccountingOrderComponent_GetDetailByID_Call {
	return &MockAccountingOrderComponent_GetDetailByID_Call{Call: _e.mock.On("GetDetailByID", ctx, id)}
}

func (_c *MockAccountingOrderComponent_GetDetailByID_Call) Run(run func(ctx context.Context, id int64)) *MockAccountingOrderComponent_GetDetailByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAccountingOrderComponent_GetDetailByID_Call) Return(_a0 *database.AccountOrderDetail, _a1 error) *MockAccountingOrderComponent_GetDetailByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingOrderComponent_GetDetailByID_Call) RunAndReturn(run func(context.Context, int64) (*database.AccountOrderDetail, error)) *MockAccountingOrderComponent_GetDetailByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountingOrderComponent creates a new instance of MockAccountingOrderComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountingOrderComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountingOrderComponent {
	mock := &MockAccountingOrderComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockStripeComponent is an autogenerated mock type for the StripeComponent type
type MockStripeComponent struct {
	mock.Mock
}

type MockStripeComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStripeComponent) EXPECT() *MockStripeComponent_Expecter {
	return &MockStripeComponent_Expecter{mock: &_m.Mock}
}

// StripeSessionCancel provides a mock function with given fields: ctx, req
func (_m *MockStripeComponent) StripeSessionCancel(ctx context.Context, req *types.StripeSessionReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for StripeSessionCancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.StripeSessionReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStripeComponent_StripeSessionCancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StripeSessionCancel'
type MockStripeComponent_StripeSessionCancel_Call struct {
	*mock.Call
}

// StripeSessionCancel is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.StripeSessionReq
func (_e *MockStripeComponent_Expecter) StripeSessionCancel(ctx interface{}, req interface{}) *MockStripeComponent_StripeSessionCancel_Call {
	return &MockStripeComponent_StripeSessionCancel_Call{Call: _e.mock.On("StripeSessionCancel", ctx, req)}
}

func (_c *MockStripeComponent_StripeSessionCancel_Call) Run(run func(ctx context.Context, req *types.StripeSessionReq)) *MockStripeComponent_StripeSessionCancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.StripeSessionReq))
	})
	return _c
}

func (_c *MockStripeComponent_StripeSessionCancel_Call) Return(_a0 error) *MockStripeComponent_StripeSessionCancel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStripeComponent_StripeSessionCancel_Call) RunAndReturn(run func(context.Context, *types.StripeSessionReq) error) *MockStripeComponent_StripeSessionCancel_Call {
	_c.Call.Return(run)
	return _c
}

// StripeSessionClose provides a mock function with given fields: ctx, req
func (_m *MockStripeComponent) StripeSessionClose(ctx context.Context, req *types.StripeSessionCloseReq) (*types.StripeSessionRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for StripeSessionClose")
	}

	var r0 *types.StripeSessionRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.StripeSessionCloseReq) (*types.StripeSessionRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.StripeSessionCloseReq) *types.StripeSessionRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.StripeSessionRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.StripeSessionCloseReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStripeComponent_StripeSessionClose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StripeSessionClose'
type MockStripeComponent_StripeSessionClose_Call struct {
	*mock.Call
}

// StripeSessionClose is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.StripeSessionCloseReq
func (_e *MockStripeComponent_Expecter) StripeSessionClose(ctx interface{}, req interface{}) *MockStripeComponent_StripeSessionClose_Call {
	return &MockStripeComponent_StripeSessionClose_Call{Call: _e.mock.On("StripeSessionClose", ctx, req)}
}

func (_c *MockStripeComponent_StripeSessionClose_Call) Run(run func(ctx context.Context, req *types.StripeSessionCloseReq)) *MockStripeComponent_StripeSessionClose_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.StripeSessionCloseReq))
	})
	return _c
}

func (_c *MockStripeComponent_StripeSessionClose_Call) Return(_a0 *types.StripeSessionRes, _a1 error) *MockStripeComponent_StripeSessionClose_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStripeComponent_StripeSessionClose_Call) RunAndReturn(run func(context.Context, *types.StripeSessionCloseReq) (*types.StripeSessionRes, error)) *MockStripeComponent_StripeSessionClose_Call {
	_c.Call.Return(run)
	return _c
}

// StripeSessionCreate provides a mock function with given fields: ctx, req
func (_m *MockStripeComponent) StripeSessionCreate(ctx context.Context, req *types.CreateStripeSessionReq) (*types.CreateStripeSessionRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for StripeSessionCreate")
	}

	var r0 *types.CreateStripeSessionRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateStripeSessionReq) (*types.CreateStripeSessionRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateStripeSessionReq) *types.CreateStripeSessionRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CreateStripeSessionRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CreateStripeSessionReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStripeComponent_StripeSessionCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StripeSessionCreate'
type MockStripeComponent_StripeSessionCreate_Call struct {
	*mock.Call
}

// StripeSessionCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.CreateStripeSessionReq
func (_e *MockStripeComponent_Expecter) StripeSessionCreate(ctx interface{}, req interface{}) *MockStripeComponent_StripeSessionCreate_Call {
	return &MockStripeComponent_StripeSessionCreate_Call{Call: _e.mock.On("StripeSessionCreate", ctx, req)}
}

func (_c *MockStripeComponent_StripeSessionCreate_Call) Run(run func(ctx context.Context, req *types.CreateStripeSessionReq)) *MockStripeComponent_StripeSessionCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CreateStripeSessionReq))
	})
	return _c
}

func (_c *MockStripeComponent_StripeSessionCreate_Call) Return(_a0 *types.CreateStripeSessionRes, _a1 error) *MockStripeComponent_StripeSessionCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStripeComponent_StripeSessionCreate_Call) RunAndReturn(run func(context.Context, *types.CreateStripeSessionReq) (*types.CreateStripeSessionRes, error)) *MockStripeComponent_StripeSessionCreate_Call {
	_c.Call.Return(run)
	return _c
}

// StripeSessionGet provides a mock function with given fields: ctx, req
func (_m *MockStripeComponent) StripeSessionGet(ctx context.Context, req *types.StripeSessionGetReq) (*types.StripeSessionRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for StripeSessionGet")
	}

	var r0 *types.StripeSessionRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.StripeSessionGetReq) (*types.StripeSessionRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.StripeSessionGetReq) *types.StripeSessionRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.StripeSessionRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.StripeSessionGetReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStripeComponent_StripeSessionGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StripeSessionGet'
type MockStripeComponent_StripeSessionGet_Call struct {
	*mock.Call
}

// StripeSessionGet is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.StripeSessionGetReq
func (_e *MockStripeComponent_Expecter) StripeSessionGet(ctx interface{}, req interface{}) *MockStripeComponent_StripeSessionGet_Call {
	return &MockStripeComponent_StripeSessionGet_Call{Call: _e.mock.On("StripeSessionGet", ctx, req)}
}

func (_c *MockStripeComponent_StripeSessionGet_Call) Run(run func(ctx context.Context, req *types.StripeSessionGetReq)) *MockStripeComponent_StripeSessionGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.StripeSessionGetReq))
	})
	return _c
}

func (_c *MockStripeComponent_StripeSessionGet_Call) Return(_a0 *types.StripeSessionRes, _a1 error) *MockStripeComponent_StripeSessionGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStripeComponent_StripeSessionGet_Call) RunAndReturn(run func(context.Context, *types.StripeSessionGetReq) (*types.StripeSessionRes, error)) *MockStripeComponent_StripeSessionGet_Call {
	_c.Call.Return(run)
	return _c
}

// StripeSessionList provides a mock function with given fields: ctx, req
func (_m *MockStripeComponent) StripeSessionList(ctx context.Context, req *types.StripeSessionListReq) (*types.StripeSessionAllRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for StripeSessionList")
	}

	var r0 *types.StripeSessionAllRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.StripeSessionListReq) (*types.StripeSessionAllRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.StripeSessionListReq) *types.StripeSessionAllRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.StripeSessionAllRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.StripeSessionListReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStripeComponent_StripeSessionList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StripeSessionList'
type MockStripeComponent_StripeSessionList_Call struct {
	*mock.Call
}

// StripeSessionList is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.StripeSessionListReq
func (_e *MockStripeComponent_Expecter) StripeSessionList(ctx interface{}, req interface{}) *MockStripeComponent_StripeSessionList_Call {
	return &MockStripeComponent_StripeSessionList_Call{Call: _e.mock.On("StripeSessionList", ctx, req)}
}

func (_c *MockStripeComponent_StripeSessionList_Call) Run(run func(ctx context.Context, req *types.StripeSessionListReq)) *MockStripeComponent_StripeSessionList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.StripeSessionListReq))
	})
	return _c
}

func (_c *MockStripeComponent_StripeSessionList_Call) Return(_a0 *types.StripeSessionAllRes, _a1 error) *MockStripeComponent_StripeSessionList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStripeComponent_StripeSessionList_Call) RunAndReturn(run func(context.Context, *types.StripeSessionListReq) (*types.StripeSessionAllRes, error)) *MockStripeComponent_StripeSessionList_Call {
	_c.Call.Return(run)
	return _c
}

// StripeSessionSuccess provides a mock function with given fields: ctx, req
func (_m *MockStripeComponent) StripeSessionSuccess(ctx context.Context, req *types.StripeSessionReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for StripeSessionSuccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.StripeSessionReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStripeComponent_StripeSessionSuccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StripeSessionSuccess'
type MockStripeComponent_StripeSessionSuccess_Call struct {
	*mock.Call
}

// StripeSessionSuccess is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.StripeSessionReq
func (_e *MockStripeComponent_Expecter) StripeSessionSuccess(ctx interface{}, req interface{}) *MockStripeComponent_StripeSessionSuccess_Call {
	return &MockStripeComponent_StripeSessionSuccess_Call{Call: _e.mock.On("StripeSessionSuccess", ctx, req)}
}

func (_c *MockStripeComponent_StripeSessionSuccess_Call) Run(run func(ctx context.Context, req *types.StripeSessionReq)) *MockStripeComponent_StripeSessionSuccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.StripeSessionReq))
	})
	return _c
}

func (_c *MockStripeComponent_StripeSessionSuccess_Call) Return(_a0 error) *MockStripeComponent_StripeSessionSuccess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStripeComponent_StripeSessionSuccess_Call) RunAndReturn(run func(context.Context, *types.StripeSessionReq) error) *MockStripeComponent_StripeSessionSuccess_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStripeComponent creates a new instance of MockStripeComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStripeComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStripeComponent {
	mock := &MockStripeComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

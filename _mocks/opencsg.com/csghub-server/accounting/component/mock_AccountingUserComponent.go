// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	time "time"

	types "opencsg.com/csghub-server/common/types"
)

// MockAccountingUserComponent is an autogenerated mock type for the AccountingUserComponent type
type MockAccountingUserComponent struct {
	mock.Mock
}

type MockAccountingUserComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountingUserComponent) EXPECT() *MockAccountingUserComponent_Expecter {
	return &MockAccountingUserComponent_Expecter{mock: &_m.Mock}
}

// AddNewAccountingUser provides a mock function with given fields: ctx, event
func (_m *MockAccountingUserComponent) AddNewAccountingUser(ctx context.Context, event *types.AcctEvent) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for AddNewAccountingUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.AcctEvent) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountingUserComponent_AddNewAccountingUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNewAccountingUser'
type MockAccountingUserComponent_AddNewAccountingUser_Call struct {
	*mock.Call
}

// AddNewAccountingUser is a helper method to define mock.On call
//   - ctx context.Context
//   - event *types.AcctEvent
func (_e *MockAccountingUserComponent_Expecter) AddNewAccountingUser(ctx interface{}, event interface{}) *MockAccountingUserComponent_AddNewAccountingUser_Call {
	return &MockAccountingUserComponent_AddNewAccountingUser_Call{Call: _e.mock.On("AddNewAccountingUser", ctx, event)}
}

func (_c *MockAccountingUserComponent_AddNewAccountingUser_Call) Run(run func(ctx context.Context, event *types.AcctEvent)) *MockAccountingUserComponent_AddNewAccountingUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.AcctEvent))
	})
	return _c
}

func (_c *MockAccountingUserComponent_AddNewAccountingUser_Call) Return(_a0 error) *MockAccountingUserComponent_AddNewAccountingUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountingUserComponent_AddNewAccountingUser_Call) RunAndReturn(run func(context.Context, *types.AcctEvent) error) *MockAccountingUserComponent_AddNewAccountingUser_Call {
	_c.Call.Return(run)
	return _c
}

// CheckAccountingUser provides a mock function with given fields: ctx, userUUID
func (_m *MockAccountingUserComponent) CheckAccountingUser(ctx context.Context, userUUID string) error {
	ret := _m.Called(ctx, userUUID)

	if len(ret) == 0 {
		panic("no return value specified for CheckAccountingUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountingUserComponent_CheckAccountingUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckAccountingUser'
type MockAccountingUserComponent_CheckAccountingUser_Call struct {
	*mock.Call
}

// CheckAccountingUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
func (_e *MockAccountingUserComponent_Expecter) CheckAccountingUser(ctx interface{}, userUUID interface{}) *MockAccountingUserComponent_CheckAccountingUser_Call {
	return &MockAccountingUserComponent_CheckAccountingUser_Call{Call: _e.mock.On("CheckAccountingUser", ctx, userUUID)}
}

func (_c *MockAccountingUserComponent_CheckAccountingUser_Call) Run(run func(ctx context.Context, userUUID string)) *MockAccountingUserComponent_CheckAccountingUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountingUserComponent_CheckAccountingUser_Call) Return(_a0 error) *MockAccountingUserComponent_CheckAccountingUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountingUserComponent_CheckAccountingUser_Call) RunAndReturn(run func(context.Context, string) error) *MockAccountingUserComponent_CheckAccountingUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountingByUserID provides a mock function with given fields: ctx, userUUID
func (_m *MockAccountingUserComponent) GetAccountingByUserID(ctx context.Context, userUUID string) (*types.UserBalanceResp, error) {
	ret := _m.Called(ctx, userUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountingByUserID")
	}

	var r0 *types.UserBalanceResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.UserBalanceResp, error)); ok {
		return rf(ctx, userUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.UserBalanceResp); ok {
		r0 = rf(ctx, userUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.UserBalanceResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingUserComponent_GetAccountingByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountingByUserID'
type MockAccountingUserComponent_GetAccountingByUserID_Call struct {
	*mock.Call
}

// GetAccountingByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
func (_e *MockAccountingUserComponent_Expecter) GetAccountingByUserID(ctx interface{}, userUUID interface{}) *MockAccountingUserComponent_GetAccountingByUserID_Call {
	return &MockAccountingUserComponent_GetAccountingByUserID_Call{Call: _e.mock.On("GetAccountingByUserID", ctx, userUUID)}
}

func (_c *MockAccountingUserComponent_GetAccountingByUserID_Call) Run(run func(ctx context.Context, userUUID string)) *MockAccountingUserComponent_GetAccountingByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountingUserComponent_GetAccountingByUserID_Call) Return(_a0 *types.UserBalanceResp, _a1 error) *MockAccountingUserComponent_GetAccountingByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingUserComponent_GetAccountingByUserID_Call) RunAndReturn(run func(context.Context, string) (*types.UserBalanceResp, error)) *MockAccountingUserComponent_GetAccountingByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// ListAccountingUser provides a mock function with given fields: ctx, per, page
func (_m *MockAccountingUserComponent) ListAccountingUser(ctx context.Context, per int, page int) ([]database.AccountUser, int, error) {
	ret := _m.Called(ctx, per, page)

	if len(ret) == 0 {
		panic("no return value specified for ListAccountingUser")
	}

	var r0 []database.AccountUser
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]database.AccountUser, int, error)); ok {
		return rf(ctx, per, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []database.AccountUser); ok {
		r0 = rf(ctx, per, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.AccountUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, per, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, per, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAccountingUserComponent_ListAccountingUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAccountingUser'
type MockAccountingUserComponent_ListAccountingUser_Call struct {
	*mock.Call
}

// ListAccountingUser is a helper method to define mock.On call
//   - ctx context.Context
//   - per int
//   - page int
func (_e *MockAccountingUserComponent_Expecter) ListAccountingUser(ctx interface{}, per interface{}, page interface{}) *MockAccountingUserComponent_ListAccountingUser_Call {
	return &MockAccountingUserComponent_ListAccountingUser_Call{Call: _e.mock.On("ListAccountingUser", ctx, per, page)}
}

func (_c *MockAccountingUserComponent_ListAccountingUser_Call) Run(run func(ctx context.Context, per int, page int)) *MockAccountingUserComponent_ListAccountingUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockAccountingUserComponent_ListAccountingUser_Call) Return(_a0 []database.AccountUser, _a1 int, _a2 error) *MockAccountingUserComponent_ListAccountingUser_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAccountingUserComponent_ListAccountingUser_Call) RunAndReturn(run func(context.Context, int, int) ([]database.AccountUser, int, error)) *MockAccountingUserComponent_ListAccountingUser_Call {
	_c.Call.Return(run)
	return _c
}

// SetLowBalanceWarn provides a mock function with given fields: ctx, req
func (_m *MockAccountingUserComponent) SetLowBalanceWarn(ctx context.Context, req types.SetLowBalanceWarnReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SetLowBalanceWarn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.SetLowBalanceWarnReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountingUserComponent_SetLowBalanceWarn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLowBalanceWarn'
type MockAccountingUserComponent_SetLowBalanceWarn_Call struct {
	*mock.Call
}

// SetLowBalanceWarn is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.SetLowBalanceWarnReq
func (_e *MockAccountingUserComponent_Expecter) SetLowBalanceWarn(ctx interface{}, req interface{}) *MockAccountingUserComponent_SetLowBalanceWarn_Call {
	return &MockAccountingUserComponent_SetLowBalanceWarn_Call{Call: _e.mock.On("SetLowBalanceWarn", ctx, req)}
}

func (_c *MockAccountingUserComponent_SetLowBalanceWarn_Call) Run(run func(ctx context.Context, req types.SetLowBalanceWarnReq)) *MockAccountingUserComponent_SetLowBalanceWarn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.SetLowBalanceWarnReq))
	})
	return _c
}

func (_c *MockAccountingUserComponent_SetLowBalanceWarn_Call) Return(_a0 error) *MockAccountingUserComponent_SetLowBalanceWarn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountingUserComponent_SetLowBalanceWarn_Call) RunAndReturn(run func(context.Context, types.SetLowBalanceWarnReq) error) *MockAccountingUserComponent_SetLowBalanceWarn_Call {
	_c.Call.Return(run)
	return _c
}

// SetLowBalanceWarnAtNow provides a mock function with given fields: ctx, userUUID
func (_m *MockAccountingUserComponent) SetLowBalanceWarnAtNow(ctx context.Context, userUUID string) error {
	ret := _m.Called(ctx, userUUID)

	if len(ret) == 0 {
		panic("no return value specified for SetLowBalanceWarnAtNow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountingUserComponent_SetLowBalanceWarnAtNow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLowBalanceWarnAtNow'
type MockAccountingUserComponent_SetLowBalanceWarnAtNow_Call struct {
	*mock.Call
}

// SetLowBalanceWarnAtNow is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
func (_e *MockAccountingUserComponent_Expecter) SetLowBalanceWarnAtNow(ctx interface{}, userUUID interface{}) *MockAccountingUserComponent_SetLowBalanceWarnAtNow_Call {
	return &MockAccountingUserComponent_SetLowBalanceWarnAtNow_Call{Call: _e.mock.On("SetLowBalanceWarnAtNow", ctx, userUUID)}
}

func (_c *MockAccountingUserComponent_SetLowBalanceWarnAtNow_Call) Run(run func(ctx context.Context, userUUID string)) *MockAccountingUserComponent_SetLowBalanceWarnAtNow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAccountingUserComponent_SetLowBalanceWarnAtNow_Call) Return(_a0 error) *MockAccountingUserComponent_SetLowBalanceWarnAtNow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountingUserComponent_SetLowBalanceWarnAtNow_Call) RunAndReturn(run func(context.Context, string) error) *MockAccountingUserComponent_SetLowBalanceWarnAtNow_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNegativeBalanceWarnAt provides a mock function with given fields: ctx, userUUID, warnAt
func (_m *MockAccountingUserComponent) UpdateNegativeBalanceWarnAt(ctx context.Context, userUUID string, warnAt time.Time) error {
	ret := _m.Called(ctx, userUUID, warnAt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNegativeBalanceWarnAt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, userUUID, warnAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountingUserComponent_UpdateNegativeBalanceWarnAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNegativeBalanceWarnAt'
type MockAccountingUserComponent_UpdateNegativeBalanceWarnAt_Call struct {
	*mock.Call
}

// UpdateNegativeBalanceWarnAt is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
//   - warnAt time.Time
func (_e *MockAccountingUserComponent_Expecter) UpdateNegativeBalanceWarnAt(ctx interface{}, userUUID interface{}, warnAt interface{}) *MockAccountingUserComponent_UpdateNegativeBalanceWarnAt_Call {
	return &MockAccountingUserComponent_UpdateNegativeBalanceWarnAt_Call{Call: _e.mock.On("UpdateNegativeBalanceWarnAt", ctx, userUUID, warnAt)}
}

func (_c *MockAccountingUserComponent_UpdateNegativeBalanceWarnAt_Call) Run(run func(ctx context.Context, userUUID string, warnAt time.Time)) *MockAccountingUserComponent_UpdateNegativeBalanceWarnAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *MockAccountingUserComponent_UpdateNegativeBalanceWarnAt_Call) Return(_a0 error) *MockAccountingUserComponent_UpdateNegativeBalanceWarnAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountingUserComponent_UpdateNegativeBalanceWarnAt_Call) RunAndReturn(run func(context.Context, string, time.Time) error) *MockAccountingUserComponent_UpdateNegativeBalanceWarnAt_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountingUserComponent creates a new instance of MockAccountingUserComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountingUserComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountingUserComponent {
	mock := &MockAccountingUserComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"
)

// MockAccountingPriceComponent is an autogenerated mock type for the AccountingPriceComponent type
type MockAccountingPriceComponent struct {
	mock.Mock
}

type MockAccountingPriceComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountingPriceComponent) EXPECT() *MockAccountingPriceComponent_Expecter {
	return &MockAccountingPriceComponent_Expecter{mock: &_m.Mock}
}

// CreatePrice provides a mock function with given fields: ctx, req
func (_m *MockAccountingPriceComponent) CreatePrice(ctx context.Context, req types.AcctPriceCreateReq) (*database.AccountPrice, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrice")
	}

	var r0 *database.AccountPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctPriceCreateReq) (*database.AccountPrice, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctPriceCreateReq) *database.AccountPrice); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountPrice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AcctPriceCreateReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingPriceComponent_CreatePrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePrice'
type MockAccountingPriceComponent_CreatePrice_Call struct {
	*mock.Call
}

// CreatePrice is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.AcctPriceCreateReq
func (_e *MockAccountingPriceComponent_Expecter) CreatePrice(ctx interface{}, req interface{}) *MockAccountingPriceComponent_CreatePrice_Call {
	return &MockAccountingPriceComponent_CreatePrice_Call{Call: _e.mock.On("CreatePrice", ctx, req)}
}

func (_c *MockAccountingPriceComponent_CreatePrice_Call) Run(run func(ctx context.Context, req types.AcctPriceCreateReq)) *MockAccountingPriceComponent_CreatePrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AcctPriceCreateReq))
	})
	return _c
}

func (_c *MockAccountingPriceComponent_CreatePrice_Call) Return(_a0 *database.AccountPrice, _a1 error) *MockAccountingPriceComponent_CreatePrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingPriceComponent_CreatePrice_Call) RunAndReturn(run func(context.Context, types.AcctPriceCreateReq) (*database.AccountPrice, error)) *MockAccountingPriceComponent_CreatePrice_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePrice provides a mock function with given fields: ctx, id
func (_m *MockAccountingPriceComponent) DeletePrice(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountingPriceComponent_DeletePrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrice'
type MockAccountingPriceComponent_DeletePrice_Call struct {
	*mock.Call
}

// DeletePrice is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockAccountingPriceComponent_Expecter) DeletePrice(ctx interface{}, id interface{}) *MockAccountingPriceComponent_DeletePrice_Call {
	return &MockAccountingPriceComponent_DeletePrice_Call{Call: _e.mock.On("DeletePrice", ctx, id)}
}

func (_c *MockAccountingPriceComponent_DeletePrice_Call) Run(run func(ctx context.Context, id int64)) *MockAccountingPriceComponent_DeletePrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAccountingPriceComponent_DeletePrice_Call) Return(_a0 error) *MockAccountingPriceComponent_DeletePrice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountingPriceComponent_DeletePrice_Call) RunAndReturn(run func(context.Context, int64) error) *MockAccountingPriceComponent_DeletePrice_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestByTime provides a mock function with given fields: ctx, req
func (_m *MockAccountingPriceComponent) GetLatestByTime(ctx context.Context, req types.AcctPriceQueryReq) (*database.AccountPrice, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestByTime")
	}

	var r0 *database.AccountPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctPriceQueryReq) (*database.AccountPrice, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctPriceQueryReq) *database.AccountPrice); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountPrice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AcctPriceQueryReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingPriceComponent_GetLatestByTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestByTime'
type MockAccountingPriceComponent_GetLatestByTime_Call struct {
	*mock.Call
}

// GetLatestByTime is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.AcctPriceQueryReq
func (_e *MockAccountingPriceComponent_Expecter) GetLatestByTime(ctx interface{}, req interface{}) *MockAccountingPriceComponent_GetLatestByTime_Call {
	return &MockAccountingPriceComponent_GetLatestByTime_Call{Call: _e.mock.On("GetLatestByTime", ctx, req)}
}

func (_c *MockAccountingPriceComponent_GetLatestByTime_Call) Run(run func(ctx context.Context, req types.AcctPriceQueryReq)) *MockAccountingPriceComponent_GetLatestByTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AcctPriceQueryReq))
	})
	return _c
}

func (_c *MockAccountingPriceComponent_GetLatestByTime_Call) Return(_a0 *database.AccountPrice, _a1 error) *MockAccountingPriceComponent_GetLatestByTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingPriceComponent_GetLatestByTime_Call) RunAndReturn(run func(context.Context, types.AcctPriceQueryReq) (*database.AccountPrice, error)) *MockAccountingPriceComponent_GetLatestByTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetPriceByID provides a mock function with given fields: ctx, id
func (_m *MockAccountingPriceComponent) GetPriceByID(ctx context.Context, id int64) (*database.AccountPrice, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPriceByID")
	}

	var r0 *database.AccountPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*database.AccountPrice, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *database.AccountPrice); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountPrice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingPriceComponent_GetPriceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPriceByID'
type MockAccountingPriceComponent_GetPriceByID_Call struct {
	*mock.Call
}

// GetPriceByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockAccountingPriceComponent_Expecter) GetPriceByID(ctx interface{}, id interface{}) *MockAccountingPriceComponent_GetPriceByID_Call {
	return &MockAccountingPriceComponent_GetPriceByID_Call{Call: _e.mock.On("GetPriceByID", ctx, id)}
}

func (_c *MockAccountingPriceComponent_GetPriceByID_Call) Run(run func(ctx context.Context, id int64)) *MockAccountingPriceComponent_GetPriceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockAccountingPriceComponent_GetPriceByID_Call) Return(_a0 *database.AccountPrice, _a1 error) *MockAccountingPriceComponent_GetPriceByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingPriceComponent_GetPriceByID_Call) RunAndReturn(run func(context.Context, int64) (*database.AccountPrice, error)) *MockAccountingPriceComponent_GetPriceByID_Call {
	_c.Call.Return(run)
	return _c
}

// ListByIds provides a mock function with given fields: ctx, ids
func (_m *MockAccountingPriceComponent) ListByIds(ctx context.Context, ids []int64) ([]*types.AcctPriceResp, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for ListByIds")
	}

	var r0 []*types.AcctPriceResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]*types.AcctPriceResp, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []*types.AcctPriceResp); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.AcctPriceResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingPriceComponent_ListByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByIds'
type MockAccountingPriceComponent_ListByIds_Call struct {
	*mock.Call
}

// ListByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []int64
func (_e *MockAccountingPriceComponent_Expecter) ListByIds(ctx interface{}, ids interface{}) *MockAccountingPriceComponent_ListByIds_Call {
	return &MockAccountingPriceComponent_ListByIds_Call{Call: _e.mock.On("ListByIds", ctx, ids)}
}

func (_c *MockAccountingPriceComponent_ListByIds_Call) Run(run func(ctx context.Context, ids []int64)) *MockAccountingPriceComponent_ListByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *MockAccountingPriceComponent_ListByIds_Call) Return(_a0 []*types.AcctPriceResp, _a1 error) *MockAccountingPriceComponent_ListByIds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingPriceComponent_ListByIds_Call) RunAndReturn(run func(context.Context, []int64) ([]*types.AcctPriceResp, error)) *MockAccountingPriceComponent_ListByIds_Call {
	_c.Call.Return(run)
	return _c
}

// ListPricesBySKUType provides a mock function with given fields: ctx, req
func (_m *MockAccountingPriceComponent) ListPricesBySKUType(ctx context.Context, req types.AcctPriceListReq) ([]database.AccountPrice, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListPricesBySKUType")
	}

	var r0 []database.AccountPrice
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctPriceListReq) ([]database.AccountPrice, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctPriceListReq) []database.AccountPrice); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.AccountPrice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AcctPriceListReq) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.AcctPriceListReq) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAccountingPriceComponent_ListPricesBySKUType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPricesBySKUType'
type MockAccountingPriceComponent_ListPricesBySKUType_Call struct {
	*mock.Call
}

// ListPricesBySKUType is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.AcctPriceListReq
func (_e *MockAccountingPriceComponent_Expecter) ListPricesBySKUType(ctx interface{}, req interface{}) *MockAccountingPriceComponent_ListPricesBySKUType_Call {
	return &MockAccountingPriceComponent_ListPricesBySKUType_Call{Call: _e.mock.On("ListPricesBySKUType", ctx, req)}
}

func (_c *MockAccountingPriceComponent_ListPricesBySKUType_Call) Run(run func(ctx context.Context, req types.AcctPriceListReq)) *MockAccountingPriceComponent_ListPricesBySKUType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AcctPriceListReq))
	})
	return _c
}

func (_c *MockAccountingPriceComponent_ListPricesBySKUType_Call) Return(_a0 []database.AccountPrice, _a1 int, _a2 error) *MockAccountingPriceComponent_ListPricesBySKUType_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAccountingPriceComponent_ListPricesBySKUType_Call) RunAndReturn(run func(context.Context, types.AcctPriceListReq) ([]database.AccountPrice, int, error)) *MockAccountingPriceComponent_ListPricesBySKUType_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePrice provides a mock function with given fields: ctx, req, id
func (_m *MockAccountingPriceComponent) UpdatePrice(ctx context.Context, req types.AcctPriceCreateReq, id int64) (*database.AccountPrice, error) {
	ret := _m.Called(ctx, req, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePrice")
	}

	var r0 *database.AccountPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctPriceCreateReq, int64) (*database.AccountPrice, error)); ok {
		return rf(ctx, req, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctPriceCreateReq, int64) *database.AccountPrice); ok {
		r0 = rf(ctx, req, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountPrice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AcctPriceCreateReq, int64) error); ok {
		r1 = rf(ctx, req, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingPriceComponent_UpdatePrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePrice'
type MockAccountingPriceComponent_UpdatePrice_Call struct {
	*mock.Call
}

// UpdatePrice is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.AcctPriceCreateReq
//   - id int64
func (_e *MockAccountingPriceComponent_Expecter) UpdatePrice(ctx interface{}, req interface{}, id interface{}) *MockAccountingPriceComponent_UpdatePrice_Call {
	return &MockAccountingPriceComponent_UpdatePrice_Call{Call: _e.mock.On("UpdatePrice", ctx, req, id)}
}

func (_c *MockAccountingPriceComponent_UpdatePrice_Call) Run(run func(ctx context.Context, req types.AcctPriceCreateReq, id int64)) *MockAccountingPriceComponent_UpdatePrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AcctPriceCreateReq), args[2].(int64))
	})
	return _c
}

func (_c *MockAccountingPriceComponent_UpdatePrice_Call) Return(_a0 *database.AccountPrice, _a1 error) *MockAccountingPriceComponent_UpdatePrice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingPriceComponent_UpdatePrice_Call) RunAndReturn(run func(context.Context, types.AcctPriceCreateReq, int64) (*database.AccountPrice, error)) *MockAccountingPriceComponent_UpdatePrice_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountingPriceComponent creates a new instance of MockAccountingPriceComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountingPriceComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountingPriceComponent {
	mock := &MockAccountingPriceComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	time "time"

	types "opencsg.com/csghub-server/common/types"

	uuid "github.com/google/uuid"
)

// MockMeteringComponent is an autogenerated mock type for the MeteringComponent type
type MockMeteringComponent struct {
	mock.Mock
}

type MockMeteringComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMeteringComponent) EXPECT() *MockMeteringComponent_Expecter {
	return &MockMeteringComponent_Expecter{mock: &_m.Mock}
}

// FindMeteringByCustomerIDAndRecordAtInMin provides a mock function with given fields: ctx, customerID, recordAt
func (_m *MockMeteringComponent) FindMeteringByCustomerIDAndRecordAtInMin(ctx context.Context, customerID string, recordAt time.Time) (*database.AccountMetering, error) {
	ret := _m.Called(ctx, customerID, recordAt)

	if len(ret) == 0 {
		panic("no return value specified for FindMeteringByCustomerIDAndRecordAtInMin")
	}

	var r0 *database.AccountMetering
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (*database.AccountMetering, error)); ok {
		return rf(ctx, customerID, recordAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) *database.AccountMetering); ok {
		r0 = rf(ctx, customerID, recordAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountMetering)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, customerID, recordAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMeteringComponent_FindMeteringByCustomerIDAndRecordAtInMin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindMeteringByCustomerIDAndRecordAtInMin'
type MockMeteringComponent_FindMeteringByCustomerIDAndRecordAtInMin_Call struct {
	*mock.Call
}

// FindMeteringByCustomerIDAndRecordAtInMin is a helper method to define mock.On call
//   - ctx context.Context
//   - customerID string
//   - recordAt time.Time
func (_e *MockMeteringComponent_Expecter) FindMeteringByCustomerIDAndRecordAtInMin(ctx interface{}, customerID interface{}, recordAt interface{}) *MockMeteringComponent_FindMeteringByCustomerIDAndRecordAtInMin_Call {
	return &MockMeteringComponent_FindMeteringByCustomerIDAndRecordAtInMin_Call{Call: _e.mock.On("FindMeteringByCustomerIDAndRecordAtInMin", ctx, customerID, recordAt)}
}

func (_c *MockMeteringComponent_FindMeteringByCustomerIDAndRecordAtInMin_Call) Run(run func(ctx context.Context, customerID string, recordAt time.Time)) *MockMeteringComponent_FindMeteringByCustomerIDAndRecordAtInMin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(time.Time))
	})
	return _c
}

func (_c *MockMeteringComponent_FindMeteringByCustomerIDAndRecordAtInMin_Call) Return(_a0 *database.AccountMetering, _a1 error) *MockMeteringComponent_FindMeteringByCustomerIDAndRecordAtInMin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMeteringComponent_FindMeteringByCustomerIDAndRecordAtInMin_Call) RunAndReturn(run func(context.Context, string, time.Time) (*database.AccountMetering, error)) *MockMeteringComponent_FindMeteringByCustomerIDAndRecordAtInMin_Call {
	_c.Call.Return(run)
	return _c
}

// GetMeteringByEventUUID provides a mock function with given fields: ctx, eventUUID
func (_m *MockMeteringComponent) GetMeteringByEventUUID(ctx context.Context, eventUUID uuid.UUID) (*database.AccountMetering, error) {
	ret := _m.Called(ctx, eventUUID)

	if len(ret) == 0 {
		panic("no return value specified for GetMeteringByEventUUID")
	}

	var r0 *database.AccountMetering
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*database.AccountMetering, error)); ok {
		return rf(ctx, eventUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *database.AccountMetering); ok {
		r0 = rf(ctx, eventUUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountMetering)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, eventUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMeteringComponent_GetMeteringByEventUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMeteringByEventUUID'
type MockMeteringComponent_GetMeteringByEventUUID_Call struct {
	*mock.Call
}

// GetMeteringByEventUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - eventUUID uuid.UUID
func (_e *MockMeteringComponent_Expecter) GetMeteringByEventUUID(ctx interface{}, eventUUID interface{}) *MockMeteringComponent_GetMeteringByEventUUID_Call {
	return &MockMeteringComponent_GetMeteringByEventUUID_Call{Call: _e.mock.On("GetMeteringByEventUUID", ctx, eventUUID)}
}

func (_c *MockMeteringComponent_GetMeteringByEventUUID_Call) Run(run func(ctx context.Context, eventUUID uuid.UUID)) *MockMeteringComponent_GetMeteringByEventUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockMeteringComponent_GetMeteringByEventUUID_Call) Return(_a0 *database.AccountMetering, _a1 error) *MockMeteringComponent_GetMeteringByEventUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMeteringComponent_GetMeteringByEventUUID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*database.AccountMetering, error)) *MockMeteringComponent_GetMeteringByEventUUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetMeteringStatByDate provides a mock function with given fields: ctx, req
func (_m *MockMeteringComponent) GetMeteringStatByDate(ctx context.Context, req types.ActStatementsReq) ([]map[string]interface{}, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetMeteringStatByDate")
	}

	var r0 []map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ActStatementsReq) ([]map[string]interface{}, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ActStatementsReq) []map[string]interface{}); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ActStatementsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMeteringComponent_GetMeteringStatByDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMeteringStatByDate'
type MockMeteringComponent_GetMeteringStatByDate_Call struct {
	*mock.Call
}

// GetMeteringStatByDate is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ActStatementsReq
func (_e *MockMeteringComponent_Expecter) GetMeteringStatByDate(ctx interface{}, req interface{}) *MockMeteringComponent_GetMeteringStatByDate_Call {
	return &MockMeteringComponent_GetMeteringStatByDate_Call{Call: _e.mock.On("GetMeteringStatByDate", ctx, req)}
}

func (_c *MockMeteringComponent_GetMeteringStatByDate_Call) Run(run func(ctx context.Context, req types.ActStatementsReq)) *MockMeteringComponent_GetMeteringStatByDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ActStatementsReq))
	})
	return _c
}

func (_c *MockMeteringComponent_GetMeteringStatByDate_Call) Return(_a0 []map[string]interface{}, _a1 error) *MockMeteringComponent_GetMeteringStatByDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMeteringComponent_GetMeteringStatByDate_Call) RunAndReturn(run func(context.Context, types.ActStatementsReq) ([]map[string]interface{}, error)) *MockMeteringComponent_GetMeteringStatByDate_Call {
	_c.Call.Return(run)
	return _c
}

// ListMeteringByUserIDAndDate provides a mock function with given fields: ctx, req
func (_m *MockMeteringComponent) ListMeteringByUserIDAndDate(ctx context.Context, req types.ActStatementsReq) ([]database.AccountMetering, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListMeteringByUserIDAndDate")
	}

	var r0 []database.AccountMetering
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ActStatementsReq) ([]database.AccountMetering, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ActStatementsReq) []database.AccountMetering); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.AccountMetering)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ActStatementsReq) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.ActStatementsReq) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMeteringComponent_ListMeteringByUserIDAndDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMeteringByUserIDAndDate'
type MockMeteringComponent_ListMeteringByUserIDAndDate_Call struct {
	*mock.Call
}

// ListMeteringByUserIDAndDate is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ActStatementsReq
func (_e *MockMeteringComponent_Expecter) ListMeteringByUserIDAndDate(ctx interface{}, req interface{}) *MockMeteringComponent_ListMeteringByUserIDAndDate_Call {
	return &MockMeteringComponent_ListMeteringByUserIDAndDate_Call{Call: _e.mock.On("ListMeteringByUserIDAndDate", ctx, req)}
}

func (_c *MockMeteringComponent_ListMeteringByUserIDAndDate_Call) Run(run func(ctx context.Context, req types.ActStatementsReq)) *MockMeteringComponent_ListMeteringByUserIDAndDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ActStatementsReq))
	})
	return _c
}

func (_c *MockMeteringComponent_ListMeteringByUserIDAndDate_Call) Return(_a0 []database.AccountMetering, _a1 int, _a2 error) *MockMeteringComponent_ListMeteringByUserIDAndDate_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMeteringComponent_ListMeteringByUserIDAndDate_Call) RunAndReturn(run func(context.Context, types.ActStatementsReq) ([]database.AccountMetering, int, error)) *MockMeteringComponent_ListMeteringByUserIDAndDate_Call {
	_c.Call.Return(run)
	return _c
}

// SaveMeteringEventRecord provides a mock function with given fields: ctx, req
func (_m *MockMeteringComponent) SaveMeteringEventRecord(ctx context.Context, req *types.MeteringEvent) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SaveMeteringEventRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.MeteringEvent) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMeteringComponent_SaveMeteringEventRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveMeteringEventRecord'
type MockMeteringComponent_SaveMeteringEventRecord_Call struct {
	*mock.Call
}

// SaveMeteringEventRecord is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.MeteringEvent
func (_e *MockMeteringComponent_Expecter) SaveMeteringEventRecord(ctx interface{}, req interface{}) *MockMeteringComponent_SaveMeteringEventRecord_Call {
	return &MockMeteringComponent_SaveMeteringEventRecord_Call{Call: _e.mock.On("SaveMeteringEventRecord", ctx, req)}
}

func (_c *MockMeteringComponent_SaveMeteringEventRecord_Call) Run(run func(ctx context.Context, req *types.MeteringEvent)) *MockMeteringComponent_SaveMeteringEventRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.MeteringEvent))
	})
	return _c
}

func (_c *MockMeteringComponent_SaveMeteringEventRecord_Call) Return(_a0 error) *MockMeteringComponent_SaveMeteringEventRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMeteringComponent_SaveMeteringEventRecord_Call) RunAndReturn(run func(context.Context, *types.MeteringEvent) error) *MockMeteringComponent_SaveMeteringEventRecord_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMeteringComponent creates a new instance of MockMeteringComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMeteringComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMeteringComponent {
	mock := &MockMeteringComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

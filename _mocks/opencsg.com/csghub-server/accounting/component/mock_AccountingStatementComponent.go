// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	types "opencsg.com/csghub-server/common/types"

	uuid "github.com/google/uuid"
)

// MockAccountingStatementComponent is an autogenerated mock type for the AccountingStatementComponent type
type MockAccountingStatementComponent struct {
	mock.Mock
}

type MockAccountingStatementComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountingStatementComponent) EXPECT() *MockAccountingStatementComponent_Expecter {
	return &MockAccountingStatementComponent_Expecter{mock: &_m.Mock}
}

// AddNewStatement provides a mock function with given fields: ctx, event
func (_m *MockAccountingStatementComponent) AddNewStatement(ctx context.Context, event *types.AcctEventReq) error {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for AddNewStatement")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.AcctEventReq) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountingStatementComponent_AddNewStatement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNewStatement'
type MockAccountingStatementComponent_AddNewStatement_Call struct {
	*mock.Call
}

// AddNewStatement is a helper method to define mock.On call
//   - ctx context.Context
//   - event *types.AcctEventReq
func (_e *MockAccountingStatementComponent_Expecter) AddNewStatement(ctx interface{}, event interface{}) *MockAccountingStatementComponent_AddNewStatement_Call {
	return &MockAccountingStatementComponent_AddNewStatement_Call{Call: _e.mock.On("AddNewStatement", ctx, event)}
}

func (_c *MockAccountingStatementComponent_AddNewStatement_Call) Run(run func(ctx context.Context, event *types.AcctEventReq)) *MockAccountingStatementComponent_AddNewStatement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.AcctEventReq))
	})
	return _c
}

func (_c *MockAccountingStatementComponent_AddNewStatement_Call) Return(_a0 error) *MockAccountingStatementComponent_AddNewStatement_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountingStatementComponent_AddNewStatement_Call) RunAndReturn(run func(context.Context, *types.AcctEventReq) error) *MockAccountingStatementComponent_AddNewStatement_Call {
	_c.Call.Return(run)
	return _c
}

// BuildFullStatements provides a mock function with given fields: ctx, skus, statements
func (_m *MockAccountingStatementComponent) BuildFullStatements(ctx context.Context, skus []*types.AcctPriceResp, statements []types.AcctStatementsRes) ([]types.AcctStatementsRes, error) {
	ret := _m.Called(ctx, skus, statements)

	if len(ret) == 0 {
		panic("no return value specified for BuildFullStatements")
	}

	var r0 []types.AcctStatementsRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*types.AcctPriceResp, []types.AcctStatementsRes) ([]types.AcctStatementsRes, error)); ok {
		return rf(ctx, skus, statements)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*types.AcctPriceResp, []types.AcctStatementsRes) []types.AcctStatementsRes); ok {
		r0 = rf(ctx, skus, statements)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.AcctStatementsRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*types.AcctPriceResp, []types.AcctStatementsRes) error); ok {
		r1 = rf(ctx, skus, statements)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingStatementComponent_BuildFullStatements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildFullStatements'
type MockAccountingStatementComponent_BuildFullStatements_Call struct {
	*mock.Call
}

// BuildFullStatements is a helper method to define mock.On call
//   - ctx context.Context
//   - skus []*types.AcctPriceResp
//   - statements []types.AcctStatementsRes
func (_e *MockAccountingStatementComponent_Expecter) BuildFullStatements(ctx interface{}, skus interface{}, statements interface{}) *MockAccountingStatementComponent_BuildFullStatements_Call {
	return &MockAccountingStatementComponent_BuildFullStatements_Call{Call: _e.mock.On("BuildFullStatements", ctx, skus, statements)}
}

func (_c *MockAccountingStatementComponent_BuildFullStatements_Call) Run(run func(ctx context.Context, skus []*types.AcctPriceResp, statements []types.AcctStatementsRes)) *MockAccountingStatementComponent_BuildFullStatements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*types.AcctPriceResp), args[2].([]types.AcctStatementsRes))
	})
	return _c
}

func (_c *MockAccountingStatementComponent_BuildFullStatements_Call) Return(_a0 []types.AcctStatementsRes, _a1 error) *MockAccountingStatementComponent_BuildFullStatements_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingStatementComponent_BuildFullStatements_Call) RunAndReturn(run func(context.Context, []*types.AcctPriceResp, []types.AcctStatementsRes) ([]types.AcctStatementsRes, error)) *MockAccountingStatementComponent_BuildFullStatements_Call {
	_c.Call.Return(run)
	return _c
}

// FindStatementByEventID provides a mock function with given fields: ctx, event
func (_m *MockAccountingStatementComponent) FindStatementByEventID(ctx context.Context, event *types.AcctEvent) (*database.AccountStatement, error) {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for FindStatementByEventID")
	}

	var r0 *database.AccountStatement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.AcctEvent) (*database.AccountStatement, error)); ok {
		return rf(ctx, event)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.AcctEvent) *database.AccountStatement); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccountStatement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.AcctEvent) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingStatementComponent_FindStatementByEventID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindStatementByEventID'
type MockAccountingStatementComponent_FindStatementByEventID_Call struct {
	*mock.Call
}

// FindStatementByEventID is a helper method to define mock.On call
//   - ctx context.Context
//   - event *types.AcctEvent
func (_e *MockAccountingStatementComponent_Expecter) FindStatementByEventID(ctx interface{}, event interface{}) *MockAccountingStatementComponent_FindStatementByEventID_Call {
	return &MockAccountingStatementComponent_FindStatementByEventID_Call{Call: _e.mock.On("FindStatementByEventID", ctx, event)}
}

func (_c *MockAccountingStatementComponent_FindStatementByEventID_Call) Run(run func(ctx context.Context, event *types.AcctEvent)) *MockAccountingStatementComponent_FindStatementByEventID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.AcctEvent))
	})
	return _c
}

func (_c *MockAccountingStatementComponent_FindStatementByEventID_Call) Return(_a0 *database.AccountStatement, _a1 error) *MockAccountingStatementComponent_FindStatementByEventID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingStatementComponent_FindStatementByEventID_Call) RunAndReturn(run func(context.Context, *types.AcctEvent) (*database.AccountStatement, error)) *MockAccountingStatementComponent_FindStatementByEventID_Call {
	_c.Call.Return(run)
	return _c
}

// ListRechargeByUserIDAndTime provides a mock function with given fields: ctx, req
func (_m *MockAccountingStatementComponent) ListRechargeByUserIDAndTime(ctx context.Context, req types.AcctRechargeListReq) (types.AcctRechargeListResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListRechargeByUserIDAndTime")
	}

	var r0 types.AcctRechargeListResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctRechargeListReq) (types.AcctRechargeListResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AcctRechargeListReq) types.AcctRechargeListResp); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(types.AcctRechargeListResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AcctRechargeListReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingStatementComponent_ListRechargeByUserIDAndTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRechargeByUserIDAndTime'
type MockAccountingStatementComponent_ListRechargeByUserIDAndTime_Call struct {
	*mock.Call
}

// ListRechargeByUserIDAndTime is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.AcctRechargeListReq
func (_e *MockAccountingStatementComponent_Expecter) ListRechargeByUserIDAndTime(ctx interface{}, req interface{}) *MockAccountingStatementComponent_ListRechargeByUserIDAndTime_Call {
	return &MockAccountingStatementComponent_ListRechargeByUserIDAndTime_Call{Call: _e.mock.On("ListRechargeByUserIDAndTime", ctx, req)}
}

func (_c *MockAccountingStatementComponent_ListRechargeByUserIDAndTime_Call) Run(run func(ctx context.Context, req types.AcctRechargeListReq)) *MockAccountingStatementComponent_ListRechargeByUserIDAndTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AcctRechargeListReq))
	})
	return _c
}

func (_c *MockAccountingStatementComponent_ListRechargeByUserIDAndTime_Call) Return(_a0 types.AcctRechargeListResp, _a1 error) *MockAccountingStatementComponent_ListRechargeByUserIDAndTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingStatementComponent_ListRechargeByUserIDAndTime_Call) RunAndReturn(run func(context.Context, types.AcctRechargeListReq) (types.AcctRechargeListResp, error)) *MockAccountingStatementComponent_ListRechargeByUserIDAndTime_Call {
	_c.Call.Return(run)
	return _c
}

// ListStatementByUserAndSku provides a mock function with given fields: ctx, req
func (_m *MockAccountingStatementComponent) ListStatementByUserAndSku(ctx context.Context, req types.ActStatementsReq) (*types.AcctStatementsResult, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListStatementByUserAndSku")
	}

	var r0 *types.AcctStatementsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ActStatementsReq) (*types.AcctStatementsResult, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ActStatementsReq) *types.AcctStatementsResult); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AcctStatementsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ActStatementsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingStatementComponent_ListStatementByUserAndSku_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStatementByUserAndSku'
type MockAccountingStatementComponent_ListStatementByUserAndSku_Call struct {
	*mock.Call
}

// ListStatementByUserAndSku is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ActStatementsReq
func (_e *MockAccountingStatementComponent_Expecter) ListStatementByUserAndSku(ctx interface{}, req interface{}) *MockAccountingStatementComponent_ListStatementByUserAndSku_Call {
	return &MockAccountingStatementComponent_ListStatementByUserAndSku_Call{Call: _e.mock.On("ListStatementByUserAndSku", ctx, req)}
}

func (_c *MockAccountingStatementComponent_ListStatementByUserAndSku_Call) Run(run func(ctx context.Context, req types.ActStatementsReq)) *MockAccountingStatementComponent_ListStatementByUserAndSku_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ActStatementsReq))
	})
	return _c
}

func (_c *MockAccountingStatementComponent_ListStatementByUserAndSku_Call) Return(_a0 *types.AcctStatementsResult, _a1 error) *MockAccountingStatementComponent_ListStatementByUserAndSku_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingStatementComponent_ListStatementByUserAndSku_Call) RunAndReturn(run func(context.Context, types.ActStatementsReq) (*types.AcctStatementsResult, error)) *MockAccountingStatementComponent_ListStatementByUserAndSku_Call {
	_c.Call.Return(run)
	return _c
}

// ListStatementByUserIDAndTime provides a mock function with given fields: ctx, req
func (_m *MockAccountingStatementComponent) ListStatementByUserIDAndTime(ctx context.Context, req types.ActStatementsReq) (types.AcctStatementsResult, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ListStatementByUserIDAndTime")
	}

	var r0 types.AcctStatementsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ActStatementsReq) (types.AcctStatementsResult, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ActStatementsReq) types.AcctStatementsResult); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(types.AcctStatementsResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ActStatementsReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccountingStatementComponent_ListStatementByUserIDAndTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStatementByUserIDAndTime'
type MockAccountingStatementComponent_ListStatementByUserIDAndTime_Call struct {
	*mock.Call
}

// ListStatementByUserIDAndTime is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.ActStatementsReq
func (_e *MockAccountingStatementComponent_Expecter) ListStatementByUserIDAndTime(ctx interface{}, req interface{}) *MockAccountingStatementComponent_ListStatementByUserIDAndTime_Call {
	return &MockAccountingStatementComponent_ListStatementByUserIDAndTime_Call{Call: _e.mock.On("ListStatementByUserIDAndTime", ctx, req)}
}

func (_c *MockAccountingStatementComponent_ListStatementByUserIDAndTime_Call) Run(run func(ctx context.Context, req types.ActStatementsReq)) *MockAccountingStatementComponent_ListStatementByUserIDAndTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ActStatementsReq))
	})
	return _c
}

func (_c *MockAccountingStatementComponent_ListStatementByUserIDAndTime_Call) Return(_a0 types.AcctStatementsResult, _a1 error) *MockAccountingStatementComponent_ListStatementByUserIDAndTime_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccountingStatementComponent_ListStatementByUserIDAndTime_Call) RunAndReturn(run func(context.Context, types.ActStatementsReq) (types.AcctStatementsResult, error)) *MockAccountingStatementComponent_ListStatementByUserIDAndTime_Call {
	_c.Call.Return(run)
	return _c
}

// RechargeAccountingUser provides a mock function with given fields: ctx, userUUID, req, eventUUID
func (_m *MockAccountingStatementComponent) RechargeAccountingUser(ctx context.Context, userUUID string, req types.RechargeReq, eventUUID uuid.UUID) error {
	ret := _m.Called(ctx, userUUID, req, eventUUID)

	if len(ret) == 0 {
		panic("no return value specified for RechargeAccountingUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.RechargeReq, uuid.UUID) error); ok {
		r0 = rf(ctx, userUUID, req, eventUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccountingStatementComponent_RechargeAccountingUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RechargeAccountingUser'
type MockAccountingStatementComponent_RechargeAccountingUser_Call struct {
	*mock.Call
}

// RechargeAccountingUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userUUID string
//   - req types.RechargeReq
//   - eventUUID uuid.UUID
func (_e *MockAccountingStatementComponent_Expecter) RechargeAccountingUser(ctx interface{}, userUUID interface{}, req interface{}, eventUUID interface{}) *MockAccountingStatementComponent_RechargeAccountingUser_Call {
	return &MockAccountingStatementComponent_RechargeAccountingUser_Call{Call: _e.mock.On("RechargeAccountingUser", ctx, userUUID, req, eventUUID)}
}

func (_c *MockAccountingStatementComponent_RechargeAccountingUser_Call) Run(run func(ctx context.Context, userUUID string, req types.RechargeReq, eventUUID uuid.UUID)) *MockAccountingStatementComponent_RechargeAccountingUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.RechargeReq), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockAccountingStatementComponent_RechargeAccountingUser_Call) Return(_a0 error) *MockAccountingStatementComponent_RechargeAccountingUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccountingStatementComponent_RechargeAccountingUser_Call) RunAndReturn(run func(context.Context, string, types.RechargeReq, uuid.UUID) error) *MockAccountingStatementComponent_RechargeAccountingUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccountingStatementComponent creates a new instance of MockAccountingStatementComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountingStatementComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountingStatementComponent {
	mock := &MockAccountingStatementComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

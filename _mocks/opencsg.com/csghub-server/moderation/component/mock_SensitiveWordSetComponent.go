// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockSensitiveWordSetComponent is an autogenerated mock type for the SensitiveWordSetComponent type
type MockSensitiveWordSetComponent struct {
	mock.Mock
}

type MockSensitiveWordSetComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSensitiveWordSetComponent) EXPECT() *MockSensitiveWordSetComponent_Expecter {
	return &MockSensitiveWordSetComponent_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, input
func (_m *MockSensitiveWordSetComponent) Create(ctx context.Context, input types.CreateSensitiveWordSetReq) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.CreateSensitiveWordSetReq) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSensitiveWordSetComponent_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSensitiveWordSetComponent_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input types.CreateSensitiveWordSetReq
func (_e *MockSensitiveWordSetComponent_Expecter) Create(ctx interface{}, input interface{}) *MockSensitiveWordSetComponent_Create_Call {
	return &MockSensitiveWordSetComponent_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *MockSensitiveWordSetComponent_Create_Call) Run(run func(ctx context.Context, input types.CreateSensitiveWordSetReq)) *MockSensitiveWordSetComponent_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.CreateSensitiveWordSetReq))
	})
	return _c
}

func (_c *MockSensitiveWordSetComponent_Create_Call) Return(_a0 error) *MockSensitiveWordSetComponent_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSensitiveWordSetComponent_Create_Call) RunAndReturn(run func(context.Context, types.CreateSensitiveWordSetReq) error) *MockSensitiveWordSetComponent_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockSensitiveWordSetComponent) Get(ctx context.Context, id int64) (*types.SensitiveWordSet, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *types.SensitiveWordSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*types.SensitiveWordSet, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *types.SensitiveWordSet); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.SensitiveWordSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSensitiveWordSetComponent_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSensitiveWordSetComponent_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockSensitiveWordSetComponent_Expecter) Get(ctx interface{}, id interface{}) *MockSensitiveWordSetComponent_Get_Call {
	return &MockSensitiveWordSetComponent_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockSensitiveWordSetComponent_Get_Call) Run(run func(ctx context.Context, id int64)) *MockSensitiveWordSetComponent_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockSensitiveWordSetComponent_Get_Call) Return(_a0 *types.SensitiveWordSet, _a1 error) *MockSensitiveWordSetComponent_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSensitiveWordSetComponent_Get_Call) RunAndReturn(run func(context.Context, int64) (*types.SensitiveWordSet, error)) *MockSensitiveWordSetComponent_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields: ctx, search
func (_m *MockSensitiveWordSetComponent) Index(ctx context.Context, search string) ([]types.SensitiveWordSet, error) {
	ret := _m.Called(ctx, search)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 []types.SensitiveWordSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]types.SensitiveWordSet, error)); ok {
		return rf(ctx, search)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []types.SensitiveWordSet); ok {
		r0 = rf(ctx, search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.SensitiveWordSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSensitiveWordSetComponent_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockSensitiveWordSetComponent_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - ctx context.Context
//   - search string
func (_e *MockSensitiveWordSetComponent_Expecter) Index(ctx interface{}, search interface{}) *MockSensitiveWordSetComponent_Index_Call {
	return &MockSensitiveWordSetComponent_Index_Call{Call: _e.mock.On("Index", ctx, search)}
}

func (_c *MockSensitiveWordSetComponent_Index_Call) Run(run func(ctx context.Context, search string)) *MockSensitiveWordSetComponent_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSensitiveWordSetComponent_Index_Call) Return(_a0 []types.SensitiveWordSet, _a1 error) *MockSensitiveWordSetComponent_Index_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSensitiveWordSetComponent_Index_Call) RunAndReturn(run func(context.Context, string) ([]types.SensitiveWordSet, error)) *MockSensitiveWordSetComponent_Index_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, input
func (_m *MockSensitiveWordSetComponent) Update(ctx context.Context, input types.UpdateSensitiveWordSetReq) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.UpdateSensitiveWordSetReq) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSensitiveWordSetComponent_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSensitiveWordSetComponent_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - input types.UpdateSensitiveWordSetReq
func (_e *MockSensitiveWordSetComponent_Expecter) Update(ctx interface{}, input interface{}) *MockSensitiveWordSetComponent_Update_Call {
	return &MockSensitiveWordSetComponent_Update_Call{Call: _e.mock.On("Update", ctx, input)}
}

func (_c *MockSensitiveWordSetComponent_Update_Call) Run(run func(ctx context.Context, input types.UpdateSensitiveWordSetReq)) *MockSensitiveWordSetComponent_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.UpdateSensitiveWordSetReq))
	})
	return _c
}

func (_c *MockSensitiveWordSetComponent_Update_Call) Return(_a0 error) *MockSensitiveWordSetComponent_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSensitiveWordSetComponent_Update_Call) RunAndReturn(run func(context.Context, types.UpdateSensitiveWordSetReq) error) *MockSensitiveWordSetComponent_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSensitiveWordSetComponent creates a new instance of MockSensitiveWordSetComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSensitiveWordSetComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSensitiveWordSetComponent {
	mock := &MockSensitiveWordSetComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package filter

import (
	context "context"

	database "opencsg.com/csghub-server/builder/store/database"
	filter "opencsg.com/csghub-server/common/filter"

	mock "github.com/stretchr/testify/mock"
)

// MockRepoFilter is an autogenerated mock type for the RepoFilter type
type MockRepoFilter struct {
	mock.Mock
}

type MockRepoFilter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepoFilter) EXPECT() *MockRepoFilter_Expecter {
	return &MockRepoFilter_Expecter{mock: &_m.Mock}
}

// BatchMatch provides a mock function with given fields: ctx, repos
func (_m *MockRepoFilter) BatchMatch(ctx context.Context, repos []database.Repository) ([]string, []string, error) {
	ret := _m.Called(ctx, repos)

	if len(ret) == 0 {
		panic("no return value specified for BatchMatch")
	}

	var r0 []string
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []database.Repository) ([]string, []string, error)); ok {
		return rf(ctx, repos)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []database.Repository) []string); ok {
		r0 = rf(ctx, repos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []database.Repository) []string); ok {
		r1 = rf(ctx, repos)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []database.Repository) error); ok {
		r2 = rf(ctx, repos)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockRepoFilter_BatchMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchMatch'
type MockRepoFilter_BatchMatch_Call struct {
	*mock.Call
}

// BatchMatch is a helper method to define mock.On call
//   - ctx context.Context
//   - repos []database.Repository
func (_e *MockRepoFilter_Expecter) BatchMatch(ctx interface{}, repos interface{}) *MockRepoFilter_BatchMatch_Call {
	return &MockRepoFilter_BatchMatch_Call{Call: _e.mock.On("BatchMatch", ctx, repos)}
}

func (_c *MockRepoFilter_BatchMatch_Call) Run(run func(ctx context.Context, repos []database.Repository)) *MockRepoFilter_BatchMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]database.Repository))
	})
	return _c
}

func (_c *MockRepoFilter_BatchMatch_Call) Return(modelsMatched []string, datasetsMatched []string, err error) *MockRepoFilter_BatchMatch_Call {
	_c.Call.Return(modelsMatched, datasetsMatched, err)
	return _c
}

func (_c *MockRepoFilter_BatchMatch_Call) RunAndReturn(run func(context.Context, []database.Repository) ([]string, []string, error)) *MockRepoFilter_BatchMatch_Call {
	_c.Call.Return(run)
	return _c
}

// Match provides a mock function with given fields: ctx, repoArgs
func (_m *MockRepoFilter) Match(ctx context.Context, repoArgs filter.RepoArgs) (bool, error) {
	ret := _m.Called(ctx, repoArgs)

	if len(ret) == 0 {
		panic("no return value specified for Match")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, filter.RepoArgs) (bool, error)); ok {
		return rf(ctx, repoArgs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, filter.RepoArgs) bool); ok {
		r0 = rf(ctx, repoArgs)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, filter.RepoArgs) error); ok {
		r1 = rf(ctx, repoArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepoFilter_Match_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Match'
type MockRepoFilter_Match_Call struct {
	*mock.Call
}

// Match is a helper method to define mock.On call
//   - ctx context.Context
//   - repoArgs filter.RepoArgs
func (_e *MockRepoFilter_Expecter) Match(ctx interface{}, repoArgs interface{}) *MockRepoFilter_Match_Call {
	return &MockRepoFilter_Match_Call{Call: _e.mock.On("Match", ctx, repoArgs)}
}

func (_c *MockRepoFilter_Match_Call) Run(run func(ctx context.Context, repoArgs filter.RepoArgs)) *MockRepoFilter_Match_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(filter.RepoArgs))
	})
	return _c
}

func (_c *MockRepoFilter_Match_Call) Return(_a0 bool, _a1 error) *MockRepoFilter_Match_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepoFilter_Match_Call) RunAndReturn(run func(context.Context, filter.RepoArgs) (bool, error)) *MockRepoFilter_Match_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepoFilter creates a new instance of MockRepoFilter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepoFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepoFilter {
	mock := &MockRepoFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

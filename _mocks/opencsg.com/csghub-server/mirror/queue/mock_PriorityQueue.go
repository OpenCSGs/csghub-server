// Code generated by mockery v2.53.0. DO NOT EDIT.

package queue

import (
	mock "github.com/stretchr/testify/mock"
	queue "opencsg.com/csghub-server/mirror/queue"
)

// MockPriorityQueue is an autogenerated mock type for the PriorityQueue type
type MockPriorityQueue struct {
	mock.Mock
}

type MockPriorityQueue_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPriorityQueue) EXPECT() *MockPriorityQueue_Expecter {
	return &MockPriorityQueue_Expecter{mock: &_m.Mock}
}

// ListLfsMirrorTasks provides a mock function with given fields: count
func (_m *MockPriorityQueue) ListLfsMirrorTasks(count int64) []int64 {
	ret := _m.Called(count)

	if len(ret) == 0 {
		panic("no return value specified for ListLfsMirrorTasks")
	}

	var r0 []int64
	if rf, ok := ret.Get(0).(func(int64) []int64); ok {
		r0 = rf(count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	return r0
}

// MockPriorityQueue_ListLfsMirrorTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLfsMirrorTasks'
type MockPriorityQueue_ListLfsMirrorTasks_Call struct {
	*mock.Call
}

// ListLfsMirrorTasks is a helper method to define mock.On call
//   - count int64
func (_e *MockPriorityQueue_Expecter) ListLfsMirrorTasks(count interface{}) *MockPriorityQueue_ListLfsMirrorTasks_Call {
	return &MockPriorityQueue_ListLfsMirrorTasks_Call{Call: _e.mock.On("ListLfsMirrorTasks", count)}
}

func (_c *MockPriorityQueue_ListLfsMirrorTasks_Call) Run(run func(count int64)) *MockPriorityQueue_ListLfsMirrorTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockPriorityQueue_ListLfsMirrorTasks_Call) Return(_a0 []int64) *MockPriorityQueue_ListLfsMirrorTasks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPriorityQueue_ListLfsMirrorTasks_Call) RunAndReturn(run func(int64) []int64) *MockPriorityQueue_ListLfsMirrorTasks_Call {
	_c.Call.Return(run)
	return _c
}

// ListRepoMirrorTasks provides a mock function with given fields: count
func (_m *MockPriorityQueue) ListRepoMirrorTasks(count int64) []int64 {
	ret := _m.Called(count)

	if len(ret) == 0 {
		panic("no return value specified for ListRepoMirrorTasks")
	}

	var r0 []int64
	if rf, ok := ret.Get(0).(func(int64) []int64); ok {
		r0 = rf(count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	return r0
}

// MockPriorityQueue_ListRepoMirrorTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRepoMirrorTasks'
type MockPriorityQueue_ListRepoMirrorTasks_Call struct {
	*mock.Call
}

// ListRepoMirrorTasks is a helper method to define mock.On call
//   - count int64
func (_e *MockPriorityQueue_Expecter) ListRepoMirrorTasks(count interface{}) *MockPriorityQueue_ListRepoMirrorTasks_Call {
	return &MockPriorityQueue_ListRepoMirrorTasks_Call{Call: _e.mock.On("ListRepoMirrorTasks", count)}
}

func (_c *MockPriorityQueue_ListRepoMirrorTasks_Call) Run(run func(count int64)) *MockPriorityQueue_ListRepoMirrorTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockPriorityQueue_ListRepoMirrorTasks_Call) Return(_a0 []int64) *MockPriorityQueue_ListRepoMirrorTasks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPriorityQueue_ListRepoMirrorTasks_Call) RunAndReturn(run func(int64) []int64) *MockPriorityQueue_ListRepoMirrorTasks_Call {
	_c.Call.Return(run)
	return _c
}

// PopLfsMirror provides a mock function with no fields
func (_m *MockPriorityQueue) PopLfsMirror() *int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PopLfsMirror")
	}

	var r0 *queue.MirrorTask
	if rf, ok := ret.Get(0).(func() *queue.MirrorTask); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queue.MirrorTask)
		}
	}

	return r0
}

// MockPriorityQueue_PopLfsMirror_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PopLfsMirror'
type MockPriorityQueue_PopLfsMirror_Call struct {
	*mock.Call
}

// PopLfsMirror is a helper method to define mock.On call
func (_e *MockPriorityQueue_Expecter) PopLfsMirror() *MockPriorityQueue_PopLfsMirror_Call {
	return &MockPriorityQueue_PopLfsMirror_Call{Call: _e.mock.On("PopLfsMirror")}
}

func (_c *MockPriorityQueue_PopLfsMirror_Call) Run(run func()) *MockPriorityQueue_PopLfsMirror_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPriorityQueue_PopLfsMirror_Call) Return(_a0 *queue.MirrorTask) *MockPriorityQueue_PopLfsMirror_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPriorityQueue_PopLfsMirror_Call) RunAndReturn(run func() *queue.MirrorTask) *MockPriorityQueue_PopLfsMirror_Call {
	_c.Call.Return(run)
	return _c
}

// PopRepoMirror provides a mock function with no fields
func (_m *MockPriorityQueue) PopRepoMirror() *int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PopRepoMirror")
	}

	var r0 *queue.MirrorTask
	if rf, ok := ret.Get(0).(func() *queue.MirrorTask); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queue.MirrorTask)
		}
	}

	return r0
}

// MockPriorityQueue_PopRepoMirror_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PopRepoMirror'
type MockPriorityQueue_PopRepoMirror_Call struct {
	*mock.Call
}

// PopRepoMirror is a helper method to define mock.On call
func (_e *MockPriorityQueue_Expecter) PopRepoMirror() *MockPriorityQueue_PopRepoMirror_Call {
	return &MockPriorityQueue_PopRepoMirror_Call{Call: _e.mock.On("PopRepoMirror")}
}

func (_c *MockPriorityQueue_PopRepoMirror_Call) Run(run func()) *MockPriorityQueue_PopRepoMirror_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPriorityQueue_PopRepoMirror_Call) Return(_a0 *queue.MirrorTask) *MockPriorityQueue_PopRepoMirror_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPriorityQueue_PopRepoMirror_Call) RunAndReturn(run func() *queue.MirrorTask) *MockPriorityQueue_PopRepoMirror_Call {
	_c.Call.Return(run)
	return _c
}

// PushLfsMirror provides a mock function with given fields: mt
func (_m *MockPriorityQueue) PushLfsMirror(mt *queue.MirrorTask) {
	_m.Called(mt)
}

// MockPriorityQueue_PushLfsMirror_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushLfsMirror'
type MockPriorityQueue_PushLfsMirror_Call struct {
	*mock.Call
}

// PushLfsMirror is a helper method to define mock.On call
//   - mt *queue.MirrorTask
func (_e *MockPriorityQueue_Expecter) PushLfsMirror(mt interface{}) *MockPriorityQueue_PushLfsMirror_Call {
	return &MockPriorityQueue_PushLfsMirror_Call{Call: _e.mock.On("PushLfsMirror", mt)}
}

func (_c *MockPriorityQueue_PushLfsMirror_Call) Run(run func(mt *queue.MirrorTask)) *MockPriorityQueue_PushLfsMirror_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*queue.MirrorTask))
	})
	return _c
}

func (_c *MockPriorityQueue_PushLfsMirror_Call) Return() *MockPriorityQueue_PushLfsMirror_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPriorityQueue_PushLfsMirror_Call) RunAndReturn(run func(*queue.MirrorTask)) *MockPriorityQueue_PushLfsMirror_Call {
	_c.Run(run)
	return _c
}

// PushRepoMirror provides a mock function with given fields: mt
func (_m *MockPriorityQueue) PushRepoMirror(mt *queue.MirrorTask) {
	_m.Called(mt)
}

// MockPriorityQueue_PushRepoMirror_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushRepoMirror'
type MockPriorityQueue_PushRepoMirror_Call struct {
	*mock.Call
}

// PushRepoMirror is a helper method to define mock.On call
//   - mt *queue.MirrorTask
func (_e *MockPriorityQueue_Expecter) PushRepoMirror(mt interface{}) *MockPriorityQueue_PushRepoMirror_Call {
	return &MockPriorityQueue_PushRepoMirror_Call{Call: _e.mock.On("PushRepoMirror", mt)}
}

func (_c *MockPriorityQueue_PushRepoMirror_Call) Run(run func(mt *queue.MirrorTask)) *MockPriorityQueue_PushRepoMirror_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*queue.MirrorTask))
	})
	return _c
}

func (_c *MockPriorityQueue_PushRepoMirror_Call) Return() *MockPriorityQueue_PushRepoMirror_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPriorityQueue_PushRepoMirror_Call) RunAndReturn(run func(*queue.MirrorTask)) *MockPriorityQueue_PushRepoMirror_Call {
	_c.Run(run)
	return _c
}

// ZRem provides a mock function with given fields: value
func (_m *MockPriorityQueue) ZRem(value string) error {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for ZRem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPriorityQueue_ZRem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZRem'
type MockPriorityQueue_ZRem_Call struct {
	*mock.Call
}

// ZRem is a helper method to define mock.On call
//   - value string
func (_e *MockPriorityQueue_Expecter) ZRem(value interface{}) *MockPriorityQueue_ZRem_Call {
	return &MockPriorityQueue_ZRem_Call{Call: _e.mock.On("ZRem", value)}
}

func (_c *MockPriorityQueue_ZRem_Call) Run(run func(value string)) *MockPriorityQueue_ZRem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPriorityQueue_ZRem_Call) Return(_a0 error) *MockPriorityQueue_ZRem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPriorityQueue_ZRem_Call) RunAndReturn(run func(string) error) *MockPriorityQueue_ZRem_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPriorityQueue creates a new instance of MockPriorityQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPriorityQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPriorityQueue {
	mock := &MockPriorityQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

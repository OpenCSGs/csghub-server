// Code generated by mockery v2.53.0. DO NOT EDIT.

package filter

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockFilter is an autogenerated mock type for the Filter type
type MockFilter struct {
	mock.Mock
}

type MockFilter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFilter) EXPECT() *MockFilter_Expecter {
	return &MockFilter_Expecter{mock: &_m.Mock}
}

// ShouldSync provides a mock function with given fields: ctx, repoID
func (_m *MockFilter) ShouldSync(ctx context.Context, repoID int64) (bool, string, error) {
	ret := _m.Called(ctx, repoID)

	if len(ret) == 0 {
		panic("no return value specified for ShouldSync")
	}

	var r0 bool
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (bool, string, error)); ok {
		return rf(ctx, repoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, repoID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) string); ok {
		r1 = rf(ctx, repoID)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(ctx, repoID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFilter_ShouldSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShouldSync'
type MockFilter_ShouldSync_Call struct {
	*mock.Call
}

// ShouldSync is a helper method to define mock.On call
//   - ctx context.Context
//   - repoID int64
func (_e *MockFilter_Expecter) ShouldSync(ctx interface{}, repoID interface{}) *MockFilter_ShouldSync_Call {
	return &MockFilter_ShouldSync_Call{Call: _e.mock.On("ShouldSync", ctx, repoID)}
}

func (_c *MockFilter_ShouldSync_Call) Run(run func(ctx context.Context, repoID int64)) *MockFilter_ShouldSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockFilter_ShouldSync_Call) Return(_a0 bool, _a1 string, _a2 error) *MockFilter_ShouldSync_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockFilter_ShouldSync_Call) RunAndReturn(run func(context.Context, int64) (bool, string, error)) *MockFilter_ShouldSync_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFilter creates a new instance of MockFilter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFilter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFilter {
	mock := &MockFilter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

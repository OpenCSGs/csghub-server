// Code generated by mockery v2.53.0. DO NOT EDIT.

package cache

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// CacheLfsSyncAddPart provides a mock function with given fields: ctx, repoPath, oid, partSize, partNumber
func (_m *MockCache) CacheLfsSyncAddPart(ctx context.Context, repoPath string, oid string, partSize string, partNumber int) error {
	ret := _m.Called(ctx, repoPath, oid, partSize, partNumber)

	if len(ret) == 0 {
		panic("no return value specified for CacheLfsSyncAddPart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int) error); ok {
		r0 = rf(ctx, repoPath, oid, partSize, partNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_CacheLfsSyncAddPart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheLfsSyncAddPart'
type MockCache_CacheLfsSyncAddPart_Call struct {
	*mock.Call
}

// CacheLfsSyncAddPart is a helper method to define mock.On call
//   - ctx context.Context
//   - repoPath string
//   - oid string
//   - partSize string
//   - partNumber int
func (_e *MockCache_Expecter) CacheLfsSyncAddPart(ctx interface{}, repoPath interface{}, oid interface{}, partSize interface{}, partNumber interface{}) *MockCache_CacheLfsSyncAddPart_Call {
	return &MockCache_CacheLfsSyncAddPart_Call{Call: _e.mock.On("CacheLfsSyncAddPart", ctx, repoPath, oid, partSize, partNumber)}
}

func (_c *MockCache_CacheLfsSyncAddPart_Call) Run(run func(ctx context.Context, repoPath string, oid string, partSize string, partNumber int)) *MockCache_CacheLfsSyncAddPart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int))
	})
	return _c
}

func (_c *MockCache_CacheLfsSyncAddPart_Call) Return(_a0 error) *MockCache_CacheLfsSyncAddPart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_CacheLfsSyncAddPart_Call) RunAndReturn(run func(context.Context, string, string, string, int) error) *MockCache_CacheLfsSyncAddPart_Call {
	_c.Call.Return(run)
	return _c
}

// CacheLfsSyncFileProgress provides a mock function with given fields: ctx, repoPath, oid, partSize, progress
func (_m *MockCache) CacheLfsSyncFileProgress(ctx context.Context, repoPath string, oid string, partSize string, progress int) error {
	ret := _m.Called(ctx, repoPath, oid, partSize, progress)

	if len(ret) == 0 {
		panic("no return value specified for CacheLfsSyncFileProgress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int) error); ok {
		r0 = rf(ctx, repoPath, oid, partSize, progress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_CacheLfsSyncFileProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheLfsSyncFileProgress'
type MockCache_CacheLfsSyncFileProgress_Call struct {
	*mock.Call
}

// CacheLfsSyncFileProgress is a helper method to define mock.On call
//   - ctx context.Context
//   - repoPath string
//   - oid string
//   - partSize string
//   - progress int
func (_e *MockCache_Expecter) CacheLfsSyncFileProgress(ctx interface{}, repoPath interface{}, oid interface{}, partSize interface{}, progress interface{}) *MockCache_CacheLfsSyncFileProgress_Call {
	return &MockCache_CacheLfsSyncFileProgress_Call{Call: _e.mock.On("CacheLfsSyncFileProgress", ctx, repoPath, oid, partSize, progress)}
}

func (_c *MockCache_CacheLfsSyncFileProgress_Call) Run(run func(ctx context.Context, repoPath string, oid string, partSize string, progress int)) *MockCache_CacheLfsSyncFileProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int))
	})
	return _c
}

func (_c *MockCache_CacheLfsSyncFileProgress_Call) Return(_a0 error) *MockCache_CacheLfsSyncFileProgress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_CacheLfsSyncFileProgress_Call) RunAndReturn(run func(context.Context, string, string, string, int) error) *MockCache_CacheLfsSyncFileProgress_Call {
	_c.Call.Return(run)
	return _c
}

// CacheRunningTask provides a mock function with given fields: ctx, workID, mirrorID
func (_m *MockCache) CacheRunningTask(ctx context.Context, workID int, mirrorID int64) error {
	ret := _m.Called(ctx, workID, mirrorID)

	if len(ret) == 0 {
		panic("no return value specified for CacheRunningTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int64) error); ok {
		r0 = rf(ctx, workID, mirrorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_CacheRunningTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheRunningTask'
type MockCache_CacheRunningTask_Call struct {
	*mock.Call
}

// CacheRunningTask is a helper method to define mock.On call
//   - ctx context.Context
//   - workID int
//   - mirrorID int64
func (_e *MockCache_Expecter) CacheRunningTask(ctx interface{}, workID interface{}, mirrorID interface{}) *MockCache_CacheRunningTask_Call {
	return &MockCache_CacheRunningTask_Call{Call: _e.mock.On("CacheRunningTask", ctx, workID, mirrorID)}
}

func (_c *MockCache_CacheRunningTask_Call) Run(run func(ctx context.Context, workID int, mirrorID int64)) *MockCache_CacheRunningTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int64))
	})
	return _c
}

func (_c *MockCache_CacheRunningTask_Call) Return(_a0 error) *MockCache_CacheRunningTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_CacheRunningTask_Call) RunAndReturn(run func(context.Context, int, int64) error) *MockCache_CacheRunningTask_Call {
	_c.Call.Return(run)
	return _c
}

// CacheUploadID provides a mock function with given fields: ctx, repoPath, oid, partSize, uploadID
func (_m *MockCache) CacheUploadID(ctx context.Context, repoPath string, oid string, partSize string, uploadID string) error {
	ret := _m.Called(ctx, repoPath, oid, partSize, uploadID)

	if len(ret) == 0 {
		panic("no return value specified for CacheUploadID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, repoPath, oid, partSize, uploadID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_CacheUploadID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheUploadID'
type MockCache_CacheUploadID_Call struct {
	*mock.Call
}

// CacheUploadID is a helper method to define mock.On call
//   - ctx context.Context
//   - repoPath string
//   - oid string
//   - partSize string
//   - uploadID string
func (_e *MockCache_Expecter) CacheUploadID(ctx interface{}, repoPath interface{}, oid interface{}, partSize interface{}, uploadID interface{}) *MockCache_CacheUploadID_Call {
	return &MockCache_CacheUploadID_Call{Call: _e.mock.On("CacheUploadID", ctx, repoPath, oid, partSize, uploadID)}
}

func (_c *MockCache_CacheUploadID_Call) Run(run func(ctx context.Context, repoPath string, oid string, partSize string, uploadID string)) *MockCache_CacheUploadID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockCache_CacheUploadID_Call) Return(_a0 error) *MockCache_CacheUploadID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_CacheUploadID_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockCache_CacheUploadID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllCache provides a mock function with given fields: ctx, repoPath, oid, partSize
func (_m *MockCache) DeleteAllCache(ctx context.Context, repoPath string, oid string, partSize string) error {
	ret := _m.Called(ctx, repoPath, oid, partSize)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, repoPath, oid, partSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_DeleteAllCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllCache'
type MockCache_DeleteAllCache_Call struct {
	*mock.Call
}

// DeleteAllCache is a helper method to define mock.On call
//   - ctx context.Context
//   - repoPath string
//   - oid string
//   - partSize string
func (_e *MockCache_Expecter) DeleteAllCache(ctx interface{}, repoPath interface{}, oid interface{}, partSize interface{}) *MockCache_DeleteAllCache_Call {
	return &MockCache_DeleteAllCache_Call{Call: _e.mock.On("DeleteAllCache", ctx, repoPath, oid, partSize)}
}

func (_c *MockCache_DeleteAllCache_Call) Run(run func(ctx context.Context, repoPath string, oid string, partSize string)) *MockCache_DeleteAllCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockCache_DeleteAllCache_Call) Return(_a0 error) *MockCache_DeleteAllCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_DeleteAllCache_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockCache_DeleteAllCache_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLfsPartCache provides a mock function with given fields: ctx, repoPath, oid, partSize
func (_m *MockCache) DeleteLfsPartCache(ctx context.Context, repoPath string, oid string, partSize string) error {
	ret := _m.Called(ctx, repoPath, oid, partSize)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLfsPartCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, repoPath, oid, partSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_DeleteLfsPartCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLfsPartCache'
type MockCache_DeleteLfsPartCache_Call struct {
	*mock.Call
}

// DeleteLfsPartCache is a helper method to define mock.On call
//   - ctx context.Context
//   - repoPath string
//   - oid string
//   - partSize string
func (_e *MockCache_Expecter) DeleteLfsPartCache(ctx interface{}, repoPath interface{}, oid interface{}, partSize interface{}) *MockCache_DeleteLfsPartCache_Call {
	return &MockCache_DeleteLfsPartCache_Call{Call: _e.mock.On("DeleteLfsPartCache", ctx, repoPath, oid, partSize)}
}

func (_c *MockCache_DeleteLfsPartCache_Call) Run(run func(ctx context.Context, repoPath string, oid string, partSize string)) *MockCache_DeleteLfsPartCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockCache_DeleteLfsPartCache_Call) Return(_a0 error) *MockCache_DeleteLfsPartCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_DeleteLfsPartCache_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockCache_DeleteLfsPartCache_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLfsSyncFileProgress provides a mock function with given fields: ctx, repoPath, oid, partSize
func (_m *MockCache) DeleteLfsSyncFileProgress(ctx context.Context, repoPath string, oid string, partSize string) error {
	ret := _m.Called(ctx, repoPath, oid, partSize)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLfsSyncFileProgress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, repoPath, oid, partSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_DeleteLfsSyncFileProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLfsSyncFileProgress'
type MockCache_DeleteLfsSyncFileProgress_Call struct {
	*mock.Call
}

// DeleteLfsSyncFileProgress is a helper method to define mock.On call
//   - ctx context.Context
//   - repoPath string
//   - oid string
//   - partSize string
func (_e *MockCache_Expecter) DeleteLfsSyncFileProgress(ctx interface{}, repoPath interface{}, oid interface{}, partSize interface{}) *MockCache_DeleteLfsSyncFileProgress_Call {
	return &MockCache_DeleteLfsSyncFileProgress_Call{Call: _e.mock.On("DeleteLfsSyncFileProgress", ctx, repoPath, oid, partSize)}
}

func (_c *MockCache_DeleteLfsSyncFileProgress_Call) Run(run func(ctx context.Context, repoPath string, oid string, partSize string)) *MockCache_DeleteLfsSyncFileProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockCache_DeleteLfsSyncFileProgress_Call) Return(_a0 error) *MockCache_DeleteLfsSyncFileProgress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_DeleteLfsSyncFileProgress_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockCache_DeleteLfsSyncFileProgress_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSpecificLfsPartCache provides a mock function with given fields: ctx, repoPath, oid, partSize, partNumber
func (_m *MockCache) DeleteSpecificLfsPartCache(ctx context.Context, repoPath string, oid string, partSize string, partNumber int) error {
	ret := _m.Called(ctx, repoPath, oid, partSize, partNumber)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSpecificLfsPartCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int) error); ok {
		r0 = rf(ctx, repoPath, oid, partSize, partNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_DeleteSpecificLfsPartCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSpecificLfsPartCache'
type MockCache_DeleteSpecificLfsPartCache_Call struct {
	*mock.Call
}

// DeleteSpecificLfsPartCache is a helper method to define mock.On call
//   - ctx context.Context
//   - repoPath string
//   - oid string
//   - partSize string
//   - partNumber int
func (_e *MockCache_Expecter) DeleteSpecificLfsPartCache(ctx interface{}, repoPath interface{}, oid interface{}, partSize interface{}, partNumber interface{}) *MockCache_DeleteSpecificLfsPartCache_Call {
	return &MockCache_DeleteSpecificLfsPartCache_Call{Call: _e.mock.On("DeleteSpecificLfsPartCache", ctx, repoPath, oid, partSize, partNumber)}
}

func (_c *MockCache_DeleteSpecificLfsPartCache_Call) Run(run func(ctx context.Context, repoPath string, oid string, partSize string, partNumber int)) *MockCache_DeleteSpecificLfsPartCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int))
	})
	return _c
}

func (_c *MockCache_DeleteSpecificLfsPartCache_Call) Return(_a0 error) *MockCache_DeleteSpecificLfsPartCache_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_DeleteSpecificLfsPartCache_Call) RunAndReturn(run func(context.Context, string, string, string, int) error) *MockCache_DeleteSpecificLfsPartCache_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUploadID provides a mock function with given fields: ctx, repoPath, oid, partSize
func (_m *MockCache) DeleteUploadID(ctx context.Context, repoPath string, oid string, partSize string) error {
	ret := _m.Called(ctx, repoPath, oid, partSize)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUploadID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, repoPath, oid, partSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_DeleteUploadID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUploadID'
type MockCache_DeleteUploadID_Call struct {
	*mock.Call
}

// DeleteUploadID is a helper method to define mock.On call
//   - ctx context.Context
//   - repoPath string
//   - oid string
//   - partSize string
func (_e *MockCache_Expecter) DeleteUploadID(ctx interface{}, repoPath interface{}, oid interface{}, partSize interface{}) *MockCache_DeleteUploadID_Call {
	return &MockCache_DeleteUploadID_Call{Call: _e.mock.On("DeleteUploadID", ctx, repoPath, oid, partSize)}
}

func (_c *MockCache_DeleteUploadID_Call) Run(run func(ctx context.Context, repoPath string, oid string, partSize string)) *MockCache_DeleteUploadID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockCache_DeleteUploadID_Call) Return(_a0 error) *MockCache_DeleteUploadID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_DeleteUploadID_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockCache_DeleteUploadID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLfsSyncFileProgress provides a mock function with given fields: ctx, repoPath, oid, partSize
func (_m *MockCache) GetLfsSyncFileProgress(ctx context.Context, repoPath string, oid string, partSize string) (int, error) {
	ret := _m.Called(ctx, repoPath, oid, partSize)

	if len(ret) == 0 {
		panic("no return value specified for GetLfsSyncFileProgress")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (int, error)); ok {
		return rf(ctx, repoPath, oid, partSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int); ok {
		r0 = rf(ctx, repoPath, oid, partSize)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, repoPath, oid, partSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCache_GetLfsSyncFileProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLfsSyncFileProgress'
type MockCache_GetLfsSyncFileProgress_Call struct {
	*mock.Call
}

// GetLfsSyncFileProgress is a helper method to define mock.On call
//   - ctx context.Context
//   - repoPath string
//   - oid string
//   - partSize string
func (_e *MockCache_Expecter) GetLfsSyncFileProgress(ctx interface{}, repoPath interface{}, oid interface{}, partSize interface{}) *MockCache_GetLfsSyncFileProgress_Call {
	return &MockCache_GetLfsSyncFileProgress_Call{Call: _e.mock.On("GetLfsSyncFileProgress", ctx, repoPath, oid, partSize)}
}

func (_c *MockCache_GetLfsSyncFileProgress_Call) Run(run func(ctx context.Context, repoPath string, oid string, partSize string)) *MockCache_GetLfsSyncFileProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockCache_GetLfsSyncFileProgress_Call) Return(_a0 int, _a1 error) *MockCache_GetLfsSyncFileProgress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_GetLfsSyncFileProgress_Call) RunAndReturn(run func(context.Context, string, string, string) (int, error)) *MockCache_GetLfsSyncFileProgress_Call {
	_c.Call.Return(run)
	return _c
}

// GetRunningTask provides a mock function with given fields: ctx
func (_m *MockCache) GetRunningTask(ctx context.Context) (map[int]int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRunningTask")
	}

	var r0 map[int]int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[int]int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[int]int64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCache_GetRunningTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRunningTask'
type MockCache_GetRunningTask_Call struct {
	*mock.Call
}

// GetRunningTask is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCache_Expecter) GetRunningTask(ctx interface{}) *MockCache_GetRunningTask_Call {
	return &MockCache_GetRunningTask_Call{Call: _e.mock.On("GetRunningTask", ctx)}
}

func (_c *MockCache_GetRunningTask_Call) Run(run func(ctx context.Context)) *MockCache_GetRunningTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCache_GetRunningTask_Call) Return(_a0 map[int]int64, _a1 error) *MockCache_GetRunningTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_GetRunningTask_Call) RunAndReturn(run func(context.Context) (map[int]int64, error)) *MockCache_GetRunningTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetUploadID provides a mock function with given fields: ctx, repoPath, oid, partSize
func (_m *MockCache) GetUploadID(ctx context.Context, repoPath string, oid string, partSize string) (string, error) {
	ret := _m.Called(ctx, repoPath, oid, partSize)

	if len(ret) == 0 {
		panic("no return value specified for GetUploadID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, repoPath, oid, partSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, repoPath, oid, partSize)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, repoPath, oid, partSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCache_GetUploadID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUploadID'
type MockCache_GetUploadID_Call struct {
	*mock.Call
}

// GetUploadID is a helper method to define mock.On call
//   - ctx context.Context
//   - repoPath string
//   - oid string
//   - partSize string
func (_e *MockCache_Expecter) GetUploadID(ctx interface{}, repoPath interface{}, oid interface{}, partSize interface{}) *MockCache_GetUploadID_Call {
	return &MockCache_GetUploadID_Call{Call: _e.mock.On("GetUploadID", ctx, repoPath, oid, partSize)}
}

func (_c *MockCache_GetUploadID_Call) Run(run func(ctx context.Context, repoPath string, oid string, partSize string)) *MockCache_GetUploadID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockCache_GetUploadID_Call) Return(_a0 string, _a1 error) *MockCache_GetUploadID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_GetUploadID_Call) RunAndReturn(run func(context.Context, string, string, string) (string, error)) *MockCache_GetUploadID_Call {
	_c.Call.Return(run)
	return _c
}

// IsLfsPartSynced provides a mock function with given fields: ctx, repoPath, oid, partSize, partNumber
func (_m *MockCache) IsLfsPartSynced(ctx context.Context, repoPath string, oid string, partSize string, partNumber int) (bool, error) {
	ret := _m.Called(ctx, repoPath, oid, partSize, partNumber)

	if len(ret) == 0 {
		panic("no return value specified for IsLfsPartSynced")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int) (bool, error)); ok {
		return rf(ctx, repoPath, oid, partSize, partNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int) bool); ok {
		r0 = rf(ctx, repoPath, oid, partSize, partNumber)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int) error); ok {
		r1 = rf(ctx, repoPath, oid, partSize, partNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCache_IsLfsPartSynced_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLfsPartSynced'
type MockCache_IsLfsPartSynced_Call struct {
	*mock.Call
}

// IsLfsPartSynced is a helper method to define mock.On call
//   - ctx context.Context
//   - repoPath string
//   - oid string
//   - partSize string
//   - partNumber int
func (_e *MockCache_Expecter) IsLfsPartSynced(ctx interface{}, repoPath interface{}, oid interface{}, partSize interface{}, partNumber interface{}) *MockCache_IsLfsPartSynced_Call {
	return &MockCache_IsLfsPartSynced_Call{Call: _e.mock.On("IsLfsPartSynced", ctx, repoPath, oid, partSize, partNumber)}
}

func (_c *MockCache_IsLfsPartSynced_Call) Run(run func(ctx context.Context, repoPath string, oid string, partSize string, partNumber int)) *MockCache_IsLfsPartSynced_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int))
	})
	return _c
}

func (_c *MockCache_IsLfsPartSynced_Call) Return(_a0 bool, _a1 error) *MockCache_IsLfsPartSynced_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_IsLfsPartSynced_Call) RunAndReturn(run func(context.Context, string, string, string, int) (bool, error)) *MockCache_IsLfsPartSynced_Call {
	_c.Call.Return(run)
	return _c
}

// LfsPartSyncedCount provides a mock function with given fields: ctx, repoPath, oid, partSize
func (_m *MockCache) LfsPartSyncedCount(ctx context.Context, repoPath string, oid string, partSize string) (int64, error) {
	ret := _m.Called(ctx, repoPath, oid, partSize)

	if len(ret) == 0 {
		panic("no return value specified for LfsPartSyncedCount")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (int64, error)); ok {
		return rf(ctx, repoPath, oid, partSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int64); ok {
		r0 = rf(ctx, repoPath, oid, partSize)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, repoPath, oid, partSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCache_LfsPartSyncedCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LfsPartSyncedCount'
type MockCache_LfsPartSyncedCount_Call struct {
	*mock.Call
}

// LfsPartSyncedCount is a helper method to define mock.On call
//   - ctx context.Context
//   - repoPath string
//   - oid string
//   - partSize string
func (_e *MockCache_Expecter) LfsPartSyncedCount(ctx interface{}, repoPath interface{}, oid interface{}, partSize interface{}) *MockCache_LfsPartSyncedCount_Call {
	return &MockCache_LfsPartSyncedCount_Call{Call: _e.mock.On("LfsPartSyncedCount", ctx, repoPath, oid, partSize)}
}

func (_c *MockCache_LfsPartSyncedCount_Call) Run(run func(ctx context.Context, repoPath string, oid string, partSize string)) *MockCache_LfsPartSyncedCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockCache_LfsPartSyncedCount_Call) Return(_a0 int64, _a1 error) *MockCache_LfsPartSyncedCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_LfsPartSyncedCount_Call) RunAndReturn(run func(context.Context, string, string, string) (int64, error)) *MockCache_LfsPartSyncedCount_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveRunningTask provides a mock function with given fields: ctx, workID
func (_m *MockCache) RemoveRunningTask(ctx context.Context, workID int) error {
	ret := _m.Called(ctx, workID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRunningTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, workID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_RemoveRunningTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveRunningTask'
type MockCache_RemoveRunningTask_Call struct {
	*mock.Call
}

// RemoveRunningTask is a helper method to define mock.On call
//   - ctx context.Context
//   - workID int
func (_e *MockCache_Expecter) RemoveRunningTask(ctx interface{}, workID interface{}) *MockCache_RemoveRunningTask_Call {
	return &MockCache_RemoveRunningTask_Call{Call: _e.mock.On("RemoveRunningTask", ctx, workID)}
}

func (_c *MockCache_RemoveRunningTask_Call) Run(run func(ctx context.Context, workID int)) *MockCache_RemoveRunningTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockCache_RemoveRunningTask_Call) Return(_a0 error) *MockCache_RemoveRunningTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_RemoveRunningTask_Call) RunAndReturn(run func(context.Context, int) error) *MockCache_RemoveRunningTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

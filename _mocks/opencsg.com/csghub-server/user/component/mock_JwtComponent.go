// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "opencsg.com/csghub-server/common/types"
)

// MockJwtComponent is an autogenerated mock type for the JwtComponent type
type MockJwtComponent struct {
	mock.Mock
}

type MockJwtComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJwtComponent) EXPECT() *MockJwtComponent_Expecter {
	return &MockJwtComponent_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: ctx, req
func (_m *MockJwtComponent) GenerateToken(ctx context.Context, req types.CreateJWTReq) (*types.JWTClaims, string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 *types.JWTClaims
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.CreateJWTReq) (*types.JWTClaims, string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.CreateJWTReq) *types.JWTClaims); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.JWTClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.CreateJWTReq) string); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.CreateJWTReq) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockJwtComponent_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockJwtComponent_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - req types.CreateJWTReq
func (_e *MockJwtComponent_Expecter) GenerateToken(ctx interface{}, req interface{}) *MockJwtComponent_GenerateToken_Call {
	return &MockJwtComponent_GenerateToken_Call{Call: _e.mock.On("GenerateToken", ctx, req)}
}

func (_c *MockJwtComponent_GenerateToken_Call) Run(run func(ctx context.Context, req types.CreateJWTReq)) *MockJwtComponent_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.CreateJWTReq))
	})
	return _c
}

func (_c *MockJwtComponent_GenerateToken_Call) Return(claims *types.JWTClaims, signed string, err error) *MockJwtComponent_GenerateToken_Call {
	_c.Call.Return(claims, signed, err)
	return _c
}

func (_c *MockJwtComponent_GenerateToken_Call) RunAndReturn(run func(context.Context, types.CreateJWTReq) (*types.JWTClaims, string, error)) *MockJwtComponent_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// ParseToken provides a mock function with given fields: ctx, token
func (_m *MockJwtComponent) ParseToken(ctx context.Context, token string) (*types.User, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for ParseToken")
	}

	var r0 *types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.User, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.User); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJwtComponent_ParseToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseToken'
type MockJwtComponent_ParseToken_Call struct {
	*mock.Call
}

// ParseToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockJwtComponent_Expecter) ParseToken(ctx interface{}, token interface{}) *MockJwtComponent_ParseToken_Call {
	return &MockJwtComponent_ParseToken_Call{Call: _e.mock.On("ParseToken", ctx, token)}
}

func (_c *MockJwtComponent_ParseToken_Call) Run(run func(ctx context.Context, token string)) *MockJwtComponent_ParseToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockJwtComponent_ParseToken_Call) Return(user *types.User, err error) *MockJwtComponent_ParseToken_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockJwtComponent_ParseToken_Call) RunAndReturn(run func(context.Context, string) (*types.User, error)) *MockJwtComponent_ParseToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJwtComponent creates a new instance of MockJwtComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJwtComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJwtComponent {
	mock := &MockJwtComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.0. DO NOT EDIT.

package component

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	database "opencsg.com/csghub-server/builder/store/database"

	time "time"

	types "opencsg.com/csghub-server/common/types"
)

// MockAccessTokenComponent is an autogenerated mock type for the AccessTokenComponent type
type MockAccessTokenComponent struct {
	mock.Mock
}

type MockAccessTokenComponent_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccessTokenComponent) EXPECT() *MockAccessTokenComponent_Expecter {
	return &MockAccessTokenComponent_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: ctx, req
func (_m *MockAccessTokenComponent) Check(ctx context.Context, req *types.CheckAccessTokenReq) (types.CheckAccessTokenResp, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 types.CheckAccessTokenResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CheckAccessTokenReq) (types.CheckAccessTokenResp, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CheckAccessTokenReq) types.CheckAccessTokenResp); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(types.CheckAccessTokenResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CheckAccessTokenReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessTokenComponent_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockAccessTokenComponent_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.CheckAccessTokenReq
func (_e *MockAccessTokenComponent_Expecter) Check(ctx interface{}, req interface{}) *MockAccessTokenComponent_Check_Call {
	return &MockAccessTokenComponent_Check_Call{Call: _e.mock.On("Check", ctx, req)}
}

func (_c *MockAccessTokenComponent_Check_Call) Run(run func(ctx context.Context, req *types.CheckAccessTokenReq)) *MockAccessTokenComponent_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CheckAccessTokenReq))
	})
	return _c
}

func (_c *MockAccessTokenComponent_Check_Call) Return(_a0 types.CheckAccessTokenResp, _a1 error) *MockAccessTokenComponent_Check_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessTokenComponent_Check_Call) RunAndReturn(run func(context.Context, *types.CheckAccessTokenReq) (types.CheckAccessTokenResp, error)) *MockAccessTokenComponent_Check_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, req
func (_m *MockAccessTokenComponent) Create(ctx context.Context, req *types.CreateUserTokenRequest) (*database.AccessToken, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *database.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateUserTokenRequest) (*database.AccessToken, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.CreateUserTokenRequest) *database.AccessToken); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.CreateUserTokenRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessTokenComponent_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccessTokenComponent_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.CreateUserTokenRequest
func (_e *MockAccessTokenComponent_Expecter) Create(ctx interface{}, req interface{}) *MockAccessTokenComponent_Create_Call {
	return &MockAccessTokenComponent_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockAccessTokenComponent_Create_Call) Run(run func(ctx context.Context, req *types.CreateUserTokenRequest)) *MockAccessTokenComponent_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.CreateUserTokenRequest))
	})
	return _c
}

func (_c *MockAccessTokenComponent_Create_Call) Return(_a0 *database.AccessToken, _a1 error) *MockAccessTokenComponent_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessTokenComponent_Create_Call) RunAndReturn(run func(context.Context, *types.CreateUserTokenRequest) (*database.AccessToken, error)) *MockAccessTokenComponent_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, req
func (_m *MockAccessTokenComponent) Delete(ctx context.Context, req *types.DeleteUserTokenRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.DeleteUserTokenRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAccessTokenComponent_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccessTokenComponent_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - req *types.DeleteUserTokenRequest
func (_e *MockAccessTokenComponent_Expecter) Delete(ctx interface{}, req interface{}) *MockAccessTokenComponent_Delete_Call {
	return &MockAccessTokenComponent_Delete_Call{Call: _e.mock.On("Delete", ctx, req)}
}

func (_c *MockAccessTokenComponent_Delete_Call) Run(run func(ctx context.Context, req *types.DeleteUserTokenRequest)) *MockAccessTokenComponent_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.DeleteUserTokenRequest))
	})
	return _c
}

func (_c *MockAccessTokenComponent_Delete_Call) Return(_a0 error) *MockAccessTokenComponent_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAccessTokenComponent_Delete_Call) RunAndReturn(run func(context.Context, *types.DeleteUserTokenRequest) error) *MockAccessTokenComponent_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateFirstAvaiToken provides a mock function with given fields: ctx, userName, app, tokenName
func (_m *MockAccessTokenComponent) GetOrCreateFirstAvaiToken(ctx context.Context, userName string, app string, tokenName string) (string, error) {
	ret := _m.Called(ctx, userName, app, tokenName)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateFirstAvaiToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, userName, app, tokenName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, userName, app, tokenName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userName, app, tokenName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessTokenComponent_GetOrCreateFirstAvaiToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateFirstAvaiToken'
type MockAccessTokenComponent_GetOrCreateFirstAvaiToken_Call struct {
	*mock.Call
}

// GetOrCreateFirstAvaiToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userName string
//   - app string
//   - tokenName string
func (_e *MockAccessTokenComponent_Expecter) GetOrCreateFirstAvaiToken(ctx interface{}, userName interface{}, app interface{}, tokenName interface{}) *MockAccessTokenComponent_GetOrCreateFirstAvaiToken_Call {
	return &MockAccessTokenComponent_GetOrCreateFirstAvaiToken_Call{Call: _e.mock.On("GetOrCreateFirstAvaiToken", ctx, userName, app, tokenName)}
}

func (_c *MockAccessTokenComponent_GetOrCreateFirstAvaiToken_Call) Run(run func(ctx context.Context, userName string, app string, tokenName string)) *MockAccessTokenComponent_GetOrCreateFirstAvaiToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockAccessTokenComponent_GetOrCreateFirstAvaiToken_Call) Return(_a0 string, _a1 error) *MockAccessTokenComponent_GetOrCreateFirstAvaiToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessTokenComponent_GetOrCreateFirstAvaiToken_Call) RunAndReturn(run func(context.Context, string, string, string) (string, error)) *MockAccessTokenComponent_GetOrCreateFirstAvaiToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokens provides a mock function with given fields: ctx, username, app
func (_m *MockAccessTokenComponent) GetTokens(ctx context.Context, username string, app string) ([]types.CheckAccessTokenResp, error) {
	ret := _m.Called(ctx, username, app)

	if len(ret) == 0 {
		panic("no return value specified for GetTokens")
	}

	var r0 []types.CheckAccessTokenResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]types.CheckAccessTokenResp, error)); ok {
		return rf(ctx, username, app)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []types.CheckAccessTokenResp); ok {
		r0 = rf(ctx, username, app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.CheckAccessTokenResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessTokenComponent_GetTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokens'
type MockAccessTokenComponent_GetTokens_Call struct {
	*mock.Call
}

// GetTokens is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - app string
func (_e *MockAccessTokenComponent_Expecter) GetTokens(ctx interface{}, username interface{}, app interface{}) *MockAccessTokenComponent_GetTokens_Call {
	return &MockAccessTokenComponent_GetTokens_Call{Call: _e.mock.On("GetTokens", ctx, username, app)}
}

func (_c *MockAccessTokenComponent_GetTokens_Call) Run(run func(ctx context.Context, username string, app string)) *MockAccessTokenComponent_GetTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAccessTokenComponent_GetTokens_Call) Return(_a0 []types.CheckAccessTokenResp, _a1 error) *MockAccessTokenComponent_GetTokens_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessTokenComponent_GetTokens_Call) RunAndReturn(run func(context.Context, string, string) ([]types.CheckAccessTokenResp, error)) *MockAccessTokenComponent_GetTokens_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: ctx, userName, tokenName, app, newExpiredAt
func (_m *MockAccessTokenComponent) RefreshToken(ctx context.Context, userName string, tokenName string, app string, newExpiredAt time.Time) (types.CheckAccessTokenResp, error) {
	ret := _m.Called(ctx, userName, tokenName, app, newExpiredAt)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 types.CheckAccessTokenResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Time) (types.CheckAccessTokenResp, error)); ok {
		return rf(ctx, userName, tokenName, app, newExpiredAt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Time) types.CheckAccessTokenResp); ok {
		r0 = rf(ctx, userName, tokenName, app, newExpiredAt)
	} else {
		r0 = ret.Get(0).(types.CheckAccessTokenResp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, time.Time) error); ok {
		r1 = rf(ctx, userName, tokenName, app, newExpiredAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccessTokenComponent_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockAccessTokenComponent_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userName string
//   - tokenName string
//   - app string
//   - newExpiredAt time.Time
func (_e *MockAccessTokenComponent_Expecter) RefreshToken(ctx interface{}, userName interface{}, tokenName interface{}, app interface{}, newExpiredAt interface{}) *MockAccessTokenComponent_RefreshToken_Call {
	return &MockAccessTokenComponent_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx, userName, tokenName, app, newExpiredAt)}
}

func (_c *MockAccessTokenComponent_RefreshToken_Call) Run(run func(ctx context.Context, userName string, tokenName string, app string, newExpiredAt time.Time)) *MockAccessTokenComponent_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(time.Time))
	})
	return _c
}

func (_c *MockAccessTokenComponent_RefreshToken_Call) Return(_a0 types.CheckAccessTokenResp, _a1 error) *MockAccessTokenComponent_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccessTokenComponent_RefreshToken_Call) RunAndReturn(run func(context.Context, string, string, string, time.Time) (types.CheckAccessTokenResp, error)) *MockAccessTokenComponent_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccessTokenComponent creates a new instance of MockAccessTokenComponent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccessTokenComponent(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccessTokenComponent {
	mock := &MockAccessTokenComponent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

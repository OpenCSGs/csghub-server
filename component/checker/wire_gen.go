// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package checker

import (
	"context"
	"github.com/stretchr/testify/mock"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/git/gitserver"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/store/s3"
	"opencsg.com/csghub-server/common/tests"
)

// Injectors from wire.go:

func initializeTestFileSizeChecker(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testFileSizeCheckerWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	fileSizeChecker := NewTestFileSizeChecker(config, mockStores, mockGitServer)
	mocks := &Mocks{
		stores:    mockStores,
		gitServer: mockGitServer,
	}
	checkerTestFileSizeCheckerWithMocks := &testFileSizeCheckerWithMocks{
		FileSizeChecker: fileSizeChecker,
		mocks:           mocks,
	}
	return checkerTestFileSizeCheckerWithMocks
}

func initializeTestLFSExistsChecker(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testLFSExistsCheckerWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	mockClient := s3.NewMockClient(t)
	lfsExistsChecker := NewTestLFSExistsChecker(config, mockStores, mockGitServer, mockClient)
	mocks := &Mocks{
		stores:    mockStores,
		gitServer: mockGitServer,
		s3Client:  mockClient,
	}
	checkerTestLFSExistsCheckerWithMocks := &testLFSExistsCheckerWithMocks{
		LFSExistsChecker: lfsExistsChecker,
		mocks:            mocks,
	}
	return checkerTestLFSExistsCheckerWithMocks
}

// wire.go:

type Mocks struct {
	stores    *tests.MockStores
	gitServer *gitserver.MockGitServer
	s3Client  *s3.MockClient
}

type testFileSizeCheckerWithMocks struct {
	*FileSizeChecker
	mocks *Mocks
}

type testLFSExistsCheckerWithMocks struct {
	*LFSExistsChecker
	mocks *Mocks
}

// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package component

import (
	"context"
	"github.com/stretchr/testify/mock"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/accounting"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/dataviewer"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/deploy"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/git/gitserver"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/git/mirrorserver"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/parquet"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/rpc"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/builder/store/s3"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/component"
	"opencsg.com/csghub-server/_mocks/opencsg.com/csghub-server/mirror/queue"
	"opencsg.com/csghub-server/common/tests"
)

// Injectors from wire.go:

func initializeTestRepoComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testRepoWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockClient := s3.NewMockClient(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	componentRepoComponentImpl := NewTestRepoComponent(config, mockStores, mockUserSvcClient, mockGitServer, mockTagComponent, mockClient, mockDeployer, mockAccountingComponent, mockPriorityQueue, mockMirrorServer)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestRepoWithMocks := &testRepoWithMocks{
		repoComponentImpl: componentRepoComponentImpl,
		mocks:             mocks,
	}
	return componentTestRepoWithMocks
}

func initializeTestPromptComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testPromptWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	componentPromptComponentImpl := NewTestPromptComponent(config, mockStores, mockRepoComponent, mockUserSvcClient, mockGitServer)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestPromptWithMocks := &testPromptWithMocks{
		promptComponentImpl: componentPromptComponentImpl,
		mocks:               mocks,
	}
	return componentTestPromptWithMocks
}

func initializeTestUserComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testUserWithMocks {
	mockStores := tests.NewMockStores(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	componentUserComponentImpl := NewTestUserComponent(mockStores, mockGitServer, mockSpaceComponent, mockRepoComponent, mockDeployer, mockAccountingComponent)
	mockTagComponent := component.NewMockTagComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestUserWithMocks := &testUserWithMocks{
		userComponentImpl: componentUserComponentImpl,
		mocks:             mocks,
	}
	return componentTestUserWithMocks
}

func initializeTestSpaceComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testSpaceWithMocks {
	mockStores := tests.NewMockStores(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	config := ProvideTestConfig()
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	componentSpaceComponentImpl := NewTestSpaceComponent(mockStores, mockRepoComponent, mockGitServer, mockDeployer, mockAccountingComponent, config, mockUserSvcClient)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestSpaceWithMocks := &testSpaceWithMocks{
		spaceComponentImpl: componentSpaceComponentImpl,
		mocks:              mocks,
	}
	return componentTestSpaceWithMocks
}

func initializeTestModelComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testModelWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	componentModelComponentImpl := NewTestModelComponent(config, mockStores, mockRepoComponent, mockSpaceComponent, mockDeployer, mockAccountingComponent, mockRuntimeArchitectureComponent, mockGitServer, mockUserSvcClient)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestModelWithMocks := &testModelWithMocks{
		modelComponentImpl: componentModelComponentImpl,
		mocks:              mocks,
	}
	return componentTestModelWithMocks
}

func initializeTestAccountingComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testAccountingWithMocks {
	mockStores := tests.NewMockStores(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	componentAccountingComponentImpl := NewTestAccountingComponent(mockStores, mockAccountingClient)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockGitServer := gitserver.NewMockGitServer(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestAccountingWithMocks := &testAccountingWithMocks{
		accountingComponentImpl: componentAccountingComponentImpl,
		mocks:                   mocks,
	}
	return componentTestAccountingWithMocks
}

func initializeTestGitHTTPComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testGitHTTPWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	mockClient := s3.NewMockClient(t)
	componentGitHTTPComponentImpl := NewTestGitHTTPComponent(config, mockStores, mockRepoComponent, mockGitServer, mockClient)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestGitHTTPWithMocks := &testGitHTTPWithMocks{
		gitHTTPComponentImpl: componentGitHTTPComponentImpl,
		mocks:                mocks,
	}
	return componentTestGitHTTPWithMocks
}

func initializeTestDiscussionComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testDiscussionWithMocks {
	mockStores := tests.NewMockStores(t)
	componentDiscussionComponentImpl := NewTestDiscussionComponent(mockStores)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockGitServer := gitserver.NewMockGitServer(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestDiscussionWithMocks := &testDiscussionWithMocks{
		discussionComponentImpl: componentDiscussionComponentImpl,
		mocks:                   mocks,
	}
	return componentTestDiscussionWithMocks
}

func initializeTestRuntimeArchComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testRuntimeArchWithMocks {
	mockStores := tests.NewMockStores(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	componentRuntimeArchitectureComponentImpl := NewTestRuntimeArchitectureComponent(mockStores, mockRepoComponent, mockGitServer)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestRuntimeArchWithMocks := &testRuntimeArchWithMocks{
		runtimeArchitectureComponentImpl: componentRuntimeArchitectureComponentImpl,
		mocks:                            mocks,
	}
	return componentTestRuntimeArchWithMocks
}

func initializeTestMirrorComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testMirrorWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	mockClient := s3.NewMockClient(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	componentMirrorComponentImpl := NewTestMirrorComponent(config, mockStores, mockMirrorServer, mockRepoComponent, mockGitServer, mockClient, mockPriorityQueue)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestMirrorWithMocks := &testMirrorWithMocks{
		mirrorComponentImpl: componentMirrorComponentImpl,
		mocks:               mocks,
	}
	return componentTestMirrorWithMocks
}

func initializeTestCollectionComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testCollectionWithMocks {
	mockStores := tests.NewMockStores(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	componentCollectionComponentImpl := NewTestCollectionComponent(mockStores, mockUserSvcClient, mockSpaceComponent)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockGitServer := gitserver.NewMockGitServer(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestCollectionWithMocks := &testCollectionWithMocks{
		collectionComponentImpl: componentCollectionComponentImpl,
		mocks:                   mocks,
	}
	return componentTestCollectionWithMocks
}

func initializeTestBroadcastComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testBroadcastWithMocks {
	mockStores := tests.NewMockStores(t)
	componentBroadcastComponentImpl := NewTestBroadcastComponent(mockStores)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockGitServer := gitserver.NewMockGitServer(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestBroadcastWithMocks := &testBroadcastWithMocks{
		broadcastComponentImpl: componentBroadcastComponentImpl,
		mocks:                  mocks,
	}
	return componentTestBroadcastWithMocks
}

func initializeTestDatasetComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testDatasetWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	componentDatasetComponentImpl := NewTestDatasetComponent(config, mockStores, mockRepoComponent, mockUserSvcClient, mockSensitiveComponent, mockGitServer)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestDatasetWithMocks := &testDatasetWithMocks{
		datasetComponentImpl: componentDatasetComponentImpl,
		mocks:                mocks,
	}
	return componentTestDatasetWithMocks
}

func initializeTestCodeComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testCodeWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	componentCodeComponentImpl := NewTestCodeComponent(config, mockStores, mockRepoComponent, mockUserSvcClient, mockGitServer)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestCodeWithMocks := &testCodeWithMocks{
		codeComponentImpl: componentCodeComponentImpl,
		mocks:             mocks,
	}
	return componentTestCodeWithMocks
}

func initializeTestMultiSyncComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testMultiSyncWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	componentMultiSyncComponentImpl := NewTestMultiSyncComponent(config, mockStores, mockGitServer)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestMultiSyncWithMocks := &testMultiSyncWithMocks{
		multiSyncComponentImpl: componentMultiSyncComponentImpl,
		mocks:                  mocks,
	}
	return componentTestMultiSyncWithMocks
}

func initializeTestInternalComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testInternalWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	componentInternalComponentImpl := NewTestInternalComponent(config, mockStores, mockRepoComponent, mockGitServer)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestInternalWithMocks := &testInternalWithMocks{
		internalComponentImpl: componentInternalComponentImpl,
		mocks:                 mocks,
	}
	return componentTestInternalWithMocks
}

func initializeTestMirrorSourceComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testMirrorSourceWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	componentMirrorSourceComponentImpl := NewTestMirrorSourceComponent(config, mockStores)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockGitServer := gitserver.NewMockGitServer(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestMirrorSourceWithMocks := &testMirrorSourceWithMocks{
		mirrorSourceComponentImpl: componentMirrorSourceComponentImpl,
		mocks:                     mocks,
	}
	return componentTestMirrorSourceWithMocks
}

func initializeTestSpaceResourceComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testSpaceResourceWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	componentSpaceResourceComponentImpl := NewTestSpaceResourceComponent(config, mockStores, mockDeployer, mockAccountingComponent)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockGitServer := gitserver.NewMockGitServer(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestSpaceResourceWithMocks := &testSpaceResourceWithMocks{
		spaceResourceComponentImpl: componentSpaceResourceComponentImpl,
		mocks:                      mocks,
	}
	return componentTestSpaceResourceWithMocks
}

func initializeTestTagComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testTagWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	componentTagComponentImpl := NewTestTagComponent(config, mockStores, mockModerationSvcClient)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockGitServer := gitserver.NewMockGitServer(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestTagWithMocks := &testTagWithMocks{
		tagComponentImpl: componentTagComponentImpl,
		mocks:            mocks,
	}
	return componentTestTagWithMocks
}

func initializeTestRecomComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testRecomWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	componentRecomComponentImpl := NewTestRecomComponent(config, mockStores, mockGitServer)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestRecomWithMocks := &testRecomWithMocks{
		recomComponentImpl: componentRecomComponentImpl,
		mocks:              mocks,
	}
	return componentTestRecomWithMocks
}

func initializeTestSpaceSdkComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testSpaceSdkWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	componentSpaceSdkComponentImpl := NewTestSpaceSdkComponent(config, mockStores)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockGitServer := gitserver.NewMockGitServer(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestSpaceSdkWithMocks := &testSpaceSdkWithMocks{
		spaceSdkComponentImpl: componentSpaceSdkComponentImpl,
		mocks:                 mocks,
	}
	return componentTestSpaceSdkWithMocks
}

func initializeTestTelemetryComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testTelemetryWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	componentTelemetryComponentImpl := NewTestTelemetryComponent(config, mockStores)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockGitServer := gitserver.NewMockGitServer(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestTelemetryWithMocks := &testTelemetryWithMocks{
		telemetryComponentImpl: componentTelemetryComponentImpl,
		mocks:                  mocks,
	}
	return componentTestTelemetryWithMocks
}

func initializeTestClusterComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testClusterWithMocks {
	config := ProvideTestConfig()
	mockDeployer := deploy.NewMockDeployer(t)
	componentClusterComponentImpl := NewTestClusterComponent(config, mockDeployer)
	mockStores := tests.NewMockStores(t)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockGitServer := gitserver.NewMockGitServer(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestClusterWithMocks := &testClusterWithMocks{
		clusterComponentImpl: componentClusterComponentImpl,
		mocks:                mocks,
	}
	return componentTestClusterWithMocks
}

func initializeTestEvaluationComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testEvaluationWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	componentEvaluationComponentImpl := NewTestEvaluationComponent(config, mockStores, mockDeployer, mockAccountingComponent)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockGitServer := gitserver.NewMockGitServer(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestEvaluationWithMocks := &testEvaluationWithMocks{
		evaluationComponentImpl: componentEvaluationComponentImpl,
		mocks:                   mocks,
	}
	return componentTestEvaluationWithMocks
}

func initializeTestHFDatasetComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testHFDatasetWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	componentHFDatasetComponentImpl := NewTestHFDatasetComponent(config, mockStores, mockRepoComponent, mockGitServer)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestHFDatasetWithMocks := &testHFDatasetWithMocks{
		hFDatasetComponentImpl: componentHFDatasetComponentImpl,
		mocks:                  mocks,
	}
	return componentTestHFDatasetWithMocks
}

func initializeTestRepoFileComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testRepoFileWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	componentRepoFileComponentImpl := NewTestRepoFileComponent(config, mockStores, mockGitServer)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestRepoFileWithMocks := &testRepoFileWithMocks{
		repoFileComponentImpl: componentRepoFileComponentImpl,
		mocks:                 mocks,
	}
	return componentTestRepoFileWithMocks
}

func initializeTestSensitiveComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testSensitiveWithMocks {
	config := ProvideTestConfig()
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	componentSensitiveComponentImpl := NewTestSensitiveComponent(config, mockModerationSvcClient)
	mockStores := tests.NewMockStores(t)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockGitServer := gitserver.NewMockGitServer(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestSensitiveWithMocks := &testSensitiveWithMocks{
		sensitiveComponentImpl: componentSensitiveComponentImpl,
		mocks:                  mocks,
	}
	return componentTestSensitiveWithMocks
}

func initializeTestSSHKeyComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testSSHKeyWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	componentSSHKeyComponentImpl := NewTestSSHKeyComponent(config, mockStores, mockGitServer)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestSSHKeyWithMocks := &testSSHKeyWithMocks{
		sSHKeyComponentImpl: componentSSHKeyComponentImpl,
		mocks:               mocks,
	}
	return componentTestSSHKeyWithMocks
}

func initializeTestListComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testListWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	componentListComponentImpl := NewTestListComponent(config, mockStores)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockGitServer := gitserver.NewMockGitServer(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestListWithMocks := &testListWithMocks{
		listComponentImpl: componentListComponentImpl,
		mocks:             mocks,
	}
	return componentTestListWithMocks
}

func initializeTestSyncClientSettingComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testSyncClientSettingWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	componentSyncClientSettingComponentImpl := NewTestSyncClientSettingComponent(config, mockStores)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockGitServer := gitserver.NewMockGitServer(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestSyncClientSettingWithMocks := &testSyncClientSettingWithMocks{
		syncClientSettingComponentImpl: componentSyncClientSettingComponentImpl,
		mocks:                          mocks,
	}
	return componentTestSyncClientSettingWithMocks
}

func initializeTestEventComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testEventWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	componentEventComponentImpl := NewTestEventComponent(config, mockStores)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockGitServer := gitserver.NewMockGitServer(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestEventWithMocks := &testEventWithMocks{
		eventComponentImpl: componentEventComponentImpl,
		mocks:              mocks,
	}
	return componentTestEventWithMocks
}

func initializeTestSpaceTemplateComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testSpaceTemplateWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	componentSpaceTemplateComponentImpl := NewTestSpaceTemplateComponent(config, mockStores)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockGitServer := gitserver.NewMockGitServer(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestSpaceTemplateWithMocks := &testSpaceTemplateWithMocks{
		spaceTemplateComponentImpl: componentSpaceTemplateComponentImpl,
		mocks:                      mocks,
	}
	return componentTestSpaceTemplateWithMocks
}

func initializeTestMCPServerComponent(ctx context.Context, t interface {
	Cleanup(func())
	mock.TestingT
}) *testMCPServerWithMocks {
	config := ProvideTestConfig()
	mockStores := tests.NewMockStores(t)
	mockUserSvcClient := rpc.NewMockUserSvcClient(t)
	mockRepoComponent := component.NewMockRepoComponent(t)
	mockGitServer := gitserver.NewMockGitServer(t)
	componentMcpServerComponentImpl := NewTestMCPServerComponent(config, mockStores, mockUserSvcClient, mockRepoComponent, mockGitServer)
	mockAccountingComponent := component.NewMockAccountingComponent(t)
	mockTagComponent := component.NewMockTagComponent(t)
	mockSpaceComponent := component.NewMockSpaceComponent(t)
	mockRuntimeArchitectureComponent := component.NewMockRuntimeArchitectureComponent(t)
	mockSensitiveComponent := component.NewMockSensitiveComponent(t)
	componentMockedComponents := &mockedComponents{
		accounting:          mockAccountingComponent,
		repo:                mockRepoComponent,
		tag:                 mockTagComponent,
		space:               mockSpaceComponent,
		runtimeArchitecture: mockRuntimeArchitectureComponent,
		sensitive:           mockSensitiveComponent,
	}
	mockClient := s3.NewMockClient(t)
	mockMirrorServer := mirrorserver.NewMockMirrorServer(t)
	mockPriorityQueue := queue.NewMockPriorityQueue(t)
	mockDeployer := deploy.NewMockDeployer(t)
	mockAccountingClient := accounting.NewMockAccountingClient(t)
	mockReader := parquet.NewMockReader(t)
	mockModerationSvcClient := rpc.NewMockModerationSvcClient(t)
	mockDataviewerClient := dataviewer.NewMockDataviewerClient(t)
	mocks := &Mocks{
		stores:           mockStores,
		components:       componentMockedComponents,
		gitServer:        mockGitServer,
		userSvcClient:    mockUserSvcClient,
		s3Client:         mockClient,
		mirrorServer:     mockMirrorServer,
		mirrorQueue:      mockPriorityQueue,
		deployer:         mockDeployer,
		accountingClient: mockAccountingClient,
		preader:          mockReader,
		moderationClient: mockModerationSvcClient,
		dataviewerClient: mockDataviewerClient,
	}
	componentTestMCPServerWithMocks := &testMCPServerWithMocks{
		mcpServerComponentImpl: componentMcpServerComponentImpl,
		mocks:                  mocks,
	}
	return componentTestMCPServerWithMocks
}

// wire.go:

type testRepoWithMocks struct {
	*repoComponentImpl
	mocks *Mocks
}

type testPromptWithMocks struct {
	*promptComponentImpl
	mocks *Mocks
}

type testUserWithMocks struct {
	*userComponentImpl
	mocks *Mocks
}

type testSpaceWithMocks struct {
	*spaceComponentImpl
	mocks *Mocks
}

type testModelWithMocks struct {
	*modelComponentImpl
	mocks *Mocks
}

type testAccountingWithMocks struct {
	*accountingComponentImpl
	mocks *Mocks
}

type testGitHTTPWithMocks struct {
	*gitHTTPComponentImpl
	mocks *Mocks
}

type testDiscussionWithMocks struct {
	*discussionComponentImpl
	mocks *Mocks
}

type testRuntimeArchWithMocks struct {
	*runtimeArchitectureComponentImpl
	mocks *Mocks
}

type testMirrorWithMocks struct {
	*mirrorComponentImpl
	mocks *Mocks
}

type testCollectionWithMocks struct {
	*collectionComponentImpl
	mocks *Mocks
}

type testBroadcastWithMocks struct {
	*broadcastComponentImpl
	mocks *Mocks
}

type testDatasetWithMocks struct {
	*datasetComponentImpl
	mocks *Mocks
}

type testCodeWithMocks struct {
	*codeComponentImpl
	mocks *Mocks
}

type testMultiSyncWithMocks struct {
	*multiSyncComponentImpl
	mocks *Mocks
}

type testInternalWithMocks struct {
	*internalComponentImpl
	mocks *Mocks
}

type testMirrorSourceWithMocks struct {
	*mirrorSourceComponentImpl
	mocks *Mocks
}

type testSpaceResourceWithMocks struct {
	*spaceResourceComponentImpl
	mocks *Mocks
}

type testTagWithMocks struct {
	*tagComponentImpl
	mocks *Mocks
}

type testRecomWithMocks struct {
	*recomComponentImpl
	mocks *Mocks
}

type testSpaceSdkWithMocks struct {
	*spaceSdkComponentImpl
	mocks *Mocks
}

type testTelemetryWithMocks struct {
	*telemetryComponentImpl
	mocks *Mocks
}

type testClusterWithMocks struct {
	*clusterComponentImpl
	mocks *Mocks
}

type testEvaluationWithMocks struct {
	*evaluationComponentImpl
	mocks *Mocks
}

type testHFDatasetWithMocks struct {
	*hFDatasetComponentImpl
	mocks *Mocks
}

type testRepoFileWithMocks struct {
	*repoFileComponentImpl
	mocks *Mocks
}

type testSensitiveWithMocks struct {
	*sensitiveComponentImpl
	mocks *Mocks
}

type testSSHKeyWithMocks struct {
	*sSHKeyComponentImpl
	mocks *Mocks
}

type testListWithMocks struct {
	*listComponentImpl
	mocks *Mocks
}

type testSyncClientSettingWithMocks struct {
	*syncClientSettingComponentImpl
	mocks *Mocks
}

type testEventWithMocks struct {
	*eventComponentImpl
	mocks *Mocks
}

type testSpaceTemplateWithMocks struct {
	*spaceTemplateComponentImpl
	mocks *Mocks
}

type testMCPServerWithMocks struct {
	*mcpServerComponentImpl
	mocks *Mocks
}

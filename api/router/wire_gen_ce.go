// Code generated by Wire. DO NOT EDIT.

//go:build !wireinject && !ee && !saas
// +build !wireinject,!ee,!saas

//go:generate go run -mod=mod github.com/google/wire/cmd/wire

package router

import (
	"opencsg.com/csghub-server/api/handler"
	"opencsg.com/csghub-server/api/handler/callback"
	"opencsg.com/csghub-server/api/middleware"
	"opencsg.com/csghub-server/builder/rpc"
	"opencsg.com/csghub-server/common/config"
)

// Injectors from wire_ce.go:

func InitializeServer(config2 *config.Config) (*ServerImpl, error) {
	middlewareMiddleware := middleware.NewMiddleware(config2)
	gitHTTPHandler, err := handler.NewGitHTTPHandler(config2)
	if err != nil {
		return nil, err
	}
	userHandler, err := handler.NewUserHandler(config2)
	if err != nil {
		return nil, err
	}
	organizationHandler, err := handler.NewOrganizationHandler(config2)
	if err != nil {
		return nil, err
	}
	repoHandler, err := handler.NewRepoHandler(config2)
	if err != nil {
		return nil, err
	}
	modelHandler, err := handler.NewModelHandler(config2)
	if err != nil {
		return nil, err
	}
	datasetHandler, err := handler.NewDatasetHandler(config2)
	if err != nil {
		return nil, err
	}
	mirrorHandler, err := handler.NewMirrorHandler(config2)
	if err != nil {
		return nil, err
	}
	hfDatasetHandler, err := handler.NewHFDatasetHandler(config2)
	if err != nil {
		return nil, err
	}
	listHandler, err := handler.NewListHandler(config2)
	if err != nil {
		return nil, err
	}
	evaluationHandler, err := handler.NewEvaluationHandler(config2)
	if err != nil {
		return nil, err
	}
	codeHandler, err := handler.NewCodeHandler(config2)
	if err != nil {
		return nil, err
	}
	spaceHandler, err := handler.NewSpaceHandler(config2)
	if err != nil {
		return nil, err
	}
	spaceResourceHandler, err := handler.NewSpaceResourceHandler(config2)
	if err != nil {
		return nil, err
	}
	spaceSdkHandler, err := handler.NewSpaceSdkHandler(config2)
	if err != nil {
		return nil, err
	}
	userProxyHandler, err := newUserProxyHandler(config2)
	if err != nil {
		return nil, err
	}
	datasetViewerPeoxyHandler, err := newDatasetViewerProxyHandler(config2)
	if err != nil {
		return nil, err
	}
	sshKeyHandler, err := handler.NewSSHKeyHandler(config2)
	if err != nil {
		return nil, err
	}
	tagsHandler, err := handler.NewTagHandler(config2)
	if err != nil {
		return nil, err
	}
	gitCallbackHandler, err := callback.NewGitCallbackHandler(config2)
	if err != nil {
		return nil, err
	}
	sensitiveHandler, err := handler.NewSensitiveHandler(config2)
	if err != nil {
		return nil, err
	}
	mirrorSourceHandler, err := handler.NewMirrorSourceHandler(config2)
	if err != nil {
		return nil, err
	}
	collectionHandler, err := handler.NewCollectionHandler(config2)
	if err != nil {
		return nil, err
	}
	clusterHandler, err := handler.NewClusterHandler(config2)
	if err != nil {
		return nil, err
	}
	eventHandler, err := handler.NewEventHandler()
	if err != nil {
		return nil, err
	}
	broadcastHandler, err := handler.NewBroadcastHandler()
	if err != nil {
		return nil, err
	}
	runtimeArchitectureHandler, err := handler.NewRuntimeArchitectureHandler(config2)
	if err != nil {
		return nil, err
	}
	syncHandler, err := handler.NewSyncHandler(config2)
	if err != nil {
		return nil, err
	}
	syncClientSettingHandler, err := handler.NewSyncClientSettingHandler(config2)
	if err != nil {
		return nil, err
	}
	accountingHandler, err := handler.NewAccountingHandler(config2)
	if err != nil {
		return nil, err
	}
	recomHandler, err := handler.NewRecomHandler(config2)
	if err != nil {
		return nil, err
	}
	telemetryHandler, err := handler.NewTelemetryHandler()
	if err != nil {
		return nil, err
	}
	internalHandler, err := handler.NewInternalHandler(config2)
	if err != nil {
		return nil, err
	}
	discussionHandler, err := handler.NewDiscussionHandler(config2)
	if err != nil {
		return nil, err
	}
	promptHandler, err := handler.NewPromptHandler(config2)
	if err != nil {
		return nil, err
	}
	memoryStore := newMemoryStore()
	userSvcClient := rpc.NewUserSvcHttpClient(config2)
	baseServer, err := NewBaseServer(config2, middlewareMiddleware, gitHTTPHandler, userHandler, organizationHandler, repoHandler, modelHandler, datasetHandler, mirrorHandler, hfDatasetHandler, listHandler, evaluationHandler, codeHandler, spaceHandler, spaceResourceHandler, spaceSdkHandler, userProxyHandler, datasetViewerPeoxyHandler, sshKeyHandler, tagsHandler, gitCallbackHandler, sensitiveHandler, mirrorSourceHandler, collectionHandler, clusterHandler, eventHandler, broadcastHandler, runtimeArchitectureHandler, syncHandler, syncClientSettingHandler, accountingHandler, recomHandler, telemetryHandler, internalHandler, discussionHandler, promptHandler, memoryStore, userSvcClient)
	if err != nil {
		return nil, err
	}
	serverImpl := NewServer(baseServer)
	return serverImpl, nil
}
